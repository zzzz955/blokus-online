// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: chat.proto
// Protobuf C++ Version: 5.29.3

#include "chat.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace blokus {

inline constexpr WhisperMessage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : target_username_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        content_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        request_read_receipt_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR WhisperMessage::WhisperMessage(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct WhisperMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WhisperMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WhisperMessageDefaultTypeInternal() {}
  union {
    WhisperMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WhisperMessageDefaultTypeInternal _WhisperMessage_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR SystemMessage_ParametersEntry_DoNotUse::SystemMessage_ParametersEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : SystemMessage_ParametersEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : SystemMessage_ParametersEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct SystemMessage_ParametersEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SystemMessage_ParametersEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SystemMessage_ParametersEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SystemMessage_ParametersEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SystemMessage_ParametersEntry_DoNotUseDefaultTypeInternal _SystemMessage_ParametersEntry_DoNotUse_default_instance_;

inline constexpr SendChatRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : attachments_{},
        content_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        target_username_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        reply_to_message_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        client_message_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        type_{static_cast< ::blokus::ChatType >(0)},
        scope_{static_cast< ::blokus::ChatScope >(0)},
        room_id_{0},
        silent_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SendChatRequest::SendChatRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SendChatRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendChatRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendChatRequestDefaultTypeInternal() {}
  union {
    SendChatRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendChatRequestDefaultTypeInternal _SendChatRequest_default_instance_;

inline constexpr RoomChatSettings::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : chat_moderators_{},
        banned_users_{},
        welcome_message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        room_id_{0},
        chat_enabled_{false},
        spectator_chat_enabled_{false},
        team_chat_enabled_{false},
        links_allowed_{false},
        message_rate_limit_{0},
        max_message_length_{0},
        emotes_allowed_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RoomChatSettings::RoomChatSettings(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RoomChatSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoomChatSettingsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoomChatSettingsDefaultTypeInternal() {}
  union {
    RoomChatSettings _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoomChatSettingsDefaultTypeInternal _RoomChatSettings_default_instance_;

inline constexpr ModerateChatRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : message_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        reason_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        new_content_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        action_{static_cast< ::blokus::ModerateChatRequest_ModerationAction >(0)},
        duration_minutes_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ModerateChatRequest::ModerateChatRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ModerateChatRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModerateChatRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModerateChatRequestDefaultTypeInternal() {}
  union {
    ModerateChatRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModerateChatRequestDefaultTypeInternal _ModerateChatRequest_default_instance_;

inline constexpr GetEmotePacksRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : include_locked_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetEmotePacksRequest::GetEmotePacksRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetEmotePacksRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetEmotePacksRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetEmotePacksRequestDefaultTypeInternal() {}
  union {
    GetEmotePacksRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetEmotePacksRequestDefaultTypeInternal _GetEmotePacksRequest_default_instance_;

inline constexpr EmoteInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : tags_{},
        emote_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        emote_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        emote_url_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        is_animated_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR EmoteInfo::EmoteInfo(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct EmoteInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmoteInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmoteInfoDefaultTypeInternal() {}
  union {
    EmoteInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmoteInfoDefaultTypeInternal _EmoteInfo_default_instance_;

inline constexpr ChatSettings::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : blocked_users_{},
        muted_rooms_{},
        chat_font_size_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        global_chat_enabled_{false},
        whispers_enabled_{false},
        system_messages_enabled_{false},
        emotes_enabled_{false},
        mentions_enabled_{false},
        profanity_filter_{false},
        spam_filter_{false},
        desktop_notifications_{false},
        sound_notifications_{false},
        mention_notifications_{false},
        show_timestamps_{false},
        show_user_colors_{false},
        max_message_length_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ChatSettings::ChatSettings(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ChatSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatSettingsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatSettingsDefaultTypeInternal() {}
  union {
    ChatSettings _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatSettingsDefaultTypeInternal _ChatSettings_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR ChatMessage_MetadataEntry_DoNotUse::ChatMessage_MetadataEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ChatMessage_MetadataEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ChatMessage_MetadataEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct ChatMessage_MetadataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatMessage_MetadataEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatMessage_MetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ChatMessage_MetadataEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatMessage_MetadataEntry_DoNotUseDefaultTypeInternal _ChatMessage_MetadataEntry_DoNotUse_default_instance_;

inline constexpr ChatEmote::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : emote_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        emote_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        emote_url_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        start_position_{0},
        end_position_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ChatEmote::ChatEmote(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ChatEmoteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatEmoteDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatEmoteDefaultTypeInternal() {}
  union {
    ChatEmote _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatEmoteDefaultTypeInternal _ChatEmote_default_instance_;

inline constexpr UpdateChatSettingsRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        settings_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR UpdateChatSettingsRequest::UpdateChatSettingsRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct UpdateChatSettingsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateChatSettingsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateChatSettingsRequestDefaultTypeInternal() {}
  union {
    UpdateChatSettingsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateChatSettingsRequestDefaultTypeInternal _UpdateChatSettingsRequest_default_instance_;

inline constexpr SystemMessage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : parameters_{},
        message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        icon_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        color_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        system_type_{static_cast< ::blokus::SystemMessage_SystemMessageType >(0)},
        show_in_chat_{false},
        show_as_popup_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SystemMessage::SystemMessage(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SystemMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SystemMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SystemMessageDefaultTypeInternal() {}
  union {
    SystemMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SystemMessageDefaultTypeInternal _SystemMessage_default_instance_;

inline constexpr ReadReceiptNotification::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        message_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        reader_username_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        read_at_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR ReadReceiptNotification::ReadReceiptNotification(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ReadReceiptNotificationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReadReceiptNotificationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReadReceiptNotificationDefaultTypeInternal() {}
  union {
    ReadReceiptNotification _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReadReceiptNotificationDefaultTypeInternal _ReadReceiptNotification_default_instance_;

inline constexpr GetChatHistoryRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        type_filter_{},
        _type_filter_cached_byte_size_{0},
        target_username_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        before_message_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        after_message_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        search_query_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        since_{nullptr},
        until_{nullptr},
        scope_{static_cast< ::blokus::ChatScope >(0)},
        room_id_{0},
        limit_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetChatHistoryRequest::GetChatHistoryRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetChatHistoryRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetChatHistoryRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetChatHistoryRequestDefaultTypeInternal() {}
  union {
    GetChatHistoryRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetChatHistoryRequestDefaultTypeInternal _GetChatHistoryRequest_default_instance_;

inline constexpr EmotePackInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : emotes_{},
        pack_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        pack_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        description_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        is_premium_{false},
        is_unlocked_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR EmotePackInfo::EmotePackInfo(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct EmotePackInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmotePackInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmotePackInfoDefaultTypeInternal() {}
  union {
    EmotePackInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmotePackInfoDefaultTypeInternal _EmotePackInfo_default_instance_;

inline constexpr ChatModerationNotification::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        message_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        moderated_username_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        moderator_username_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        action_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        reason_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        moderated_at_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR ChatModerationNotification::ChatModerationNotification(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ChatModerationNotificationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatModerationNotificationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatModerationNotificationDefaultTypeInternal() {}
  union {
    ChatModerationNotification _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatModerationNotificationDefaultTypeInternal _ChatModerationNotification_default_instance_;

inline constexpr ChatMessage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        mentions_{},
        emotes_{},
        attachments_{},
        metadata_{},
        message_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sender_username_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sender_display_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        content_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        target_username_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        reply_to_message_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        timestamp_{nullptr},
        edited_at_{nullptr},
        type_{static_cast< ::blokus::ChatType >(0)},
        scope_{static_cast< ::blokus::ChatScope >(0)},
        sender_color_{static_cast< ::blokus::PlayerColor >(0)},
        room_id_{0},
        status_{static_cast< ::blokus::MessageStatus >(0)},
        is_edited_{false} {}

template <typename>
PROTOBUF_CONSTEXPR ChatMessage::ChatMessage(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ChatMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatMessageDefaultTypeInternal() {}
  union {
    ChatMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatMessageDefaultTypeInternal _ChatMessage_default_instance_;

inline constexpr WhisperNotification::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        whisper_{nullptr},
        sender_online_{false},
        auto_away_reply_{false} {}

template <typename>
PROTOBUF_CONSTEXPR WhisperNotification::WhisperNotification(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct WhisperNotificationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WhisperNotificationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WhisperNotificationDefaultTypeInternal() {}
  union {
    WhisperNotification _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WhisperNotificationDefaultTypeInternal _WhisperNotification_default_instance_;

inline constexpr UpdateChatSettingsResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        result_{nullptr},
        updated_settings_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR UpdateChatSettingsResponse::UpdateChatSettingsResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct UpdateChatSettingsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateChatSettingsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateChatSettingsResponseDefaultTypeInternal() {}
  union {
    UpdateChatSettingsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateChatSettingsResponseDefaultTypeInternal _UpdateChatSettingsResponse_default_instance_;

inline constexpr SendChatResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        blocked_words_{},
        message_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        client_message_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        filtered_content_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        result_{nullptr},
        sent_at_{nullptr},
        cooldown_seconds_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SendChatResponse::SendChatResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SendChatResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendChatResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendChatResponseDefaultTypeInternal() {}
  union {
    SendChatResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendChatResponseDefaultTypeInternal _SendChatResponse_default_instance_;

inline constexpr ModerateChatResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        result_{nullptr},
        user_notified_{false} {}

template <typename>
PROTOBUF_CONSTEXPR ModerateChatResponse::ModerateChatResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ModerateChatResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModerateChatResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModerateChatResponseDefaultTypeInternal() {}
  union {
    ModerateChatResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModerateChatResponseDefaultTypeInternal _ModerateChatResponse_default_instance_;

inline constexpr GetEmotePacksResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        emote_packs_{},
        unlocked_pack_ids_{},
        result_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR GetEmotePacksResponse::GetEmotePacksResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetEmotePacksResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetEmotePacksResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetEmotePacksResponseDefaultTypeInternal() {}
  union {
    GetEmotePacksResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetEmotePacksResponseDefaultTypeInternal _GetEmotePacksResponse_default_instance_;

inline constexpr ChatNotification::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        message_{nullptr},
        should_notify_{false},
        mentioned_{false},
        is_important_{false},
        is_first_message_{false},
        unread_count_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ChatNotification::ChatNotification(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ChatNotificationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatNotificationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatNotificationDefaultTypeInternal() {}
  union {
    ChatNotification _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatNotificationDefaultTypeInternal _ChatNotification_default_instance_;

inline constexpr ChatHistoryResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        messages_{},
        result_{nullptr},
        oldest_message_{nullptr},
        newest_message_{nullptr},
        has_more_before_{false},
        has_more_after_{false},
        total_count_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ChatHistoryResponse::ChatHistoryResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ChatHistoryResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatHistoryResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatHistoryResponseDefaultTypeInternal() {}
  union {
    ChatHistoryResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatHistoryResponseDefaultTypeInternal _ChatHistoryResponse_default_instance_;
}  // namespace blokus
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_chat_2eproto[5];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_chat_2eproto = nullptr;
const ::uint32_t
    TableStruct_chat_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::blokus::ChatMessage_MetadataEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatMessage_MetadataEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::ChatMessage_MetadataEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatMessage_MetadataEntry_DoNotUse, _impl_.value_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::blokus::ChatMessage, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatMessage, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::ChatMessage, _impl_.message_id_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatMessage, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatMessage, _impl_.scope_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatMessage, _impl_.sender_username_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatMessage, _impl_.sender_display_name_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatMessage, _impl_.sender_color_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatMessage, _impl_.content_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatMessage, _impl_.mentions_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatMessage, _impl_.emotes_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatMessage, _impl_.timestamp_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatMessage, _impl_.room_id_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatMessage, _impl_.target_username_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatMessage, _impl_.status_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatMessage, _impl_.is_edited_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatMessage, _impl_.edited_at_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatMessage, _impl_.reply_to_message_id_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatMessage, _impl_.attachments_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatMessage, _impl_.metadata_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        1,
        ~0u,
        ~0u,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::blokus::ChatEmote, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::ChatEmote, _impl_.emote_id_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatEmote, _impl_.emote_name_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatEmote, _impl_.emote_url_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatEmote, _impl_.start_position_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatEmote, _impl_.end_position_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::blokus::SendChatRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::SendChatRequest, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::blokus::SendChatRequest, _impl_.scope_),
        PROTOBUF_FIELD_OFFSET(::blokus::SendChatRequest, _impl_.content_),
        PROTOBUF_FIELD_OFFSET(::blokus::SendChatRequest, _impl_.room_id_),
        PROTOBUF_FIELD_OFFSET(::blokus::SendChatRequest, _impl_.target_username_),
        PROTOBUF_FIELD_OFFSET(::blokus::SendChatRequest, _impl_.reply_to_message_id_),
        PROTOBUF_FIELD_OFFSET(::blokus::SendChatRequest, _impl_.attachments_),
        PROTOBUF_FIELD_OFFSET(::blokus::SendChatRequest, _impl_.silent_),
        PROTOBUF_FIELD_OFFSET(::blokus::SendChatRequest, _impl_.client_message_id_),
        PROTOBUF_FIELD_OFFSET(::blokus::SendChatResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::SendChatResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::SendChatResponse, _impl_.result_),
        PROTOBUF_FIELD_OFFSET(::blokus::SendChatResponse, _impl_.message_id_),
        PROTOBUF_FIELD_OFFSET(::blokus::SendChatResponse, _impl_.client_message_id_),
        PROTOBUF_FIELD_OFFSET(::blokus::SendChatResponse, _impl_.sent_at_),
        PROTOBUF_FIELD_OFFSET(::blokus::SendChatResponse, _impl_.filtered_content_),
        PROTOBUF_FIELD_OFFSET(::blokus::SendChatResponse, _impl_.blocked_words_),
        PROTOBUF_FIELD_OFFSET(::blokus::SendChatResponse, _impl_.cooldown_seconds_),
        0,
        ~0u,
        ~0u,
        1,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::blokus::ChatNotification, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatNotification, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::ChatNotification, _impl_.message_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatNotification, _impl_.should_notify_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatNotification, _impl_.mentioned_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatNotification, _impl_.is_important_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatNotification, _impl_.unread_count_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatNotification, _impl_.is_first_message_),
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::blokus::SystemMessage_ParametersEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::SystemMessage_ParametersEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::SystemMessage_ParametersEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::blokus::SystemMessage_ParametersEntry_DoNotUse, _impl_.value_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::blokus::SystemMessage, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::SystemMessage, _impl_.system_type_),
        PROTOBUF_FIELD_OFFSET(::blokus::SystemMessage, _impl_.message_),
        PROTOBUF_FIELD_OFFSET(::blokus::SystemMessage, _impl_.parameters_),
        PROTOBUF_FIELD_OFFSET(::blokus::SystemMessage, _impl_.show_in_chat_),
        PROTOBUF_FIELD_OFFSET(::blokus::SystemMessage, _impl_.show_as_popup_),
        PROTOBUF_FIELD_OFFSET(::blokus::SystemMessage, _impl_.icon_),
        PROTOBUF_FIELD_OFFSET(::blokus::SystemMessage, _impl_.color_),
        PROTOBUF_FIELD_OFFSET(::blokus::GetChatHistoryRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::GetChatHistoryRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::GetChatHistoryRequest, _impl_.scope_),
        PROTOBUF_FIELD_OFFSET(::blokus::GetChatHistoryRequest, _impl_.room_id_),
        PROTOBUF_FIELD_OFFSET(::blokus::GetChatHistoryRequest, _impl_.target_username_),
        PROTOBUF_FIELD_OFFSET(::blokus::GetChatHistoryRequest, _impl_.limit_),
        PROTOBUF_FIELD_OFFSET(::blokus::GetChatHistoryRequest, _impl_.before_message_id_),
        PROTOBUF_FIELD_OFFSET(::blokus::GetChatHistoryRequest, _impl_.after_message_id_),
        PROTOBUF_FIELD_OFFSET(::blokus::GetChatHistoryRequest, _impl_.type_filter_),
        PROTOBUF_FIELD_OFFSET(::blokus::GetChatHistoryRequest, _impl_.since_),
        PROTOBUF_FIELD_OFFSET(::blokus::GetChatHistoryRequest, _impl_.until_),
        PROTOBUF_FIELD_OFFSET(::blokus::GetChatHistoryRequest, _impl_.search_query_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        1,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::blokus::ChatHistoryResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatHistoryResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::ChatHistoryResponse, _impl_.result_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatHistoryResponse, _impl_.messages_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatHistoryResponse, _impl_.has_more_before_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatHistoryResponse, _impl_.has_more_after_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatHistoryResponse, _impl_.total_count_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatHistoryResponse, _impl_.oldest_message_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatHistoryResponse, _impl_.newest_message_),
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        1,
        2,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::blokus::WhisperMessage, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::WhisperMessage, _impl_.target_username_),
        PROTOBUF_FIELD_OFFSET(::blokus::WhisperMessage, _impl_.content_),
        PROTOBUF_FIELD_OFFSET(::blokus::WhisperMessage, _impl_.request_read_receipt_),
        PROTOBUF_FIELD_OFFSET(::blokus::WhisperNotification, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::WhisperNotification, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::WhisperNotification, _impl_.whisper_),
        PROTOBUF_FIELD_OFFSET(::blokus::WhisperNotification, _impl_.sender_online_),
        PROTOBUF_FIELD_OFFSET(::blokus::WhisperNotification, _impl_.auto_away_reply_),
        0,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::blokus::ReadReceiptNotification, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::ReadReceiptNotification, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::ReadReceiptNotification, _impl_.message_id_),
        PROTOBUF_FIELD_OFFSET(::blokus::ReadReceiptNotification, _impl_.reader_username_),
        PROTOBUF_FIELD_OFFSET(::blokus::ReadReceiptNotification, _impl_.read_at_),
        ~0u,
        ~0u,
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::blokus::ModerateChatRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::ModerateChatRequest, _impl_.message_id_),
        PROTOBUF_FIELD_OFFSET(::blokus::ModerateChatRequest, _impl_.action_),
        PROTOBUF_FIELD_OFFSET(::blokus::ModerateChatRequest, _impl_.reason_),
        PROTOBUF_FIELD_OFFSET(::blokus::ModerateChatRequest, _impl_.duration_minutes_),
        PROTOBUF_FIELD_OFFSET(::blokus::ModerateChatRequest, _impl_.new_content_),
        PROTOBUF_FIELD_OFFSET(::blokus::ModerateChatResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::ModerateChatResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::ModerateChatResponse, _impl_.result_),
        PROTOBUF_FIELD_OFFSET(::blokus::ModerateChatResponse, _impl_.message_),
        PROTOBUF_FIELD_OFFSET(::blokus::ModerateChatResponse, _impl_.user_notified_),
        0,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::blokus::ChatModerationNotification, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatModerationNotification, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::ChatModerationNotification, _impl_.message_id_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatModerationNotification, _impl_.moderated_username_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatModerationNotification, _impl_.moderator_username_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatModerationNotification, _impl_.action_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatModerationNotification, _impl_.reason_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatModerationNotification, _impl_.moderated_at_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::blokus::ChatSettings, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::ChatSettings, _impl_.global_chat_enabled_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatSettings, _impl_.whispers_enabled_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatSettings, _impl_.system_messages_enabled_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatSettings, _impl_.emotes_enabled_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatSettings, _impl_.mentions_enabled_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatSettings, _impl_.profanity_filter_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatSettings, _impl_.spam_filter_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatSettings, _impl_.blocked_users_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatSettings, _impl_.muted_rooms_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatSettings, _impl_.desktop_notifications_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatSettings, _impl_.sound_notifications_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatSettings, _impl_.mention_notifications_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatSettings, _impl_.show_timestamps_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatSettings, _impl_.show_user_colors_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatSettings, _impl_.max_message_length_),
        PROTOBUF_FIELD_OFFSET(::blokus::ChatSettings, _impl_.chat_font_size_),
        PROTOBUF_FIELD_OFFSET(::blokus::UpdateChatSettingsRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::UpdateChatSettingsRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::UpdateChatSettingsRequest, _impl_.settings_),
        0,
        PROTOBUF_FIELD_OFFSET(::blokus::UpdateChatSettingsResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::UpdateChatSettingsResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::UpdateChatSettingsResponse, _impl_.result_),
        PROTOBUF_FIELD_OFFSET(::blokus::UpdateChatSettingsResponse, _impl_.updated_settings_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::blokus::RoomChatSettings, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::RoomChatSettings, _impl_.room_id_),
        PROTOBUF_FIELD_OFFSET(::blokus::RoomChatSettings, _impl_.chat_enabled_),
        PROTOBUF_FIELD_OFFSET(::blokus::RoomChatSettings, _impl_.spectator_chat_enabled_),
        PROTOBUF_FIELD_OFFSET(::blokus::RoomChatSettings, _impl_.team_chat_enabled_),
        PROTOBUF_FIELD_OFFSET(::blokus::RoomChatSettings, _impl_.message_rate_limit_),
        PROTOBUF_FIELD_OFFSET(::blokus::RoomChatSettings, _impl_.max_message_length_),
        PROTOBUF_FIELD_OFFSET(::blokus::RoomChatSettings, _impl_.links_allowed_),
        PROTOBUF_FIELD_OFFSET(::blokus::RoomChatSettings, _impl_.emotes_allowed_),
        PROTOBUF_FIELD_OFFSET(::blokus::RoomChatSettings, _impl_.chat_moderators_),
        PROTOBUF_FIELD_OFFSET(::blokus::RoomChatSettings, _impl_.banned_users_),
        PROTOBUF_FIELD_OFFSET(::blokus::RoomChatSettings, _impl_.welcome_message_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::blokus::EmotePackInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::EmotePackInfo, _impl_.pack_id_),
        PROTOBUF_FIELD_OFFSET(::blokus::EmotePackInfo, _impl_.pack_name_),
        PROTOBUF_FIELD_OFFSET(::blokus::EmotePackInfo, _impl_.description_),
        PROTOBUF_FIELD_OFFSET(::blokus::EmotePackInfo, _impl_.emotes_),
        PROTOBUF_FIELD_OFFSET(::blokus::EmotePackInfo, _impl_.is_premium_),
        PROTOBUF_FIELD_OFFSET(::blokus::EmotePackInfo, _impl_.is_unlocked_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::blokus::EmoteInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::EmoteInfo, _impl_.emote_id_),
        PROTOBUF_FIELD_OFFSET(::blokus::EmoteInfo, _impl_.emote_name_),
        PROTOBUF_FIELD_OFFSET(::blokus::EmoteInfo, _impl_.emote_url_),
        PROTOBUF_FIELD_OFFSET(::blokus::EmoteInfo, _impl_.tags_),
        PROTOBUF_FIELD_OFFSET(::blokus::EmoteInfo, _impl_.is_animated_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::blokus::GetEmotePacksRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::GetEmotePacksRequest, _impl_.include_locked_),
        PROTOBUF_FIELD_OFFSET(::blokus::GetEmotePacksResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::GetEmotePacksResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::GetEmotePacksResponse, _impl_.result_),
        PROTOBUF_FIELD_OFFSET(::blokus::GetEmotePacksResponse, _impl_.emote_packs_),
        PROTOBUF_FIELD_OFFSET(::blokus::GetEmotePacksResponse, _impl_.unlocked_pack_ids_),
        0,
        ~0u,
        ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 10, -1, sizeof(::blokus::ChatMessage_MetadataEntry_DoNotUse)},
        {12, 38, -1, sizeof(::blokus::ChatMessage)},
        {56, -1, -1, sizeof(::blokus::ChatEmote)},
        {69, -1, -1, sizeof(::blokus::SendChatRequest)},
        {86, 101, -1, sizeof(::blokus::SendChatResponse)},
        {108, 122, -1, sizeof(::blokus::ChatNotification)},
        {128, 138, -1, sizeof(::blokus::SystemMessage_ParametersEntry_DoNotUse)},
        {140, -1, -1, sizeof(::blokus::SystemMessage)},
        {155, 173, -1, sizeof(::blokus::GetChatHistoryRequest)},
        {183, 198, -1, sizeof(::blokus::ChatHistoryResponse)},
        {205, -1, -1, sizeof(::blokus::WhisperMessage)},
        {216, 227, -1, sizeof(::blokus::WhisperNotification)},
        {230, 241, -1, sizeof(::blokus::ReadReceiptNotification)},
        {244, -1, -1, sizeof(::blokus::ModerateChatRequest)},
        {257, 268, -1, sizeof(::blokus::ModerateChatResponse)},
        {271, 285, -1, sizeof(::blokus::ChatModerationNotification)},
        {291, -1, -1, sizeof(::blokus::ChatSettings)},
        {315, 324, -1, sizeof(::blokus::UpdateChatSettingsRequest)},
        {325, 335, -1, sizeof(::blokus::UpdateChatSettingsResponse)},
        {337, -1, -1, sizeof(::blokus::RoomChatSettings)},
        {356, -1, -1, sizeof(::blokus::EmotePackInfo)},
        {370, -1, -1, sizeof(::blokus::EmoteInfo)},
        {383, -1, -1, sizeof(::blokus::GetEmotePacksRequest)},
        {392, 403, -1, sizeof(::blokus::GetEmotePacksResponse)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::blokus::_ChatMessage_MetadataEntry_DoNotUse_default_instance_._instance,
    &::blokus::_ChatMessage_default_instance_._instance,
    &::blokus::_ChatEmote_default_instance_._instance,
    &::blokus::_SendChatRequest_default_instance_._instance,
    &::blokus::_SendChatResponse_default_instance_._instance,
    &::blokus::_ChatNotification_default_instance_._instance,
    &::blokus::_SystemMessage_ParametersEntry_DoNotUse_default_instance_._instance,
    &::blokus::_SystemMessage_default_instance_._instance,
    &::blokus::_GetChatHistoryRequest_default_instance_._instance,
    &::blokus::_ChatHistoryResponse_default_instance_._instance,
    &::blokus::_WhisperMessage_default_instance_._instance,
    &::blokus::_WhisperNotification_default_instance_._instance,
    &::blokus::_ReadReceiptNotification_default_instance_._instance,
    &::blokus::_ModerateChatRequest_default_instance_._instance,
    &::blokus::_ModerateChatResponse_default_instance_._instance,
    &::blokus::_ChatModerationNotification_default_instance_._instance,
    &::blokus::_ChatSettings_default_instance_._instance,
    &::blokus::_UpdateChatSettingsRequest_default_instance_._instance,
    &::blokus::_UpdateChatSettingsResponse_default_instance_._instance,
    &::blokus::_RoomChatSettings_default_instance_._instance,
    &::blokus::_EmotePackInfo_default_instance_._instance,
    &::blokus::_EmoteInfo_default_instance_._instance,
    &::blokus::_GetEmotePacksRequest_default_instance_._instance,
    &::blokus::_GetEmotePacksResponse_default_instance_._instance,
};
const char descriptor_table_protodef_chat_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\nchat.proto\022\006blokus\032\037google/protobuf/ti"
    "mestamp.proto\032\014common.proto\"\344\004\n\013ChatMess"
    "age\022\022\n\nmessage_id\030\001 \001(\t\022\036\n\004type\030\002 \001(\0162\020."
    "blokus.ChatType\022 \n\005scope\030\003 \001(\0162\021.blokus."
    "ChatScope\022\027\n\017sender_username\030\004 \001(\t\022\033\n\023se"
    "nder_display_name\030\005 \001(\t\022)\n\014sender_color\030"
    "\006 \001(\0162\023.blokus.PlayerColor\022\017\n\007content\030\007 "
    "\001(\t\022\020\n\010mentions\030\010 \003(\t\022!\n\006emotes\030\t \003(\0132\021."
    "blokus.ChatEmote\022-\n\ttimestamp\030\n \001(\0132\032.go"
    "ogle.protobuf.Timestamp\022\017\n\007room_id\030\013 \001(\005"
    "\022\027\n\017target_username\030\014 \001(\t\022%\n\006status\030\r \001("
    "\0162\025.blokus.MessageStatus\022\021\n\tis_edited\030\016 "
    "\001(\010\022-\n\tedited_at\030\017 \001(\0132\032.google.protobuf"
    ".Timestamp\022\033\n\023reply_to_message_id\030\020 \001(\t\022"
    "\023\n\013attachments\030\021 \003(\t\0223\n\010metadata\030\022 \003(\0132!"
    ".blokus.ChatMessage.MetadataEntry\032/\n\rMet"
    "adataEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\002"
    "8\001\"r\n\tChatEmote\022\020\n\010emote_id\030\001 \001(\t\022\022\n\nemo"
    "te_name\030\002 \001(\t\022\021\n\temote_url\030\003 \001(\t\022\026\n\016star"
    "t_position\030\004 \001(\005\022\024\n\014end_position\030\005 \001(\005\"\353"
    "\001\n\017SendChatRequest\022\036\n\004type\030\001 \001(\0162\020.bloku"
    "s.ChatType\022 \n\005scope\030\002 \001(\0162\021.blokus.ChatS"
    "cope\022\017\n\007content\030\003 \001(\t\022\017\n\007room_id\030\004 \001(\005\022\027"
    "\n\017target_username\030\005 \001(\t\022\033\n\023reply_to_mess"
    "age_id\030\006 \001(\t\022\023\n\013attachments\030\007 \003(\t\022\016\n\006sil"
    "ent\030\010 \001(\010\022\031\n\021client_message_id\030\t \001(\t\"\331\001\n"
    "\020SendChatResponse\022\036\n\006result\030\001 \001(\0132\016.blok"
    "us.Result\022\022\n\nmessage_id\030\002 \001(\t\022\031\n\021client_"
    "message_id\030\003 \001(\t\022+\n\007sent_at\030\004 \001(\0132\032.goog"
    "le.protobuf.Timestamp\022\030\n\020filtered_conten"
    "t\030\005 \001(\t\022\025\n\rblocked_words\030\006 \003(\t\022\030\n\020cooldo"
    "wn_seconds\030\007 \001(\005\"\250\001\n\020ChatNotification\022$\n"
    "\007message\030\001 \001(\0132\023.blokus.ChatMessage\022\025\n\rs"
    "hould_notify\030\002 \001(\010\022\021\n\tmentioned\030\003 \001(\010\022\024\n"
    "\014is_important\030\004 \001(\010\022\024\n\014unread_count\030\005 \001("
    "\005\022\030\n\020is_first_message\030\006 \001(\010\"\226\004\n\rSystemMe"
    "ssage\022<\n\013system_type\030\001 \001(\0162\'.blokus.Syst"
    "emMessage.SystemMessageType\022\017\n\007message\030\002"
    " \001(\t\0229\n\nparameters\030\003 \003(\0132%.blokus.System"
    "Message.ParametersEntry\022\024\n\014show_in_chat\030"
    "\004 \001(\010\022\025\n\rshow_as_popup\030\005 \001(\010\022\014\n\004icon\030\006 \001"
    "(\t\022\r\n\005color\030\007 \001(\t\0321\n\017ParametersEntry\022\013\n\003"
    "key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\375\001\n\021SystemM"
    "essageType\022\021\n\rPLAYER_JOINED\020\000\022\017\n\013PLAYER_"
    "LEFT\020\001\022\020\n\014GAME_STARTED\020\002\022\016\n\nGAME_ENDED\020\003"
    "\022\020\n\014BLOCK_PLACED\020\004\022\020\n\014TURN_CHANGED\020\005\022\030\n\024"
    "ACHIEVEMENT_UNLOCKED\020\006\022\014\n\010LEVEL_UP\020\007\022\027\n\023"
    "SERVER_ANNOUNCEMENT\020\010\022\027\n\023MAINTENANCE_WAR"
    "NING\020\t\022\020\n\014ROOM_CREATED\020\n\022\022\n\016ROOM_DISBAND"
    "ED\020\013\"\272\002\n\025GetChatHistoryRequest\022 \n\005scope\030"
    "\001 \001(\0162\021.blokus.ChatScope\022\017\n\007room_id\030\002 \001("
    "\005\022\027\n\017target_username\030\003 \001(\t\022\r\n\005limit\030\004 \001("
    "\005\022\031\n\021before_message_id\030\005 \001(\t\022\030\n\020after_me"
    "ssage_id\030\006 \001(\t\022%\n\013type_filter\030\007 \003(\0162\020.bl"
    "okus.ChatType\022)\n\005since\030\010 \001(\0132\032.google.pr"
    "otobuf.Timestamp\022)\n\005until\030\t \001(\0132\032.google"
    ".protobuf.Timestamp\022\024\n\014search_query\030\n \001("
    "\t\"\212\002\n\023ChatHistoryResponse\022\036\n\006result\030\001 \001("
    "\0132\016.blokus.Result\022%\n\010messages\030\002 \003(\0132\023.bl"
    "okus.ChatMessage\022\027\n\017has_more_before\030\003 \001("
    "\010\022\026\n\016has_more_after\030\004 \001(\010\022\023\n\013total_count"
    "\030\005 \001(\005\0222\n\016oldest_message\030\006 \001(\0132\032.google."
    "protobuf.Timestamp\0222\n\016newest_message\030\007 \001"
    "(\0132\032.google.protobuf.Timestamp\"X\n\016Whispe"
    "rMessage\022\027\n\017target_username\030\001 \001(\t\022\017\n\007con"
    "tent\030\002 \001(\t\022\034\n\024request_read_receipt\030\003 \001(\010"
    "\"k\n\023WhisperNotification\022$\n\007whisper\030\001 \001(\013"
    "2\023.blokus.ChatMessage\022\025\n\rsender_online\030\002"
    " \001(\010\022\027\n\017auto_away_reply\030\003 \001(\010\"s\n\027ReadRec"
    "eiptNotification\022\022\n\nmessage_id\030\001 \001(\t\022\027\n\017"
    "reader_username\030\002 \001(\t\022+\n\007read_at\030\003 \001(\0132\032"
    ".google.protobuf.Timestamp\"\214\002\n\023ModerateC"
    "hatRequest\022\022\n\nmessage_id\030\001 \001(\t\022<\n\006action"
    "\030\002 \001(\0162,.blokus.ModerateChatRequest.Mode"
    "rationAction\022\016\n\006reason\030\003 \001(\t\022\030\n\020duration"
    "_minutes\030\004 \001(\005\022\023\n\013new_content\030\005 \001(\t\"d\n\020M"
    "oderationAction\022\022\n\016DELETE_MESSAGE\020\000\022\020\n\014E"
    "DIT_MESSAGE\020\001\022\r\n\tMUTE_USER\020\002\022\r\n\tWARN_USE"
    "R\020\003\022\014\n\010BAN_USER\020\004\"^\n\024ModerateChatRespons"
    "e\022\036\n\006result\030\001 \001(\0132\016.blokus.Result\022\017\n\007mes"
    "sage\030\002 \001(\t\022\025\n\ruser_notified\030\003 \001(\010\"\272\001\n\032Ch"
    "atModerationNotification\022\022\n\nmessage_id\030\001"
    " \001(\t\022\032\n\022moderated_username\030\002 \001(\t\022\032\n\022mode"
    "rator_username\030\003 \001(\t\022\016\n\006action\030\004 \001(\t\022\016\n\006"
    "reason\030\005 \001(\t\0220\n\014moderated_at\030\006 \001(\0132\032.goo"
    "gle.protobuf.Timestamp\"\265\003\n\014ChatSettings\022"
    "\033\n\023global_chat_enabled\030\001 \001(\010\022\030\n\020whispers"
    "_enabled\030\002 \001(\010\022\037\n\027system_messages_enable"
    "d\030\003 \001(\010\022\026\n\016emotes_enabled\030\004 \001(\010\022\030\n\020menti"
    "ons_enabled\030\005 \001(\010\022\030\n\020profanity_filter\030\006 "
    "\001(\010\022\023\n\013spam_filter\030\007 \001(\010\022\025\n\rblocked_user"
    "s\030\010 \003(\t\022\023\n\013muted_rooms\030\t \003(\t\022\035\n\025desktop_"
    "notifications\030\n \001(\010\022\033\n\023sound_notificatio"
    "ns\030\013 \001(\010\022\035\n\025mention_notifications\030\014 \001(\010\022"
    "\027\n\017show_timestamps\030\r \001(\010\022\030\n\020show_user_co"
    "lors\030\016 \001(\010\022\032\n\022max_message_length\030\017 \001(\005\022\026"
    "\n\016chat_font_size\030\020 \001(\t\"C\n\031UpdateChatSett"
    "ingsRequest\022&\n\010settings\030\001 \001(\0132\024.blokus.C"
    "hatSettings\"l\n\032UpdateChatSettingsRespons"
    "e\022\036\n\006result\030\001 \001(\0132\016.blokus.Result\022.\n\020upd"
    "ated_settings\030\002 \001(\0132\024.blokus.ChatSetting"
    "s\"\243\002\n\020RoomChatSettings\022\017\n\007room_id\030\001 \001(\005\022"
    "\024\n\014chat_enabled\030\002 \001(\010\022\036\n\026spectator_chat_"
    "enabled\030\003 \001(\010\022\031\n\021team_chat_enabled\030\004 \001(\010"
    "\022\032\n\022message_rate_limit\030\005 \001(\005\022\032\n\022max_mess"
    "age_length\030\006 \001(\005\022\025\n\rlinks_allowed\030\007 \001(\010\022"
    "\026\n\016emotes_allowed\030\010 \001(\010\022\027\n\017chat_moderato"
    "rs\030\t \003(\t\022\024\n\014banned_users\030\n \003(\t\022\027\n\017welcom"
    "e_message\030\013 \001(\t\"\224\001\n\rEmotePackInfo\022\017\n\007pac"
    "k_id\030\001 \001(\t\022\021\n\tpack_name\030\002 \001(\t\022\023\n\013descrip"
    "tion\030\003 \001(\t\022!\n\006emotes\030\004 \003(\0132\021.blokus.Emot"
    "eInfo\022\022\n\nis_premium\030\005 \001(\010\022\023\n\013is_unlocked"
    "\030\006 \001(\010\"g\n\tEmoteInfo\022\020\n\010emote_id\030\001 \001(\t\022\022\n"
    "\nemote_name\030\002 \001(\t\022\021\n\temote_url\030\003 \001(\t\022\014\n\004"
    "tags\030\004 \003(\t\022\023\n\013is_animated\030\005 \001(\010\".\n\024GetEm"
    "otePacksRequest\022\026\n\016include_locked\030\001 \001(\010\""
    "~\n\025GetEmotePacksResponse\022\036\n\006result\030\001 \001(\013"
    "2\016.blokus.Result\022*\n\013emote_packs\030\002 \003(\0132\025."
    "blokus.EmotePackInfo\022\031\n\021unlocked_pack_id"
    "s\030\003 \003(\t*\254\001\n\010ChatType\022\024\n\020CHAT_TYPE_NORMAL"
    "\020\000\022\025\n\021CHAT_TYPE_WHISPER\020\001\022\024\n\020CHAT_TYPE_S"
    "YSTEM\020\002\022\032\n\026CHAT_TYPE_ANNOUNCEMENT\020\003\022\030\n\024C"
    "HAT_TYPE_GAME_EVENT\020\004\022\023\n\017CHAT_TYPE_EMOTE"
    "\020\005\022\022\n\016CHAT_TYPE_TEAM\020\006*~\n\tChatScope\022\025\n\021C"
    "HAT_SCOPE_GLOBAL\020\000\022\023\n\017CHAT_SCOPE_ROOM\020\001\022"
    "\026\n\022CHAT_SCOPE_PRIVATE\020\002\022\023\n\017CHAT_SCOPE_TE"
    "AM\020\003\022\030\n\024CHAT_SCOPE_SPECTATOR\020\004*\264\001\n\rMessa"
    "geStatus\022\027\n\023MESSAGE_STATUS_SENT\020\000\022\034\n\030MES"
    "SAGE_STATUS_DELIVERED\020\001\022\027\n\023MESSAGE_STATU"
    "S_READ\020\002\022\031\n\025MESSAGE_STATUS_FAILED\020\003\022\032\n\026M"
    "ESSAGE_STATUS_BLOCKED\020\004\022\034\n\030MESSAGE_STATU"
    "S_MODERATED\020\005b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_chat_2eproto_deps[2] =
    {
        &::descriptor_table_common_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_chat_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_chat_2eproto = {
    false,
    false,
    5261,
    descriptor_table_protodef_chat_2eproto,
    "chat.proto",
    &descriptor_table_chat_2eproto_once,
    descriptor_table_chat_2eproto_deps,
    2,
    24,
    schemas,
    file_default_instances,
    TableStruct_chat_2eproto::offsets,
    file_level_enum_descriptors_chat_2eproto,
    file_level_service_descriptors_chat_2eproto,
};
namespace blokus {
const ::google::protobuf::EnumDescriptor* SystemMessage_SystemMessageType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_chat_2eproto);
  return file_level_enum_descriptors_chat_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t SystemMessage_SystemMessageType_internal_data_[] = {
    786432u, 0u, };
bool SystemMessage_SystemMessageType_IsValid(int value) {
  return 0 <= value && value <= 11;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr SystemMessage_SystemMessageType SystemMessage::PLAYER_JOINED;
constexpr SystemMessage_SystemMessageType SystemMessage::PLAYER_LEFT;
constexpr SystemMessage_SystemMessageType SystemMessage::GAME_STARTED;
constexpr SystemMessage_SystemMessageType SystemMessage::GAME_ENDED;
constexpr SystemMessage_SystemMessageType SystemMessage::BLOCK_PLACED;
constexpr SystemMessage_SystemMessageType SystemMessage::TURN_CHANGED;
constexpr SystemMessage_SystemMessageType SystemMessage::ACHIEVEMENT_UNLOCKED;
constexpr SystemMessage_SystemMessageType SystemMessage::LEVEL_UP;
constexpr SystemMessage_SystemMessageType SystemMessage::SERVER_ANNOUNCEMENT;
constexpr SystemMessage_SystemMessageType SystemMessage::MAINTENANCE_WARNING;
constexpr SystemMessage_SystemMessageType SystemMessage::ROOM_CREATED;
constexpr SystemMessage_SystemMessageType SystemMessage::ROOM_DISBANDED;
constexpr SystemMessage_SystemMessageType SystemMessage::SystemMessageType_MIN;
constexpr SystemMessage_SystemMessageType SystemMessage::SystemMessageType_MAX;
constexpr int SystemMessage::SystemMessageType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* ModerateChatRequest_ModerationAction_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_chat_2eproto);
  return file_level_enum_descriptors_chat_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t ModerateChatRequest_ModerationAction_internal_data_[] = {
    327680u, 0u, };
bool ModerateChatRequest_ModerationAction_IsValid(int value) {
  return 0 <= value && value <= 4;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr ModerateChatRequest_ModerationAction ModerateChatRequest::DELETE_MESSAGE;
constexpr ModerateChatRequest_ModerationAction ModerateChatRequest::EDIT_MESSAGE;
constexpr ModerateChatRequest_ModerationAction ModerateChatRequest::MUTE_USER;
constexpr ModerateChatRequest_ModerationAction ModerateChatRequest::WARN_USER;
constexpr ModerateChatRequest_ModerationAction ModerateChatRequest::BAN_USER;
constexpr ModerateChatRequest_ModerationAction ModerateChatRequest::ModerationAction_MIN;
constexpr ModerateChatRequest_ModerationAction ModerateChatRequest::ModerationAction_MAX;
constexpr int ModerateChatRequest::ModerationAction_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* ChatType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_chat_2eproto);
  return file_level_enum_descriptors_chat_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t ChatType_internal_data_[] = {
    458752u, 0u, };
bool ChatType_IsValid(int value) {
  return 0 <= value && value <= 6;
}
const ::google::protobuf::EnumDescriptor* ChatScope_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_chat_2eproto);
  return file_level_enum_descriptors_chat_2eproto[3];
}
PROTOBUF_CONSTINIT const uint32_t ChatScope_internal_data_[] = {
    327680u, 0u, };
bool ChatScope_IsValid(int value) {
  return 0 <= value && value <= 4;
}
const ::google::protobuf::EnumDescriptor* MessageStatus_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_chat_2eproto);
  return file_level_enum_descriptors_chat_2eproto[4];
}
PROTOBUF_CONSTINIT const uint32_t MessageStatus_internal_data_[] = {
    393216u, 0u, };
bool MessageStatus_IsValid(int value) {
  return 0 <= value && value <= 5;
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              ChatMessage_MetadataEntry_DoNotUse::ChatMessage_MetadataEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              ChatMessage_MetadataEntry_DoNotUse::ChatMessage_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              ChatMessage_MetadataEntry_DoNotUse::ChatMessage_MetadataEntry_DoNotUse() : SuperType() {}
              ChatMessage_MetadataEntry_DoNotUse::ChatMessage_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* ChatMessage_MetadataEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) ChatMessage_MetadataEntry_DoNotUse(arena);
              }
              constexpr auto ChatMessage_MetadataEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ChatMessage_MetadataEntry_DoNotUse),
                                                          alignof(ChatMessage_MetadataEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull ChatMessage_MetadataEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_ChatMessage_MetadataEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &ChatMessage_MetadataEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<ChatMessage_MetadataEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &ChatMessage_MetadataEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &ChatMessage_MetadataEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(ChatMessage_MetadataEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &ChatMessage_MetadataEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_chat_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* ChatMessage_MetadataEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 49, 2> ChatMessage_MetadataEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ChatMessage_MetadataEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::ChatMessage_MetadataEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ChatMessage_MetadataEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ChatMessage_MetadataEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(ChatMessage_MetadataEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2;
    {PROTOBUF_FIELD_OFFSET(ChatMessage_MetadataEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\40\3\5\0\0\0\0\0"
    "blokus.ChatMessage.MetadataEntry"
    "key"
    "value"
  }},
};

// ===================================================================

class ChatMessage::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ChatMessage>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_._has_bits_);
};

void ChatMessage::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ChatMessage::clear_edited_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.edited_at_ != nullptr) _impl_.edited_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ChatMessage::ChatMessage(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.ChatMessage)
}
inline PROTOBUF_NDEBUG_INLINE ChatMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::ChatMessage& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        mentions_{visibility, arena, from.mentions_},
        emotes_{visibility, arena, from.emotes_},
        attachments_{visibility, arena, from.attachments_},
        metadata_{visibility, arena, from.metadata_},
        message_id_(arena, from.message_id_),
        sender_username_(arena, from.sender_username_),
        sender_display_name_(arena, from.sender_display_name_),
        content_(arena, from.content_),
        target_username_(arena, from.target_username_),
        reply_to_message_id_(arena, from.reply_to_message_id_) {}

ChatMessage::ChatMessage(
    ::google::protobuf::Arena* arena,
    const ChatMessage& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ChatMessage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.timestamp_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.timestamp_)
                        : nullptr;
  _impl_.edited_at_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.edited_at_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, type_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, type_),
           offsetof(Impl_, is_edited_) -
               offsetof(Impl_, type_) +
               sizeof(Impl_::is_edited_));

  // @@protoc_insertion_point(copy_constructor:blokus.ChatMessage)
}
inline PROTOBUF_NDEBUG_INLINE ChatMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        mentions_{visibility, arena},
        emotes_{visibility, arena},
        attachments_{visibility, arena},
        metadata_{visibility, arena},
        message_id_(arena),
        sender_username_(arena),
        sender_display_name_(arena),
        content_(arena),
        target_username_(arena),
        reply_to_message_id_(arena) {}

inline void ChatMessage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_),
           0,
           offsetof(Impl_, is_edited_) -
               offsetof(Impl_, timestamp_) +
               sizeof(Impl_::is_edited_));
}
ChatMessage::~ChatMessage() {
  // @@protoc_insertion_point(destructor:blokus.ChatMessage)
  SharedDtor(*this);
}
inline void ChatMessage::SharedDtor(MessageLite& self) {
  ChatMessage& this_ = static_cast<ChatMessage&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.message_id_.Destroy();
  this_._impl_.sender_username_.Destroy();
  this_._impl_.sender_display_name_.Destroy();
  this_._impl_.content_.Destroy();
  this_._impl_.target_username_.Destroy();
  this_._impl_.reply_to_message_id_.Destroy();
  delete this_._impl_.timestamp_;
  delete this_._impl_.edited_at_;
  this_._impl_.~Impl_();
}

inline void* ChatMessage::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ChatMessage(arena);
}
constexpr auto ChatMessage::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.mentions_) +
          decltype(ChatMessage::_impl_.mentions_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.emotes_) +
          decltype(ChatMessage::_impl_.emotes_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.attachments_) +
          decltype(ChatMessage::_impl_.attachments_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.metadata_) +
          decltype(ChatMessage::_impl_.metadata_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.metadata_) +
          decltype(ChatMessage::_impl_.metadata_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(ChatMessage), alignof(ChatMessage), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ChatMessage::PlacementNew_,
                                 sizeof(ChatMessage),
                                 alignof(ChatMessage));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ChatMessage::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ChatMessage_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ChatMessage::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ChatMessage>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ChatMessage::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ChatMessage>(), &ChatMessage::ByteSizeLong,
            &ChatMessage::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_._cached_size_),
        false,
    },
    &ChatMessage::kDescriptorMethods,
    &descriptor_table_chat_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ChatMessage::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 18, 4, 155, 2> ChatMessage::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_._has_bits_),
    0, // no _extensions_
    18, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294705152,  // skipmap
    offsetof(decltype(_table_), field_entries),
    18,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::ChatMessage>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string message_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.message_id_)}},
    // .blokus.ChatType type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ChatMessage, _impl_.type_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.type_)}},
    // .blokus.ChatScope scope = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ChatMessage, _impl_.scope_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.scope_)}},
    // string sender_username = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.sender_username_)}},
    // string sender_display_name = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.sender_display_name_)}},
    // .blokus.PlayerColor sender_color = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ChatMessage, _impl_.sender_color_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.sender_color_)}},
    // string content = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.content_)}},
    // repeated string mentions = 8;
    {::_pbi::TcParser::FastUR1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.mentions_)}},
    // repeated .blokus.ChatEmote emotes = 9;
    {::_pbi::TcParser::FastMtR1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.emotes_)}},
    // .google.protobuf.Timestamp timestamp = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 0, 1, PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.timestamp_)}},
    // int32 room_id = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ChatMessage, _impl_.room_id_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.room_id_)}},
    // string target_username = 12;
    {::_pbi::TcParser::FastUS1,
     {98, 63, 0, PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.target_username_)}},
    // .blokus.MessageStatus status = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ChatMessage, _impl_.status_), 63>(),
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.status_)}},
    // bool is_edited = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ChatMessage, _impl_.is_edited_), 63>(),
     {112, 63, 0, PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.is_edited_)}},
    // .google.protobuf.Timestamp edited_at = 15;
    {::_pbi::TcParser::FastMtS1,
     {122, 1, 2, PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.edited_at_)}},
    // string reply_to_message_id = 16;
    {::_pbi::TcParser::FastUS2,
     {386, 63, 0, PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.reply_to_message_id_)}},
    // repeated string attachments = 17;
    {::_pbi::TcParser::FastUR2,
     {394, 63, 0, PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.attachments_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string message_id = 1;
    {PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.message_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .blokus.ChatType type = 2;
    {PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .blokus.ChatScope scope = 3;
    {PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.scope_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string sender_username = 4;
    {PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.sender_username_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string sender_display_name = 5;
    {PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.sender_display_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .blokus.PlayerColor sender_color = 6;
    {PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.sender_color_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string content = 7;
    {PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.content_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated string mentions = 8;
    {PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.mentions_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // repeated .blokus.ChatEmote emotes = 9;
    {PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.emotes_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp timestamp = 10;
    {PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.timestamp_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 room_id = 11;
    {PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.room_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string target_username = 12;
    {PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.target_username_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .blokus.MessageStatus status = 13;
    {PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.status_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bool is_edited = 14;
    {PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.is_edited_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .google.protobuf.Timestamp edited_at = 15;
    {PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.edited_at_), _Internal::kHasBitsOffset + 1, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string reply_to_message_id = 16;
    {PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.reply_to_message_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated string attachments = 17;
    {PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.attachments_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // map<string, string> metadata = 18;
    {PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.metadata_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
  }}, {{
    {::_pbi::TcParser::GetTable<::blokus::ChatEmote>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(ChatMessage()._impl_.metadata_)>(
        1, 0, 0, 9,
        9)},
  }}, {{
    "\22\12\0\0\17\23\0\7\10\0\0\0\17\0\0\0\23\13\10\0\0\0\0\0"
    "blokus.ChatMessage"
    "message_id"
    "sender_username"
    "sender_display_name"
    "content"
    "mentions"
    "target_username"
    "reply_to_message_id"
    "attachments"
    "metadata"
  }},
};

PROTOBUF_NOINLINE void ChatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.ChatMessage)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mentions_.Clear();
  _impl_.emotes_.Clear();
  _impl_.attachments_.Clear();
  _impl_.metadata_.Clear();
  _impl_.message_id_.ClearToEmpty();
  _impl_.sender_username_.ClearToEmpty();
  _impl_.sender_display_name_.ClearToEmpty();
  _impl_.content_.ClearToEmpty();
  _impl_.target_username_.ClearToEmpty();
  _impl_.reply_to_message_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.timestamp_ != nullptr);
      _impl_.timestamp_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.edited_at_ != nullptr);
      _impl_.edited_at_->Clear();
    }
  }
  ::memset(&_impl_.type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.is_edited_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.is_edited_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ChatMessage::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ChatMessage& this_ = static_cast<const ChatMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ChatMessage::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ChatMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.ChatMessage)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string message_id = 1;
          if (!this_._internal_message_id().empty()) {
            const std::string& _s = this_._internal_message_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ChatMessage.message_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // .blokus.ChatType type = 2;
          if (this_._internal_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                2, this_._internal_type(), target);
          }

          // .blokus.ChatScope scope = 3;
          if (this_._internal_scope() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                3, this_._internal_scope(), target);
          }

          // string sender_username = 4;
          if (!this_._internal_sender_username().empty()) {
            const std::string& _s = this_._internal_sender_username();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ChatMessage.sender_username");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // string sender_display_name = 5;
          if (!this_._internal_sender_display_name().empty()) {
            const std::string& _s = this_._internal_sender_display_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ChatMessage.sender_display_name");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // .blokus.PlayerColor sender_color = 6;
          if (this_._internal_sender_color() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                6, this_._internal_sender_color(), target);
          }

          // string content = 7;
          if (!this_._internal_content().empty()) {
            const std::string& _s = this_._internal_content();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ChatMessage.content");
            target = stream->WriteStringMaybeAliased(7, _s, target);
          }

          // repeated string mentions = 8;
          for (int i = 0, n = this_._internal_mentions_size(); i < n; ++i) {
            const auto& s = this_._internal_mentions().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ChatMessage.mentions");
            target = stream->WriteString(8, s, target);
          }

          // repeated .blokus.ChatEmote emotes = 9;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_emotes_size());
               i < n; i++) {
            const auto& repfield = this_._internal_emotes().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    9, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp timestamp = 10;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                10, *this_._impl_.timestamp_, this_._impl_.timestamp_->GetCachedSize(), target,
                stream);
          }

          // int32 room_id = 11;
          if (this_._internal_room_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<11>(
                    stream, this_._internal_room_id(), target);
          }

          // string target_username = 12;
          if (!this_._internal_target_username().empty()) {
            const std::string& _s = this_._internal_target_username();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ChatMessage.target_username");
            target = stream->WriteStringMaybeAliased(12, _s, target);
          }

          // .blokus.MessageStatus status = 13;
          if (this_._internal_status() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                13, this_._internal_status(), target);
          }

          // bool is_edited = 14;
          if (this_._internal_is_edited() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                14, this_._internal_is_edited(), target);
          }

          // .google.protobuf.Timestamp edited_at = 15;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                15, *this_._impl_.edited_at_, this_._impl_.edited_at_->GetCachedSize(), target,
                stream);
          }

          // string reply_to_message_id = 16;
          if (!this_._internal_reply_to_message_id().empty()) {
            const std::string& _s = this_._internal_reply_to_message_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ChatMessage.reply_to_message_id");
            target = stream->WriteStringMaybeAliased(16, _s, target);
          }

          // repeated string attachments = 17;
          for (int i = 0, n = this_._internal_attachments_size(); i < n; ++i) {
            const auto& s = this_._internal_attachments().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ChatMessage.attachments");
            target = stream->WriteString(17, s, target);
          }

          // map<string, string> metadata = 18;
          if (!this_._internal_metadata().empty()) {
            using MapType = ::google::protobuf::Map<std::string, std::string>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_STRING>;
            const auto& field = this_._internal_metadata();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    18, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ChatMessage.metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ChatMessage.metadata");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    18, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ChatMessage.metadata");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ChatMessage.metadata");
              }
            }
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.ChatMessage)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ChatMessage::ByteSizeLong(const MessageLite& base) {
          const ChatMessage& this_ = static_cast<const ChatMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ChatMessage::ByteSizeLong() const {
          const ChatMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.ChatMessage)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string mentions = 8;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_mentions().size());
              for (int i = 0, n = this_._internal_mentions().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_mentions().Get(i));
              }
            }
            // repeated .blokus.ChatEmote emotes = 9;
            {
              total_size += 1UL * this_._internal_emotes_size();
              for (const auto& msg : this_._internal_emotes()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated string attachments = 17;
            {
              total_size +=
                  2 * ::google::protobuf::internal::FromIntSize(this_._internal_attachments().size());
              for (int i = 0, n = this_._internal_attachments().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_attachments().Get(i));
              }
            }
            // map<string, string> metadata = 18;
            {
              total_size +=
                  2 * ::google::protobuf::internal::FromIntSize(this_._internal_metadata_size());
              for (const auto& entry : this_._internal_metadata()) {
                total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
              }
            }
          }
           {
            // string message_id = 1;
            if (!this_._internal_message_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_message_id());
            }
            // string sender_username = 4;
            if (!this_._internal_sender_username().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_sender_username());
            }
            // string sender_display_name = 5;
            if (!this_._internal_sender_display_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_sender_display_name());
            }
            // string content = 7;
            if (!this_._internal_content().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_content());
            }
            // string target_username = 12;
            if (!this_._internal_target_username().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_target_username());
            }
            // string reply_to_message_id = 16;
            if (!this_._internal_reply_to_message_id().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_reply_to_message_id());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .google.protobuf.Timestamp timestamp = 10;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.timestamp_);
            }
            // .google.protobuf.Timestamp edited_at = 15;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.edited_at_);
            }
          }
           {
            // .blokus.ChatType type = 2;
            if (this_._internal_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
            }
            // .blokus.ChatScope scope = 3;
            if (this_._internal_scope() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_scope());
            }
            // .blokus.PlayerColor sender_color = 6;
            if (this_._internal_sender_color() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_sender_color());
            }
            // int32 room_id = 11;
            if (this_._internal_room_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_room_id());
            }
            // .blokus.MessageStatus status = 13;
            if (this_._internal_status() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_status());
            }
            // bool is_edited = 14;
            if (this_._internal_is_edited() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ChatMessage::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ChatMessage*>(&to_msg);
  auto& from = static_cast<const ChatMessage&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.ChatMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_mentions()->MergeFrom(from._internal_mentions());
  _this->_internal_mutable_emotes()->MergeFrom(
      from._internal_emotes());
  _this->_internal_mutable_attachments()->MergeFrom(from._internal_attachments());
  _this->_impl_.metadata_.MergeFrom(from._impl_.metadata_);
  if (!from._internal_message_id().empty()) {
    _this->_internal_set_message_id(from._internal_message_id());
  }
  if (!from._internal_sender_username().empty()) {
    _this->_internal_set_sender_username(from._internal_sender_username());
  }
  if (!from._internal_sender_display_name().empty()) {
    _this->_internal_set_sender_display_name(from._internal_sender_display_name());
  }
  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (!from._internal_target_username().empty()) {
    _this->_internal_set_target_username(from._internal_target_username());
  }
  if (!from._internal_reply_to_message_id().empty()) {
    _this->_internal_set_reply_to_message_id(from._internal_reply_to_message_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.timestamp_ != nullptr);
      if (_this->_impl_.timestamp_ == nullptr) {
        _this->_impl_.timestamp_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.timestamp_);
      } else {
        _this->_impl_.timestamp_->MergeFrom(*from._impl_.timestamp_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.edited_at_ != nullptr);
      if (_this->_impl_.edited_at_ == nullptr) {
        _this->_impl_.edited_at_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.edited_at_);
      } else {
        _this->_impl_.edited_at_->MergeFrom(*from._impl_.edited_at_);
      }
    }
  }
  if (from._internal_type() != 0) {
    _this->_impl_.type_ = from._impl_.type_;
  }
  if (from._internal_scope() != 0) {
    _this->_impl_.scope_ = from._impl_.scope_;
  }
  if (from._internal_sender_color() != 0) {
    _this->_impl_.sender_color_ = from._impl_.sender_color_;
  }
  if (from._internal_room_id() != 0) {
    _this->_impl_.room_id_ = from._impl_.room_id_;
  }
  if (from._internal_status() != 0) {
    _this->_impl_.status_ = from._impl_.status_;
  }
  if (from._internal_is_edited() != 0) {
    _this->_impl_.is_edited_ = from._impl_.is_edited_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ChatMessage::CopyFrom(const ChatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.ChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ChatMessage::InternalSwap(ChatMessage* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.mentions_.InternalSwap(&other->_impl_.mentions_);
  _impl_.emotes_.InternalSwap(&other->_impl_.emotes_);
  _impl_.attachments_.InternalSwap(&other->_impl_.attachments_);
  _impl_.metadata_.InternalSwap(&other->_impl_.metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_id_, &other->_impl_.message_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_username_, &other->_impl_.sender_username_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_display_name_, &other->_impl_.sender_display_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.content_, &other->_impl_.content_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.target_username_, &other->_impl_.target_username_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.reply_to_message_id_, &other->_impl_.reply_to_message_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.is_edited_)
      + sizeof(ChatMessage::_impl_.is_edited_)
      - PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::google::protobuf::Metadata ChatMessage::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ChatEmote::_Internal {
 public:
};

ChatEmote::ChatEmote(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.ChatEmote)
}
inline PROTOBUF_NDEBUG_INLINE ChatEmote::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::ChatEmote& from_msg)
      : emote_id_(arena, from.emote_id_),
        emote_name_(arena, from.emote_name_),
        emote_url_(arena, from.emote_url_),
        _cached_size_{0} {}

ChatEmote::ChatEmote(
    ::google::protobuf::Arena* arena,
    const ChatEmote& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ChatEmote* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, start_position_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, start_position_),
           offsetof(Impl_, end_position_) -
               offsetof(Impl_, start_position_) +
               sizeof(Impl_::end_position_));

  // @@protoc_insertion_point(copy_constructor:blokus.ChatEmote)
}
inline PROTOBUF_NDEBUG_INLINE ChatEmote::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : emote_id_(arena),
        emote_name_(arena),
        emote_url_(arena),
        _cached_size_{0} {}

inline void ChatEmote::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, start_position_),
           0,
           offsetof(Impl_, end_position_) -
               offsetof(Impl_, start_position_) +
               sizeof(Impl_::end_position_));
}
ChatEmote::~ChatEmote() {
  // @@protoc_insertion_point(destructor:blokus.ChatEmote)
  SharedDtor(*this);
}
inline void ChatEmote::SharedDtor(MessageLite& self) {
  ChatEmote& this_ = static_cast<ChatEmote&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.emote_id_.Destroy();
  this_._impl_.emote_name_.Destroy();
  this_._impl_.emote_url_.Destroy();
  this_._impl_.~Impl_();
}

inline void* ChatEmote::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ChatEmote(arena);
}
constexpr auto ChatEmote::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ChatEmote),
                                            alignof(ChatEmote));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ChatEmote::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ChatEmote_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ChatEmote::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ChatEmote>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ChatEmote::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ChatEmote>(), &ChatEmote::ByteSizeLong,
            &ChatEmote::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ChatEmote, _impl_._cached_size_),
        false,
    },
    &ChatEmote::kDescriptorMethods,
    &descriptor_table_chat_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ChatEmote::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 52, 2> ChatEmote::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::ChatEmote>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string emote_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ChatEmote, _impl_.emote_id_)}},
    // string emote_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ChatEmote, _impl_.emote_name_)}},
    // string emote_url = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ChatEmote, _impl_.emote_url_)}},
    // int32 start_position = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ChatEmote, _impl_.start_position_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(ChatEmote, _impl_.start_position_)}},
    // int32 end_position = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ChatEmote, _impl_.end_position_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(ChatEmote, _impl_.end_position_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string emote_id = 1;
    {PROTOBUF_FIELD_OFFSET(ChatEmote, _impl_.emote_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string emote_name = 2;
    {PROTOBUF_FIELD_OFFSET(ChatEmote, _impl_.emote_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string emote_url = 3;
    {PROTOBUF_FIELD_OFFSET(ChatEmote, _impl_.emote_url_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 start_position = 4;
    {PROTOBUF_FIELD_OFFSET(ChatEmote, _impl_.start_position_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 end_position = 5;
    {PROTOBUF_FIELD_OFFSET(ChatEmote, _impl_.end_position_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\20\10\12\11\0\0\0\0"
    "blokus.ChatEmote"
    "emote_id"
    "emote_name"
    "emote_url"
  }},
};

PROTOBUF_NOINLINE void ChatEmote::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.ChatEmote)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.emote_id_.ClearToEmpty();
  _impl_.emote_name_.ClearToEmpty();
  _impl_.emote_url_.ClearToEmpty();
  ::memset(&_impl_.start_position_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.end_position_) -
      reinterpret_cast<char*>(&_impl_.start_position_)) + sizeof(_impl_.end_position_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ChatEmote::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ChatEmote& this_ = static_cast<const ChatEmote&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ChatEmote::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ChatEmote& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.ChatEmote)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string emote_id = 1;
          if (!this_._internal_emote_id().empty()) {
            const std::string& _s = this_._internal_emote_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ChatEmote.emote_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string emote_name = 2;
          if (!this_._internal_emote_name().empty()) {
            const std::string& _s = this_._internal_emote_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ChatEmote.emote_name");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string emote_url = 3;
          if (!this_._internal_emote_url().empty()) {
            const std::string& _s = this_._internal_emote_url();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ChatEmote.emote_url");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // int32 start_position = 4;
          if (this_._internal_start_position() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_start_position(), target);
          }

          // int32 end_position = 5;
          if (this_._internal_end_position() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<5>(
                    stream, this_._internal_end_position(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.ChatEmote)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ChatEmote::ByteSizeLong(const MessageLite& base) {
          const ChatEmote& this_ = static_cast<const ChatEmote&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ChatEmote::ByteSizeLong() const {
          const ChatEmote& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.ChatEmote)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string emote_id = 1;
            if (!this_._internal_emote_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_emote_id());
            }
            // string emote_name = 2;
            if (!this_._internal_emote_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_emote_name());
            }
            // string emote_url = 3;
            if (!this_._internal_emote_url().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_emote_url());
            }
            // int32 start_position = 4;
            if (this_._internal_start_position() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_start_position());
            }
            // int32 end_position = 5;
            if (this_._internal_end_position() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_end_position());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ChatEmote::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ChatEmote*>(&to_msg);
  auto& from = static_cast<const ChatEmote&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.ChatEmote)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_emote_id().empty()) {
    _this->_internal_set_emote_id(from._internal_emote_id());
  }
  if (!from._internal_emote_name().empty()) {
    _this->_internal_set_emote_name(from._internal_emote_name());
  }
  if (!from._internal_emote_url().empty()) {
    _this->_internal_set_emote_url(from._internal_emote_url());
  }
  if (from._internal_start_position() != 0) {
    _this->_impl_.start_position_ = from._impl_.start_position_;
  }
  if (from._internal_end_position() != 0) {
    _this->_impl_.end_position_ = from._impl_.end_position_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ChatEmote::CopyFrom(const ChatEmote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.ChatEmote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ChatEmote::InternalSwap(ChatEmote* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.emote_id_, &other->_impl_.emote_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.emote_name_, &other->_impl_.emote_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.emote_url_, &other->_impl_.emote_url_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChatEmote, _impl_.end_position_)
      + sizeof(ChatEmote::_impl_.end_position_)
      - PROTOBUF_FIELD_OFFSET(ChatEmote, _impl_.start_position_)>(
          reinterpret_cast<char*>(&_impl_.start_position_),
          reinterpret_cast<char*>(&other->_impl_.start_position_));
}

::google::protobuf::Metadata ChatEmote::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SendChatRequest::_Internal {
 public:
};

SendChatRequest::SendChatRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.SendChatRequest)
}
inline PROTOBUF_NDEBUG_INLINE SendChatRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::SendChatRequest& from_msg)
      : attachments_{visibility, arena, from.attachments_},
        content_(arena, from.content_),
        target_username_(arena, from.target_username_),
        reply_to_message_id_(arena, from.reply_to_message_id_),
        client_message_id_(arena, from.client_message_id_),
        _cached_size_{0} {}

SendChatRequest::SendChatRequest(
    ::google::protobuf::Arena* arena,
    const SendChatRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SendChatRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, type_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, type_),
           offsetof(Impl_, silent_) -
               offsetof(Impl_, type_) +
               sizeof(Impl_::silent_));

  // @@protoc_insertion_point(copy_constructor:blokus.SendChatRequest)
}
inline PROTOBUF_NDEBUG_INLINE SendChatRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : attachments_{visibility, arena},
        content_(arena),
        target_username_(arena),
        reply_to_message_id_(arena),
        client_message_id_(arena),
        _cached_size_{0} {}

inline void SendChatRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, type_),
           0,
           offsetof(Impl_, silent_) -
               offsetof(Impl_, type_) +
               sizeof(Impl_::silent_));
}
SendChatRequest::~SendChatRequest() {
  // @@protoc_insertion_point(destructor:blokus.SendChatRequest)
  SharedDtor(*this);
}
inline void SendChatRequest::SharedDtor(MessageLite& self) {
  SendChatRequest& this_ = static_cast<SendChatRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.content_.Destroy();
  this_._impl_.target_username_.Destroy();
  this_._impl_.reply_to_message_id_.Destroy();
  this_._impl_.client_message_id_.Destroy();
  this_._impl_.~Impl_();
}

inline void* SendChatRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SendChatRequest(arena);
}
constexpr auto SendChatRequest::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(SendChatRequest, _impl_.attachments_) +
          decltype(SendChatRequest::_impl_.attachments_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(SendChatRequest), alignof(SendChatRequest), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&SendChatRequest::PlacementNew_,
                                 sizeof(SendChatRequest),
                                 alignof(SendChatRequest));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SendChatRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SendChatRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SendChatRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SendChatRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SendChatRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SendChatRequest>(), &SendChatRequest::ByteSizeLong,
            &SendChatRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SendChatRequest, _impl_._cached_size_),
        false,
    },
    &SendChatRequest::kDescriptorMethods,
    &descriptor_table_chat_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SendChatRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 0, 108, 2> SendChatRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::SendChatRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .blokus.ChatType type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SendChatRequest, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SendChatRequest, _impl_.type_)}},
    // .blokus.ChatScope scope = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SendChatRequest, _impl_.scope_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(SendChatRequest, _impl_.scope_)}},
    // string content = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(SendChatRequest, _impl_.content_)}},
    // int32 room_id = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SendChatRequest, _impl_.room_id_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(SendChatRequest, _impl_.room_id_)}},
    // string target_username = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(SendChatRequest, _impl_.target_username_)}},
    // string reply_to_message_id = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(SendChatRequest, _impl_.reply_to_message_id_)}},
    // repeated string attachments = 7;
    {::_pbi::TcParser::FastUR1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(SendChatRequest, _impl_.attachments_)}},
    // bool silent = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SendChatRequest, _impl_.silent_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(SendChatRequest, _impl_.silent_)}},
    // string client_message_id = 9;
    {::_pbi::TcParser::FastUS1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(SendChatRequest, _impl_.client_message_id_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .blokus.ChatType type = 1;
    {PROTOBUF_FIELD_OFFSET(SendChatRequest, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .blokus.ChatScope scope = 2;
    {PROTOBUF_FIELD_OFFSET(SendChatRequest, _impl_.scope_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string content = 3;
    {PROTOBUF_FIELD_OFFSET(SendChatRequest, _impl_.content_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 room_id = 4;
    {PROTOBUF_FIELD_OFFSET(SendChatRequest, _impl_.room_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string target_username = 5;
    {PROTOBUF_FIELD_OFFSET(SendChatRequest, _impl_.target_username_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string reply_to_message_id = 6;
    {PROTOBUF_FIELD_OFFSET(SendChatRequest, _impl_.reply_to_message_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated string attachments = 7;
    {PROTOBUF_FIELD_OFFSET(SendChatRequest, _impl_.attachments_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // bool silent = 8;
    {PROTOBUF_FIELD_OFFSET(SendChatRequest, _impl_.silent_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string client_message_id = 9;
    {PROTOBUF_FIELD_OFFSET(SendChatRequest, _impl_.client_message_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\26\0\0\7\0\17\23\13\0\21\0\0\0\0\0\0"
    "blokus.SendChatRequest"
    "content"
    "target_username"
    "reply_to_message_id"
    "attachments"
    "client_message_id"
  }},
};

PROTOBUF_NOINLINE void SendChatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.SendChatRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attachments_.Clear();
  _impl_.content_.ClearToEmpty();
  _impl_.target_username_.ClearToEmpty();
  _impl_.reply_to_message_id_.ClearToEmpty();
  _impl_.client_message_id_.ClearToEmpty();
  ::memset(&_impl_.type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.silent_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.silent_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SendChatRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SendChatRequest& this_ = static_cast<const SendChatRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SendChatRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SendChatRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.SendChatRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .blokus.ChatType type = 1;
          if (this_._internal_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_type(), target);
          }

          // .blokus.ChatScope scope = 2;
          if (this_._internal_scope() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                2, this_._internal_scope(), target);
          }

          // string content = 3;
          if (!this_._internal_content().empty()) {
            const std::string& _s = this_._internal_content();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.SendChatRequest.content");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // int32 room_id = 4;
          if (this_._internal_room_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_room_id(), target);
          }

          // string target_username = 5;
          if (!this_._internal_target_username().empty()) {
            const std::string& _s = this_._internal_target_username();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.SendChatRequest.target_username");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // string reply_to_message_id = 6;
          if (!this_._internal_reply_to_message_id().empty()) {
            const std::string& _s = this_._internal_reply_to_message_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.SendChatRequest.reply_to_message_id");
            target = stream->WriteStringMaybeAliased(6, _s, target);
          }

          // repeated string attachments = 7;
          for (int i = 0, n = this_._internal_attachments_size(); i < n; ++i) {
            const auto& s = this_._internal_attachments().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.SendChatRequest.attachments");
            target = stream->WriteString(7, s, target);
          }

          // bool silent = 8;
          if (this_._internal_silent() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                8, this_._internal_silent(), target);
          }

          // string client_message_id = 9;
          if (!this_._internal_client_message_id().empty()) {
            const std::string& _s = this_._internal_client_message_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.SendChatRequest.client_message_id");
            target = stream->WriteStringMaybeAliased(9, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.SendChatRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SendChatRequest::ByteSizeLong(const MessageLite& base) {
          const SendChatRequest& this_ = static_cast<const SendChatRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SendChatRequest::ByteSizeLong() const {
          const SendChatRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.SendChatRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string attachments = 7;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_attachments().size());
              for (int i = 0, n = this_._internal_attachments().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_attachments().Get(i));
              }
            }
          }
           {
            // string content = 3;
            if (!this_._internal_content().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_content());
            }
            // string target_username = 5;
            if (!this_._internal_target_username().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_target_username());
            }
            // string reply_to_message_id = 6;
            if (!this_._internal_reply_to_message_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_reply_to_message_id());
            }
            // string client_message_id = 9;
            if (!this_._internal_client_message_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_client_message_id());
            }
            // .blokus.ChatType type = 1;
            if (this_._internal_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
            }
            // .blokus.ChatScope scope = 2;
            if (this_._internal_scope() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_scope());
            }
            // int32 room_id = 4;
            if (this_._internal_room_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_room_id());
            }
            // bool silent = 8;
            if (this_._internal_silent() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SendChatRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SendChatRequest*>(&to_msg);
  auto& from = static_cast<const SendChatRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.SendChatRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_attachments()->MergeFrom(from._internal_attachments());
  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (!from._internal_target_username().empty()) {
    _this->_internal_set_target_username(from._internal_target_username());
  }
  if (!from._internal_reply_to_message_id().empty()) {
    _this->_internal_set_reply_to_message_id(from._internal_reply_to_message_id());
  }
  if (!from._internal_client_message_id().empty()) {
    _this->_internal_set_client_message_id(from._internal_client_message_id());
  }
  if (from._internal_type() != 0) {
    _this->_impl_.type_ = from._impl_.type_;
  }
  if (from._internal_scope() != 0) {
    _this->_impl_.scope_ = from._impl_.scope_;
  }
  if (from._internal_room_id() != 0) {
    _this->_impl_.room_id_ = from._impl_.room_id_;
  }
  if (from._internal_silent() != 0) {
    _this->_impl_.silent_ = from._impl_.silent_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SendChatRequest::CopyFrom(const SendChatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.SendChatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SendChatRequest::InternalSwap(SendChatRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.attachments_.InternalSwap(&other->_impl_.attachments_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.content_, &other->_impl_.content_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.target_username_, &other->_impl_.target_username_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.reply_to_message_id_, &other->_impl_.reply_to_message_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.client_message_id_, &other->_impl_.client_message_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SendChatRequest, _impl_.silent_)
      + sizeof(SendChatRequest::_impl_.silent_)
      - PROTOBUF_FIELD_OFFSET(SendChatRequest, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::google::protobuf::Metadata SendChatRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SendChatResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SendChatResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SendChatResponse, _impl_._has_bits_);
};

void SendChatResponse::clear_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_ != nullptr) _impl_.result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void SendChatResponse::clear_sent_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.sent_at_ != nullptr) _impl_.sent_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
SendChatResponse::SendChatResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.SendChatResponse)
}
inline PROTOBUF_NDEBUG_INLINE SendChatResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::SendChatResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        blocked_words_{visibility, arena, from.blocked_words_},
        message_id_(arena, from.message_id_),
        client_message_id_(arena, from.client_message_id_),
        filtered_content_(arena, from.filtered_content_) {}

SendChatResponse::SendChatResponse(
    ::google::protobuf::Arena* arena,
    const SendChatResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SendChatResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::blokus::Result>(
                              arena, *from._impl_.result_)
                        : nullptr;
  _impl_.sent_at_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.sent_at_)
                        : nullptr;
  _impl_.cooldown_seconds_ = from._impl_.cooldown_seconds_;

  // @@protoc_insertion_point(copy_constructor:blokus.SendChatResponse)
}
inline PROTOBUF_NDEBUG_INLINE SendChatResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        blocked_words_{visibility, arena},
        message_id_(arena),
        client_message_id_(arena),
        filtered_content_(arena) {}

inline void SendChatResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, result_),
           0,
           offsetof(Impl_, cooldown_seconds_) -
               offsetof(Impl_, result_) +
               sizeof(Impl_::cooldown_seconds_));
}
SendChatResponse::~SendChatResponse() {
  // @@protoc_insertion_point(destructor:blokus.SendChatResponse)
  SharedDtor(*this);
}
inline void SendChatResponse::SharedDtor(MessageLite& self) {
  SendChatResponse& this_ = static_cast<SendChatResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.message_id_.Destroy();
  this_._impl_.client_message_id_.Destroy();
  this_._impl_.filtered_content_.Destroy();
  delete this_._impl_.result_;
  delete this_._impl_.sent_at_;
  this_._impl_.~Impl_();
}

inline void* SendChatResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SendChatResponse(arena);
}
constexpr auto SendChatResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(SendChatResponse, _impl_.blocked_words_) +
          decltype(SendChatResponse::_impl_.blocked_words_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(SendChatResponse), alignof(SendChatResponse), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&SendChatResponse::PlacementNew_,
                                 sizeof(SendChatResponse),
                                 alignof(SendChatResponse));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SendChatResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SendChatResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SendChatResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SendChatResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SendChatResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SendChatResponse>(), &SendChatResponse::ByteSizeLong,
            &SendChatResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SendChatResponse, _impl_._cached_size_),
        false,
    },
    &SendChatResponse::kDescriptorMethods,
    &descriptor_table_chat_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SendChatResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 2, 88, 2> SendChatResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SendChatResponse, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::SendChatResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .blokus.Result result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SendChatResponse, _impl_.result_)}},
    // string message_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(SendChatResponse, _impl_.message_id_)}},
    // string client_message_id = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(SendChatResponse, _impl_.client_message_id_)}},
    // .google.protobuf.Timestamp sent_at = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 1, PROTOBUF_FIELD_OFFSET(SendChatResponse, _impl_.sent_at_)}},
    // string filtered_content = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(SendChatResponse, _impl_.filtered_content_)}},
    // repeated string blocked_words = 6;
    {::_pbi::TcParser::FastUR1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(SendChatResponse, _impl_.blocked_words_)}},
    // int32 cooldown_seconds = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SendChatResponse, _impl_.cooldown_seconds_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(SendChatResponse, _impl_.cooldown_seconds_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .blokus.Result result = 1;
    {PROTOBUF_FIELD_OFFSET(SendChatResponse, _impl_.result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string message_id = 2;
    {PROTOBUF_FIELD_OFFSET(SendChatResponse, _impl_.message_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string client_message_id = 3;
    {PROTOBUF_FIELD_OFFSET(SendChatResponse, _impl_.client_message_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp sent_at = 4;
    {PROTOBUF_FIELD_OFFSET(SendChatResponse, _impl_.sent_at_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string filtered_content = 5;
    {PROTOBUF_FIELD_OFFSET(SendChatResponse, _impl_.filtered_content_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated string blocked_words = 6;
    {PROTOBUF_FIELD_OFFSET(SendChatResponse, _impl_.blocked_words_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // int32 cooldown_seconds = 7;
    {PROTOBUF_FIELD_OFFSET(SendChatResponse, _impl_.cooldown_seconds_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::blokus::Result>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\27\0\12\21\0\20\15\0"
    "blokus.SendChatResponse"
    "message_id"
    "client_message_id"
    "filtered_content"
    "blocked_words"
  }},
};

PROTOBUF_NOINLINE void SendChatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.SendChatResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.blocked_words_.Clear();
  _impl_.message_id_.ClearToEmpty();
  _impl_.client_message_id_.ClearToEmpty();
  _impl_.filtered_content_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.result_ != nullptr);
      _impl_.result_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.sent_at_ != nullptr);
      _impl_.sent_at_->Clear();
    }
  }
  _impl_.cooldown_seconds_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SendChatResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SendChatResponse& this_ = static_cast<const SendChatResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SendChatResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SendChatResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.SendChatResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .blokus.Result result = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.result_, this_._impl_.result_->GetCachedSize(), target,
                stream);
          }

          // string message_id = 2;
          if (!this_._internal_message_id().empty()) {
            const std::string& _s = this_._internal_message_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.SendChatResponse.message_id");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string client_message_id = 3;
          if (!this_._internal_client_message_id().empty()) {
            const std::string& _s = this_._internal_client_message_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.SendChatResponse.client_message_id");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // .google.protobuf.Timestamp sent_at = 4;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.sent_at_, this_._impl_.sent_at_->GetCachedSize(), target,
                stream);
          }

          // string filtered_content = 5;
          if (!this_._internal_filtered_content().empty()) {
            const std::string& _s = this_._internal_filtered_content();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.SendChatResponse.filtered_content");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // repeated string blocked_words = 6;
          for (int i = 0, n = this_._internal_blocked_words_size(); i < n; ++i) {
            const auto& s = this_._internal_blocked_words().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.SendChatResponse.blocked_words");
            target = stream->WriteString(6, s, target);
          }

          // int32 cooldown_seconds = 7;
          if (this_._internal_cooldown_seconds() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<7>(
                    stream, this_._internal_cooldown_seconds(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.SendChatResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SendChatResponse::ByteSizeLong(const MessageLite& base) {
          const SendChatResponse& this_ = static_cast<const SendChatResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SendChatResponse::ByteSizeLong() const {
          const SendChatResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.SendChatResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string blocked_words = 6;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_blocked_words().size());
              for (int i = 0, n = this_._internal_blocked_words().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_blocked_words().Get(i));
              }
            }
          }
           {
            // string message_id = 2;
            if (!this_._internal_message_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_message_id());
            }
            // string client_message_id = 3;
            if (!this_._internal_client_message_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_client_message_id());
            }
            // string filtered_content = 5;
            if (!this_._internal_filtered_content().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_filtered_content());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .blokus.Result result = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_);
            }
            // .google.protobuf.Timestamp sent_at = 4;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.sent_at_);
            }
          }
           {
            // int32 cooldown_seconds = 7;
            if (this_._internal_cooldown_seconds() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_cooldown_seconds());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SendChatResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SendChatResponse*>(&to_msg);
  auto& from = static_cast<const SendChatResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.SendChatResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_blocked_words()->MergeFrom(from._internal_blocked_words());
  if (!from._internal_message_id().empty()) {
    _this->_internal_set_message_id(from._internal_message_id());
  }
  if (!from._internal_client_message_id().empty()) {
    _this->_internal_set_client_message_id(from._internal_client_message_id());
  }
  if (!from._internal_filtered_content().empty()) {
    _this->_internal_set_filtered_content(from._internal_filtered_content());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.result_ != nullptr);
      if (_this->_impl_.result_ == nullptr) {
        _this->_impl_.result_ =
            ::google::protobuf::Message::CopyConstruct<::blokus::Result>(arena, *from._impl_.result_);
      } else {
        _this->_impl_.result_->MergeFrom(*from._impl_.result_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.sent_at_ != nullptr);
      if (_this->_impl_.sent_at_ == nullptr) {
        _this->_impl_.sent_at_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.sent_at_);
      } else {
        _this->_impl_.sent_at_->MergeFrom(*from._impl_.sent_at_);
      }
    }
  }
  if (from._internal_cooldown_seconds() != 0) {
    _this->_impl_.cooldown_seconds_ = from._impl_.cooldown_seconds_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SendChatResponse::CopyFrom(const SendChatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.SendChatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SendChatResponse::InternalSwap(SendChatResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.blocked_words_.InternalSwap(&other->_impl_.blocked_words_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_id_, &other->_impl_.message_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.client_message_id_, &other->_impl_.client_message_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.filtered_content_, &other->_impl_.filtered_content_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SendChatResponse, _impl_.cooldown_seconds_)
      + sizeof(SendChatResponse::_impl_.cooldown_seconds_)
      - PROTOBUF_FIELD_OFFSET(SendChatResponse, _impl_.result_)>(
          reinterpret_cast<char*>(&_impl_.result_),
          reinterpret_cast<char*>(&other->_impl_.result_));
}

::google::protobuf::Metadata SendChatResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ChatNotification::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ChatNotification>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ChatNotification, _impl_._has_bits_);
};

ChatNotification::ChatNotification(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.ChatNotification)
}
inline PROTOBUF_NDEBUG_INLINE ChatNotification::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::ChatNotification& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

ChatNotification::ChatNotification(
    ::google::protobuf::Arena* arena,
    const ChatNotification& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ChatNotification* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.message_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::blokus::ChatMessage>(
                              arena, *from._impl_.message_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, should_notify_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, should_notify_),
           offsetof(Impl_, unread_count_) -
               offsetof(Impl_, should_notify_) +
               sizeof(Impl_::unread_count_));

  // @@protoc_insertion_point(copy_constructor:blokus.ChatNotification)
}
inline PROTOBUF_NDEBUG_INLINE ChatNotification::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ChatNotification::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, message_),
           0,
           offsetof(Impl_, unread_count_) -
               offsetof(Impl_, message_) +
               sizeof(Impl_::unread_count_));
}
ChatNotification::~ChatNotification() {
  // @@protoc_insertion_point(destructor:blokus.ChatNotification)
  SharedDtor(*this);
}
inline void ChatNotification::SharedDtor(MessageLite& self) {
  ChatNotification& this_ = static_cast<ChatNotification&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.message_;
  this_._impl_.~Impl_();
}

inline void* ChatNotification::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ChatNotification(arena);
}
constexpr auto ChatNotification::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(ChatNotification),
                                            alignof(ChatNotification));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ChatNotification::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ChatNotification_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ChatNotification::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ChatNotification>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ChatNotification::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ChatNotification>(), &ChatNotification::ByteSizeLong,
            &ChatNotification::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ChatNotification, _impl_._cached_size_),
        false,
    },
    &ChatNotification::kDescriptorMethods,
    &descriptor_table_chat_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ChatNotification::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 1, 0, 2> ChatNotification::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ChatNotification, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::ChatNotification>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .blokus.ChatMessage message = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ChatNotification, _impl_.message_)}},
    // bool should_notify = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ChatNotification, _impl_.should_notify_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ChatNotification, _impl_.should_notify_)}},
    // bool mentioned = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ChatNotification, _impl_.mentioned_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(ChatNotification, _impl_.mentioned_)}},
    // bool is_important = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ChatNotification, _impl_.is_important_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(ChatNotification, _impl_.is_important_)}},
    // int32 unread_count = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ChatNotification, _impl_.unread_count_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(ChatNotification, _impl_.unread_count_)}},
    // bool is_first_message = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ChatNotification, _impl_.is_first_message_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(ChatNotification, _impl_.is_first_message_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .blokus.ChatMessage message = 1;
    {PROTOBUF_FIELD_OFFSET(ChatNotification, _impl_.message_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool should_notify = 2;
    {PROTOBUF_FIELD_OFFSET(ChatNotification, _impl_.should_notify_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool mentioned = 3;
    {PROTOBUF_FIELD_OFFSET(ChatNotification, _impl_.mentioned_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool is_important = 4;
    {PROTOBUF_FIELD_OFFSET(ChatNotification, _impl_.is_important_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 unread_count = 5;
    {PROTOBUF_FIELD_OFFSET(ChatNotification, _impl_.unread_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool is_first_message = 6;
    {PROTOBUF_FIELD_OFFSET(ChatNotification, _impl_.is_first_message_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::blokus::ChatMessage>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void ChatNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.ChatNotification)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.message_ != nullptr);
    _impl_.message_->Clear();
  }
  ::memset(&_impl_.should_notify_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.unread_count_) -
      reinterpret_cast<char*>(&_impl_.should_notify_)) + sizeof(_impl_.unread_count_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ChatNotification::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ChatNotification& this_ = static_cast<const ChatNotification&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ChatNotification::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ChatNotification& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.ChatNotification)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .blokus.ChatMessage message = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.message_, this_._impl_.message_->GetCachedSize(), target,
                stream);
          }

          // bool should_notify = 2;
          if (this_._internal_should_notify() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                2, this_._internal_should_notify(), target);
          }

          // bool mentioned = 3;
          if (this_._internal_mentioned() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                3, this_._internal_mentioned(), target);
          }

          // bool is_important = 4;
          if (this_._internal_is_important() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                4, this_._internal_is_important(), target);
          }

          // int32 unread_count = 5;
          if (this_._internal_unread_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<5>(
                    stream, this_._internal_unread_count(), target);
          }

          // bool is_first_message = 6;
          if (this_._internal_is_first_message() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                6, this_._internal_is_first_message(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.ChatNotification)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ChatNotification::ByteSizeLong(const MessageLite& base) {
          const ChatNotification& this_ = static_cast<const ChatNotification&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ChatNotification::ByteSizeLong() const {
          const ChatNotification& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.ChatNotification)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .blokus.ChatMessage message = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_);
            }
          }
           {
            // bool should_notify = 2;
            if (this_._internal_should_notify() != 0) {
              total_size += 2;
            }
            // bool mentioned = 3;
            if (this_._internal_mentioned() != 0) {
              total_size += 2;
            }
            // bool is_important = 4;
            if (this_._internal_is_important() != 0) {
              total_size += 2;
            }
            // bool is_first_message = 6;
            if (this_._internal_is_first_message() != 0) {
              total_size += 2;
            }
            // int32 unread_count = 5;
            if (this_._internal_unread_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_unread_count());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ChatNotification::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ChatNotification*>(&to_msg);
  auto& from = static_cast<const ChatNotification&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.ChatNotification)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.message_ != nullptr);
    if (_this->_impl_.message_ == nullptr) {
      _this->_impl_.message_ =
          ::google::protobuf::Message::CopyConstruct<::blokus::ChatMessage>(arena, *from._impl_.message_);
    } else {
      _this->_impl_.message_->MergeFrom(*from._impl_.message_);
    }
  }
  if (from._internal_should_notify() != 0) {
    _this->_impl_.should_notify_ = from._impl_.should_notify_;
  }
  if (from._internal_mentioned() != 0) {
    _this->_impl_.mentioned_ = from._impl_.mentioned_;
  }
  if (from._internal_is_important() != 0) {
    _this->_impl_.is_important_ = from._impl_.is_important_;
  }
  if (from._internal_is_first_message() != 0) {
    _this->_impl_.is_first_message_ = from._impl_.is_first_message_;
  }
  if (from._internal_unread_count() != 0) {
    _this->_impl_.unread_count_ = from._impl_.unread_count_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ChatNotification::CopyFrom(const ChatNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.ChatNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ChatNotification::InternalSwap(ChatNotification* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChatNotification, _impl_.unread_count_)
      + sizeof(ChatNotification::_impl_.unread_count_)
      - PROTOBUF_FIELD_OFFSET(ChatNotification, _impl_.message_)>(
          reinterpret_cast<char*>(&_impl_.message_),
          reinterpret_cast<char*>(&other->_impl_.message_));
}

::google::protobuf::Metadata ChatNotification::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              SystemMessage_ParametersEntry_DoNotUse::SystemMessage_ParametersEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              SystemMessage_ParametersEntry_DoNotUse::SystemMessage_ParametersEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              SystemMessage_ParametersEntry_DoNotUse::SystemMessage_ParametersEntry_DoNotUse() : SuperType() {}
              SystemMessage_ParametersEntry_DoNotUse::SystemMessage_ParametersEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* SystemMessage_ParametersEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) SystemMessage_ParametersEntry_DoNotUse(arena);
              }
              constexpr auto SystemMessage_ParametersEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(SystemMessage_ParametersEntry_DoNotUse),
                                                          alignof(SystemMessage_ParametersEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull SystemMessage_ParametersEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_SystemMessage_ParametersEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &SystemMessage_ParametersEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<SystemMessage_ParametersEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &SystemMessage_ParametersEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &SystemMessage_ParametersEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(SystemMessage_ParametersEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &SystemMessage_ParametersEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_chat_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* SystemMessage_ParametersEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 53, 2> SystemMessage_ParametersEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SystemMessage_ParametersEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::SystemMessage_ParametersEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(SystemMessage_ParametersEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SystemMessage_ParametersEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(SystemMessage_ParametersEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2;
    {PROTOBUF_FIELD_OFFSET(SystemMessage_ParametersEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\44\3\5\0\0\0\0\0"
    "blokus.SystemMessage.ParametersEntry"
    "key"
    "value"
  }},
};

// ===================================================================

class SystemMessage::_Internal {
 public:
};

SystemMessage::SystemMessage(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.SystemMessage)
}
inline PROTOBUF_NDEBUG_INLINE SystemMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::SystemMessage& from_msg)
      : parameters_{visibility, arena, from.parameters_},
        message_(arena, from.message_),
        icon_(arena, from.icon_),
        color_(arena, from.color_),
        _cached_size_{0} {}

SystemMessage::SystemMessage(
    ::google::protobuf::Arena* arena,
    const SystemMessage& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SystemMessage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, system_type_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, system_type_),
           offsetof(Impl_, show_as_popup_) -
               offsetof(Impl_, system_type_) +
               sizeof(Impl_::show_as_popup_));

  // @@protoc_insertion_point(copy_constructor:blokus.SystemMessage)
}
inline PROTOBUF_NDEBUG_INLINE SystemMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : parameters_{visibility, arena},
        message_(arena),
        icon_(arena),
        color_(arena),
        _cached_size_{0} {}

inline void SystemMessage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, system_type_),
           0,
           offsetof(Impl_, show_as_popup_) -
               offsetof(Impl_, system_type_) +
               sizeof(Impl_::show_as_popup_));
}
SystemMessage::~SystemMessage() {
  // @@protoc_insertion_point(destructor:blokus.SystemMessage)
  SharedDtor(*this);
}
inline void SystemMessage::SharedDtor(MessageLite& self) {
  SystemMessage& this_ = static_cast<SystemMessage&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.message_.Destroy();
  this_._impl_.icon_.Destroy();
  this_._impl_.color_.Destroy();
  this_._impl_.~Impl_();
}

inline void* SystemMessage::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SystemMessage(arena);
}
constexpr auto SystemMessage::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(SystemMessage, _impl_.parameters_) +
          decltype(SystemMessage::_impl_.parameters_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(SystemMessage, _impl_.parameters_) +
          decltype(SystemMessage::_impl_.parameters_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(SystemMessage), alignof(SystemMessage), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&SystemMessage::PlacementNew_,
                                 sizeof(SystemMessage),
                                 alignof(SystemMessage));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SystemMessage::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SystemMessage_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SystemMessage::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SystemMessage>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SystemMessage::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SystemMessage>(), &SystemMessage::ByteSizeLong,
            &SystemMessage::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SystemMessage, _impl_._cached_size_),
        false,
    },
    &SystemMessage::kDescriptorMethods,
    &descriptor_table_chat_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SystemMessage::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 1, 55, 2> SystemMessage::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::SystemMessage>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .blokus.SystemMessage.SystemMessageType system_type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SystemMessage, _impl_.system_type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SystemMessage, _impl_.system_type_)}},
    // string message = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(SystemMessage, _impl_.message_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // bool show_in_chat = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SystemMessage, _impl_.show_in_chat_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(SystemMessage, _impl_.show_in_chat_)}},
    // bool show_as_popup = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SystemMessage, _impl_.show_as_popup_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(SystemMessage, _impl_.show_as_popup_)}},
    // string icon = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(SystemMessage, _impl_.icon_)}},
    // string color = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(SystemMessage, _impl_.color_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .blokus.SystemMessage.SystemMessageType system_type = 1;
    {PROTOBUF_FIELD_OFFSET(SystemMessage, _impl_.system_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string message = 2;
    {PROTOBUF_FIELD_OFFSET(SystemMessage, _impl_.message_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // map<string, string> parameters = 3;
    {PROTOBUF_FIELD_OFFSET(SystemMessage, _impl_.parameters_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // bool show_in_chat = 4;
    {PROTOBUF_FIELD_OFFSET(SystemMessage, _impl_.show_in_chat_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool show_as_popup = 5;
    {PROTOBUF_FIELD_OFFSET(SystemMessage, _impl_.show_as_popup_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string icon = 6;
    {PROTOBUF_FIELD_OFFSET(SystemMessage, _impl_.icon_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string color = 7;
    {PROTOBUF_FIELD_OFFSET(SystemMessage, _impl_.color_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(SystemMessage()._impl_.parameters_)>(
        1, 0, 0, 9,
        9)},
  }}, {{
    "\24\0\7\12\0\0\4\5"
    "blokus.SystemMessage"
    "message"
    "parameters"
    "icon"
    "color"
  }},
};

PROTOBUF_NOINLINE void SystemMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.SystemMessage)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.parameters_.Clear();
  _impl_.message_.ClearToEmpty();
  _impl_.icon_.ClearToEmpty();
  _impl_.color_.ClearToEmpty();
  ::memset(&_impl_.system_type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.show_as_popup_) -
      reinterpret_cast<char*>(&_impl_.system_type_)) + sizeof(_impl_.show_as_popup_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SystemMessage::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SystemMessage& this_ = static_cast<const SystemMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SystemMessage::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SystemMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.SystemMessage)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .blokus.SystemMessage.SystemMessageType system_type = 1;
          if (this_._internal_system_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_system_type(), target);
          }

          // string message = 2;
          if (!this_._internal_message().empty()) {
            const std::string& _s = this_._internal_message();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.SystemMessage.message");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // map<string, string> parameters = 3;
          if (!this_._internal_parameters().empty()) {
            using MapType = ::google::protobuf::Map<std::string, std::string>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_STRING>;
            const auto& field = this_._internal_parameters();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    3, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.SystemMessage.parameters");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.SystemMessage.parameters");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    3, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.SystemMessage.parameters");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.SystemMessage.parameters");
              }
            }
          }

          // bool show_in_chat = 4;
          if (this_._internal_show_in_chat() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                4, this_._internal_show_in_chat(), target);
          }

          // bool show_as_popup = 5;
          if (this_._internal_show_as_popup() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                5, this_._internal_show_as_popup(), target);
          }

          // string icon = 6;
          if (!this_._internal_icon().empty()) {
            const std::string& _s = this_._internal_icon();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.SystemMessage.icon");
            target = stream->WriteStringMaybeAliased(6, _s, target);
          }

          // string color = 7;
          if (!this_._internal_color().empty()) {
            const std::string& _s = this_._internal_color();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.SystemMessage.color");
            target = stream->WriteStringMaybeAliased(7, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.SystemMessage)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SystemMessage::ByteSizeLong(const MessageLite& base) {
          const SystemMessage& this_ = static_cast<const SystemMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SystemMessage::ByteSizeLong() const {
          const SystemMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.SystemMessage)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // map<string, string> parameters = 3;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_parameters_size());
              for (const auto& entry : this_._internal_parameters()) {
                total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
              }
            }
          }
           {
            // string message = 2;
            if (!this_._internal_message().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_message());
            }
            // string icon = 6;
            if (!this_._internal_icon().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_icon());
            }
            // string color = 7;
            if (!this_._internal_color().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_color());
            }
            // .blokus.SystemMessage.SystemMessageType system_type = 1;
            if (this_._internal_system_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_system_type());
            }
            // bool show_in_chat = 4;
            if (this_._internal_show_in_chat() != 0) {
              total_size += 2;
            }
            // bool show_as_popup = 5;
            if (this_._internal_show_as_popup() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SystemMessage::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SystemMessage*>(&to_msg);
  auto& from = static_cast<const SystemMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.SystemMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.parameters_.MergeFrom(from._impl_.parameters_);
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (!from._internal_icon().empty()) {
    _this->_internal_set_icon(from._internal_icon());
  }
  if (!from._internal_color().empty()) {
    _this->_internal_set_color(from._internal_color());
  }
  if (from._internal_system_type() != 0) {
    _this->_impl_.system_type_ = from._impl_.system_type_;
  }
  if (from._internal_show_in_chat() != 0) {
    _this->_impl_.show_in_chat_ = from._impl_.show_in_chat_;
  }
  if (from._internal_show_as_popup() != 0) {
    _this->_impl_.show_as_popup_ = from._impl_.show_as_popup_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SystemMessage::CopyFrom(const SystemMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.SystemMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SystemMessage::InternalSwap(SystemMessage* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.parameters_.InternalSwap(&other->_impl_.parameters_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.icon_, &other->_impl_.icon_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.color_, &other->_impl_.color_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SystemMessage, _impl_.show_as_popup_)
      + sizeof(SystemMessage::_impl_.show_as_popup_)
      - PROTOBUF_FIELD_OFFSET(SystemMessage, _impl_.system_type_)>(
          reinterpret_cast<char*>(&_impl_.system_type_),
          reinterpret_cast<char*>(&other->_impl_.system_type_));
}

::google::protobuf::Metadata SystemMessage::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetChatHistoryRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GetChatHistoryRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GetChatHistoryRequest, _impl_._has_bits_);
};

void GetChatHistoryRequest::clear_since() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.since_ != nullptr) _impl_.since_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GetChatHistoryRequest::clear_until() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.until_ != nullptr) _impl_.until_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
GetChatHistoryRequest::GetChatHistoryRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.GetChatHistoryRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetChatHistoryRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::GetChatHistoryRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        type_filter_{visibility, arena, from.type_filter_},
        _type_filter_cached_byte_size_{0},
        target_username_(arena, from.target_username_),
        before_message_id_(arena, from.before_message_id_),
        after_message_id_(arena, from.after_message_id_),
        search_query_(arena, from.search_query_) {}

GetChatHistoryRequest::GetChatHistoryRequest(
    ::google::protobuf::Arena* arena,
    const GetChatHistoryRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetChatHistoryRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.since_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.since_)
                        : nullptr;
  _impl_.until_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.until_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, scope_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, scope_),
           offsetof(Impl_, limit_) -
               offsetof(Impl_, scope_) +
               sizeof(Impl_::limit_));

  // @@protoc_insertion_point(copy_constructor:blokus.GetChatHistoryRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetChatHistoryRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        type_filter_{visibility, arena},
        _type_filter_cached_byte_size_{0},
        target_username_(arena),
        before_message_id_(arena),
        after_message_id_(arena),
        search_query_(arena) {}

inline void GetChatHistoryRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, since_),
           0,
           offsetof(Impl_, limit_) -
               offsetof(Impl_, since_) +
               sizeof(Impl_::limit_));
}
GetChatHistoryRequest::~GetChatHistoryRequest() {
  // @@protoc_insertion_point(destructor:blokus.GetChatHistoryRequest)
  SharedDtor(*this);
}
inline void GetChatHistoryRequest::SharedDtor(MessageLite& self) {
  GetChatHistoryRequest& this_ = static_cast<GetChatHistoryRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.target_username_.Destroy();
  this_._impl_.before_message_id_.Destroy();
  this_._impl_.after_message_id_.Destroy();
  this_._impl_.search_query_.Destroy();
  delete this_._impl_.since_;
  delete this_._impl_.until_;
  this_._impl_.~Impl_();
}

inline void* GetChatHistoryRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetChatHistoryRequest(arena);
}
constexpr auto GetChatHistoryRequest::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(GetChatHistoryRequest, _impl_.type_filter_) +
          decltype(GetChatHistoryRequest::_impl_.type_filter_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(GetChatHistoryRequest), alignof(GetChatHistoryRequest), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&GetChatHistoryRequest::PlacementNew_,
                                 sizeof(GetChatHistoryRequest),
                                 alignof(GetChatHistoryRequest));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetChatHistoryRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetChatHistoryRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetChatHistoryRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GetChatHistoryRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetChatHistoryRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GetChatHistoryRequest>(), &GetChatHistoryRequest::ByteSizeLong,
            &GetChatHistoryRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetChatHistoryRequest, _impl_._cached_size_),
        false,
    },
    &GetChatHistoryRequest::kDescriptorMethods,
    &descriptor_table_chat_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetChatHistoryRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 2, 105, 2> GetChatHistoryRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetChatHistoryRequest, _impl_._has_bits_),
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::GetChatHistoryRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .blokus.ChatScope scope = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetChatHistoryRequest, _impl_.scope_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(GetChatHistoryRequest, _impl_.scope_)}},
    // int32 room_id = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetChatHistoryRequest, _impl_.room_id_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(GetChatHistoryRequest, _impl_.room_id_)}},
    // string target_username = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(GetChatHistoryRequest, _impl_.target_username_)}},
    // int32 limit = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetChatHistoryRequest, _impl_.limit_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(GetChatHistoryRequest, _impl_.limit_)}},
    // string before_message_id = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(GetChatHistoryRequest, _impl_.before_message_id_)}},
    // string after_message_id = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(GetChatHistoryRequest, _impl_.after_message_id_)}},
    // repeated .blokus.ChatType type_filter = 7;
    {::_pbi::TcParser::FastV32P1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(GetChatHistoryRequest, _impl_.type_filter_)}},
    // .google.protobuf.Timestamp since = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 0, 0, PROTOBUF_FIELD_OFFSET(GetChatHistoryRequest, _impl_.since_)}},
    // .google.protobuf.Timestamp until = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 1, 1, PROTOBUF_FIELD_OFFSET(GetChatHistoryRequest, _impl_.until_)}},
    // string search_query = 10;
    {::_pbi::TcParser::FastUS1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(GetChatHistoryRequest, _impl_.search_query_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .blokus.ChatScope scope = 1;
    {PROTOBUF_FIELD_OFFSET(GetChatHistoryRequest, _impl_.scope_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int32 room_id = 2;
    {PROTOBUF_FIELD_OFFSET(GetChatHistoryRequest, _impl_.room_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string target_username = 3;
    {PROTOBUF_FIELD_OFFSET(GetChatHistoryRequest, _impl_.target_username_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 limit = 4;
    {PROTOBUF_FIELD_OFFSET(GetChatHistoryRequest, _impl_.limit_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string before_message_id = 5;
    {PROTOBUF_FIELD_OFFSET(GetChatHistoryRequest, _impl_.before_message_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string after_message_id = 6;
    {PROTOBUF_FIELD_OFFSET(GetChatHistoryRequest, _impl_.after_message_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .blokus.ChatType type_filter = 7;
    {PROTOBUF_FIELD_OFFSET(GetChatHistoryRequest, _impl_.type_filter_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedOpenEnum)},
    // .google.protobuf.Timestamp since = 8;
    {PROTOBUF_FIELD_OFFSET(GetChatHistoryRequest, _impl_.since_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp until = 9;
    {PROTOBUF_FIELD_OFFSET(GetChatHistoryRequest, _impl_.until_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string search_query = 10;
    {PROTOBUF_FIELD_OFFSET(GetChatHistoryRequest, _impl_.search_query_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\34\0\0\17\0\21\20\0\0\0\14\0\0\0\0\0"
    "blokus.GetChatHistoryRequest"
    "target_username"
    "before_message_id"
    "after_message_id"
    "search_query"
  }},
};

PROTOBUF_NOINLINE void GetChatHistoryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.GetChatHistoryRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_filter_.Clear();
  _impl_.target_username_.ClearToEmpty();
  _impl_.before_message_id_.ClearToEmpty();
  _impl_.after_message_id_.ClearToEmpty();
  _impl_.search_query_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.since_ != nullptr);
      _impl_.since_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.until_ != nullptr);
      _impl_.until_->Clear();
    }
  }
  ::memset(&_impl_.scope_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.limit_) -
      reinterpret_cast<char*>(&_impl_.scope_)) + sizeof(_impl_.limit_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GetChatHistoryRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GetChatHistoryRequest& this_ = static_cast<const GetChatHistoryRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GetChatHistoryRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GetChatHistoryRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.GetChatHistoryRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .blokus.ChatScope scope = 1;
          if (this_._internal_scope() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_scope(), target);
          }

          // int32 room_id = 2;
          if (this_._internal_room_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_room_id(), target);
          }

          // string target_username = 3;
          if (!this_._internal_target_username().empty()) {
            const std::string& _s = this_._internal_target_username();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.GetChatHistoryRequest.target_username");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // int32 limit = 4;
          if (this_._internal_limit() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_limit(), target);
          }

          // string before_message_id = 5;
          if (!this_._internal_before_message_id().empty()) {
            const std::string& _s = this_._internal_before_message_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.GetChatHistoryRequest.before_message_id");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // string after_message_id = 6;
          if (!this_._internal_after_message_id().empty()) {
            const std::string& _s = this_._internal_after_message_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.GetChatHistoryRequest.after_message_id");
            target = stream->WriteStringMaybeAliased(6, _s, target);
          }

          // repeated .blokus.ChatType type_filter = 7;
          {
            std::size_t byte_size =
                                              this_._impl_._type_filter_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteEnumPacked(
                  7, this_._internal_type_filter(), byte_size, target);
            }
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp since = 8;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                8, *this_._impl_.since_, this_._impl_.since_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp until = 9;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                9, *this_._impl_.until_, this_._impl_.until_->GetCachedSize(), target,
                stream);
          }

          // string search_query = 10;
          if (!this_._internal_search_query().empty()) {
            const std::string& _s = this_._internal_search_query();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.GetChatHistoryRequest.search_query");
            target = stream->WriteStringMaybeAliased(10, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.GetChatHistoryRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GetChatHistoryRequest::ByteSizeLong(const MessageLite& base) {
          const GetChatHistoryRequest& this_ = static_cast<const GetChatHistoryRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GetChatHistoryRequest::ByteSizeLong() const {
          const GetChatHistoryRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.GetChatHistoryRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .blokus.ChatType type_filter = 7;
            {
              total_size += ::_pbi::WireFormatLite::EnumSizeWithPackedTagSize(
                  this_._internal_type_filter(), 1, this_._impl_._type_filter_cached_byte_size_);
            }
          }
           {
            // string target_username = 3;
            if (!this_._internal_target_username().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_target_username());
            }
            // string before_message_id = 5;
            if (!this_._internal_before_message_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_before_message_id());
            }
            // string after_message_id = 6;
            if (!this_._internal_after_message_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_after_message_id());
            }
            // string search_query = 10;
            if (!this_._internal_search_query().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_search_query());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .google.protobuf.Timestamp since = 8;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.since_);
            }
            // .google.protobuf.Timestamp until = 9;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.until_);
            }
          }
           {
            // .blokus.ChatScope scope = 1;
            if (this_._internal_scope() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_scope());
            }
            // int32 room_id = 2;
            if (this_._internal_room_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_room_id());
            }
            // int32 limit = 4;
            if (this_._internal_limit() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_limit());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GetChatHistoryRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetChatHistoryRequest*>(&to_msg);
  auto& from = static_cast<const GetChatHistoryRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.GetChatHistoryRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_type_filter()->MergeFrom(from._internal_type_filter());
  if (!from._internal_target_username().empty()) {
    _this->_internal_set_target_username(from._internal_target_username());
  }
  if (!from._internal_before_message_id().empty()) {
    _this->_internal_set_before_message_id(from._internal_before_message_id());
  }
  if (!from._internal_after_message_id().empty()) {
    _this->_internal_set_after_message_id(from._internal_after_message_id());
  }
  if (!from._internal_search_query().empty()) {
    _this->_internal_set_search_query(from._internal_search_query());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.since_ != nullptr);
      if (_this->_impl_.since_ == nullptr) {
        _this->_impl_.since_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.since_);
      } else {
        _this->_impl_.since_->MergeFrom(*from._impl_.since_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.until_ != nullptr);
      if (_this->_impl_.until_ == nullptr) {
        _this->_impl_.until_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.until_);
      } else {
        _this->_impl_.until_->MergeFrom(*from._impl_.until_);
      }
    }
  }
  if (from._internal_scope() != 0) {
    _this->_impl_.scope_ = from._impl_.scope_;
  }
  if (from._internal_room_id() != 0) {
    _this->_impl_.room_id_ = from._impl_.room_id_;
  }
  if (from._internal_limit() != 0) {
    _this->_impl_.limit_ = from._impl_.limit_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetChatHistoryRequest::CopyFrom(const GetChatHistoryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.GetChatHistoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetChatHistoryRequest::InternalSwap(GetChatHistoryRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.type_filter_.InternalSwap(&other->_impl_.type_filter_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.target_username_, &other->_impl_.target_username_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.before_message_id_, &other->_impl_.before_message_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.after_message_id_, &other->_impl_.after_message_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.search_query_, &other->_impl_.search_query_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetChatHistoryRequest, _impl_.limit_)
      + sizeof(GetChatHistoryRequest::_impl_.limit_)
      - PROTOBUF_FIELD_OFFSET(GetChatHistoryRequest, _impl_.since_)>(
          reinterpret_cast<char*>(&_impl_.since_),
          reinterpret_cast<char*>(&other->_impl_.since_));
}

::google::protobuf::Metadata GetChatHistoryRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ChatHistoryResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ChatHistoryResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ChatHistoryResponse, _impl_._has_bits_);
};

void ChatHistoryResponse::clear_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_ != nullptr) _impl_.result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ChatHistoryResponse::clear_oldest_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.oldest_message_ != nullptr) _impl_.oldest_message_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ChatHistoryResponse::clear_newest_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.newest_message_ != nullptr) _impl_.newest_message_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
ChatHistoryResponse::ChatHistoryResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.ChatHistoryResponse)
}
inline PROTOBUF_NDEBUG_INLINE ChatHistoryResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::ChatHistoryResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        messages_{visibility, arena, from.messages_} {}

ChatHistoryResponse::ChatHistoryResponse(
    ::google::protobuf::Arena* arena,
    const ChatHistoryResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ChatHistoryResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::blokus::Result>(
                              arena, *from._impl_.result_)
                        : nullptr;
  _impl_.oldest_message_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.oldest_message_)
                        : nullptr;
  _impl_.newest_message_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.newest_message_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, has_more_before_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, has_more_before_),
           offsetof(Impl_, total_count_) -
               offsetof(Impl_, has_more_before_) +
               sizeof(Impl_::total_count_));

  // @@protoc_insertion_point(copy_constructor:blokus.ChatHistoryResponse)
}
inline PROTOBUF_NDEBUG_INLINE ChatHistoryResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        messages_{visibility, arena} {}

inline void ChatHistoryResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, result_),
           0,
           offsetof(Impl_, total_count_) -
               offsetof(Impl_, result_) +
               sizeof(Impl_::total_count_));
}
ChatHistoryResponse::~ChatHistoryResponse() {
  // @@protoc_insertion_point(destructor:blokus.ChatHistoryResponse)
  SharedDtor(*this);
}
inline void ChatHistoryResponse::SharedDtor(MessageLite& self) {
  ChatHistoryResponse& this_ = static_cast<ChatHistoryResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.result_;
  delete this_._impl_.oldest_message_;
  delete this_._impl_.newest_message_;
  this_._impl_.~Impl_();
}

inline void* ChatHistoryResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ChatHistoryResponse(arena);
}
constexpr auto ChatHistoryResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ChatHistoryResponse, _impl_.messages_) +
          decltype(ChatHistoryResponse::_impl_.messages_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(ChatHistoryResponse), alignof(ChatHistoryResponse), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ChatHistoryResponse::PlacementNew_,
                                 sizeof(ChatHistoryResponse),
                                 alignof(ChatHistoryResponse));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ChatHistoryResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ChatHistoryResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ChatHistoryResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ChatHistoryResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ChatHistoryResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ChatHistoryResponse>(), &ChatHistoryResponse::ByteSizeLong,
            &ChatHistoryResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ChatHistoryResponse, _impl_._cached_size_),
        false,
    },
    &ChatHistoryResponse::kDescriptorMethods,
    &descriptor_table_chat_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ChatHistoryResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 4, 0, 2> ChatHistoryResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ChatHistoryResponse, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::ChatHistoryResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .blokus.Result result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ChatHistoryResponse, _impl_.result_)}},
    // repeated .blokus.ChatMessage messages = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(ChatHistoryResponse, _impl_.messages_)}},
    // bool has_more_before = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ChatHistoryResponse, _impl_.has_more_before_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(ChatHistoryResponse, _impl_.has_more_before_)}},
    // bool has_more_after = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ChatHistoryResponse, _impl_.has_more_after_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(ChatHistoryResponse, _impl_.has_more_after_)}},
    // int32 total_count = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ChatHistoryResponse, _impl_.total_count_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(ChatHistoryResponse, _impl_.total_count_)}},
    // .google.protobuf.Timestamp oldest_message = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 1, 2, PROTOBUF_FIELD_OFFSET(ChatHistoryResponse, _impl_.oldest_message_)}},
    // .google.protobuf.Timestamp newest_message = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 2, 3, PROTOBUF_FIELD_OFFSET(ChatHistoryResponse, _impl_.newest_message_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .blokus.Result result = 1;
    {PROTOBUF_FIELD_OFFSET(ChatHistoryResponse, _impl_.result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .blokus.ChatMessage messages = 2;
    {PROTOBUF_FIELD_OFFSET(ChatHistoryResponse, _impl_.messages_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool has_more_before = 3;
    {PROTOBUF_FIELD_OFFSET(ChatHistoryResponse, _impl_.has_more_before_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool has_more_after = 4;
    {PROTOBUF_FIELD_OFFSET(ChatHistoryResponse, _impl_.has_more_after_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 total_count = 5;
    {PROTOBUF_FIELD_OFFSET(ChatHistoryResponse, _impl_.total_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .google.protobuf.Timestamp oldest_message = 6;
    {PROTOBUF_FIELD_OFFSET(ChatHistoryResponse, _impl_.oldest_message_), _Internal::kHasBitsOffset + 1, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp newest_message = 7;
    {PROTOBUF_FIELD_OFFSET(ChatHistoryResponse, _impl_.newest_message_), _Internal::kHasBitsOffset + 2, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::blokus::Result>()},
    {::_pbi::TcParser::GetTable<::blokus::ChatMessage>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void ChatHistoryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.ChatHistoryResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.messages_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.result_ != nullptr);
      _impl_.result_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.oldest_message_ != nullptr);
      _impl_.oldest_message_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.newest_message_ != nullptr);
      _impl_.newest_message_->Clear();
    }
  }
  ::memset(&_impl_.has_more_before_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.total_count_) -
      reinterpret_cast<char*>(&_impl_.has_more_before_)) + sizeof(_impl_.total_count_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ChatHistoryResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ChatHistoryResponse& this_ = static_cast<const ChatHistoryResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ChatHistoryResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ChatHistoryResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.ChatHistoryResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .blokus.Result result = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.result_, this_._impl_.result_->GetCachedSize(), target,
                stream);
          }

          // repeated .blokus.ChatMessage messages = 2;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_messages_size());
               i < n; i++) {
            const auto& repfield = this_._internal_messages().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    2, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // bool has_more_before = 3;
          if (this_._internal_has_more_before() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                3, this_._internal_has_more_before(), target);
          }

          // bool has_more_after = 4;
          if (this_._internal_has_more_after() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                4, this_._internal_has_more_after(), target);
          }

          // int32 total_count = 5;
          if (this_._internal_total_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<5>(
                    stream, this_._internal_total_count(), target);
          }

          // .google.protobuf.Timestamp oldest_message = 6;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                6, *this_._impl_.oldest_message_, this_._impl_.oldest_message_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp newest_message = 7;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                7, *this_._impl_.newest_message_, this_._impl_.newest_message_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.ChatHistoryResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ChatHistoryResponse::ByteSizeLong(const MessageLite& base) {
          const ChatHistoryResponse& this_ = static_cast<const ChatHistoryResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ChatHistoryResponse::ByteSizeLong() const {
          const ChatHistoryResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.ChatHistoryResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .blokus.ChatMessage messages = 2;
            {
              total_size += 1UL * this_._internal_messages_size();
              for (const auto& msg : this_._internal_messages()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // .blokus.Result result = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_);
            }
            // .google.protobuf.Timestamp oldest_message = 6;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.oldest_message_);
            }
            // .google.protobuf.Timestamp newest_message = 7;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.newest_message_);
            }
          }
           {
            // bool has_more_before = 3;
            if (this_._internal_has_more_before() != 0) {
              total_size += 2;
            }
            // bool has_more_after = 4;
            if (this_._internal_has_more_after() != 0) {
              total_size += 2;
            }
            // int32 total_count = 5;
            if (this_._internal_total_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_total_count());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ChatHistoryResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ChatHistoryResponse*>(&to_msg);
  auto& from = static_cast<const ChatHistoryResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.ChatHistoryResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_messages()->MergeFrom(
      from._internal_messages());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.result_ != nullptr);
      if (_this->_impl_.result_ == nullptr) {
        _this->_impl_.result_ =
            ::google::protobuf::Message::CopyConstruct<::blokus::Result>(arena, *from._impl_.result_);
      } else {
        _this->_impl_.result_->MergeFrom(*from._impl_.result_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.oldest_message_ != nullptr);
      if (_this->_impl_.oldest_message_ == nullptr) {
        _this->_impl_.oldest_message_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.oldest_message_);
      } else {
        _this->_impl_.oldest_message_->MergeFrom(*from._impl_.oldest_message_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.newest_message_ != nullptr);
      if (_this->_impl_.newest_message_ == nullptr) {
        _this->_impl_.newest_message_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.newest_message_);
      } else {
        _this->_impl_.newest_message_->MergeFrom(*from._impl_.newest_message_);
      }
    }
  }
  if (from._internal_has_more_before() != 0) {
    _this->_impl_.has_more_before_ = from._impl_.has_more_before_;
  }
  if (from._internal_has_more_after() != 0) {
    _this->_impl_.has_more_after_ = from._impl_.has_more_after_;
  }
  if (from._internal_total_count() != 0) {
    _this->_impl_.total_count_ = from._impl_.total_count_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ChatHistoryResponse::CopyFrom(const ChatHistoryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.ChatHistoryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ChatHistoryResponse::InternalSwap(ChatHistoryResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.messages_.InternalSwap(&other->_impl_.messages_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChatHistoryResponse, _impl_.total_count_)
      + sizeof(ChatHistoryResponse::_impl_.total_count_)
      - PROTOBUF_FIELD_OFFSET(ChatHistoryResponse, _impl_.result_)>(
          reinterpret_cast<char*>(&_impl_.result_),
          reinterpret_cast<char*>(&other->_impl_.result_));
}

::google::protobuf::Metadata ChatHistoryResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class WhisperMessage::_Internal {
 public:
};

WhisperMessage::WhisperMessage(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.WhisperMessage)
}
inline PROTOBUF_NDEBUG_INLINE WhisperMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::WhisperMessage& from_msg)
      : target_username_(arena, from.target_username_),
        content_(arena, from.content_),
        _cached_size_{0} {}

WhisperMessage::WhisperMessage(
    ::google::protobuf::Arena* arena,
    const WhisperMessage& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  WhisperMessage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.request_read_receipt_ = from._impl_.request_read_receipt_;

  // @@protoc_insertion_point(copy_constructor:blokus.WhisperMessage)
}
inline PROTOBUF_NDEBUG_INLINE WhisperMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : target_username_(arena),
        content_(arena),
        _cached_size_{0} {}

inline void WhisperMessage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.request_read_receipt_ = {};
}
WhisperMessage::~WhisperMessage() {
  // @@protoc_insertion_point(destructor:blokus.WhisperMessage)
  SharedDtor(*this);
}
inline void WhisperMessage::SharedDtor(MessageLite& self) {
  WhisperMessage& this_ = static_cast<WhisperMessage&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.target_username_.Destroy();
  this_._impl_.content_.Destroy();
  this_._impl_.~Impl_();
}

inline void* WhisperMessage::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) WhisperMessage(arena);
}
constexpr auto WhisperMessage::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(WhisperMessage),
                                            alignof(WhisperMessage));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull WhisperMessage::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_WhisperMessage_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &WhisperMessage::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<WhisperMessage>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &WhisperMessage::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<WhisperMessage>(), &WhisperMessage::ByteSizeLong,
            &WhisperMessage::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(WhisperMessage, _impl_._cached_size_),
        false,
    },
    &WhisperMessage::kDescriptorMethods,
    &descriptor_table_chat_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* WhisperMessage::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 52, 2> WhisperMessage::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::WhisperMessage>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string target_username = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(WhisperMessage, _impl_.target_username_)}},
    // string content = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(WhisperMessage, _impl_.content_)}},
    // bool request_read_receipt = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(WhisperMessage, _impl_.request_read_receipt_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(WhisperMessage, _impl_.request_read_receipt_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string target_username = 1;
    {PROTOBUF_FIELD_OFFSET(WhisperMessage, _impl_.target_username_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string content = 2;
    {PROTOBUF_FIELD_OFFSET(WhisperMessage, _impl_.content_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool request_read_receipt = 3;
    {PROTOBUF_FIELD_OFFSET(WhisperMessage, _impl_.request_read_receipt_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\25\17\7\0\0\0\0\0"
    "blokus.WhisperMessage"
    "target_username"
    "content"
  }},
};

PROTOBUF_NOINLINE void WhisperMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.WhisperMessage)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.target_username_.ClearToEmpty();
  _impl_.content_.ClearToEmpty();
  _impl_.request_read_receipt_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* WhisperMessage::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const WhisperMessage& this_ = static_cast<const WhisperMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* WhisperMessage::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const WhisperMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.WhisperMessage)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string target_username = 1;
          if (!this_._internal_target_username().empty()) {
            const std::string& _s = this_._internal_target_username();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.WhisperMessage.target_username");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string content = 2;
          if (!this_._internal_content().empty()) {
            const std::string& _s = this_._internal_content();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.WhisperMessage.content");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // bool request_read_receipt = 3;
          if (this_._internal_request_read_receipt() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                3, this_._internal_request_read_receipt(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.WhisperMessage)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t WhisperMessage::ByteSizeLong(const MessageLite& base) {
          const WhisperMessage& this_ = static_cast<const WhisperMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t WhisperMessage::ByteSizeLong() const {
          const WhisperMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.WhisperMessage)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string target_username = 1;
            if (!this_._internal_target_username().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_target_username());
            }
            // string content = 2;
            if (!this_._internal_content().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_content());
            }
            // bool request_read_receipt = 3;
            if (this_._internal_request_read_receipt() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void WhisperMessage::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<WhisperMessage*>(&to_msg);
  auto& from = static_cast<const WhisperMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.WhisperMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_target_username().empty()) {
    _this->_internal_set_target_username(from._internal_target_username());
  }
  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (from._internal_request_read_receipt() != 0) {
    _this->_impl_.request_read_receipt_ = from._impl_.request_read_receipt_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void WhisperMessage::CopyFrom(const WhisperMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.WhisperMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void WhisperMessage::InternalSwap(WhisperMessage* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.target_username_, &other->_impl_.target_username_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.content_, &other->_impl_.content_, arena);
        swap(_impl_.request_read_receipt_, other->_impl_.request_read_receipt_);
}

::google::protobuf::Metadata WhisperMessage::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class WhisperNotification::_Internal {
 public:
  using HasBits =
      decltype(std::declval<WhisperNotification>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(WhisperNotification, _impl_._has_bits_);
};

WhisperNotification::WhisperNotification(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.WhisperNotification)
}
inline PROTOBUF_NDEBUG_INLINE WhisperNotification::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::WhisperNotification& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

WhisperNotification::WhisperNotification(
    ::google::protobuf::Arena* arena,
    const WhisperNotification& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  WhisperNotification* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.whisper_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::blokus::ChatMessage>(
                              arena, *from._impl_.whisper_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, sender_online_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, sender_online_),
           offsetof(Impl_, auto_away_reply_) -
               offsetof(Impl_, sender_online_) +
               sizeof(Impl_::auto_away_reply_));

  // @@protoc_insertion_point(copy_constructor:blokus.WhisperNotification)
}
inline PROTOBUF_NDEBUG_INLINE WhisperNotification::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void WhisperNotification::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, whisper_),
           0,
           offsetof(Impl_, auto_away_reply_) -
               offsetof(Impl_, whisper_) +
               sizeof(Impl_::auto_away_reply_));
}
WhisperNotification::~WhisperNotification() {
  // @@protoc_insertion_point(destructor:blokus.WhisperNotification)
  SharedDtor(*this);
}
inline void WhisperNotification::SharedDtor(MessageLite& self) {
  WhisperNotification& this_ = static_cast<WhisperNotification&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.whisper_;
  this_._impl_.~Impl_();
}

inline void* WhisperNotification::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) WhisperNotification(arena);
}
constexpr auto WhisperNotification::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(WhisperNotification),
                                            alignof(WhisperNotification));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull WhisperNotification::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_WhisperNotification_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &WhisperNotification::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<WhisperNotification>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &WhisperNotification::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<WhisperNotification>(), &WhisperNotification::ByteSizeLong,
            &WhisperNotification::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(WhisperNotification, _impl_._cached_size_),
        false,
    },
    &WhisperNotification::kDescriptorMethods,
    &descriptor_table_chat_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* WhisperNotification::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> WhisperNotification::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(WhisperNotification, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::WhisperNotification>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .blokus.ChatMessage whisper = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(WhisperNotification, _impl_.whisper_)}},
    // bool sender_online = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(WhisperNotification, _impl_.sender_online_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(WhisperNotification, _impl_.sender_online_)}},
    // bool auto_away_reply = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(WhisperNotification, _impl_.auto_away_reply_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(WhisperNotification, _impl_.auto_away_reply_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .blokus.ChatMessage whisper = 1;
    {PROTOBUF_FIELD_OFFSET(WhisperNotification, _impl_.whisper_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool sender_online = 2;
    {PROTOBUF_FIELD_OFFSET(WhisperNotification, _impl_.sender_online_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool auto_away_reply = 3;
    {PROTOBUF_FIELD_OFFSET(WhisperNotification, _impl_.auto_away_reply_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::blokus::ChatMessage>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void WhisperNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.WhisperNotification)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.whisper_ != nullptr);
    _impl_.whisper_->Clear();
  }
  ::memset(&_impl_.sender_online_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.auto_away_reply_) -
      reinterpret_cast<char*>(&_impl_.sender_online_)) + sizeof(_impl_.auto_away_reply_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* WhisperNotification::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const WhisperNotification& this_ = static_cast<const WhisperNotification&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* WhisperNotification::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const WhisperNotification& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.WhisperNotification)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .blokus.ChatMessage whisper = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.whisper_, this_._impl_.whisper_->GetCachedSize(), target,
                stream);
          }

          // bool sender_online = 2;
          if (this_._internal_sender_online() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                2, this_._internal_sender_online(), target);
          }

          // bool auto_away_reply = 3;
          if (this_._internal_auto_away_reply() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                3, this_._internal_auto_away_reply(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.WhisperNotification)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t WhisperNotification::ByteSizeLong(const MessageLite& base) {
          const WhisperNotification& this_ = static_cast<const WhisperNotification&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t WhisperNotification::ByteSizeLong() const {
          const WhisperNotification& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.WhisperNotification)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .blokus.ChatMessage whisper = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.whisper_);
            }
          }
           {
            // bool sender_online = 2;
            if (this_._internal_sender_online() != 0) {
              total_size += 2;
            }
            // bool auto_away_reply = 3;
            if (this_._internal_auto_away_reply() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void WhisperNotification::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<WhisperNotification*>(&to_msg);
  auto& from = static_cast<const WhisperNotification&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.WhisperNotification)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.whisper_ != nullptr);
    if (_this->_impl_.whisper_ == nullptr) {
      _this->_impl_.whisper_ =
          ::google::protobuf::Message::CopyConstruct<::blokus::ChatMessage>(arena, *from._impl_.whisper_);
    } else {
      _this->_impl_.whisper_->MergeFrom(*from._impl_.whisper_);
    }
  }
  if (from._internal_sender_online() != 0) {
    _this->_impl_.sender_online_ = from._impl_.sender_online_;
  }
  if (from._internal_auto_away_reply() != 0) {
    _this->_impl_.auto_away_reply_ = from._impl_.auto_away_reply_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void WhisperNotification::CopyFrom(const WhisperNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.WhisperNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void WhisperNotification::InternalSwap(WhisperNotification* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WhisperNotification, _impl_.auto_away_reply_)
      + sizeof(WhisperNotification::_impl_.auto_away_reply_)
      - PROTOBUF_FIELD_OFFSET(WhisperNotification, _impl_.whisper_)>(
          reinterpret_cast<char*>(&_impl_.whisper_),
          reinterpret_cast<char*>(&other->_impl_.whisper_));
}

::google::protobuf::Metadata WhisperNotification::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ReadReceiptNotification::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ReadReceiptNotification>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ReadReceiptNotification, _impl_._has_bits_);
};

void ReadReceiptNotification::clear_read_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.read_at_ != nullptr) _impl_.read_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ReadReceiptNotification::ReadReceiptNotification(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.ReadReceiptNotification)
}
inline PROTOBUF_NDEBUG_INLINE ReadReceiptNotification::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::ReadReceiptNotification& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        message_id_(arena, from.message_id_),
        reader_username_(arena, from.reader_username_) {}

ReadReceiptNotification::ReadReceiptNotification(
    ::google::protobuf::Arena* arena,
    const ReadReceiptNotification& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ReadReceiptNotification* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.read_at_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.read_at_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:blokus.ReadReceiptNotification)
}
inline PROTOBUF_NDEBUG_INLINE ReadReceiptNotification::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        message_id_(arena),
        reader_username_(arena) {}

inline void ReadReceiptNotification::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.read_at_ = {};
}
ReadReceiptNotification::~ReadReceiptNotification() {
  // @@protoc_insertion_point(destructor:blokus.ReadReceiptNotification)
  SharedDtor(*this);
}
inline void ReadReceiptNotification::SharedDtor(MessageLite& self) {
  ReadReceiptNotification& this_ = static_cast<ReadReceiptNotification&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.message_id_.Destroy();
  this_._impl_.reader_username_.Destroy();
  delete this_._impl_.read_at_;
  this_._impl_.~Impl_();
}

inline void* ReadReceiptNotification::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ReadReceiptNotification(arena);
}
constexpr auto ReadReceiptNotification::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ReadReceiptNotification),
                                            alignof(ReadReceiptNotification));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ReadReceiptNotification::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ReadReceiptNotification_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ReadReceiptNotification::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ReadReceiptNotification>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ReadReceiptNotification::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ReadReceiptNotification>(), &ReadReceiptNotification::ByteSizeLong,
            &ReadReceiptNotification::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ReadReceiptNotification, _impl_._cached_size_),
        false,
    },
    &ReadReceiptNotification::kDescriptorMethods,
    &descriptor_table_chat_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ReadReceiptNotification::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 64, 2> ReadReceiptNotification::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ReadReceiptNotification, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::ReadReceiptNotification>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string message_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ReadReceiptNotification, _impl_.message_id_)}},
    // string reader_username = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ReadReceiptNotification, _impl_.reader_username_)}},
    // .google.protobuf.Timestamp read_at = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(ReadReceiptNotification, _impl_.read_at_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string message_id = 1;
    {PROTOBUF_FIELD_OFFSET(ReadReceiptNotification, _impl_.message_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string reader_username = 2;
    {PROTOBUF_FIELD_OFFSET(ReadReceiptNotification, _impl_.reader_username_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp read_at = 3;
    {PROTOBUF_FIELD_OFFSET(ReadReceiptNotification, _impl_.read_at_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\36\12\17\0\0\0\0\0"
    "blokus.ReadReceiptNotification"
    "message_id"
    "reader_username"
  }},
};

PROTOBUF_NOINLINE void ReadReceiptNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.ReadReceiptNotification)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_id_.ClearToEmpty();
  _impl_.reader_username_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.read_at_ != nullptr);
    _impl_.read_at_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ReadReceiptNotification::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ReadReceiptNotification& this_ = static_cast<const ReadReceiptNotification&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ReadReceiptNotification::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ReadReceiptNotification& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.ReadReceiptNotification)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string message_id = 1;
          if (!this_._internal_message_id().empty()) {
            const std::string& _s = this_._internal_message_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ReadReceiptNotification.message_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string reader_username = 2;
          if (!this_._internal_reader_username().empty()) {
            const std::string& _s = this_._internal_reader_username();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ReadReceiptNotification.reader_username");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp read_at = 3;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.read_at_, this_._impl_.read_at_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.ReadReceiptNotification)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ReadReceiptNotification::ByteSizeLong(const MessageLite& base) {
          const ReadReceiptNotification& this_ = static_cast<const ReadReceiptNotification&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ReadReceiptNotification::ByteSizeLong() const {
          const ReadReceiptNotification& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.ReadReceiptNotification)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string message_id = 1;
            if (!this_._internal_message_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_message_id());
            }
            // string reader_username = 2;
            if (!this_._internal_reader_username().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_reader_username());
            }
          }
           {
            // .google.protobuf.Timestamp read_at = 3;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.read_at_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ReadReceiptNotification::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ReadReceiptNotification*>(&to_msg);
  auto& from = static_cast<const ReadReceiptNotification&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.ReadReceiptNotification)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message_id().empty()) {
    _this->_internal_set_message_id(from._internal_message_id());
  }
  if (!from._internal_reader_username().empty()) {
    _this->_internal_set_reader_username(from._internal_reader_username());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.read_at_ != nullptr);
    if (_this->_impl_.read_at_ == nullptr) {
      _this->_impl_.read_at_ =
          ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.read_at_);
    } else {
      _this->_impl_.read_at_->MergeFrom(*from._impl_.read_at_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ReadReceiptNotification::CopyFrom(const ReadReceiptNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.ReadReceiptNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ReadReceiptNotification::InternalSwap(ReadReceiptNotification* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_id_, &other->_impl_.message_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.reader_username_, &other->_impl_.reader_username_, arena);
  swap(_impl_.read_at_, other->_impl_.read_at_);
}

::google::protobuf::Metadata ReadReceiptNotification::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ModerateChatRequest::_Internal {
 public:
};

ModerateChatRequest::ModerateChatRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.ModerateChatRequest)
}
inline PROTOBUF_NDEBUG_INLINE ModerateChatRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::ModerateChatRequest& from_msg)
      : message_id_(arena, from.message_id_),
        reason_(arena, from.reason_),
        new_content_(arena, from.new_content_),
        _cached_size_{0} {}

ModerateChatRequest::ModerateChatRequest(
    ::google::protobuf::Arena* arena,
    const ModerateChatRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ModerateChatRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, action_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, action_),
           offsetof(Impl_, duration_minutes_) -
               offsetof(Impl_, action_) +
               sizeof(Impl_::duration_minutes_));

  // @@protoc_insertion_point(copy_constructor:blokus.ModerateChatRequest)
}
inline PROTOBUF_NDEBUG_INLINE ModerateChatRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : message_id_(arena),
        reason_(arena),
        new_content_(arena),
        _cached_size_{0} {}

inline void ModerateChatRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, action_),
           0,
           offsetof(Impl_, duration_minutes_) -
               offsetof(Impl_, action_) +
               sizeof(Impl_::duration_minutes_));
}
ModerateChatRequest::~ModerateChatRequest() {
  // @@protoc_insertion_point(destructor:blokus.ModerateChatRequest)
  SharedDtor(*this);
}
inline void ModerateChatRequest::SharedDtor(MessageLite& self) {
  ModerateChatRequest& this_ = static_cast<ModerateChatRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.message_id_.Destroy();
  this_._impl_.reason_.Destroy();
  this_._impl_.new_content_.Destroy();
  this_._impl_.~Impl_();
}

inline void* ModerateChatRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ModerateChatRequest(arena);
}
constexpr auto ModerateChatRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ModerateChatRequest),
                                            alignof(ModerateChatRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ModerateChatRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ModerateChatRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ModerateChatRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ModerateChatRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ModerateChatRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ModerateChatRequest>(), &ModerateChatRequest::ByteSizeLong,
            &ModerateChatRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ModerateChatRequest, _impl_._cached_size_),
        false,
    },
    &ModerateChatRequest::kDescriptorMethods,
    &descriptor_table_chat_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ModerateChatRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 62, 2> ModerateChatRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::ModerateChatRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string message_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ModerateChatRequest, _impl_.message_id_)}},
    // .blokus.ModerateChatRequest.ModerationAction action = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ModerateChatRequest, _impl_.action_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ModerateChatRequest, _impl_.action_)}},
    // string reason = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ModerateChatRequest, _impl_.reason_)}},
    // int32 duration_minutes = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ModerateChatRequest, _impl_.duration_minutes_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(ModerateChatRequest, _impl_.duration_minutes_)}},
    // string new_content = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(ModerateChatRequest, _impl_.new_content_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string message_id = 1;
    {PROTOBUF_FIELD_OFFSET(ModerateChatRequest, _impl_.message_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .blokus.ModerateChatRequest.ModerationAction action = 2;
    {PROTOBUF_FIELD_OFFSET(ModerateChatRequest, _impl_.action_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string reason = 3;
    {PROTOBUF_FIELD_OFFSET(ModerateChatRequest, _impl_.reason_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 duration_minutes = 4;
    {PROTOBUF_FIELD_OFFSET(ModerateChatRequest, _impl_.duration_minutes_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string new_content = 5;
    {PROTOBUF_FIELD_OFFSET(ModerateChatRequest, _impl_.new_content_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\32\12\0\6\0\13\0\0"
    "blokus.ModerateChatRequest"
    "message_id"
    "reason"
    "new_content"
  }},
};

PROTOBUF_NOINLINE void ModerateChatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.ModerateChatRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_id_.ClearToEmpty();
  _impl_.reason_.ClearToEmpty();
  _impl_.new_content_.ClearToEmpty();
  ::memset(&_impl_.action_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.duration_minutes_) -
      reinterpret_cast<char*>(&_impl_.action_)) + sizeof(_impl_.duration_minutes_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ModerateChatRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ModerateChatRequest& this_ = static_cast<const ModerateChatRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ModerateChatRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ModerateChatRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.ModerateChatRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string message_id = 1;
          if (!this_._internal_message_id().empty()) {
            const std::string& _s = this_._internal_message_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ModerateChatRequest.message_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // .blokus.ModerateChatRequest.ModerationAction action = 2;
          if (this_._internal_action() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                2, this_._internal_action(), target);
          }

          // string reason = 3;
          if (!this_._internal_reason().empty()) {
            const std::string& _s = this_._internal_reason();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ModerateChatRequest.reason");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // int32 duration_minutes = 4;
          if (this_._internal_duration_minutes() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_duration_minutes(), target);
          }

          // string new_content = 5;
          if (!this_._internal_new_content().empty()) {
            const std::string& _s = this_._internal_new_content();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ModerateChatRequest.new_content");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.ModerateChatRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ModerateChatRequest::ByteSizeLong(const MessageLite& base) {
          const ModerateChatRequest& this_ = static_cast<const ModerateChatRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ModerateChatRequest::ByteSizeLong() const {
          const ModerateChatRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.ModerateChatRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string message_id = 1;
            if (!this_._internal_message_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_message_id());
            }
            // string reason = 3;
            if (!this_._internal_reason().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_reason());
            }
            // string new_content = 5;
            if (!this_._internal_new_content().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_new_content());
            }
            // .blokus.ModerateChatRequest.ModerationAction action = 2;
            if (this_._internal_action() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_action());
            }
            // int32 duration_minutes = 4;
            if (this_._internal_duration_minutes() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_duration_minutes());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ModerateChatRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ModerateChatRequest*>(&to_msg);
  auto& from = static_cast<const ModerateChatRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.ModerateChatRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message_id().empty()) {
    _this->_internal_set_message_id(from._internal_message_id());
  }
  if (!from._internal_reason().empty()) {
    _this->_internal_set_reason(from._internal_reason());
  }
  if (!from._internal_new_content().empty()) {
    _this->_internal_set_new_content(from._internal_new_content());
  }
  if (from._internal_action() != 0) {
    _this->_impl_.action_ = from._impl_.action_;
  }
  if (from._internal_duration_minutes() != 0) {
    _this->_impl_.duration_minutes_ = from._impl_.duration_minutes_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ModerateChatRequest::CopyFrom(const ModerateChatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.ModerateChatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ModerateChatRequest::InternalSwap(ModerateChatRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_id_, &other->_impl_.message_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.reason_, &other->_impl_.reason_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.new_content_, &other->_impl_.new_content_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModerateChatRequest, _impl_.duration_minutes_)
      + sizeof(ModerateChatRequest::_impl_.duration_minutes_)
      - PROTOBUF_FIELD_OFFSET(ModerateChatRequest, _impl_.action_)>(
          reinterpret_cast<char*>(&_impl_.action_),
          reinterpret_cast<char*>(&other->_impl_.action_));
}

::google::protobuf::Metadata ModerateChatRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ModerateChatResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ModerateChatResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ModerateChatResponse, _impl_._has_bits_);
};

void ModerateChatResponse::clear_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_ != nullptr) _impl_.result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ModerateChatResponse::ModerateChatResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.ModerateChatResponse)
}
inline PROTOBUF_NDEBUG_INLINE ModerateChatResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::ModerateChatResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        message_(arena, from.message_) {}

ModerateChatResponse::ModerateChatResponse(
    ::google::protobuf::Arena* arena,
    const ModerateChatResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ModerateChatResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::blokus::Result>(
                              arena, *from._impl_.result_)
                        : nullptr;
  _impl_.user_notified_ = from._impl_.user_notified_;

  // @@protoc_insertion_point(copy_constructor:blokus.ModerateChatResponse)
}
inline PROTOBUF_NDEBUG_INLINE ModerateChatResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        message_(arena) {}

inline void ModerateChatResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, result_),
           0,
           offsetof(Impl_, user_notified_) -
               offsetof(Impl_, result_) +
               sizeof(Impl_::user_notified_));
}
ModerateChatResponse::~ModerateChatResponse() {
  // @@protoc_insertion_point(destructor:blokus.ModerateChatResponse)
  SharedDtor(*this);
}
inline void ModerateChatResponse::SharedDtor(MessageLite& self) {
  ModerateChatResponse& this_ = static_cast<ModerateChatResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.message_.Destroy();
  delete this_._impl_.result_;
  this_._impl_.~Impl_();
}

inline void* ModerateChatResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ModerateChatResponse(arena);
}
constexpr auto ModerateChatResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ModerateChatResponse),
                                            alignof(ModerateChatResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ModerateChatResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ModerateChatResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ModerateChatResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ModerateChatResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ModerateChatResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ModerateChatResponse>(), &ModerateChatResponse::ByteSizeLong,
            &ModerateChatResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ModerateChatResponse, _impl_._cached_size_),
        false,
    },
    &ModerateChatResponse::kDescriptorMethods,
    &descriptor_table_chat_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ModerateChatResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 43, 2> ModerateChatResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ModerateChatResponse, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::ModerateChatResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .blokus.Result result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ModerateChatResponse, _impl_.result_)}},
    // string message = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ModerateChatResponse, _impl_.message_)}},
    // bool user_notified = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ModerateChatResponse, _impl_.user_notified_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(ModerateChatResponse, _impl_.user_notified_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .blokus.Result result = 1;
    {PROTOBUF_FIELD_OFFSET(ModerateChatResponse, _impl_.result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string message = 2;
    {PROTOBUF_FIELD_OFFSET(ModerateChatResponse, _impl_.message_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool user_notified = 3;
    {PROTOBUF_FIELD_OFFSET(ModerateChatResponse, _impl_.user_notified_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::blokus::Result>()},
  }}, {{
    "\33\0\7\0\0\0\0\0"
    "blokus.ModerateChatResponse"
    "message"
  }},
};

PROTOBUF_NOINLINE void ModerateChatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.ModerateChatResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.result_ != nullptr);
    _impl_.result_->Clear();
  }
  _impl_.user_notified_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ModerateChatResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ModerateChatResponse& this_ = static_cast<const ModerateChatResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ModerateChatResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ModerateChatResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.ModerateChatResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .blokus.Result result = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.result_, this_._impl_.result_->GetCachedSize(), target,
                stream);
          }

          // string message = 2;
          if (!this_._internal_message().empty()) {
            const std::string& _s = this_._internal_message();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ModerateChatResponse.message");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // bool user_notified = 3;
          if (this_._internal_user_notified() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                3, this_._internal_user_notified(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.ModerateChatResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ModerateChatResponse::ByteSizeLong(const MessageLite& base) {
          const ModerateChatResponse& this_ = static_cast<const ModerateChatResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ModerateChatResponse::ByteSizeLong() const {
          const ModerateChatResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.ModerateChatResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string message = 2;
            if (!this_._internal_message().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_message());
            }
          }
           {
            // .blokus.Result result = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_);
            }
          }
           {
            // bool user_notified = 3;
            if (this_._internal_user_notified() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ModerateChatResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ModerateChatResponse*>(&to_msg);
  auto& from = static_cast<const ModerateChatResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.ModerateChatResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.result_ != nullptr);
    if (_this->_impl_.result_ == nullptr) {
      _this->_impl_.result_ =
          ::google::protobuf::Message::CopyConstruct<::blokus::Result>(arena, *from._impl_.result_);
    } else {
      _this->_impl_.result_->MergeFrom(*from._impl_.result_);
    }
  }
  if (from._internal_user_notified() != 0) {
    _this->_impl_.user_notified_ = from._impl_.user_notified_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ModerateChatResponse::CopyFrom(const ModerateChatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.ModerateChatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ModerateChatResponse::InternalSwap(ModerateChatResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModerateChatResponse, _impl_.user_notified_)
      + sizeof(ModerateChatResponse::_impl_.user_notified_)
      - PROTOBUF_FIELD_OFFSET(ModerateChatResponse, _impl_.result_)>(
          reinterpret_cast<char*>(&_impl_.result_),
          reinterpret_cast<char*>(&other->_impl_.result_));
}

::google::protobuf::Metadata ModerateChatResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ChatModerationNotification::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ChatModerationNotification>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ChatModerationNotification, _impl_._has_bits_);
};

void ChatModerationNotification::clear_moderated_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.moderated_at_ != nullptr) _impl_.moderated_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ChatModerationNotification::ChatModerationNotification(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.ChatModerationNotification)
}
inline PROTOBUF_NDEBUG_INLINE ChatModerationNotification::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::ChatModerationNotification& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        message_id_(arena, from.message_id_),
        moderated_username_(arena, from.moderated_username_),
        moderator_username_(arena, from.moderator_username_),
        action_(arena, from.action_),
        reason_(arena, from.reason_) {}

ChatModerationNotification::ChatModerationNotification(
    ::google::protobuf::Arena* arena,
    const ChatModerationNotification& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ChatModerationNotification* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.moderated_at_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.moderated_at_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:blokus.ChatModerationNotification)
}
inline PROTOBUF_NDEBUG_INLINE ChatModerationNotification::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        message_id_(arena),
        moderated_username_(arena),
        moderator_username_(arena),
        action_(arena),
        reason_(arena) {}

inline void ChatModerationNotification::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.moderated_at_ = {};
}
ChatModerationNotification::~ChatModerationNotification() {
  // @@protoc_insertion_point(destructor:blokus.ChatModerationNotification)
  SharedDtor(*this);
}
inline void ChatModerationNotification::SharedDtor(MessageLite& self) {
  ChatModerationNotification& this_ = static_cast<ChatModerationNotification&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.message_id_.Destroy();
  this_._impl_.moderated_username_.Destroy();
  this_._impl_.moderator_username_.Destroy();
  this_._impl_.action_.Destroy();
  this_._impl_.reason_.Destroy();
  delete this_._impl_.moderated_at_;
  this_._impl_.~Impl_();
}

inline void* ChatModerationNotification::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ChatModerationNotification(arena);
}
constexpr auto ChatModerationNotification::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ChatModerationNotification),
                                            alignof(ChatModerationNotification));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ChatModerationNotification::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ChatModerationNotification_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ChatModerationNotification::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ChatModerationNotification>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ChatModerationNotification::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ChatModerationNotification>(), &ChatModerationNotification::ByteSizeLong,
            &ChatModerationNotification::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ChatModerationNotification, _impl_._cached_size_),
        false,
    },
    &ChatModerationNotification::kDescriptorMethods,
    &descriptor_table_chat_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ChatModerationNotification::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 1, 100, 2> ChatModerationNotification::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ChatModerationNotification, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::ChatModerationNotification>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string message_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ChatModerationNotification, _impl_.message_id_)}},
    // string moderated_username = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ChatModerationNotification, _impl_.moderated_username_)}},
    // string moderator_username = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ChatModerationNotification, _impl_.moderator_username_)}},
    // string action = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(ChatModerationNotification, _impl_.action_)}},
    // string reason = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(ChatModerationNotification, _impl_.reason_)}},
    // .google.protobuf.Timestamp moderated_at = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 0, 0, PROTOBUF_FIELD_OFFSET(ChatModerationNotification, _impl_.moderated_at_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string message_id = 1;
    {PROTOBUF_FIELD_OFFSET(ChatModerationNotification, _impl_.message_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string moderated_username = 2;
    {PROTOBUF_FIELD_OFFSET(ChatModerationNotification, _impl_.moderated_username_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string moderator_username = 3;
    {PROTOBUF_FIELD_OFFSET(ChatModerationNotification, _impl_.moderator_username_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string action = 4;
    {PROTOBUF_FIELD_OFFSET(ChatModerationNotification, _impl_.action_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string reason = 5;
    {PROTOBUF_FIELD_OFFSET(ChatModerationNotification, _impl_.reason_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp moderated_at = 6;
    {PROTOBUF_FIELD_OFFSET(ChatModerationNotification, _impl_.moderated_at_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\41\12\22\22\6\6\0\0"
    "blokus.ChatModerationNotification"
    "message_id"
    "moderated_username"
    "moderator_username"
    "action"
    "reason"
  }},
};

PROTOBUF_NOINLINE void ChatModerationNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.ChatModerationNotification)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_id_.ClearToEmpty();
  _impl_.moderated_username_.ClearToEmpty();
  _impl_.moderator_username_.ClearToEmpty();
  _impl_.action_.ClearToEmpty();
  _impl_.reason_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.moderated_at_ != nullptr);
    _impl_.moderated_at_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ChatModerationNotification::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ChatModerationNotification& this_ = static_cast<const ChatModerationNotification&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ChatModerationNotification::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ChatModerationNotification& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.ChatModerationNotification)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string message_id = 1;
          if (!this_._internal_message_id().empty()) {
            const std::string& _s = this_._internal_message_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ChatModerationNotification.message_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string moderated_username = 2;
          if (!this_._internal_moderated_username().empty()) {
            const std::string& _s = this_._internal_moderated_username();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ChatModerationNotification.moderated_username");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string moderator_username = 3;
          if (!this_._internal_moderator_username().empty()) {
            const std::string& _s = this_._internal_moderator_username();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ChatModerationNotification.moderator_username");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // string action = 4;
          if (!this_._internal_action().empty()) {
            const std::string& _s = this_._internal_action();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ChatModerationNotification.action");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // string reason = 5;
          if (!this_._internal_reason().empty()) {
            const std::string& _s = this_._internal_reason();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ChatModerationNotification.reason");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp moderated_at = 6;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                6, *this_._impl_.moderated_at_, this_._impl_.moderated_at_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.ChatModerationNotification)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ChatModerationNotification::ByteSizeLong(const MessageLite& base) {
          const ChatModerationNotification& this_ = static_cast<const ChatModerationNotification&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ChatModerationNotification::ByteSizeLong() const {
          const ChatModerationNotification& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.ChatModerationNotification)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string message_id = 1;
            if (!this_._internal_message_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_message_id());
            }
            // string moderated_username = 2;
            if (!this_._internal_moderated_username().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_moderated_username());
            }
            // string moderator_username = 3;
            if (!this_._internal_moderator_username().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_moderator_username());
            }
            // string action = 4;
            if (!this_._internal_action().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_action());
            }
            // string reason = 5;
            if (!this_._internal_reason().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_reason());
            }
          }
           {
            // .google.protobuf.Timestamp moderated_at = 6;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.moderated_at_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ChatModerationNotification::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ChatModerationNotification*>(&to_msg);
  auto& from = static_cast<const ChatModerationNotification&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.ChatModerationNotification)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message_id().empty()) {
    _this->_internal_set_message_id(from._internal_message_id());
  }
  if (!from._internal_moderated_username().empty()) {
    _this->_internal_set_moderated_username(from._internal_moderated_username());
  }
  if (!from._internal_moderator_username().empty()) {
    _this->_internal_set_moderator_username(from._internal_moderator_username());
  }
  if (!from._internal_action().empty()) {
    _this->_internal_set_action(from._internal_action());
  }
  if (!from._internal_reason().empty()) {
    _this->_internal_set_reason(from._internal_reason());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.moderated_at_ != nullptr);
    if (_this->_impl_.moderated_at_ == nullptr) {
      _this->_impl_.moderated_at_ =
          ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.moderated_at_);
    } else {
      _this->_impl_.moderated_at_->MergeFrom(*from._impl_.moderated_at_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ChatModerationNotification::CopyFrom(const ChatModerationNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.ChatModerationNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ChatModerationNotification::InternalSwap(ChatModerationNotification* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_id_, &other->_impl_.message_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.moderated_username_, &other->_impl_.moderated_username_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.moderator_username_, &other->_impl_.moderator_username_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.action_, &other->_impl_.action_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.reason_, &other->_impl_.reason_, arena);
  swap(_impl_.moderated_at_, other->_impl_.moderated_at_);
}

::google::protobuf::Metadata ChatModerationNotification::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ChatSettings::_Internal {
 public:
};

ChatSettings::ChatSettings(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.ChatSettings)
}
inline PROTOBUF_NDEBUG_INLINE ChatSettings::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::ChatSettings& from_msg)
      : blocked_users_{visibility, arena, from.blocked_users_},
        muted_rooms_{visibility, arena, from.muted_rooms_},
        chat_font_size_(arena, from.chat_font_size_),
        _cached_size_{0} {}

ChatSettings::ChatSettings(
    ::google::protobuf::Arena* arena,
    const ChatSettings& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ChatSettings* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, global_chat_enabled_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, global_chat_enabled_),
           offsetof(Impl_, max_message_length_) -
               offsetof(Impl_, global_chat_enabled_) +
               sizeof(Impl_::max_message_length_));

  // @@protoc_insertion_point(copy_constructor:blokus.ChatSettings)
}
inline PROTOBUF_NDEBUG_INLINE ChatSettings::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : blocked_users_{visibility, arena},
        muted_rooms_{visibility, arena},
        chat_font_size_(arena),
        _cached_size_{0} {}

inline void ChatSettings::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, global_chat_enabled_),
           0,
           offsetof(Impl_, max_message_length_) -
               offsetof(Impl_, global_chat_enabled_) +
               sizeof(Impl_::max_message_length_));
}
ChatSettings::~ChatSettings() {
  // @@protoc_insertion_point(destructor:blokus.ChatSettings)
  SharedDtor(*this);
}
inline void ChatSettings::SharedDtor(MessageLite& self) {
  ChatSettings& this_ = static_cast<ChatSettings&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.chat_font_size_.Destroy();
  this_._impl_.~Impl_();
}

inline void* ChatSettings::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ChatSettings(arena);
}
constexpr auto ChatSettings::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ChatSettings, _impl_.blocked_users_) +
          decltype(ChatSettings::_impl_.blocked_users_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(ChatSettings, _impl_.muted_rooms_) +
          decltype(ChatSettings::_impl_.muted_rooms_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(ChatSettings), alignof(ChatSettings), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ChatSettings::PlacementNew_,
                                 sizeof(ChatSettings),
                                 alignof(ChatSettings));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ChatSettings::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ChatSettings_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ChatSettings::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ChatSettings>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ChatSettings::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ChatSettings>(), &ChatSettings::ByteSizeLong,
            &ChatSettings::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ChatSettings, _impl_._cached_size_),
        false,
    },
    &ChatSettings::kDescriptorMethods,
    &descriptor_table_chat_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ChatSettings::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 16, 0, 82, 2> ChatSettings::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    16, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294901760,  // skipmap
    offsetof(decltype(_table_), field_entries),
    16,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::ChatSettings>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string chat_font_size = 16;
    {::_pbi::TcParser::FastUS2,
     {386, 63, 0, PROTOBUF_FIELD_OFFSET(ChatSettings, _impl_.chat_font_size_)}},
    // bool global_chat_enabled = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ChatSettings, _impl_.global_chat_enabled_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ChatSettings, _impl_.global_chat_enabled_)}},
    // bool whispers_enabled = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ChatSettings, _impl_.whispers_enabled_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ChatSettings, _impl_.whispers_enabled_)}},
    // bool system_messages_enabled = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ChatSettings, _impl_.system_messages_enabled_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(ChatSettings, _impl_.system_messages_enabled_)}},
    // bool emotes_enabled = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ChatSettings, _impl_.emotes_enabled_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(ChatSettings, _impl_.emotes_enabled_)}},
    // bool mentions_enabled = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ChatSettings, _impl_.mentions_enabled_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(ChatSettings, _impl_.mentions_enabled_)}},
    // bool profanity_filter = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ChatSettings, _impl_.profanity_filter_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(ChatSettings, _impl_.profanity_filter_)}},
    // bool spam_filter = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ChatSettings, _impl_.spam_filter_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(ChatSettings, _impl_.spam_filter_)}},
    // repeated string blocked_users = 8;
    {::_pbi::TcParser::FastUR1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(ChatSettings, _impl_.blocked_users_)}},
    // repeated string muted_rooms = 9;
    {::_pbi::TcParser::FastUR1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(ChatSettings, _impl_.muted_rooms_)}},
    // bool desktop_notifications = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ChatSettings, _impl_.desktop_notifications_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(ChatSettings, _impl_.desktop_notifications_)}},
    // bool sound_notifications = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ChatSettings, _impl_.sound_notifications_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(ChatSettings, _impl_.sound_notifications_)}},
    // bool mention_notifications = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ChatSettings, _impl_.mention_notifications_), 63>(),
     {96, 63, 0, PROTOBUF_FIELD_OFFSET(ChatSettings, _impl_.mention_notifications_)}},
    // bool show_timestamps = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ChatSettings, _impl_.show_timestamps_), 63>(),
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(ChatSettings, _impl_.show_timestamps_)}},
    // bool show_user_colors = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ChatSettings, _impl_.show_user_colors_), 63>(),
     {112, 63, 0, PROTOBUF_FIELD_OFFSET(ChatSettings, _impl_.show_user_colors_)}},
    // int32 max_message_length = 15;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ChatSettings, _impl_.max_message_length_), 63>(),
     {120, 63, 0, PROTOBUF_FIELD_OFFSET(ChatSettings, _impl_.max_message_length_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool global_chat_enabled = 1;
    {PROTOBUF_FIELD_OFFSET(ChatSettings, _impl_.global_chat_enabled_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool whispers_enabled = 2;
    {PROTOBUF_FIELD_OFFSET(ChatSettings, _impl_.whispers_enabled_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool system_messages_enabled = 3;
    {PROTOBUF_FIELD_OFFSET(ChatSettings, _impl_.system_messages_enabled_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool emotes_enabled = 4;
    {PROTOBUF_FIELD_OFFSET(ChatSettings, _impl_.emotes_enabled_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool mentions_enabled = 5;
    {PROTOBUF_FIELD_OFFSET(ChatSettings, _impl_.mentions_enabled_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool profanity_filter = 6;
    {PROTOBUF_FIELD_OFFSET(ChatSettings, _impl_.profanity_filter_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool spam_filter = 7;
    {PROTOBUF_FIELD_OFFSET(ChatSettings, _impl_.spam_filter_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // repeated string blocked_users = 8;
    {PROTOBUF_FIELD_OFFSET(ChatSettings, _impl_.blocked_users_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // repeated string muted_rooms = 9;
    {PROTOBUF_FIELD_OFFSET(ChatSettings, _impl_.muted_rooms_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // bool desktop_notifications = 10;
    {PROTOBUF_FIELD_OFFSET(ChatSettings, _impl_.desktop_notifications_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool sound_notifications = 11;
    {PROTOBUF_FIELD_OFFSET(ChatSettings, _impl_.sound_notifications_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool mention_notifications = 12;
    {PROTOBUF_FIELD_OFFSET(ChatSettings, _impl_.mention_notifications_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool show_timestamps = 13;
    {PROTOBUF_FIELD_OFFSET(ChatSettings, _impl_.show_timestamps_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool show_user_colors = 14;
    {PROTOBUF_FIELD_OFFSET(ChatSettings, _impl_.show_user_colors_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 max_message_length = 15;
    {PROTOBUF_FIELD_OFFSET(ChatSettings, _impl_.max_message_length_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string chat_font_size = 16;
    {PROTOBUF_FIELD_OFFSET(ChatSettings, _impl_.chat_font_size_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\23\0\0\0\0\0\0\0\15\13\0\0\0\0\0\0\16\0\0\0\0\0\0\0"
    "blokus.ChatSettings"
    "blocked_users"
    "muted_rooms"
    "chat_font_size"
  }},
};

PROTOBUF_NOINLINE void ChatSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.ChatSettings)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.blocked_users_.Clear();
  _impl_.muted_rooms_.Clear();
  _impl_.chat_font_size_.ClearToEmpty();
  ::memset(&_impl_.global_chat_enabled_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.max_message_length_) -
      reinterpret_cast<char*>(&_impl_.global_chat_enabled_)) + sizeof(_impl_.max_message_length_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ChatSettings::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ChatSettings& this_ = static_cast<const ChatSettings&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ChatSettings::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ChatSettings& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.ChatSettings)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bool global_chat_enabled = 1;
          if (this_._internal_global_chat_enabled() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                1, this_._internal_global_chat_enabled(), target);
          }

          // bool whispers_enabled = 2;
          if (this_._internal_whispers_enabled() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                2, this_._internal_whispers_enabled(), target);
          }

          // bool system_messages_enabled = 3;
          if (this_._internal_system_messages_enabled() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                3, this_._internal_system_messages_enabled(), target);
          }

          // bool emotes_enabled = 4;
          if (this_._internal_emotes_enabled() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                4, this_._internal_emotes_enabled(), target);
          }

          // bool mentions_enabled = 5;
          if (this_._internal_mentions_enabled() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                5, this_._internal_mentions_enabled(), target);
          }

          // bool profanity_filter = 6;
          if (this_._internal_profanity_filter() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                6, this_._internal_profanity_filter(), target);
          }

          // bool spam_filter = 7;
          if (this_._internal_spam_filter() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                7, this_._internal_spam_filter(), target);
          }

          // repeated string blocked_users = 8;
          for (int i = 0, n = this_._internal_blocked_users_size(); i < n; ++i) {
            const auto& s = this_._internal_blocked_users().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ChatSettings.blocked_users");
            target = stream->WriteString(8, s, target);
          }

          // repeated string muted_rooms = 9;
          for (int i = 0, n = this_._internal_muted_rooms_size(); i < n; ++i) {
            const auto& s = this_._internal_muted_rooms().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ChatSettings.muted_rooms");
            target = stream->WriteString(9, s, target);
          }

          // bool desktop_notifications = 10;
          if (this_._internal_desktop_notifications() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                10, this_._internal_desktop_notifications(), target);
          }

          // bool sound_notifications = 11;
          if (this_._internal_sound_notifications() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                11, this_._internal_sound_notifications(), target);
          }

          // bool mention_notifications = 12;
          if (this_._internal_mention_notifications() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                12, this_._internal_mention_notifications(), target);
          }

          // bool show_timestamps = 13;
          if (this_._internal_show_timestamps() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                13, this_._internal_show_timestamps(), target);
          }

          // bool show_user_colors = 14;
          if (this_._internal_show_user_colors() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                14, this_._internal_show_user_colors(), target);
          }

          // int32 max_message_length = 15;
          if (this_._internal_max_message_length() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<15>(
                    stream, this_._internal_max_message_length(), target);
          }

          // string chat_font_size = 16;
          if (!this_._internal_chat_font_size().empty()) {
            const std::string& _s = this_._internal_chat_font_size();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ChatSettings.chat_font_size");
            target = stream->WriteStringMaybeAliased(16, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.ChatSettings)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ChatSettings::ByteSizeLong(const MessageLite& base) {
          const ChatSettings& this_ = static_cast<const ChatSettings&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ChatSettings::ByteSizeLong() const {
          const ChatSettings& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.ChatSettings)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string blocked_users = 8;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_blocked_users().size());
              for (int i = 0, n = this_._internal_blocked_users().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_blocked_users().Get(i));
              }
            }
            // repeated string muted_rooms = 9;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_muted_rooms().size());
              for (int i = 0, n = this_._internal_muted_rooms().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_muted_rooms().Get(i));
              }
            }
          }
           {
            // string chat_font_size = 16;
            if (!this_._internal_chat_font_size().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_chat_font_size());
            }
            // bool global_chat_enabled = 1;
            if (this_._internal_global_chat_enabled() != 0) {
              total_size += 2;
            }
            // bool whispers_enabled = 2;
            if (this_._internal_whispers_enabled() != 0) {
              total_size += 2;
            }
            // bool system_messages_enabled = 3;
            if (this_._internal_system_messages_enabled() != 0) {
              total_size += 2;
            }
            // bool emotes_enabled = 4;
            if (this_._internal_emotes_enabled() != 0) {
              total_size += 2;
            }
            // bool mentions_enabled = 5;
            if (this_._internal_mentions_enabled() != 0) {
              total_size += 2;
            }
            // bool profanity_filter = 6;
            if (this_._internal_profanity_filter() != 0) {
              total_size += 2;
            }
            // bool spam_filter = 7;
            if (this_._internal_spam_filter() != 0) {
              total_size += 2;
            }
            // bool desktop_notifications = 10;
            if (this_._internal_desktop_notifications() != 0) {
              total_size += 2;
            }
            // bool sound_notifications = 11;
            if (this_._internal_sound_notifications() != 0) {
              total_size += 2;
            }
            // bool mention_notifications = 12;
            if (this_._internal_mention_notifications() != 0) {
              total_size += 2;
            }
            // bool show_timestamps = 13;
            if (this_._internal_show_timestamps() != 0) {
              total_size += 2;
            }
            // bool show_user_colors = 14;
            if (this_._internal_show_user_colors() != 0) {
              total_size += 2;
            }
            // int32 max_message_length = 15;
            if (this_._internal_max_message_length() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_max_message_length());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ChatSettings::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ChatSettings*>(&to_msg);
  auto& from = static_cast<const ChatSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.ChatSettings)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_blocked_users()->MergeFrom(from._internal_blocked_users());
  _this->_internal_mutable_muted_rooms()->MergeFrom(from._internal_muted_rooms());
  if (!from._internal_chat_font_size().empty()) {
    _this->_internal_set_chat_font_size(from._internal_chat_font_size());
  }
  if (from._internal_global_chat_enabled() != 0) {
    _this->_impl_.global_chat_enabled_ = from._impl_.global_chat_enabled_;
  }
  if (from._internal_whispers_enabled() != 0) {
    _this->_impl_.whispers_enabled_ = from._impl_.whispers_enabled_;
  }
  if (from._internal_system_messages_enabled() != 0) {
    _this->_impl_.system_messages_enabled_ = from._impl_.system_messages_enabled_;
  }
  if (from._internal_emotes_enabled() != 0) {
    _this->_impl_.emotes_enabled_ = from._impl_.emotes_enabled_;
  }
  if (from._internal_mentions_enabled() != 0) {
    _this->_impl_.mentions_enabled_ = from._impl_.mentions_enabled_;
  }
  if (from._internal_profanity_filter() != 0) {
    _this->_impl_.profanity_filter_ = from._impl_.profanity_filter_;
  }
  if (from._internal_spam_filter() != 0) {
    _this->_impl_.spam_filter_ = from._impl_.spam_filter_;
  }
  if (from._internal_desktop_notifications() != 0) {
    _this->_impl_.desktop_notifications_ = from._impl_.desktop_notifications_;
  }
  if (from._internal_sound_notifications() != 0) {
    _this->_impl_.sound_notifications_ = from._impl_.sound_notifications_;
  }
  if (from._internal_mention_notifications() != 0) {
    _this->_impl_.mention_notifications_ = from._impl_.mention_notifications_;
  }
  if (from._internal_show_timestamps() != 0) {
    _this->_impl_.show_timestamps_ = from._impl_.show_timestamps_;
  }
  if (from._internal_show_user_colors() != 0) {
    _this->_impl_.show_user_colors_ = from._impl_.show_user_colors_;
  }
  if (from._internal_max_message_length() != 0) {
    _this->_impl_.max_message_length_ = from._impl_.max_message_length_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ChatSettings::CopyFrom(const ChatSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.ChatSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ChatSettings::InternalSwap(ChatSettings* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.blocked_users_.InternalSwap(&other->_impl_.blocked_users_);
  _impl_.muted_rooms_.InternalSwap(&other->_impl_.muted_rooms_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.chat_font_size_, &other->_impl_.chat_font_size_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChatSettings, _impl_.max_message_length_)
      + sizeof(ChatSettings::_impl_.max_message_length_)
      - PROTOBUF_FIELD_OFFSET(ChatSettings, _impl_.global_chat_enabled_)>(
          reinterpret_cast<char*>(&_impl_.global_chat_enabled_),
          reinterpret_cast<char*>(&other->_impl_.global_chat_enabled_));
}

::google::protobuf::Metadata ChatSettings::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class UpdateChatSettingsRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<UpdateChatSettingsRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(UpdateChatSettingsRequest, _impl_._has_bits_);
};

UpdateChatSettingsRequest::UpdateChatSettingsRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.UpdateChatSettingsRequest)
}
inline PROTOBUF_NDEBUG_INLINE UpdateChatSettingsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::UpdateChatSettingsRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

UpdateChatSettingsRequest::UpdateChatSettingsRequest(
    ::google::protobuf::Arena* arena,
    const UpdateChatSettingsRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  UpdateChatSettingsRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.settings_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::blokus::ChatSettings>(
                              arena, *from._impl_.settings_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:blokus.UpdateChatSettingsRequest)
}
inline PROTOBUF_NDEBUG_INLINE UpdateChatSettingsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void UpdateChatSettingsRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.settings_ = {};
}
UpdateChatSettingsRequest::~UpdateChatSettingsRequest() {
  // @@protoc_insertion_point(destructor:blokus.UpdateChatSettingsRequest)
  SharedDtor(*this);
}
inline void UpdateChatSettingsRequest::SharedDtor(MessageLite& self) {
  UpdateChatSettingsRequest& this_ = static_cast<UpdateChatSettingsRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.settings_;
  this_._impl_.~Impl_();
}

inline void* UpdateChatSettingsRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) UpdateChatSettingsRequest(arena);
}
constexpr auto UpdateChatSettingsRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(UpdateChatSettingsRequest),
                                            alignof(UpdateChatSettingsRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull UpdateChatSettingsRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_UpdateChatSettingsRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &UpdateChatSettingsRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<UpdateChatSettingsRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &UpdateChatSettingsRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<UpdateChatSettingsRequest>(), &UpdateChatSettingsRequest::ByteSizeLong,
            &UpdateChatSettingsRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(UpdateChatSettingsRequest, _impl_._cached_size_),
        false,
    },
    &UpdateChatSettingsRequest::kDescriptorMethods,
    &descriptor_table_chat_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* UpdateChatSettingsRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> UpdateChatSettingsRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(UpdateChatSettingsRequest, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::UpdateChatSettingsRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .blokus.ChatSettings settings = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(UpdateChatSettingsRequest, _impl_.settings_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .blokus.ChatSettings settings = 1;
    {PROTOBUF_FIELD_OFFSET(UpdateChatSettingsRequest, _impl_.settings_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::blokus::ChatSettings>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void UpdateChatSettingsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.UpdateChatSettingsRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.settings_ != nullptr);
    _impl_.settings_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* UpdateChatSettingsRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const UpdateChatSettingsRequest& this_ = static_cast<const UpdateChatSettingsRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* UpdateChatSettingsRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const UpdateChatSettingsRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.UpdateChatSettingsRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .blokus.ChatSettings settings = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.settings_, this_._impl_.settings_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.UpdateChatSettingsRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t UpdateChatSettingsRequest::ByteSizeLong(const MessageLite& base) {
          const UpdateChatSettingsRequest& this_ = static_cast<const UpdateChatSettingsRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t UpdateChatSettingsRequest::ByteSizeLong() const {
          const UpdateChatSettingsRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.UpdateChatSettingsRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .blokus.ChatSettings settings = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.settings_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void UpdateChatSettingsRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<UpdateChatSettingsRequest*>(&to_msg);
  auto& from = static_cast<const UpdateChatSettingsRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.UpdateChatSettingsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.settings_ != nullptr);
    if (_this->_impl_.settings_ == nullptr) {
      _this->_impl_.settings_ =
          ::google::protobuf::Message::CopyConstruct<::blokus::ChatSettings>(arena, *from._impl_.settings_);
    } else {
      _this->_impl_.settings_->MergeFrom(*from._impl_.settings_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateChatSettingsRequest::CopyFrom(const UpdateChatSettingsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.UpdateChatSettingsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void UpdateChatSettingsRequest::InternalSwap(UpdateChatSettingsRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.settings_, other->_impl_.settings_);
}

::google::protobuf::Metadata UpdateChatSettingsRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class UpdateChatSettingsResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<UpdateChatSettingsResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(UpdateChatSettingsResponse, _impl_._has_bits_);
};

void UpdateChatSettingsResponse::clear_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_ != nullptr) _impl_.result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
UpdateChatSettingsResponse::UpdateChatSettingsResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.UpdateChatSettingsResponse)
}
inline PROTOBUF_NDEBUG_INLINE UpdateChatSettingsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::UpdateChatSettingsResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

UpdateChatSettingsResponse::UpdateChatSettingsResponse(
    ::google::protobuf::Arena* arena,
    const UpdateChatSettingsResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  UpdateChatSettingsResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::blokus::Result>(
                              arena, *from._impl_.result_)
                        : nullptr;
  _impl_.updated_settings_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::blokus::ChatSettings>(
                              arena, *from._impl_.updated_settings_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:blokus.UpdateChatSettingsResponse)
}
inline PROTOBUF_NDEBUG_INLINE UpdateChatSettingsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void UpdateChatSettingsResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, result_),
           0,
           offsetof(Impl_, updated_settings_) -
               offsetof(Impl_, result_) +
               sizeof(Impl_::updated_settings_));
}
UpdateChatSettingsResponse::~UpdateChatSettingsResponse() {
  // @@protoc_insertion_point(destructor:blokus.UpdateChatSettingsResponse)
  SharedDtor(*this);
}
inline void UpdateChatSettingsResponse::SharedDtor(MessageLite& self) {
  UpdateChatSettingsResponse& this_ = static_cast<UpdateChatSettingsResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.result_;
  delete this_._impl_.updated_settings_;
  this_._impl_.~Impl_();
}

inline void* UpdateChatSettingsResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) UpdateChatSettingsResponse(arena);
}
constexpr auto UpdateChatSettingsResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(UpdateChatSettingsResponse),
                                            alignof(UpdateChatSettingsResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull UpdateChatSettingsResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_UpdateChatSettingsResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &UpdateChatSettingsResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<UpdateChatSettingsResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &UpdateChatSettingsResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<UpdateChatSettingsResponse>(), &UpdateChatSettingsResponse::ByteSizeLong,
            &UpdateChatSettingsResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(UpdateChatSettingsResponse, _impl_._cached_size_),
        false,
    },
    &UpdateChatSettingsResponse::kDescriptorMethods,
    &descriptor_table_chat_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* UpdateChatSettingsResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> UpdateChatSettingsResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(UpdateChatSettingsResponse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::UpdateChatSettingsResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .blokus.ChatSettings updated_settings = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(UpdateChatSettingsResponse, _impl_.updated_settings_)}},
    // .blokus.Result result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(UpdateChatSettingsResponse, _impl_.result_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .blokus.Result result = 1;
    {PROTOBUF_FIELD_OFFSET(UpdateChatSettingsResponse, _impl_.result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .blokus.ChatSettings updated_settings = 2;
    {PROTOBUF_FIELD_OFFSET(UpdateChatSettingsResponse, _impl_.updated_settings_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::blokus::Result>()},
    {::_pbi::TcParser::GetTable<::blokus::ChatSettings>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void UpdateChatSettingsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.UpdateChatSettingsResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.result_ != nullptr);
      _impl_.result_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.updated_settings_ != nullptr);
      _impl_.updated_settings_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* UpdateChatSettingsResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const UpdateChatSettingsResponse& this_ = static_cast<const UpdateChatSettingsResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* UpdateChatSettingsResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const UpdateChatSettingsResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.UpdateChatSettingsResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .blokus.Result result = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.result_, this_._impl_.result_->GetCachedSize(), target,
                stream);
          }

          // .blokus.ChatSettings updated_settings = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.updated_settings_, this_._impl_.updated_settings_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.UpdateChatSettingsResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t UpdateChatSettingsResponse::ByteSizeLong(const MessageLite& base) {
          const UpdateChatSettingsResponse& this_ = static_cast<const UpdateChatSettingsResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t UpdateChatSettingsResponse::ByteSizeLong() const {
          const UpdateChatSettingsResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.UpdateChatSettingsResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .blokus.Result result = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_);
            }
            // .blokus.ChatSettings updated_settings = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.updated_settings_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void UpdateChatSettingsResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<UpdateChatSettingsResponse*>(&to_msg);
  auto& from = static_cast<const UpdateChatSettingsResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.UpdateChatSettingsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.result_ != nullptr);
      if (_this->_impl_.result_ == nullptr) {
        _this->_impl_.result_ =
            ::google::protobuf::Message::CopyConstruct<::blokus::Result>(arena, *from._impl_.result_);
      } else {
        _this->_impl_.result_->MergeFrom(*from._impl_.result_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.updated_settings_ != nullptr);
      if (_this->_impl_.updated_settings_ == nullptr) {
        _this->_impl_.updated_settings_ =
            ::google::protobuf::Message::CopyConstruct<::blokus::ChatSettings>(arena, *from._impl_.updated_settings_);
      } else {
        _this->_impl_.updated_settings_->MergeFrom(*from._impl_.updated_settings_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateChatSettingsResponse::CopyFrom(const UpdateChatSettingsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.UpdateChatSettingsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void UpdateChatSettingsResponse::InternalSwap(UpdateChatSettingsResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateChatSettingsResponse, _impl_.updated_settings_)
      + sizeof(UpdateChatSettingsResponse::_impl_.updated_settings_)
      - PROTOBUF_FIELD_OFFSET(UpdateChatSettingsResponse, _impl_.result_)>(
          reinterpret_cast<char*>(&_impl_.result_),
          reinterpret_cast<char*>(&other->_impl_.result_));
}

::google::protobuf::Metadata UpdateChatSettingsResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RoomChatSettings::_Internal {
 public:
};

RoomChatSettings::RoomChatSettings(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.RoomChatSettings)
}
inline PROTOBUF_NDEBUG_INLINE RoomChatSettings::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::RoomChatSettings& from_msg)
      : chat_moderators_{visibility, arena, from.chat_moderators_},
        banned_users_{visibility, arena, from.banned_users_},
        welcome_message_(arena, from.welcome_message_),
        _cached_size_{0} {}

RoomChatSettings::RoomChatSettings(
    ::google::protobuf::Arena* arena,
    const RoomChatSettings& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RoomChatSettings* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, room_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, room_id_),
           offsetof(Impl_, emotes_allowed_) -
               offsetof(Impl_, room_id_) +
               sizeof(Impl_::emotes_allowed_));

  // @@protoc_insertion_point(copy_constructor:blokus.RoomChatSettings)
}
inline PROTOBUF_NDEBUG_INLINE RoomChatSettings::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : chat_moderators_{visibility, arena},
        banned_users_{visibility, arena},
        welcome_message_(arena),
        _cached_size_{0} {}

inline void RoomChatSettings::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, room_id_),
           0,
           offsetof(Impl_, emotes_allowed_) -
               offsetof(Impl_, room_id_) +
               sizeof(Impl_::emotes_allowed_));
}
RoomChatSettings::~RoomChatSettings() {
  // @@protoc_insertion_point(destructor:blokus.RoomChatSettings)
  SharedDtor(*this);
}
inline void RoomChatSettings::SharedDtor(MessageLite& self) {
  RoomChatSettings& this_ = static_cast<RoomChatSettings&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.welcome_message_.Destroy();
  this_._impl_.~Impl_();
}

inline void* RoomChatSettings::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) RoomChatSettings(arena);
}
constexpr auto RoomChatSettings::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(RoomChatSettings, _impl_.chat_moderators_) +
          decltype(RoomChatSettings::_impl_.chat_moderators_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(RoomChatSettings, _impl_.banned_users_) +
          decltype(RoomChatSettings::_impl_.banned_users_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(RoomChatSettings), alignof(RoomChatSettings), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&RoomChatSettings::PlacementNew_,
                                 sizeof(RoomChatSettings),
                                 alignof(RoomChatSettings));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull RoomChatSettings::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_RoomChatSettings_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &RoomChatSettings::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<RoomChatSettings>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &RoomChatSettings::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<RoomChatSettings>(), &RoomChatSettings::ByteSizeLong,
            &RoomChatSettings::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(RoomChatSettings, _impl_._cached_size_),
        false,
    },
    &RoomChatSettings::kDescriptorMethods,
    &descriptor_table_chat_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* RoomChatSettings::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 11, 0, 82, 2> RoomChatSettings::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    11, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294965248,  // skipmap
    offsetof(decltype(_table_), field_entries),
    11,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::RoomChatSettings>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 room_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RoomChatSettings, _impl_.room_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(RoomChatSettings, _impl_.room_id_)}},
    // bool chat_enabled = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(RoomChatSettings, _impl_.chat_enabled_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(RoomChatSettings, _impl_.chat_enabled_)}},
    // bool spectator_chat_enabled = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(RoomChatSettings, _impl_.spectator_chat_enabled_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(RoomChatSettings, _impl_.spectator_chat_enabled_)}},
    // bool team_chat_enabled = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(RoomChatSettings, _impl_.team_chat_enabled_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(RoomChatSettings, _impl_.team_chat_enabled_)}},
    // int32 message_rate_limit = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RoomChatSettings, _impl_.message_rate_limit_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(RoomChatSettings, _impl_.message_rate_limit_)}},
    // int32 max_message_length = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RoomChatSettings, _impl_.max_message_length_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(RoomChatSettings, _impl_.max_message_length_)}},
    // bool links_allowed = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(RoomChatSettings, _impl_.links_allowed_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(RoomChatSettings, _impl_.links_allowed_)}},
    // bool emotes_allowed = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(RoomChatSettings, _impl_.emotes_allowed_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(RoomChatSettings, _impl_.emotes_allowed_)}},
    // repeated string chat_moderators = 9;
    {::_pbi::TcParser::FastUR1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(RoomChatSettings, _impl_.chat_moderators_)}},
    // repeated string banned_users = 10;
    {::_pbi::TcParser::FastUR1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(RoomChatSettings, _impl_.banned_users_)}},
    // string welcome_message = 11;
    {::_pbi::TcParser::FastUS1,
     {90, 63, 0, PROTOBUF_FIELD_OFFSET(RoomChatSettings, _impl_.welcome_message_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 room_id = 1;
    {PROTOBUF_FIELD_OFFSET(RoomChatSettings, _impl_.room_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool chat_enabled = 2;
    {PROTOBUF_FIELD_OFFSET(RoomChatSettings, _impl_.chat_enabled_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool spectator_chat_enabled = 3;
    {PROTOBUF_FIELD_OFFSET(RoomChatSettings, _impl_.spectator_chat_enabled_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool team_chat_enabled = 4;
    {PROTOBUF_FIELD_OFFSET(RoomChatSettings, _impl_.team_chat_enabled_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 message_rate_limit = 5;
    {PROTOBUF_FIELD_OFFSET(RoomChatSettings, _impl_.message_rate_limit_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 max_message_length = 6;
    {PROTOBUF_FIELD_OFFSET(RoomChatSettings, _impl_.max_message_length_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool links_allowed = 7;
    {PROTOBUF_FIELD_OFFSET(RoomChatSettings, _impl_.links_allowed_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool emotes_allowed = 8;
    {PROTOBUF_FIELD_OFFSET(RoomChatSettings, _impl_.emotes_allowed_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // repeated string chat_moderators = 9;
    {PROTOBUF_FIELD_OFFSET(RoomChatSettings, _impl_.chat_moderators_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // repeated string banned_users = 10;
    {PROTOBUF_FIELD_OFFSET(RoomChatSettings, _impl_.banned_users_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // string welcome_message = 11;
    {PROTOBUF_FIELD_OFFSET(RoomChatSettings, _impl_.welcome_message_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\27\0\0\0\0\0\0\0\0\17\14\17\0\0\0\0"
    "blokus.RoomChatSettings"
    "chat_moderators"
    "banned_users"
    "welcome_message"
  }},
};

PROTOBUF_NOINLINE void RoomChatSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.RoomChatSettings)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chat_moderators_.Clear();
  _impl_.banned_users_.Clear();
  _impl_.welcome_message_.ClearToEmpty();
  ::memset(&_impl_.room_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.emotes_allowed_) -
      reinterpret_cast<char*>(&_impl_.room_id_)) + sizeof(_impl_.emotes_allowed_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* RoomChatSettings::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const RoomChatSettings& this_ = static_cast<const RoomChatSettings&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* RoomChatSettings::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const RoomChatSettings& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.RoomChatSettings)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 room_id = 1;
          if (this_._internal_room_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_room_id(), target);
          }

          // bool chat_enabled = 2;
          if (this_._internal_chat_enabled() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                2, this_._internal_chat_enabled(), target);
          }

          // bool spectator_chat_enabled = 3;
          if (this_._internal_spectator_chat_enabled() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                3, this_._internal_spectator_chat_enabled(), target);
          }

          // bool team_chat_enabled = 4;
          if (this_._internal_team_chat_enabled() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                4, this_._internal_team_chat_enabled(), target);
          }

          // int32 message_rate_limit = 5;
          if (this_._internal_message_rate_limit() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<5>(
                    stream, this_._internal_message_rate_limit(), target);
          }

          // int32 max_message_length = 6;
          if (this_._internal_max_message_length() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<6>(
                    stream, this_._internal_max_message_length(), target);
          }

          // bool links_allowed = 7;
          if (this_._internal_links_allowed() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                7, this_._internal_links_allowed(), target);
          }

          // bool emotes_allowed = 8;
          if (this_._internal_emotes_allowed() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                8, this_._internal_emotes_allowed(), target);
          }

          // repeated string chat_moderators = 9;
          for (int i = 0, n = this_._internal_chat_moderators_size(); i < n; ++i) {
            const auto& s = this_._internal_chat_moderators().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.RoomChatSettings.chat_moderators");
            target = stream->WriteString(9, s, target);
          }

          // repeated string banned_users = 10;
          for (int i = 0, n = this_._internal_banned_users_size(); i < n; ++i) {
            const auto& s = this_._internal_banned_users().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.RoomChatSettings.banned_users");
            target = stream->WriteString(10, s, target);
          }

          // string welcome_message = 11;
          if (!this_._internal_welcome_message().empty()) {
            const std::string& _s = this_._internal_welcome_message();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.RoomChatSettings.welcome_message");
            target = stream->WriteStringMaybeAliased(11, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.RoomChatSettings)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t RoomChatSettings::ByteSizeLong(const MessageLite& base) {
          const RoomChatSettings& this_ = static_cast<const RoomChatSettings&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t RoomChatSettings::ByteSizeLong() const {
          const RoomChatSettings& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.RoomChatSettings)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string chat_moderators = 9;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_chat_moderators().size());
              for (int i = 0, n = this_._internal_chat_moderators().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_chat_moderators().Get(i));
              }
            }
            // repeated string banned_users = 10;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_banned_users().size());
              for (int i = 0, n = this_._internal_banned_users().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_banned_users().Get(i));
              }
            }
          }
           {
            // string welcome_message = 11;
            if (!this_._internal_welcome_message().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_welcome_message());
            }
            // int32 room_id = 1;
            if (this_._internal_room_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_room_id());
            }
            // bool chat_enabled = 2;
            if (this_._internal_chat_enabled() != 0) {
              total_size += 2;
            }
            // bool spectator_chat_enabled = 3;
            if (this_._internal_spectator_chat_enabled() != 0) {
              total_size += 2;
            }
            // bool team_chat_enabled = 4;
            if (this_._internal_team_chat_enabled() != 0) {
              total_size += 2;
            }
            // bool links_allowed = 7;
            if (this_._internal_links_allowed() != 0) {
              total_size += 2;
            }
            // int32 message_rate_limit = 5;
            if (this_._internal_message_rate_limit() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_message_rate_limit());
            }
            // int32 max_message_length = 6;
            if (this_._internal_max_message_length() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_max_message_length());
            }
            // bool emotes_allowed = 8;
            if (this_._internal_emotes_allowed() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void RoomChatSettings::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RoomChatSettings*>(&to_msg);
  auto& from = static_cast<const RoomChatSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.RoomChatSettings)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_chat_moderators()->MergeFrom(from._internal_chat_moderators());
  _this->_internal_mutable_banned_users()->MergeFrom(from._internal_banned_users());
  if (!from._internal_welcome_message().empty()) {
    _this->_internal_set_welcome_message(from._internal_welcome_message());
  }
  if (from._internal_room_id() != 0) {
    _this->_impl_.room_id_ = from._impl_.room_id_;
  }
  if (from._internal_chat_enabled() != 0) {
    _this->_impl_.chat_enabled_ = from._impl_.chat_enabled_;
  }
  if (from._internal_spectator_chat_enabled() != 0) {
    _this->_impl_.spectator_chat_enabled_ = from._impl_.spectator_chat_enabled_;
  }
  if (from._internal_team_chat_enabled() != 0) {
    _this->_impl_.team_chat_enabled_ = from._impl_.team_chat_enabled_;
  }
  if (from._internal_links_allowed() != 0) {
    _this->_impl_.links_allowed_ = from._impl_.links_allowed_;
  }
  if (from._internal_message_rate_limit() != 0) {
    _this->_impl_.message_rate_limit_ = from._impl_.message_rate_limit_;
  }
  if (from._internal_max_message_length() != 0) {
    _this->_impl_.max_message_length_ = from._impl_.max_message_length_;
  }
  if (from._internal_emotes_allowed() != 0) {
    _this->_impl_.emotes_allowed_ = from._impl_.emotes_allowed_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RoomChatSettings::CopyFrom(const RoomChatSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.RoomChatSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RoomChatSettings::InternalSwap(RoomChatSettings* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.chat_moderators_.InternalSwap(&other->_impl_.chat_moderators_);
  _impl_.banned_users_.InternalSwap(&other->_impl_.banned_users_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.welcome_message_, &other->_impl_.welcome_message_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoomChatSettings, _impl_.emotes_allowed_)
      + sizeof(RoomChatSettings::_impl_.emotes_allowed_)
      - PROTOBUF_FIELD_OFFSET(RoomChatSettings, _impl_.room_id_)>(
          reinterpret_cast<char*>(&_impl_.room_id_),
          reinterpret_cast<char*>(&other->_impl_.room_id_));
}

::google::protobuf::Metadata RoomChatSettings::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class EmotePackInfo::_Internal {
 public:
};

EmotePackInfo::EmotePackInfo(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.EmotePackInfo)
}
inline PROTOBUF_NDEBUG_INLINE EmotePackInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::EmotePackInfo& from_msg)
      : emotes_{visibility, arena, from.emotes_},
        pack_id_(arena, from.pack_id_),
        pack_name_(arena, from.pack_name_),
        description_(arena, from.description_),
        _cached_size_{0} {}

EmotePackInfo::EmotePackInfo(
    ::google::protobuf::Arena* arena,
    const EmotePackInfo& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  EmotePackInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, is_premium_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, is_premium_),
           offsetof(Impl_, is_unlocked_) -
               offsetof(Impl_, is_premium_) +
               sizeof(Impl_::is_unlocked_));

  // @@protoc_insertion_point(copy_constructor:blokus.EmotePackInfo)
}
inline PROTOBUF_NDEBUG_INLINE EmotePackInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : emotes_{visibility, arena},
        pack_id_(arena),
        pack_name_(arena),
        description_(arena),
        _cached_size_{0} {}

inline void EmotePackInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, is_premium_),
           0,
           offsetof(Impl_, is_unlocked_) -
               offsetof(Impl_, is_premium_) +
               sizeof(Impl_::is_unlocked_));
}
EmotePackInfo::~EmotePackInfo() {
  // @@protoc_insertion_point(destructor:blokus.EmotePackInfo)
  SharedDtor(*this);
}
inline void EmotePackInfo::SharedDtor(MessageLite& self) {
  EmotePackInfo& this_ = static_cast<EmotePackInfo&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.pack_id_.Destroy();
  this_._impl_.pack_name_.Destroy();
  this_._impl_.description_.Destroy();
  this_._impl_.~Impl_();
}

inline void* EmotePackInfo::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) EmotePackInfo(arena);
}
constexpr auto EmotePackInfo::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(EmotePackInfo, _impl_.emotes_) +
          decltype(EmotePackInfo::_impl_.emotes_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(EmotePackInfo), alignof(EmotePackInfo), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&EmotePackInfo::PlacementNew_,
                                 sizeof(EmotePackInfo),
                                 alignof(EmotePackInfo));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull EmotePackInfo::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_EmotePackInfo_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &EmotePackInfo::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<EmotePackInfo>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &EmotePackInfo::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<EmotePackInfo>(), &EmotePackInfo::ByteSizeLong,
            &EmotePackInfo::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(EmotePackInfo, _impl_._cached_size_),
        false,
    },
    &EmotePackInfo::kDescriptorMethods,
    &descriptor_table_chat_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* EmotePackInfo::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 1, 56, 2> EmotePackInfo::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::EmotePackInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string pack_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(EmotePackInfo, _impl_.pack_id_)}},
    // string pack_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(EmotePackInfo, _impl_.pack_name_)}},
    // string description = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(EmotePackInfo, _impl_.description_)}},
    // repeated .blokus.EmoteInfo emotes = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(EmotePackInfo, _impl_.emotes_)}},
    // bool is_premium = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(EmotePackInfo, _impl_.is_premium_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(EmotePackInfo, _impl_.is_premium_)}},
    // bool is_unlocked = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(EmotePackInfo, _impl_.is_unlocked_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(EmotePackInfo, _impl_.is_unlocked_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string pack_id = 1;
    {PROTOBUF_FIELD_OFFSET(EmotePackInfo, _impl_.pack_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string pack_name = 2;
    {PROTOBUF_FIELD_OFFSET(EmotePackInfo, _impl_.pack_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string description = 3;
    {PROTOBUF_FIELD_OFFSET(EmotePackInfo, _impl_.description_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .blokus.EmoteInfo emotes = 4;
    {PROTOBUF_FIELD_OFFSET(EmotePackInfo, _impl_.emotes_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool is_premium = 5;
    {PROTOBUF_FIELD_OFFSET(EmotePackInfo, _impl_.is_premium_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool is_unlocked = 6;
    {PROTOBUF_FIELD_OFFSET(EmotePackInfo, _impl_.is_unlocked_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::blokus::EmoteInfo>()},
  }}, {{
    "\24\7\11\13\0\0\0\0"
    "blokus.EmotePackInfo"
    "pack_id"
    "pack_name"
    "description"
  }},
};

PROTOBUF_NOINLINE void EmotePackInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.EmotePackInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.emotes_.Clear();
  _impl_.pack_id_.ClearToEmpty();
  _impl_.pack_name_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  ::memset(&_impl_.is_premium_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.is_unlocked_) -
      reinterpret_cast<char*>(&_impl_.is_premium_)) + sizeof(_impl_.is_unlocked_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* EmotePackInfo::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const EmotePackInfo& this_ = static_cast<const EmotePackInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* EmotePackInfo::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const EmotePackInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.EmotePackInfo)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string pack_id = 1;
          if (!this_._internal_pack_id().empty()) {
            const std::string& _s = this_._internal_pack_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.EmotePackInfo.pack_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string pack_name = 2;
          if (!this_._internal_pack_name().empty()) {
            const std::string& _s = this_._internal_pack_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.EmotePackInfo.pack_name");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string description = 3;
          if (!this_._internal_description().empty()) {
            const std::string& _s = this_._internal_description();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.EmotePackInfo.description");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // repeated .blokus.EmoteInfo emotes = 4;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_emotes_size());
               i < n; i++) {
            const auto& repfield = this_._internal_emotes().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    4, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // bool is_premium = 5;
          if (this_._internal_is_premium() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                5, this_._internal_is_premium(), target);
          }

          // bool is_unlocked = 6;
          if (this_._internal_is_unlocked() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                6, this_._internal_is_unlocked(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.EmotePackInfo)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t EmotePackInfo::ByteSizeLong(const MessageLite& base) {
          const EmotePackInfo& this_ = static_cast<const EmotePackInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t EmotePackInfo::ByteSizeLong() const {
          const EmotePackInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.EmotePackInfo)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .blokus.EmoteInfo emotes = 4;
            {
              total_size += 1UL * this_._internal_emotes_size();
              for (const auto& msg : this_._internal_emotes()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // string pack_id = 1;
            if (!this_._internal_pack_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_pack_id());
            }
            // string pack_name = 2;
            if (!this_._internal_pack_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_pack_name());
            }
            // string description = 3;
            if (!this_._internal_description().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_description());
            }
            // bool is_premium = 5;
            if (this_._internal_is_premium() != 0) {
              total_size += 2;
            }
            // bool is_unlocked = 6;
            if (this_._internal_is_unlocked() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void EmotePackInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<EmotePackInfo*>(&to_msg);
  auto& from = static_cast<const EmotePackInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.EmotePackInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_emotes()->MergeFrom(
      from._internal_emotes());
  if (!from._internal_pack_id().empty()) {
    _this->_internal_set_pack_id(from._internal_pack_id());
  }
  if (!from._internal_pack_name().empty()) {
    _this->_internal_set_pack_name(from._internal_pack_name());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (from._internal_is_premium() != 0) {
    _this->_impl_.is_premium_ = from._impl_.is_premium_;
  }
  if (from._internal_is_unlocked() != 0) {
    _this->_impl_.is_unlocked_ = from._impl_.is_unlocked_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EmotePackInfo::CopyFrom(const EmotePackInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.EmotePackInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void EmotePackInfo::InternalSwap(EmotePackInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.emotes_.InternalSwap(&other->_impl_.emotes_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.pack_id_, &other->_impl_.pack_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.pack_name_, &other->_impl_.pack_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, &other->_impl_.description_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EmotePackInfo, _impl_.is_unlocked_)
      + sizeof(EmotePackInfo::_impl_.is_unlocked_)
      - PROTOBUF_FIELD_OFFSET(EmotePackInfo, _impl_.is_premium_)>(
          reinterpret_cast<char*>(&_impl_.is_premium_),
          reinterpret_cast<char*>(&other->_impl_.is_premium_));
}

::google::protobuf::Metadata EmotePackInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class EmoteInfo::_Internal {
 public:
};

EmoteInfo::EmoteInfo(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.EmoteInfo)
}
inline PROTOBUF_NDEBUG_INLINE EmoteInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::EmoteInfo& from_msg)
      : tags_{visibility, arena, from.tags_},
        emote_id_(arena, from.emote_id_),
        emote_name_(arena, from.emote_name_),
        emote_url_(arena, from.emote_url_),
        _cached_size_{0} {}

EmoteInfo::EmoteInfo(
    ::google::protobuf::Arena* arena,
    const EmoteInfo& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  EmoteInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.is_animated_ = from._impl_.is_animated_;

  // @@protoc_insertion_point(copy_constructor:blokus.EmoteInfo)
}
inline PROTOBUF_NDEBUG_INLINE EmoteInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : tags_{visibility, arena},
        emote_id_(arena),
        emote_name_(arena),
        emote_url_(arena),
        _cached_size_{0} {}

inline void EmoteInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.is_animated_ = {};
}
EmoteInfo::~EmoteInfo() {
  // @@protoc_insertion_point(destructor:blokus.EmoteInfo)
  SharedDtor(*this);
}
inline void EmoteInfo::SharedDtor(MessageLite& self) {
  EmoteInfo& this_ = static_cast<EmoteInfo&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.emote_id_.Destroy();
  this_._impl_.emote_name_.Destroy();
  this_._impl_.emote_url_.Destroy();
  this_._impl_.~Impl_();
}

inline void* EmoteInfo::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) EmoteInfo(arena);
}
constexpr auto EmoteInfo::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(EmoteInfo, _impl_.tags_) +
          decltype(EmoteInfo::_impl_.tags_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(EmoteInfo), alignof(EmoteInfo), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&EmoteInfo::PlacementNew_,
                                 sizeof(EmoteInfo),
                                 alignof(EmoteInfo));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull EmoteInfo::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_EmoteInfo_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &EmoteInfo::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<EmoteInfo>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &EmoteInfo::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<EmoteInfo>(), &EmoteInfo::ByteSizeLong,
            &EmoteInfo::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(EmoteInfo, _impl_._cached_size_),
        false,
    },
    &EmoteInfo::kDescriptorMethods,
    &descriptor_table_chat_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* EmoteInfo::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 56, 2> EmoteInfo::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::EmoteInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string emote_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(EmoteInfo, _impl_.emote_id_)}},
    // string emote_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(EmoteInfo, _impl_.emote_name_)}},
    // string emote_url = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(EmoteInfo, _impl_.emote_url_)}},
    // repeated string tags = 4;
    {::_pbi::TcParser::FastUR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(EmoteInfo, _impl_.tags_)}},
    // bool is_animated = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(EmoteInfo, _impl_.is_animated_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(EmoteInfo, _impl_.is_animated_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string emote_id = 1;
    {PROTOBUF_FIELD_OFFSET(EmoteInfo, _impl_.emote_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string emote_name = 2;
    {PROTOBUF_FIELD_OFFSET(EmoteInfo, _impl_.emote_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string emote_url = 3;
    {PROTOBUF_FIELD_OFFSET(EmoteInfo, _impl_.emote_url_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated string tags = 4;
    {PROTOBUF_FIELD_OFFSET(EmoteInfo, _impl_.tags_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // bool is_animated = 5;
    {PROTOBUF_FIELD_OFFSET(EmoteInfo, _impl_.is_animated_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\20\10\12\11\4\0\0\0"
    "blokus.EmoteInfo"
    "emote_id"
    "emote_name"
    "emote_url"
    "tags"
  }},
};

PROTOBUF_NOINLINE void EmoteInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.EmoteInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tags_.Clear();
  _impl_.emote_id_.ClearToEmpty();
  _impl_.emote_name_.ClearToEmpty();
  _impl_.emote_url_.ClearToEmpty();
  _impl_.is_animated_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* EmoteInfo::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const EmoteInfo& this_ = static_cast<const EmoteInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* EmoteInfo::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const EmoteInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.EmoteInfo)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string emote_id = 1;
          if (!this_._internal_emote_id().empty()) {
            const std::string& _s = this_._internal_emote_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.EmoteInfo.emote_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string emote_name = 2;
          if (!this_._internal_emote_name().empty()) {
            const std::string& _s = this_._internal_emote_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.EmoteInfo.emote_name");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string emote_url = 3;
          if (!this_._internal_emote_url().empty()) {
            const std::string& _s = this_._internal_emote_url();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.EmoteInfo.emote_url");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // repeated string tags = 4;
          for (int i = 0, n = this_._internal_tags_size(); i < n; ++i) {
            const auto& s = this_._internal_tags().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.EmoteInfo.tags");
            target = stream->WriteString(4, s, target);
          }

          // bool is_animated = 5;
          if (this_._internal_is_animated() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                5, this_._internal_is_animated(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.EmoteInfo)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t EmoteInfo::ByteSizeLong(const MessageLite& base) {
          const EmoteInfo& this_ = static_cast<const EmoteInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t EmoteInfo::ByteSizeLong() const {
          const EmoteInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.EmoteInfo)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string tags = 4;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_tags().size());
              for (int i = 0, n = this_._internal_tags().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_tags().Get(i));
              }
            }
          }
           {
            // string emote_id = 1;
            if (!this_._internal_emote_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_emote_id());
            }
            // string emote_name = 2;
            if (!this_._internal_emote_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_emote_name());
            }
            // string emote_url = 3;
            if (!this_._internal_emote_url().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_emote_url());
            }
            // bool is_animated = 5;
            if (this_._internal_is_animated() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void EmoteInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<EmoteInfo*>(&to_msg);
  auto& from = static_cast<const EmoteInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.EmoteInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_tags()->MergeFrom(from._internal_tags());
  if (!from._internal_emote_id().empty()) {
    _this->_internal_set_emote_id(from._internal_emote_id());
  }
  if (!from._internal_emote_name().empty()) {
    _this->_internal_set_emote_name(from._internal_emote_name());
  }
  if (!from._internal_emote_url().empty()) {
    _this->_internal_set_emote_url(from._internal_emote_url());
  }
  if (from._internal_is_animated() != 0) {
    _this->_impl_.is_animated_ = from._impl_.is_animated_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EmoteInfo::CopyFrom(const EmoteInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.EmoteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void EmoteInfo::InternalSwap(EmoteInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tags_.InternalSwap(&other->_impl_.tags_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.emote_id_, &other->_impl_.emote_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.emote_name_, &other->_impl_.emote_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.emote_url_, &other->_impl_.emote_url_, arena);
        swap(_impl_.is_animated_, other->_impl_.is_animated_);
}

::google::protobuf::Metadata EmoteInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetEmotePacksRequest::_Internal {
 public:
};

GetEmotePacksRequest::GetEmotePacksRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.GetEmotePacksRequest)
}
GetEmotePacksRequest::GetEmotePacksRequest(
    ::google::protobuf::Arena* arena, const GetEmotePacksRequest& from)
    : GetEmotePacksRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE GetEmotePacksRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GetEmotePacksRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.include_locked_ = {};
}
GetEmotePacksRequest::~GetEmotePacksRequest() {
  // @@protoc_insertion_point(destructor:blokus.GetEmotePacksRequest)
  SharedDtor(*this);
}
inline void GetEmotePacksRequest::SharedDtor(MessageLite& self) {
  GetEmotePacksRequest& this_ = static_cast<GetEmotePacksRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* GetEmotePacksRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetEmotePacksRequest(arena);
}
constexpr auto GetEmotePacksRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(GetEmotePacksRequest),
                                            alignof(GetEmotePacksRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetEmotePacksRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetEmotePacksRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetEmotePacksRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GetEmotePacksRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetEmotePacksRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GetEmotePacksRequest>(), &GetEmotePacksRequest::ByteSizeLong,
            &GetEmotePacksRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetEmotePacksRequest, _impl_._cached_size_),
        false,
    },
    &GetEmotePacksRequest::kDescriptorMethods,
    &descriptor_table_chat_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetEmotePacksRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> GetEmotePacksRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::GetEmotePacksRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bool include_locked = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(GetEmotePacksRequest, _impl_.include_locked_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(GetEmotePacksRequest, _impl_.include_locked_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool include_locked = 1;
    {PROTOBUF_FIELD_OFFSET(GetEmotePacksRequest, _impl_.include_locked_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void GetEmotePacksRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.GetEmotePacksRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.include_locked_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GetEmotePacksRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GetEmotePacksRequest& this_ = static_cast<const GetEmotePacksRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GetEmotePacksRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GetEmotePacksRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.GetEmotePacksRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bool include_locked = 1;
          if (this_._internal_include_locked() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                1, this_._internal_include_locked(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.GetEmotePacksRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GetEmotePacksRequest::ByteSizeLong(const MessageLite& base) {
          const GetEmotePacksRequest& this_ = static_cast<const GetEmotePacksRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GetEmotePacksRequest::ByteSizeLong() const {
          const GetEmotePacksRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.GetEmotePacksRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // bool include_locked = 1;
            if (this_._internal_include_locked() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GetEmotePacksRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetEmotePacksRequest*>(&to_msg);
  auto& from = static_cast<const GetEmotePacksRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.GetEmotePacksRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_include_locked() != 0) {
    _this->_impl_.include_locked_ = from._impl_.include_locked_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetEmotePacksRequest::CopyFrom(const GetEmotePacksRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.GetEmotePacksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetEmotePacksRequest::InternalSwap(GetEmotePacksRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.include_locked_, other->_impl_.include_locked_);
}

::google::protobuf::Metadata GetEmotePacksRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetEmotePacksResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GetEmotePacksResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GetEmotePacksResponse, _impl_._has_bits_);
};

void GetEmotePacksResponse::clear_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_ != nullptr) _impl_.result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GetEmotePacksResponse::GetEmotePacksResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.GetEmotePacksResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetEmotePacksResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::GetEmotePacksResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        emote_packs_{visibility, arena, from.emote_packs_},
        unlocked_pack_ids_{visibility, arena, from.unlocked_pack_ids_} {}

GetEmotePacksResponse::GetEmotePacksResponse(
    ::google::protobuf::Arena* arena,
    const GetEmotePacksResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetEmotePacksResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::blokus::Result>(
                              arena, *from._impl_.result_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:blokus.GetEmotePacksResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetEmotePacksResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        emote_packs_{visibility, arena},
        unlocked_pack_ids_{visibility, arena} {}

inline void GetEmotePacksResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.result_ = {};
}
GetEmotePacksResponse::~GetEmotePacksResponse() {
  // @@protoc_insertion_point(destructor:blokus.GetEmotePacksResponse)
  SharedDtor(*this);
}
inline void GetEmotePacksResponse::SharedDtor(MessageLite& self) {
  GetEmotePacksResponse& this_ = static_cast<GetEmotePacksResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.result_;
  this_._impl_.~Impl_();
}

inline void* GetEmotePacksResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetEmotePacksResponse(arena);
}
constexpr auto GetEmotePacksResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(GetEmotePacksResponse, _impl_.emote_packs_) +
          decltype(GetEmotePacksResponse::_impl_.emote_packs_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(GetEmotePacksResponse, _impl_.unlocked_pack_ids_) +
          decltype(GetEmotePacksResponse::_impl_.unlocked_pack_ids_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(GetEmotePacksResponse), alignof(GetEmotePacksResponse), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&GetEmotePacksResponse::PlacementNew_,
                                 sizeof(GetEmotePacksResponse),
                                 alignof(GetEmotePacksResponse));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetEmotePacksResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetEmotePacksResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetEmotePacksResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GetEmotePacksResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetEmotePacksResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GetEmotePacksResponse>(), &GetEmotePacksResponse::ByteSizeLong,
            &GetEmotePacksResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetEmotePacksResponse, _impl_._cached_size_),
        false,
    },
    &GetEmotePacksResponse::kDescriptorMethods,
    &descriptor_table_chat_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetEmotePacksResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 54, 2> GetEmotePacksResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetEmotePacksResponse, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::GetEmotePacksResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .blokus.Result result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(GetEmotePacksResponse, _impl_.result_)}},
    // repeated .blokus.EmotePackInfo emote_packs = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(GetEmotePacksResponse, _impl_.emote_packs_)}},
    // repeated string unlocked_pack_ids = 3;
    {::_pbi::TcParser::FastUR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(GetEmotePacksResponse, _impl_.unlocked_pack_ids_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .blokus.Result result = 1;
    {PROTOBUF_FIELD_OFFSET(GetEmotePacksResponse, _impl_.result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .blokus.EmotePackInfo emote_packs = 2;
    {PROTOBUF_FIELD_OFFSET(GetEmotePacksResponse, _impl_.emote_packs_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated string unlocked_pack_ids = 3;
    {PROTOBUF_FIELD_OFFSET(GetEmotePacksResponse, _impl_.unlocked_pack_ids_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::blokus::Result>()},
    {::_pbi::TcParser::GetTable<::blokus::EmotePackInfo>()},
  }}, {{
    "\34\0\0\21\0\0\0\0"
    "blokus.GetEmotePacksResponse"
    "unlocked_pack_ids"
  }},
};

PROTOBUF_NOINLINE void GetEmotePacksResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.GetEmotePacksResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.emote_packs_.Clear();
  _impl_.unlocked_pack_ids_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.result_ != nullptr);
    _impl_.result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GetEmotePacksResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GetEmotePacksResponse& this_ = static_cast<const GetEmotePacksResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GetEmotePacksResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GetEmotePacksResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.GetEmotePacksResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .blokus.Result result = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.result_, this_._impl_.result_->GetCachedSize(), target,
                stream);
          }

          // repeated .blokus.EmotePackInfo emote_packs = 2;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_emote_packs_size());
               i < n; i++) {
            const auto& repfield = this_._internal_emote_packs().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    2, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // repeated string unlocked_pack_ids = 3;
          for (int i = 0, n = this_._internal_unlocked_pack_ids_size(); i < n; ++i) {
            const auto& s = this_._internal_unlocked_pack_ids().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.GetEmotePacksResponse.unlocked_pack_ids");
            target = stream->WriteString(3, s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.GetEmotePacksResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GetEmotePacksResponse::ByteSizeLong(const MessageLite& base) {
          const GetEmotePacksResponse& this_ = static_cast<const GetEmotePacksResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GetEmotePacksResponse::ByteSizeLong() const {
          const GetEmotePacksResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.GetEmotePacksResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .blokus.EmotePackInfo emote_packs = 2;
            {
              total_size += 1UL * this_._internal_emote_packs_size();
              for (const auto& msg : this_._internal_emote_packs()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated string unlocked_pack_ids = 3;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_unlocked_pack_ids().size());
              for (int i = 0, n = this_._internal_unlocked_pack_ids().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_unlocked_pack_ids().Get(i));
              }
            }
          }
           {
            // .blokus.Result result = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GetEmotePacksResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetEmotePacksResponse*>(&to_msg);
  auto& from = static_cast<const GetEmotePacksResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.GetEmotePacksResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_emote_packs()->MergeFrom(
      from._internal_emote_packs());
  _this->_internal_mutable_unlocked_pack_ids()->MergeFrom(from._internal_unlocked_pack_ids());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.result_ != nullptr);
    if (_this->_impl_.result_ == nullptr) {
      _this->_impl_.result_ =
          ::google::protobuf::Message::CopyConstruct<::blokus::Result>(arena, *from._impl_.result_);
    } else {
      _this->_impl_.result_->MergeFrom(*from._impl_.result_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetEmotePacksResponse::CopyFrom(const GetEmotePacksResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.GetEmotePacksResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetEmotePacksResponse::InternalSwap(GetEmotePacksResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.emote_packs_.InternalSwap(&other->_impl_.emote_packs_);
  _impl_.unlocked_pack_ids_.InternalSwap(&other->_impl_.unlocked_pack_ids_);
  swap(_impl_.result_, other->_impl_.result_);
}

::google::protobuf::Metadata GetEmotePacksResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace blokus
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_chat_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
