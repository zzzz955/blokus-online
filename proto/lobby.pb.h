// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: lobby.proto
// Protobuf C++ Version: 5.29.3

#ifndef lobby_2eproto_2epb_2eh
#define lobby_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
#include "common.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_lobby_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_lobby_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_lobby_2eproto;
namespace blokus {
class AddFriendRequest;
struct AddFriendRequestDefaultTypeInternal;
extern AddFriendRequestDefaultTypeInternal _AddFriendRequest_default_instance_;
class AddFriendResponse;
struct AddFriendResponseDefaultTypeInternal;
extern AddFriendResponseDefaultTypeInternal _AddFriendResponse_default_instance_;
class CreateRoomRequest;
struct CreateRoomRequestDefaultTypeInternal;
extern CreateRoomRequestDefaultTypeInternal _CreateRoomRequest_default_instance_;
class CreateRoomResponse;
struct CreateRoomResponseDefaultTypeInternal;
extern CreateRoomResponseDefaultTypeInternal _CreateRoomResponse_default_instance_;
class FriendListRequest;
struct FriendListRequestDefaultTypeInternal;
extern FriendListRequestDefaultTypeInternal _FriendListRequest_default_instance_;
class FriendListResponse;
struct FriendListResponseDefaultTypeInternal;
extern FriendListResponseDefaultTypeInternal _FriendListResponse_default_instance_;
class GetRoomListRequest;
struct GetRoomListRequestDefaultTypeInternal;
extern GetRoomListRequestDefaultTypeInternal _GetRoomListRequest_default_instance_;
class GetUserListRequest;
struct GetUserListRequestDefaultTypeInternal;
extern GetUserListRequestDefaultTypeInternal _GetUserListRequest_default_instance_;
class GetUserStatsRequest;
struct GetUserStatsRequestDefaultTypeInternal;
extern GetUserStatsRequestDefaultTypeInternal _GetUserStatsRequest_default_instance_;
class JoinRoomRequest;
struct JoinRoomRequestDefaultTypeInternal;
extern JoinRoomRequestDefaultTypeInternal _JoinRoomRequest_default_instance_;
class JoinRoomResponse;
struct JoinRoomResponseDefaultTypeInternal;
extern JoinRoomResponseDefaultTypeInternal _JoinRoomResponse_default_instance_;
class LeaveRoomRequest;
struct LeaveRoomRequestDefaultTypeInternal;
extern LeaveRoomRequestDefaultTypeInternal _LeaveRoomRequest_default_instance_;
class LeaveRoomResponse;
struct LeaveRoomResponseDefaultTypeInternal;
extern LeaveRoomResponseDefaultTypeInternal _LeaveRoomResponse_default_instance_;
class MaintenanceNotification;
struct MaintenanceNotificationDefaultTypeInternal;
extern MaintenanceNotificationDefaultTypeInternal _MaintenanceNotification_default_instance_;
class PlayerJoinedNotification;
struct PlayerJoinedNotificationDefaultTypeInternal;
extern PlayerJoinedNotificationDefaultTypeInternal _PlayerJoinedNotification_default_instance_;
class PlayerLeftNotification;
struct PlayerLeftNotificationDefaultTypeInternal;
extern PlayerLeftNotificationDefaultTypeInternal _PlayerLeftNotification_default_instance_;
class RoomListResponse;
struct RoomListResponseDefaultTypeInternal;
extern RoomListResponseDefaultTypeInternal _RoomListResponse_default_instance_;
class RoomListUpdate;
struct RoomListUpdateDefaultTypeInternal;
extern RoomListUpdateDefaultTypeInternal _RoomListUpdate_default_instance_;
class ServerAnnouncementNotification;
struct ServerAnnouncementNotificationDefaultTypeInternal;
extern ServerAnnouncementNotificationDefaultTypeInternal _ServerAnnouncementNotification_default_instance_;
class UserListUpdate;
struct UserListUpdateDefaultTypeInternal;
extern UserListUpdateDefaultTypeInternal _UserListUpdate_default_instance_;
class UserStatsResponse;
struct UserStatsResponseDefaultTypeInternal;
extern UserStatsResponseDefaultTypeInternal _UserStatsResponse_default_instance_;
}  // namespace blokus
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace blokus {
enum RoomListUpdate_UpdateType : int {
  RoomListUpdate_UpdateType_ROOM_CREATED = 0,
  RoomListUpdate_UpdateType_ROOM_UPDATED = 1,
  RoomListUpdate_UpdateType_ROOM_DELETED = 2,
  RoomListUpdate_UpdateType_PLAYER_JOINED = 3,
  RoomListUpdate_UpdateType_PLAYER_LEFT = 4,
  RoomListUpdate_UpdateType_GAME_STARTED = 5,
  RoomListUpdate_UpdateType_GAME_ENDED = 6,
  RoomListUpdate_UpdateType_RoomListUpdate_UpdateType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  RoomListUpdate_UpdateType_RoomListUpdate_UpdateType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool RoomListUpdate_UpdateType_IsValid(int value);
extern const uint32_t RoomListUpdate_UpdateType_internal_data_[];
constexpr RoomListUpdate_UpdateType RoomListUpdate_UpdateType_UpdateType_MIN = static_cast<RoomListUpdate_UpdateType>(0);
constexpr RoomListUpdate_UpdateType RoomListUpdate_UpdateType_UpdateType_MAX = static_cast<RoomListUpdate_UpdateType>(6);
constexpr int RoomListUpdate_UpdateType_UpdateType_ARRAYSIZE = 6 + 1;
const ::google::protobuf::EnumDescriptor*
RoomListUpdate_UpdateType_descriptor();
template <typename T>
const std::string& RoomListUpdate_UpdateType_Name(T value) {
  static_assert(std::is_same<T, RoomListUpdate_UpdateType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to UpdateType_Name().");
  return RoomListUpdate_UpdateType_Name(static_cast<RoomListUpdate_UpdateType>(value));
}
template <>
inline const std::string& RoomListUpdate_UpdateType_Name(RoomListUpdate_UpdateType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<RoomListUpdate_UpdateType_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool RoomListUpdate_UpdateType_Parse(absl::string_view name, RoomListUpdate_UpdateType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RoomListUpdate_UpdateType>(
      RoomListUpdate_UpdateType_descriptor(), name, value);
}
enum UserListUpdate_UpdateType : int {
  UserListUpdate_UpdateType_USER_ONLINE = 0,
  UserListUpdate_UpdateType_USER_OFFLINE = 1,
  UserListUpdate_UpdateType_USER_STATUS_CHANGED = 2,
  UserListUpdate_UpdateType_USER_JOINED_ROOM = 3,
  UserListUpdate_UpdateType_USER_LEFT_ROOM = 4,
  UserListUpdate_UpdateType_UserListUpdate_UpdateType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  UserListUpdate_UpdateType_UserListUpdate_UpdateType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool UserListUpdate_UpdateType_IsValid(int value);
extern const uint32_t UserListUpdate_UpdateType_internal_data_[];
constexpr UserListUpdate_UpdateType UserListUpdate_UpdateType_UpdateType_MIN = static_cast<UserListUpdate_UpdateType>(0);
constexpr UserListUpdate_UpdateType UserListUpdate_UpdateType_UpdateType_MAX = static_cast<UserListUpdate_UpdateType>(4);
constexpr int UserListUpdate_UpdateType_UpdateType_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
UserListUpdate_UpdateType_descriptor();
template <typename T>
const std::string& UserListUpdate_UpdateType_Name(T value) {
  static_assert(std::is_same<T, UserListUpdate_UpdateType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to UpdateType_Name().");
  return UserListUpdate_UpdateType_Name(static_cast<UserListUpdate_UpdateType>(value));
}
template <>
inline const std::string& UserListUpdate_UpdateType_Name(UserListUpdate_UpdateType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<UserListUpdate_UpdateType_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool UserListUpdate_UpdateType_Parse(absl::string_view name, UserListUpdate_UpdateType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UserListUpdate_UpdateType>(
      UserListUpdate_UpdateType_descriptor(), name, value);
}
enum ServerAnnouncementNotification_AnnouncementType : int {
  ServerAnnouncementNotification_AnnouncementType_INFO = 0,
  ServerAnnouncementNotification_AnnouncementType_WARNING = 1,
  ServerAnnouncementNotification_AnnouncementType_MAINTENANCE = 2,
  ServerAnnouncementNotification_AnnouncementType_UPDATE = 3,
  ServerAnnouncementNotification_AnnouncementType_EVENT = 4,
  ServerAnnouncementNotification_AnnouncementType_ServerAnnouncementNotification_AnnouncementType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ServerAnnouncementNotification_AnnouncementType_ServerAnnouncementNotification_AnnouncementType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ServerAnnouncementNotification_AnnouncementType_IsValid(int value);
extern const uint32_t ServerAnnouncementNotification_AnnouncementType_internal_data_[];
constexpr ServerAnnouncementNotification_AnnouncementType ServerAnnouncementNotification_AnnouncementType_AnnouncementType_MIN = static_cast<ServerAnnouncementNotification_AnnouncementType>(0);
constexpr ServerAnnouncementNotification_AnnouncementType ServerAnnouncementNotification_AnnouncementType_AnnouncementType_MAX = static_cast<ServerAnnouncementNotification_AnnouncementType>(4);
constexpr int ServerAnnouncementNotification_AnnouncementType_AnnouncementType_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
ServerAnnouncementNotification_AnnouncementType_descriptor();
template <typename T>
const std::string& ServerAnnouncementNotification_AnnouncementType_Name(T value) {
  static_assert(std::is_same<T, ServerAnnouncementNotification_AnnouncementType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to AnnouncementType_Name().");
  return ServerAnnouncementNotification_AnnouncementType_Name(static_cast<ServerAnnouncementNotification_AnnouncementType>(value));
}
template <>
inline const std::string& ServerAnnouncementNotification_AnnouncementType_Name(ServerAnnouncementNotification_AnnouncementType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ServerAnnouncementNotification_AnnouncementType_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool ServerAnnouncementNotification_AnnouncementType_Parse(absl::string_view name, ServerAnnouncementNotification_AnnouncementType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServerAnnouncementNotification_AnnouncementType>(
      ServerAnnouncementNotification_AnnouncementType_descriptor(), name, value);
}
enum RoomFilter : int {
  ROOM_FILTER_ALL = 0,
  ROOM_FILTER_AVAILABLE = 1,
  ROOM_FILTER_IN_PROGRESS = 2,
  ROOM_FILTER_FRIENDS = 3,
  ROOM_FILTER_BEGINNER = 4,
  ROOM_FILTER_EXPERT = 5,
  RoomFilter_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  RoomFilter_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool RoomFilter_IsValid(int value);
extern const uint32_t RoomFilter_internal_data_[];
constexpr RoomFilter RoomFilter_MIN = static_cast<RoomFilter>(0);
constexpr RoomFilter RoomFilter_MAX = static_cast<RoomFilter>(5);
constexpr int RoomFilter_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
RoomFilter_descriptor();
template <typename T>
const std::string& RoomFilter_Name(T value) {
  static_assert(std::is_same<T, RoomFilter>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to RoomFilter_Name().");
  return RoomFilter_Name(static_cast<RoomFilter>(value));
}
template <>
inline const std::string& RoomFilter_Name(RoomFilter value) {
  return ::google::protobuf::internal::NameOfDenseEnum<RoomFilter_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool RoomFilter_Parse(absl::string_view name, RoomFilter* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RoomFilter>(
      RoomFilter_descriptor(), name, value);
}
enum RoomSortOrder : int {
  ROOM_SORT_CREATED_TIME = 0,
  ROOM_SORT_PLAYER_COUNT = 1,
  ROOM_SORT_ROOM_NAME = 2,
  ROOM_SORT_HOST_RATING = 3,
  RoomSortOrder_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  RoomSortOrder_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool RoomSortOrder_IsValid(int value);
extern const uint32_t RoomSortOrder_internal_data_[];
constexpr RoomSortOrder RoomSortOrder_MIN = static_cast<RoomSortOrder>(0);
constexpr RoomSortOrder RoomSortOrder_MAX = static_cast<RoomSortOrder>(3);
constexpr int RoomSortOrder_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
RoomSortOrder_descriptor();
template <typename T>
const std::string& RoomSortOrder_Name(T value) {
  static_assert(std::is_same<T, RoomSortOrder>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to RoomSortOrder_Name().");
  return RoomSortOrder_Name(static_cast<RoomSortOrder>(value));
}
template <>
inline const std::string& RoomSortOrder_Name(RoomSortOrder value) {
  return ::google::protobuf::internal::NameOfDenseEnum<RoomSortOrder_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool RoomSortOrder_Parse(absl::string_view name, RoomSortOrder* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RoomSortOrder>(
      RoomSortOrder_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class LeaveRoomRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.LeaveRoomRequest) */ {
 public:
  inline LeaveRoomRequest() : LeaveRoomRequest(nullptr) {}
  ~LeaveRoomRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(LeaveRoomRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(LeaveRoomRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LeaveRoomRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline LeaveRoomRequest(const LeaveRoomRequest& from) : LeaveRoomRequest(nullptr, from) {}
  inline LeaveRoomRequest(LeaveRoomRequest&& from) noexcept
      : LeaveRoomRequest(nullptr, std::move(from)) {}
  inline LeaveRoomRequest& operator=(const LeaveRoomRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaveRoomRequest& operator=(LeaveRoomRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LeaveRoomRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LeaveRoomRequest* internal_default_instance() {
    return reinterpret_cast<const LeaveRoomRequest*>(
        &_LeaveRoomRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(LeaveRoomRequest& a, LeaveRoomRequest& b) { a.Swap(&b); }
  inline void Swap(LeaveRoomRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LeaveRoomRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LeaveRoomRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<LeaveRoomRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LeaveRoomRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LeaveRoomRequest& from) { LeaveRoomRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(LeaveRoomRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.LeaveRoomRequest"; }

 protected:
  explicit LeaveRoomRequest(::google::protobuf::Arena* arena);
  LeaveRoomRequest(::google::protobuf::Arena* arena, const LeaveRoomRequest& from);
  LeaveRoomRequest(::google::protobuf::Arena* arena, LeaveRoomRequest&& from) noexcept
      : LeaveRoomRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kReasonFieldNumber = 2,
    kNewHostUsernameFieldNumber = 4,
    kRoomIdFieldNumber = 1,
    kTransferHostFieldNumber = 3,
  };
  // string reason = 2;
  void clear_reason() ;
  const std::string& reason() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reason(Arg_&& arg, Args_... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* value);

  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(
      const std::string& value);
  std::string* _internal_mutable_reason();

  public:
  // string new_host_username = 4;
  void clear_new_host_username() ;
  const std::string& new_host_username() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_new_host_username(Arg_&& arg, Args_... args);
  std::string* mutable_new_host_username();
  PROTOBUF_NODISCARD std::string* release_new_host_username();
  void set_allocated_new_host_username(std::string* value);

  private:
  const std::string& _internal_new_host_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_new_host_username(
      const std::string& value);
  std::string* _internal_mutable_new_host_username();

  public:
  // int32 room_id = 1;
  void clear_room_id() ;
  ::int32_t room_id() const;
  void set_room_id(::int32_t value);

  private:
  ::int32_t _internal_room_id() const;
  void _internal_set_room_id(::int32_t value);

  public:
  // bool transfer_host = 3;
  void clear_transfer_host() ;
  bool transfer_host() const;
  void set_transfer_host(bool value);

  private:
  bool _internal_transfer_host() const;
  void _internal_set_transfer_host(bool value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.LeaveRoomRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      55, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LeaveRoomRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr reason_;
    ::google::protobuf::internal::ArenaStringPtr new_host_username_;
    ::int32_t room_id_;
    bool transfer_host_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lobby_2eproto;
};
// -------------------------------------------------------------------

class JoinRoomRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.JoinRoomRequest) */ {
 public:
  inline JoinRoomRequest() : JoinRoomRequest(nullptr) {}
  ~JoinRoomRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(JoinRoomRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(JoinRoomRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR JoinRoomRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline JoinRoomRequest(const JoinRoomRequest& from) : JoinRoomRequest(nullptr, from) {}
  inline JoinRoomRequest(JoinRoomRequest&& from) noexcept
      : JoinRoomRequest(nullptr, std::move(from)) {}
  inline JoinRoomRequest& operator=(const JoinRoomRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinRoomRequest& operator=(JoinRoomRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JoinRoomRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinRoomRequest* internal_default_instance() {
    return reinterpret_cast<const JoinRoomRequest*>(
        &_JoinRoomRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(JoinRoomRequest& a, JoinRoomRequest& b) { a.Swap(&b); }
  inline void Swap(JoinRoomRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinRoomRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JoinRoomRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<JoinRoomRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const JoinRoomRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const JoinRoomRequest& from) { JoinRoomRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(JoinRoomRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.JoinRoomRequest"; }

 protected:
  explicit JoinRoomRequest(::google::protobuf::Arena* arena);
  JoinRoomRequest(::google::protobuf::Arena* arena, const JoinRoomRequest& from);
  JoinRoomRequest(::google::protobuf::Arena* arena, JoinRoomRequest&& from) noexcept
      : JoinRoomRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPasswordFieldNumber = 2,
    kJoinTokenFieldNumber = 3,
    kRoomIdFieldNumber = 1,
    kPreferredColorFieldNumber = 4,
    kAsSpectatorFieldNumber = 5,
  };
  // string password = 2;
  void clear_password() ;
  const std::string& password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* value);

  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(
      const std::string& value);
  std::string* _internal_mutable_password();

  public:
  // string join_token = 3;
  void clear_join_token() ;
  const std::string& join_token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_join_token(Arg_&& arg, Args_... args);
  std::string* mutable_join_token();
  PROTOBUF_NODISCARD std::string* release_join_token();
  void set_allocated_join_token(std::string* value);

  private:
  const std::string& _internal_join_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_join_token(
      const std::string& value);
  std::string* _internal_mutable_join_token();

  public:
  // int32 room_id = 1;
  void clear_room_id() ;
  ::int32_t room_id() const;
  void set_room_id(::int32_t value);

  private:
  ::int32_t _internal_room_id() const;
  void _internal_set_room_id(::int32_t value);

  public:
  // .blokus.PlayerColor preferred_color = 4;
  void clear_preferred_color() ;
  ::blokus::PlayerColor preferred_color() const;
  void set_preferred_color(::blokus::PlayerColor value);

  private:
  ::blokus::PlayerColor _internal_preferred_color() const;
  void _internal_set_preferred_color(::blokus::PlayerColor value);

  public:
  // bool as_spectator = 5;
  void clear_as_spectator() ;
  bool as_spectator() const;
  void set_as_spectator(bool value);

  private:
  bool _internal_as_spectator() const;
  void _internal_set_as_spectator(bool value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.JoinRoomRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      49, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const JoinRoomRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr password_;
    ::google::protobuf::internal::ArenaStringPtr join_token_;
    ::int32_t room_id_;
    int preferred_color_;
    bool as_spectator_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lobby_2eproto;
};
// -------------------------------------------------------------------

class GetUserStatsRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.GetUserStatsRequest) */ {
 public:
  inline GetUserStatsRequest() : GetUserStatsRequest(nullptr) {}
  ~GetUserStatsRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetUserStatsRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetUserStatsRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetUserStatsRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetUserStatsRequest(const GetUserStatsRequest& from) : GetUserStatsRequest(nullptr, from) {}
  inline GetUserStatsRequest(GetUserStatsRequest&& from) noexcept
      : GetUserStatsRequest(nullptr, std::move(from)) {}
  inline GetUserStatsRequest& operator=(const GetUserStatsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserStatsRequest& operator=(GetUserStatsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetUserStatsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUserStatsRequest* internal_default_instance() {
    return reinterpret_cast<const GetUserStatsRequest*>(
        &_GetUserStatsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(GetUserStatsRequest& a, GetUserStatsRequest& b) { a.Swap(&b); }
  inline void Swap(GetUserStatsRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUserStatsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetUserStatsRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetUserStatsRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetUserStatsRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetUserStatsRequest& from) { GetUserStatsRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetUserStatsRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.GetUserStatsRequest"; }

 protected:
  explicit GetUserStatsRequest(::google::protobuf::Arena* arena);
  GetUserStatsRequest(::google::protobuf::Arena* arena, const GetUserStatsRequest& from);
  GetUserStatsRequest(::google::protobuf::Arena* arena, GetUserStatsRequest&& from) noexcept
      : GetUserStatsRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUsernameFieldNumber = 1,
    kIncludeGameHistoryFieldNumber = 2,
    kIncludeAchievementsFieldNumber = 3,
    kRecentGamesCountFieldNumber = 4,
  };
  // string username = 1;
  void clear_username() ;
  const std::string& username() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_username(Arg_&& arg, Args_... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* value);

  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(
      const std::string& value);
  std::string* _internal_mutable_username();

  public:
  // bool include_game_history = 2;
  void clear_include_game_history() ;
  bool include_game_history() const;
  void set_include_game_history(bool value);

  private:
  bool _internal_include_game_history() const;
  void _internal_set_include_game_history(bool value);

  public:
  // bool include_achievements = 3;
  void clear_include_achievements() ;
  bool include_achievements() const;
  void set_include_achievements(bool value);

  private:
  bool _internal_include_achievements() const;
  void _internal_set_include_achievements(bool value);

  public:
  // int32 recent_games_count = 4;
  void clear_recent_games_count() ;
  ::int32_t recent_games_count() const;
  void set_recent_games_count(::int32_t value);

  private:
  ::int32_t _internal_recent_games_count() const;
  void _internal_set_recent_games_count(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.GetUserStatsRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      43, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetUserStatsRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr username_;
    bool include_game_history_;
    bool include_achievements_;
    ::int32_t recent_games_count_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lobby_2eproto;
};
// -------------------------------------------------------------------

class GetUserListRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.GetUserListRequest) */ {
 public:
  inline GetUserListRequest() : GetUserListRequest(nullptr) {}
  ~GetUserListRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetUserListRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetUserListRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetUserListRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetUserListRequest(const GetUserListRequest& from) : GetUserListRequest(nullptr, from) {}
  inline GetUserListRequest(GetUserListRequest&& from) noexcept
      : GetUserListRequest(nullptr, std::move(from)) {}
  inline GetUserListRequest& operator=(const GetUserListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserListRequest& operator=(GetUserListRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetUserListRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUserListRequest* internal_default_instance() {
    return reinterpret_cast<const GetUserListRequest*>(
        &_GetUserListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(GetUserListRequest& a, GetUserListRequest& b) { a.Swap(&b); }
  inline void Swap(GetUserListRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUserListRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetUserListRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetUserListRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetUserListRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetUserListRequest& from) { GetUserListRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetUserListRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.GetUserListRequest"; }

 protected:
  explicit GetUserListRequest(::google::protobuf::Arena* arena);
  GetUserListRequest(::google::protobuf::Arena* arena, const GetUserListRequest& from);
  GetUserListRequest(::google::protobuf::Arena* arena, GetUserListRequest&& from) noexcept
      : GetUserListRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSearchQueryFieldNumber = 2,
    kStatusFilterFieldNumber = 1,
    kPageFieldNumber = 3,
    kPageSizeFieldNumber = 4,
  };
  // string search_query = 2;
  void clear_search_query() ;
  const std::string& search_query() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_search_query(Arg_&& arg, Args_... args);
  std::string* mutable_search_query();
  PROTOBUF_NODISCARD std::string* release_search_query();
  void set_allocated_search_query(std::string* value);

  private:
  const std::string& _internal_search_query() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_search_query(
      const std::string& value);
  std::string* _internal_mutable_search_query();

  public:
  // .blokus.UserStatus status_filter = 1;
  void clear_status_filter() ;
  ::blokus::UserStatus status_filter() const;
  void set_status_filter(::blokus::UserStatus value);

  private:
  ::blokus::UserStatus _internal_status_filter() const;
  void _internal_set_status_filter(::blokus::UserStatus value);

  public:
  // int32 page = 3;
  void clear_page() ;
  ::int32_t page() const;
  void set_page(::int32_t value);

  private:
  ::int32_t _internal_page() const;
  void _internal_set_page(::int32_t value);

  public:
  // int32 page_size = 4;
  void clear_page_size() ;
  ::int32_t page_size() const;
  void set_page_size(::int32_t value);

  private:
  ::int32_t _internal_page_size() const;
  void _internal_set_page_size(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.GetUserListRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      46, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetUserListRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr search_query_;
    int status_filter_;
    ::int32_t page_;
    ::int32_t page_size_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lobby_2eproto;
};
// -------------------------------------------------------------------

class GetRoomListRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.GetRoomListRequest) */ {
 public:
  inline GetRoomListRequest() : GetRoomListRequest(nullptr) {}
  ~GetRoomListRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetRoomListRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetRoomListRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetRoomListRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetRoomListRequest(const GetRoomListRequest& from) : GetRoomListRequest(nullptr, from) {}
  inline GetRoomListRequest(GetRoomListRequest&& from) noexcept
      : GetRoomListRequest(nullptr, std::move(from)) {}
  inline GetRoomListRequest& operator=(const GetRoomListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRoomListRequest& operator=(GetRoomListRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRoomListRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRoomListRequest* internal_default_instance() {
    return reinterpret_cast<const GetRoomListRequest*>(
        &_GetRoomListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(GetRoomListRequest& a, GetRoomListRequest& b) { a.Swap(&b); }
  inline void Swap(GetRoomListRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRoomListRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRoomListRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetRoomListRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetRoomListRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetRoomListRequest& from) { GetRoomListRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetRoomListRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.GetRoomListRequest"; }

 protected:
  explicit GetRoomListRequest(::google::protobuf::Arena* arena);
  GetRoomListRequest(::google::protobuf::Arena* arena, const GetRoomListRequest& from);
  GetRoomListRequest(::google::protobuf::Arena* arena, GetRoomListRequest&& from) noexcept
      : GetRoomListRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSearchQueryFieldNumber = 6,
    kHostNameFieldNumber = 7,
    kFilterFieldNumber = 1,
    kSortOrderFieldNumber = 2,
    kPageFieldNumber = 4,
    kPageSizeFieldNumber = 5,
    kAscendingFieldNumber = 3,
    kIncludePrivateFieldNumber = 10,
    kMinPlayersFieldNumber = 8,
    kMaxPlayersFieldNumber = 9,
  };
  // string search_query = 6;
  void clear_search_query() ;
  const std::string& search_query() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_search_query(Arg_&& arg, Args_... args);
  std::string* mutable_search_query();
  PROTOBUF_NODISCARD std::string* release_search_query();
  void set_allocated_search_query(std::string* value);

  private:
  const std::string& _internal_search_query() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_search_query(
      const std::string& value);
  std::string* _internal_mutable_search_query();

  public:
  // string host_name = 7;
  void clear_host_name() ;
  const std::string& host_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_host_name(Arg_&& arg, Args_... args);
  std::string* mutable_host_name();
  PROTOBUF_NODISCARD std::string* release_host_name();
  void set_allocated_host_name(std::string* value);

  private:
  const std::string& _internal_host_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host_name(
      const std::string& value);
  std::string* _internal_mutable_host_name();

  public:
  // .blokus.RoomFilter filter = 1;
  void clear_filter() ;
  ::blokus::RoomFilter filter() const;
  void set_filter(::blokus::RoomFilter value);

  private:
  ::blokus::RoomFilter _internal_filter() const;
  void _internal_set_filter(::blokus::RoomFilter value);

  public:
  // .blokus.RoomSortOrder sort_order = 2;
  void clear_sort_order() ;
  ::blokus::RoomSortOrder sort_order() const;
  void set_sort_order(::blokus::RoomSortOrder value);

  private:
  ::blokus::RoomSortOrder _internal_sort_order() const;
  void _internal_set_sort_order(::blokus::RoomSortOrder value);

  public:
  // int32 page = 4;
  void clear_page() ;
  ::int32_t page() const;
  void set_page(::int32_t value);

  private:
  ::int32_t _internal_page() const;
  void _internal_set_page(::int32_t value);

  public:
  // int32 page_size = 5;
  void clear_page_size() ;
  ::int32_t page_size() const;
  void set_page_size(::int32_t value);

  private:
  ::int32_t _internal_page_size() const;
  void _internal_set_page_size(::int32_t value);

  public:
  // bool ascending = 3;
  void clear_ascending() ;
  bool ascending() const;
  void set_ascending(bool value);

  private:
  bool _internal_ascending() const;
  void _internal_set_ascending(bool value);

  public:
  // bool include_private = 10;
  void clear_include_private() ;
  bool include_private() const;
  void set_include_private(bool value);

  private:
  bool _internal_include_private() const;
  void _internal_set_include_private(bool value);

  public:
  // int32 min_players = 8;
  void clear_min_players() ;
  ::int32_t min_players() const;
  void set_min_players(::int32_t value);

  private:
  ::int32_t _internal_min_players() const;
  void _internal_set_min_players(::int32_t value);

  public:
  // int32 max_players = 9;
  void clear_max_players() ;
  ::int32_t max_players() const;
  void set_max_players(::int32_t value);

  private:
  ::int32_t _internal_max_players() const;
  void _internal_set_max_players(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.GetRoomListRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 10, 0,
      63, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetRoomListRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr search_query_;
    ::google::protobuf::internal::ArenaStringPtr host_name_;
    int filter_;
    int sort_order_;
    ::int32_t page_;
    ::int32_t page_size_;
    bool ascending_;
    bool include_private_;
    ::int32_t min_players_;
    ::int32_t max_players_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lobby_2eproto;
};
// -------------------------------------------------------------------

class FriendListRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.FriendListRequest) */ {
 public:
  inline FriendListRequest() : FriendListRequest(nullptr) {}
  ~FriendListRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(FriendListRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(FriendListRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FriendListRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline FriendListRequest(const FriendListRequest& from) : FriendListRequest(nullptr, from) {}
  inline FriendListRequest(FriendListRequest&& from) noexcept
      : FriendListRequest(nullptr, std::move(from)) {}
  inline FriendListRequest& operator=(const FriendListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendListRequest& operator=(FriendListRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FriendListRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FriendListRequest* internal_default_instance() {
    return reinterpret_cast<const FriendListRequest*>(
        &_FriendListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(FriendListRequest& a, FriendListRequest& b) { a.Swap(&b); }
  inline void Swap(FriendListRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendListRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FriendListRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<FriendListRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FriendListRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FriendListRequest& from) { FriendListRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(FriendListRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.FriendListRequest"; }

 protected:
  explicit FriendListRequest(::google::protobuf::Arena* arena);
  FriendListRequest(::google::protobuf::Arena* arena, const FriendListRequest& from);
  FriendListRequest(::google::protobuf::Arena* arena, FriendListRequest&& from) noexcept
      : FriendListRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIncludeOfflineFieldNumber = 1,
  };
  // bool include_offline = 1;
  void clear_include_offline() ;
  bool include_offline() const;
  void set_include_offline(bool value);

  private:
  bool _internal_include_offline() const;
  void _internal_set_include_offline(bool value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.FriendListRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const FriendListRequest& from_msg);
    bool include_offline_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lobby_2eproto;
};
// -------------------------------------------------------------------

class CreateRoomRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.CreateRoomRequest) */ {
 public:
  inline CreateRoomRequest() : CreateRoomRequest(nullptr) {}
  ~CreateRoomRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CreateRoomRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CreateRoomRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CreateRoomRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline CreateRoomRequest(const CreateRoomRequest& from) : CreateRoomRequest(nullptr, from) {}
  inline CreateRoomRequest(CreateRoomRequest&& from) noexcept
      : CreateRoomRequest(nullptr, std::move(from)) {}
  inline CreateRoomRequest& operator=(const CreateRoomRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRoomRequest& operator=(CreateRoomRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateRoomRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateRoomRequest* internal_default_instance() {
    return reinterpret_cast<const CreateRoomRequest*>(
        &_CreateRoomRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(CreateRoomRequest& a, CreateRoomRequest& b) { a.Swap(&b); }
  inline void Swap(CreateRoomRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateRoomRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateRoomRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CreateRoomRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CreateRoomRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CreateRoomRequest& from) { CreateRoomRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CreateRoomRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.CreateRoomRequest"; }

 protected:
  explicit CreateRoomRequest(::google::protobuf::Arena* arena);
  CreateRoomRequest(::google::protobuf::Arena* arena, const CreateRoomRequest& from);
  CreateRoomRequest(::google::protobuf::Arena* arena, CreateRoomRequest&& from) noexcept
      : CreateRoomRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTagsFieldNumber = 9,
    kRoomNameFieldNumber = 1,
    kPasswordFieldNumber = 3,
    kGameModeFieldNumber = 4,
    kDescriptionFieldNumber = 8,
    kMaxPlayersFieldNumber = 5,
    kTurnTimeSecondsFieldNumber = 6,
    kMinRatingFieldNumber = 10,
    kIsPrivateFieldNumber = 2,
    kAllowAiFieldNumber = 7,
    kSpectatorsAllowedFieldNumber = 15,
    kAutoStartFieldNumber = 17,
    kMaxRatingFieldNumber = 11,
    kMaxSpectatorsFieldNumber = 16,
    kRankedGameFieldNumber = 18,
  };
  // repeated string tags = 9;
  int tags_size() const;
  private:
  int _internal_tags_size() const;

  public:
  void clear_tags() ;
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tags(int index, Arg_&& value, Args_... args);
  std::string* add_tags();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_tags(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& tags() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_tags();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_tags() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_tags();

  public:
  // string room_name = 1;
  void clear_room_name() ;
  const std::string& room_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_room_name(Arg_&& arg, Args_... args);
  std::string* mutable_room_name();
  PROTOBUF_NODISCARD std::string* release_room_name();
  void set_allocated_room_name(std::string* value);

  private:
  const std::string& _internal_room_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_name(
      const std::string& value);
  std::string* _internal_mutable_room_name();

  public:
  // string password = 3;
  void clear_password() ;
  const std::string& password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* value);

  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(
      const std::string& value);
  std::string* _internal_mutable_password();

  public:
  // string game_mode = 4;
  void clear_game_mode() ;
  const std::string& game_mode() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_game_mode(Arg_&& arg, Args_... args);
  std::string* mutable_game_mode();
  PROTOBUF_NODISCARD std::string* release_game_mode();
  void set_allocated_game_mode(std::string* value);

  private:
  const std::string& _internal_game_mode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_game_mode(
      const std::string& value);
  std::string* _internal_mutable_game_mode();

  public:
  // string description = 8;
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* value);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // int32 max_players = 5;
  void clear_max_players() ;
  ::int32_t max_players() const;
  void set_max_players(::int32_t value);

  private:
  ::int32_t _internal_max_players() const;
  void _internal_set_max_players(::int32_t value);

  public:
  // int32 turn_time_seconds = 6;
  void clear_turn_time_seconds() ;
  ::int32_t turn_time_seconds() const;
  void set_turn_time_seconds(::int32_t value);

  private:
  ::int32_t _internal_turn_time_seconds() const;
  void _internal_set_turn_time_seconds(::int32_t value);

  public:
  // int32 min_rating = 10;
  void clear_min_rating() ;
  ::int32_t min_rating() const;
  void set_min_rating(::int32_t value);

  private:
  ::int32_t _internal_min_rating() const;
  void _internal_set_min_rating(::int32_t value);

  public:
  // bool is_private = 2;
  void clear_is_private() ;
  bool is_private() const;
  void set_is_private(bool value);

  private:
  bool _internal_is_private() const;
  void _internal_set_is_private(bool value);

  public:
  // bool allow_ai = 7;
  void clear_allow_ai() ;
  bool allow_ai() const;
  void set_allow_ai(bool value);

  private:
  bool _internal_allow_ai() const;
  void _internal_set_allow_ai(bool value);

  public:
  // bool spectators_allowed = 15;
  void clear_spectators_allowed() ;
  bool spectators_allowed() const;
  void set_spectators_allowed(bool value);

  private:
  bool _internal_spectators_allowed() const;
  void _internal_set_spectators_allowed(bool value);

  public:
  // bool auto_start = 17;
  void clear_auto_start() ;
  bool auto_start() const;
  void set_auto_start(bool value);

  private:
  bool _internal_auto_start() const;
  void _internal_set_auto_start(bool value);

  public:
  // int32 max_rating = 11;
  void clear_max_rating() ;
  ::int32_t max_rating() const;
  void set_max_rating(::int32_t value);

  private:
  ::int32_t _internal_max_rating() const;
  void _internal_set_max_rating(::int32_t value);

  public:
  // int32 max_spectators = 16;
  void clear_max_spectators() ;
  ::int32_t max_spectators() const;
  void set_max_spectators(::int32_t value);

  private:
  ::int32_t _internal_max_spectators() const;
  void _internal_set_max_spectators(::int32_t value);

  public:
  // bool ranked_game = 18;
  void clear_ranked_game() ;
  bool ranked_game() const;
  void set_ranked_game(bool value);

  private:
  bool _internal_ranked_game() const;
  void _internal_set_ranked_game(bool value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.CreateRoomRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 15, 0,
      82, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CreateRoomRequest& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> tags_;
    ::google::protobuf::internal::ArenaStringPtr room_name_;
    ::google::protobuf::internal::ArenaStringPtr password_;
    ::google::protobuf::internal::ArenaStringPtr game_mode_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    ::int32_t max_players_;
    ::int32_t turn_time_seconds_;
    ::int32_t min_rating_;
    bool is_private_;
    bool allow_ai_;
    bool spectators_allowed_;
    bool auto_start_;
    ::int32_t max_rating_;
    ::int32_t max_spectators_;
    bool ranked_game_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lobby_2eproto;
};
// -------------------------------------------------------------------

class AddFriendRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.AddFriendRequest) */ {
 public:
  inline AddFriendRequest() : AddFriendRequest(nullptr) {}
  ~AddFriendRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AddFriendRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AddFriendRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AddFriendRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline AddFriendRequest(const AddFriendRequest& from) : AddFriendRequest(nullptr, from) {}
  inline AddFriendRequest(AddFriendRequest&& from) noexcept
      : AddFriendRequest(nullptr, std::move(from)) {}
  inline AddFriendRequest& operator=(const AddFriendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddFriendRequest& operator=(AddFriendRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddFriendRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddFriendRequest* internal_default_instance() {
    return reinterpret_cast<const AddFriendRequest*>(
        &_AddFriendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 17;
  friend void swap(AddFriendRequest& a, AddFriendRequest& b) { a.Swap(&b); }
  inline void Swap(AddFriendRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddFriendRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddFriendRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AddFriendRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AddFriendRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AddFriendRequest& from) { AddFriendRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AddFriendRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.AddFriendRequest"; }

 protected:
  explicit AddFriendRequest(::google::protobuf::Arena* arena);
  AddFriendRequest(::google::protobuf::Arena* arena, const AddFriendRequest& from);
  AddFriendRequest(::google::protobuf::Arena* arena, AddFriendRequest&& from) noexcept
      : AddFriendRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUsernameFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // string username = 1;
  void clear_username() ;
  const std::string& username() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_username(Arg_&& arg, Args_... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* value);

  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(
      const std::string& value);
  std::string* _internal_mutable_username();

  public:
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // @@protoc_insertion_point(class_scope:blokus.AddFriendRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      47, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AddFriendRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr username_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lobby_2eproto;
};
// -------------------------------------------------------------------

class ServerAnnouncementNotification final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.ServerAnnouncementNotification) */ {
 public:
  inline ServerAnnouncementNotification() : ServerAnnouncementNotification(nullptr) {}
  ~ServerAnnouncementNotification() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ServerAnnouncementNotification* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ServerAnnouncementNotification));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ServerAnnouncementNotification(
      ::google::protobuf::internal::ConstantInitialized);

  inline ServerAnnouncementNotification(const ServerAnnouncementNotification& from) : ServerAnnouncementNotification(nullptr, from) {}
  inline ServerAnnouncementNotification(ServerAnnouncementNotification&& from) noexcept
      : ServerAnnouncementNotification(nullptr, std::move(from)) {}
  inline ServerAnnouncementNotification& operator=(const ServerAnnouncementNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerAnnouncementNotification& operator=(ServerAnnouncementNotification&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerAnnouncementNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerAnnouncementNotification* internal_default_instance() {
    return reinterpret_cast<const ServerAnnouncementNotification*>(
        &_ServerAnnouncementNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 19;
  friend void swap(ServerAnnouncementNotification& a, ServerAnnouncementNotification& b) { a.Swap(&b); }
  inline void Swap(ServerAnnouncementNotification* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerAnnouncementNotification* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerAnnouncementNotification* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ServerAnnouncementNotification>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ServerAnnouncementNotification& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ServerAnnouncementNotification& from) { ServerAnnouncementNotification::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ServerAnnouncementNotification* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.ServerAnnouncementNotification"; }

 protected:
  explicit ServerAnnouncementNotification(::google::protobuf::Arena* arena);
  ServerAnnouncementNotification(::google::protobuf::Arena* arena, const ServerAnnouncementNotification& from);
  ServerAnnouncementNotification(::google::protobuf::Arena* arena, ServerAnnouncementNotification&& from) noexcept
      : ServerAnnouncementNotification(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using AnnouncementType = ServerAnnouncementNotification_AnnouncementType;
  static constexpr AnnouncementType INFO = ServerAnnouncementNotification_AnnouncementType_INFO;
  static constexpr AnnouncementType WARNING = ServerAnnouncementNotification_AnnouncementType_WARNING;
  static constexpr AnnouncementType MAINTENANCE = ServerAnnouncementNotification_AnnouncementType_MAINTENANCE;
  static constexpr AnnouncementType UPDATE = ServerAnnouncementNotification_AnnouncementType_UPDATE;
  static constexpr AnnouncementType EVENT = ServerAnnouncementNotification_AnnouncementType_EVENT;
  static inline bool AnnouncementType_IsValid(int value) {
    return ServerAnnouncementNotification_AnnouncementType_IsValid(value);
  }
  static constexpr AnnouncementType AnnouncementType_MIN = ServerAnnouncementNotification_AnnouncementType_AnnouncementType_MIN;
  static constexpr AnnouncementType AnnouncementType_MAX = ServerAnnouncementNotification_AnnouncementType_AnnouncementType_MAX;
  static constexpr int AnnouncementType_ARRAYSIZE = ServerAnnouncementNotification_AnnouncementType_AnnouncementType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* AnnouncementType_descriptor() {
    return ServerAnnouncementNotification_AnnouncementType_descriptor();
  }
  template <typename T>
  static inline const std::string& AnnouncementType_Name(T value) {
    return ServerAnnouncementNotification_AnnouncementType_Name(value);
  }
  static inline bool AnnouncementType_Parse(absl::string_view name, AnnouncementType* value) {
    return ServerAnnouncementNotification_AnnouncementType_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kTitleFieldNumber = 2,
    kMessageFieldNumber = 3,
    kUrlFieldNumber = 4,
    kValidUntilFieldNumber = 5,
    kTypeFieldNumber = 1,
    kRequiresAcknowledgmentFieldNumber = 6,
    kShowPopupFieldNumber = 7,
    kShowBannerFieldNumber = 8,
    kPriorityFieldNumber = 9,
  };
  // string title = 2;
  void clear_title() ;
  const std::string& title() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* value);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string message = 3;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // string url = 4;
  void clear_url() ;
  const std::string& url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_url(Arg_&& arg, Args_... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* value);

  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(
      const std::string& value);
  std::string* _internal_mutable_url();

  public:
  // .google.protobuf.Timestamp valid_until = 5;
  bool has_valid_until() const;
  void clear_valid_until() ;
  const ::google::protobuf::Timestamp& valid_until() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_valid_until();
  ::google::protobuf::Timestamp* mutable_valid_until();
  void set_allocated_valid_until(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_valid_until(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_valid_until();

  private:
  const ::google::protobuf::Timestamp& _internal_valid_until() const;
  ::google::protobuf::Timestamp* _internal_mutable_valid_until();

  public:
  // .blokus.ServerAnnouncementNotification.AnnouncementType type = 1;
  void clear_type() ;
  ::blokus::ServerAnnouncementNotification_AnnouncementType type() const;
  void set_type(::blokus::ServerAnnouncementNotification_AnnouncementType value);

  private:
  ::blokus::ServerAnnouncementNotification_AnnouncementType _internal_type() const;
  void _internal_set_type(::blokus::ServerAnnouncementNotification_AnnouncementType value);

  public:
  // bool requires_acknowledgment = 6;
  void clear_requires_acknowledgment() ;
  bool requires_acknowledgment() const;
  void set_requires_acknowledgment(bool value);

  private:
  bool _internal_requires_acknowledgment() const;
  void _internal_set_requires_acknowledgment(bool value);

  public:
  // bool show_popup = 7;
  void clear_show_popup() ;
  bool show_popup() const;
  void set_show_popup(bool value);

  private:
  bool _internal_show_popup() const;
  void _internal_set_show_popup(bool value);

  public:
  // bool show_banner = 8;
  void clear_show_banner() ;
  bool show_banner() const;
  void set_show_banner(bool value);

  private:
  bool _internal_show_banner() const;
  void _internal_set_show_banner(bool value);

  public:
  // int32 priority = 9;
  void clear_priority() ;
  ::int32_t priority() const;
  void set_priority(::int32_t value);

  private:
  ::int32_t _internal_priority() const;
  void _internal_set_priority(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.ServerAnnouncementNotification)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 1,
      69, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ServerAnnouncementNotification& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr title_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::google::protobuf::internal::ArenaStringPtr url_;
    ::google::protobuf::Timestamp* valid_until_;
    int type_;
    bool requires_acknowledgment_;
    bool show_popup_;
    bool show_banner_;
    ::int32_t priority_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lobby_2eproto;
};
// -------------------------------------------------------------------

class PlayerLeftNotification final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.PlayerLeftNotification) */ {
 public:
  inline PlayerLeftNotification() : PlayerLeftNotification(nullptr) {}
  ~PlayerLeftNotification() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PlayerLeftNotification* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PlayerLeftNotification));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PlayerLeftNotification(
      ::google::protobuf::internal::ConstantInitialized);

  inline PlayerLeftNotification(const PlayerLeftNotification& from) : PlayerLeftNotification(nullptr, from) {}
  inline PlayerLeftNotification(PlayerLeftNotification&& from) noexcept
      : PlayerLeftNotification(nullptr, std::move(from)) {}
  inline PlayerLeftNotification& operator=(const PlayerLeftNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerLeftNotification& operator=(PlayerLeftNotification&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerLeftNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerLeftNotification* internal_default_instance() {
    return reinterpret_cast<const PlayerLeftNotification*>(
        &_PlayerLeftNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(PlayerLeftNotification& a, PlayerLeftNotification& b) { a.Swap(&b); }
  inline void Swap(PlayerLeftNotification* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerLeftNotification* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerLeftNotification* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PlayerLeftNotification>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PlayerLeftNotification& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PlayerLeftNotification& from) { PlayerLeftNotification::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PlayerLeftNotification* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.PlayerLeftNotification"; }

 protected:
  explicit PlayerLeftNotification(::google::protobuf::Arena* arena);
  PlayerLeftNotification(::google::protobuf::Arena* arena, const PlayerLeftNotification& from);
  PlayerLeftNotification(::google::protobuf::Arena* arena, PlayerLeftNotification&& from) noexcept
      : PlayerLeftNotification(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUsernameFieldNumber = 1,
    kReasonFieldNumber = 3,
    kNewHostFieldNumber = 6,
    kLeftAtFieldNumber = 5,
    kColorFieldNumber = 2,
    kWasKickedFieldNumber = 4,
    kRoomDisbandedFieldNumber = 7,
  };
  // string username = 1;
  void clear_username() ;
  const std::string& username() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_username(Arg_&& arg, Args_... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* value);

  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(
      const std::string& value);
  std::string* _internal_mutable_username();

  public:
  // string reason = 3;
  void clear_reason() ;
  const std::string& reason() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reason(Arg_&& arg, Args_... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* value);

  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(
      const std::string& value);
  std::string* _internal_mutable_reason();

  public:
  // string new_host = 6;
  void clear_new_host() ;
  const std::string& new_host() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_new_host(Arg_&& arg, Args_... args);
  std::string* mutable_new_host();
  PROTOBUF_NODISCARD std::string* release_new_host();
  void set_allocated_new_host(std::string* value);

  private:
  const std::string& _internal_new_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_new_host(
      const std::string& value);
  std::string* _internal_mutable_new_host();

  public:
  // .google.protobuf.Timestamp left_at = 5;
  bool has_left_at() const;
  void clear_left_at() ;
  const ::google::protobuf::Timestamp& left_at() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_left_at();
  ::google::protobuf::Timestamp* mutable_left_at();
  void set_allocated_left_at(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_left_at(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_left_at();

  private:
  const ::google::protobuf::Timestamp& _internal_left_at() const;
  ::google::protobuf::Timestamp* _internal_mutable_left_at();

  public:
  // .blokus.PlayerColor color = 2;
  void clear_color() ;
  ::blokus::PlayerColor color() const;
  void set_color(::blokus::PlayerColor value);

  private:
  ::blokus::PlayerColor _internal_color() const;
  void _internal_set_color(::blokus::PlayerColor value);

  public:
  // bool was_kicked = 4;
  void clear_was_kicked() ;
  bool was_kicked() const;
  void set_was_kicked(bool value);

  private:
  bool _internal_was_kicked() const;
  void _internal_set_was_kicked(bool value);

  public:
  // bool room_disbanded = 7;
  void clear_room_disbanded() ;
  bool room_disbanded() const;
  void set_room_disbanded(bool value);

  private:
  bool _internal_room_disbanded() const;
  void _internal_set_room_disbanded(bool value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.PlayerLeftNotification)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 1,
      60, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PlayerLeftNotification& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr username_;
    ::google::protobuf::internal::ArenaStringPtr reason_;
    ::google::protobuf::internal::ArenaStringPtr new_host_;
    ::google::protobuf::Timestamp* left_at_;
    int color_;
    bool was_kicked_;
    bool room_disbanded_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lobby_2eproto;
};
// -------------------------------------------------------------------

class MaintenanceNotification final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.MaintenanceNotification) */ {
 public:
  inline MaintenanceNotification() : MaintenanceNotification(nullptr) {}
  ~MaintenanceNotification() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MaintenanceNotification* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MaintenanceNotification));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MaintenanceNotification(
      ::google::protobuf::internal::ConstantInitialized);

  inline MaintenanceNotification(const MaintenanceNotification& from) : MaintenanceNotification(nullptr, from) {}
  inline MaintenanceNotification(MaintenanceNotification&& from) noexcept
      : MaintenanceNotification(nullptr, std::move(from)) {}
  inline MaintenanceNotification& operator=(const MaintenanceNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline MaintenanceNotification& operator=(MaintenanceNotification&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MaintenanceNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const MaintenanceNotification* internal_default_instance() {
    return reinterpret_cast<const MaintenanceNotification*>(
        &_MaintenanceNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 20;
  friend void swap(MaintenanceNotification& a, MaintenanceNotification& b) { a.Swap(&b); }
  inline void Swap(MaintenanceNotification* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MaintenanceNotification* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MaintenanceNotification* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MaintenanceNotification>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MaintenanceNotification& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MaintenanceNotification& from) { MaintenanceNotification::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MaintenanceNotification* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.MaintenanceNotification"; }

 protected:
  explicit MaintenanceNotification(::google::protobuf::Arena* arena);
  MaintenanceNotification(::google::protobuf::Arena* arena, const MaintenanceNotification& from);
  MaintenanceNotification(::google::protobuf::Arena* arena, MaintenanceNotification&& from) noexcept
      : MaintenanceNotification(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kReasonFieldNumber = 3,
    kDetailsFieldNumber = 4,
    kStartTimeFieldNumber = 1,
    kEndTimeFieldNumber = 2,
    kForceDisconnectFieldNumber = 5,
    kWarningMinutesFieldNumber = 6,
  };
  // string reason = 3;
  void clear_reason() ;
  const std::string& reason() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reason(Arg_&& arg, Args_... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* value);

  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(
      const std::string& value);
  std::string* _internal_mutable_reason();

  public:
  // string details = 4;
  void clear_details() ;
  const std::string& details() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_details(Arg_&& arg, Args_... args);
  std::string* mutable_details();
  PROTOBUF_NODISCARD std::string* release_details();
  void set_allocated_details(std::string* value);

  private:
  const std::string& _internal_details() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_details(
      const std::string& value);
  std::string* _internal_mutable_details();

  public:
  // .google.protobuf.Timestamp start_time = 1;
  bool has_start_time() const;
  void clear_start_time() ;
  const ::google::protobuf::Timestamp& start_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_start_time();
  ::google::protobuf::Timestamp* mutable_start_time();
  void set_allocated_start_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_start_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_start_time();

  private:
  const ::google::protobuf::Timestamp& _internal_start_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_start_time();

  public:
  // .google.protobuf.Timestamp end_time = 2;
  bool has_end_time() const;
  void clear_end_time() ;
  const ::google::protobuf::Timestamp& end_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_end_time();
  ::google::protobuf::Timestamp* mutable_end_time();
  void set_allocated_end_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_end_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_end_time();

  private:
  const ::google::protobuf::Timestamp& _internal_end_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_end_time();

  public:
  // bool force_disconnect = 5;
  void clear_force_disconnect() ;
  bool force_disconnect() const;
  void set_force_disconnect(bool value);

  private:
  bool _internal_force_disconnect() const;
  void _internal_set_force_disconnect(bool value);

  public:
  // int32 warning_minutes = 6;
  void clear_warning_minutes() ;
  ::int32_t warning_minutes() const;
  void set_warning_minutes(::int32_t value);

  private:
  ::int32_t _internal_warning_minutes() const;
  void _internal_set_warning_minutes(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.MaintenanceNotification)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 2,
      52, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MaintenanceNotification& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr reason_;
    ::google::protobuf::internal::ArenaStringPtr details_;
    ::google::protobuf::Timestamp* start_time_;
    ::google::protobuf::Timestamp* end_time_;
    bool force_disconnect_;
    ::int32_t warning_minutes_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lobby_2eproto;
};
// -------------------------------------------------------------------

class UserStatsResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.UserStatsResponse) */ {
 public:
  inline UserStatsResponse() : UserStatsResponse(nullptr) {}
  ~UserStatsResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(UserStatsResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(UserStatsResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UserStatsResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline UserStatsResponse(const UserStatsResponse& from) : UserStatsResponse(nullptr, from) {}
  inline UserStatsResponse(UserStatsResponse&& from) noexcept
      : UserStatsResponse(nullptr, std::move(from)) {}
  inline UserStatsResponse& operator=(const UserStatsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserStatsResponse& operator=(UserStatsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserStatsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserStatsResponse* internal_default_instance() {
    return reinterpret_cast<const UserStatsResponse*>(
        &_UserStatsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(UserStatsResponse& a, UserStatsResponse& b) { a.Swap(&b); }
  inline void Swap(UserStatsResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserStatsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserStatsResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<UserStatsResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserStatsResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UserStatsResponse& from) { UserStatsResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(UserStatsResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.UserStatsResponse"; }

 protected:
  explicit UserStatsResponse(::google::protobuf::Arena* arena);
  UserStatsResponse(::google::protobuf::Arena* arena, const UserStatsResponse& from);
  UserStatsResponse(::google::protobuf::Arena* arena, UserStatsResponse&& from) noexcept
      : UserStatsResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRecentGamesFieldNumber = 10,
    kAchievementsFieldNumber = 11,
    kTierFieldNumber = 16,
    kResultFieldNumber = 1,
    kUserInfoFieldNumber = 2,
    kGamesTodayFieldNumber = 3,
    kGamesThisWeekFieldNumber = 4,
    kGamesThisMonthFieldNumber = 5,
    kConsecutiveWinsFieldNumber = 6,
    kLongestWinStreakFieldNumber = 7,
    kAverageGameDurationFieldNumber = 8,
    kFavoriteColorFieldNumber = 9,
    kAchievementPointsFieldNumber = 12,
    kCurrentRankFieldNumber = 13,
    kRankChangeFieldNumber = 14,
    kRatingPointsFieldNumber = 15,
  };
  // repeated .blokus.GameStats recent_games = 10;
  int recent_games_size() const;
  private:
  int _internal_recent_games_size() const;

  public:
  void clear_recent_games() ;
  ::blokus::GameStats* mutable_recent_games(int index);
  ::google::protobuf::RepeatedPtrField<::blokus::GameStats>* mutable_recent_games();

  private:
  const ::google::protobuf::RepeatedPtrField<::blokus::GameStats>& _internal_recent_games() const;
  ::google::protobuf::RepeatedPtrField<::blokus::GameStats>* _internal_mutable_recent_games();
  public:
  const ::blokus::GameStats& recent_games(int index) const;
  ::blokus::GameStats* add_recent_games();
  const ::google::protobuf::RepeatedPtrField<::blokus::GameStats>& recent_games() const;
  // repeated string achievements = 11;
  int achievements_size() const;
  private:
  int _internal_achievements_size() const;

  public:
  void clear_achievements() ;
  const std::string& achievements(int index) const;
  std::string* mutable_achievements(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_achievements(int index, Arg_&& value, Args_... args);
  std::string* add_achievements();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_achievements(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& achievements() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_achievements();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_achievements() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_achievements();

  public:
  // string tier = 16;
  void clear_tier() ;
  const std::string& tier() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tier(Arg_&& arg, Args_... args);
  std::string* mutable_tier();
  PROTOBUF_NODISCARD std::string* release_tier();
  void set_allocated_tier(std::string* value);

  private:
  const std::string& _internal_tier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tier(
      const std::string& value);
  std::string* _internal_mutable_tier();

  public:
  // .blokus.Result result = 1;
  bool has_result() const;
  void clear_result() ;
  const ::blokus::Result& result() const;
  PROTOBUF_NODISCARD ::blokus::Result* release_result();
  ::blokus::Result* mutable_result();
  void set_allocated_result(::blokus::Result* value);
  void unsafe_arena_set_allocated_result(::blokus::Result* value);
  ::blokus::Result* unsafe_arena_release_result();

  private:
  const ::blokus::Result& _internal_result() const;
  ::blokus::Result* _internal_mutable_result();

  public:
  // .blokus.UserInfo user_info = 2;
  bool has_user_info() const;
  void clear_user_info() ;
  const ::blokus::UserInfo& user_info() const;
  PROTOBUF_NODISCARD ::blokus::UserInfo* release_user_info();
  ::blokus::UserInfo* mutable_user_info();
  void set_allocated_user_info(::blokus::UserInfo* value);
  void unsafe_arena_set_allocated_user_info(::blokus::UserInfo* value);
  ::blokus::UserInfo* unsafe_arena_release_user_info();

  private:
  const ::blokus::UserInfo& _internal_user_info() const;
  ::blokus::UserInfo* _internal_mutable_user_info();

  public:
  // int32 games_today = 3;
  void clear_games_today() ;
  ::int32_t games_today() const;
  void set_games_today(::int32_t value);

  private:
  ::int32_t _internal_games_today() const;
  void _internal_set_games_today(::int32_t value);

  public:
  // int32 games_this_week = 4;
  void clear_games_this_week() ;
  ::int32_t games_this_week() const;
  void set_games_this_week(::int32_t value);

  private:
  ::int32_t _internal_games_this_week() const;
  void _internal_set_games_this_week(::int32_t value);

  public:
  // int32 games_this_month = 5;
  void clear_games_this_month() ;
  ::int32_t games_this_month() const;
  void set_games_this_month(::int32_t value);

  private:
  ::int32_t _internal_games_this_month() const;
  void _internal_set_games_this_month(::int32_t value);

  public:
  // int32 consecutive_wins = 6;
  void clear_consecutive_wins() ;
  ::int32_t consecutive_wins() const;
  void set_consecutive_wins(::int32_t value);

  private:
  ::int32_t _internal_consecutive_wins() const;
  void _internal_set_consecutive_wins(::int32_t value);

  public:
  // int32 longest_win_streak = 7;
  void clear_longest_win_streak() ;
  ::int32_t longest_win_streak() const;
  void set_longest_win_streak(::int32_t value);

  private:
  ::int32_t _internal_longest_win_streak() const;
  void _internal_set_longest_win_streak(::int32_t value);

  public:
  // float average_game_duration = 8;
  void clear_average_game_duration() ;
  float average_game_duration() const;
  void set_average_game_duration(float value);

  private:
  float _internal_average_game_duration() const;
  void _internal_set_average_game_duration(float value);

  public:
  // int32 favorite_color = 9;
  void clear_favorite_color() ;
  ::int32_t favorite_color() const;
  void set_favorite_color(::int32_t value);

  private:
  ::int32_t _internal_favorite_color() const;
  void _internal_set_favorite_color(::int32_t value);

  public:
  // int32 achievement_points = 12;
  void clear_achievement_points() ;
  ::int32_t achievement_points() const;
  void set_achievement_points(::int32_t value);

  private:
  ::int32_t _internal_achievement_points() const;
  void _internal_set_achievement_points(::int32_t value);

  public:
  // int32 current_rank = 13;
  void clear_current_rank() ;
  ::int32_t current_rank() const;
  void set_current_rank(::int32_t value);

  private:
  ::int32_t _internal_current_rank() const;
  void _internal_set_current_rank(::int32_t value);

  public:
  // int32 rank_change = 14;
  void clear_rank_change() ;
  ::int32_t rank_change() const;
  void set_rank_change(::int32_t value);

  private:
  ::int32_t _internal_rank_change() const;
  void _internal_set_rank_change(::int32_t value);

  public:
  // int32 rating_points = 15;
  void clear_rating_points() ;
  ::int32_t rating_points() const;
  void set_rating_points(::int32_t value);

  private:
  ::int32_t _internal_rating_points() const;
  void _internal_set_rating_points(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.UserStatsResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 16, 3,
      65, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UserStatsResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::blokus::GameStats > recent_games_;
    ::google::protobuf::RepeatedPtrField<std::string> achievements_;
    ::google::protobuf::internal::ArenaStringPtr tier_;
    ::blokus::Result* result_;
    ::blokus::UserInfo* user_info_;
    ::int32_t games_today_;
    ::int32_t games_this_week_;
    ::int32_t games_this_month_;
    ::int32_t consecutive_wins_;
    ::int32_t longest_win_streak_;
    float average_game_duration_;
    ::int32_t favorite_color_;
    ::int32_t achievement_points_;
    ::int32_t current_rank_;
    ::int32_t rank_change_;
    ::int32_t rating_points_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lobby_2eproto;
};
// -------------------------------------------------------------------

class UserListUpdate final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.UserListUpdate) */ {
 public:
  inline UserListUpdate() : UserListUpdate(nullptr) {}
  ~UserListUpdate() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(UserListUpdate* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(UserListUpdate));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UserListUpdate(
      ::google::protobuf::internal::ConstantInitialized);

  inline UserListUpdate(const UserListUpdate& from) : UserListUpdate(nullptr, from) {}
  inline UserListUpdate(UserListUpdate&& from) noexcept
      : UserListUpdate(nullptr, std::move(from)) {}
  inline UserListUpdate& operator=(const UserListUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserListUpdate& operator=(UserListUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserListUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserListUpdate* internal_default_instance() {
    return reinterpret_cast<const UserListUpdate*>(
        &_UserListUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(UserListUpdate& a, UserListUpdate& b) { a.Swap(&b); }
  inline void Swap(UserListUpdate* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserListUpdate* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserListUpdate* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<UserListUpdate>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserListUpdate& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UserListUpdate& from) { UserListUpdate::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(UserListUpdate* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.UserListUpdate"; }

 protected:
  explicit UserListUpdate(::google::protobuf::Arena* arena);
  UserListUpdate(::google::protobuf::Arena* arena, const UserListUpdate& from);
  UserListUpdate(::google::protobuf::Arena* arena, UserListUpdate&& from) noexcept
      : UserListUpdate(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using UpdateType = UserListUpdate_UpdateType;
  static constexpr UpdateType USER_ONLINE = UserListUpdate_UpdateType_USER_ONLINE;
  static constexpr UpdateType USER_OFFLINE = UserListUpdate_UpdateType_USER_OFFLINE;
  static constexpr UpdateType USER_STATUS_CHANGED = UserListUpdate_UpdateType_USER_STATUS_CHANGED;
  static constexpr UpdateType USER_JOINED_ROOM = UserListUpdate_UpdateType_USER_JOINED_ROOM;
  static constexpr UpdateType USER_LEFT_ROOM = UserListUpdate_UpdateType_USER_LEFT_ROOM;
  static inline bool UpdateType_IsValid(int value) {
    return UserListUpdate_UpdateType_IsValid(value);
  }
  static constexpr UpdateType UpdateType_MIN = UserListUpdate_UpdateType_UpdateType_MIN;
  static constexpr UpdateType UpdateType_MAX = UserListUpdate_UpdateType_UpdateType_MAX;
  static constexpr int UpdateType_ARRAYSIZE = UserListUpdate_UpdateType_UpdateType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* UpdateType_descriptor() {
    return UserListUpdate_UpdateType_descriptor();
  }
  template <typename T>
  static inline const std::string& UpdateType_Name(T value) {
    return UserListUpdate_UpdateType_Name(value);
  }
  static inline bool UpdateType_Parse(absl::string_view name, UpdateType* value) {
    return UserListUpdate_UpdateType_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kUserInfoFieldNumber = 2,
    kUpdatedAtFieldNumber = 6,
    kUpdateTypeFieldNumber = 1,
    kOldStatusFieldNumber = 3,
    kNewStatusFieldNumber = 4,
    kRoomIdFieldNumber = 5,
  };
  // .blokus.UserInfo user_info = 2;
  bool has_user_info() const;
  void clear_user_info() ;
  const ::blokus::UserInfo& user_info() const;
  PROTOBUF_NODISCARD ::blokus::UserInfo* release_user_info();
  ::blokus::UserInfo* mutable_user_info();
  void set_allocated_user_info(::blokus::UserInfo* value);
  void unsafe_arena_set_allocated_user_info(::blokus::UserInfo* value);
  ::blokus::UserInfo* unsafe_arena_release_user_info();

  private:
  const ::blokus::UserInfo& _internal_user_info() const;
  ::blokus::UserInfo* _internal_mutable_user_info();

  public:
  // .google.protobuf.Timestamp updated_at = 6;
  bool has_updated_at() const;
  void clear_updated_at() ;
  const ::google::protobuf::Timestamp& updated_at() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_updated_at();
  ::google::protobuf::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_updated_at(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_updated_at();

  private:
  const ::google::protobuf::Timestamp& _internal_updated_at() const;
  ::google::protobuf::Timestamp* _internal_mutable_updated_at();

  public:
  // .blokus.UserListUpdate.UpdateType update_type = 1;
  void clear_update_type() ;
  ::blokus::UserListUpdate_UpdateType update_type() const;
  void set_update_type(::blokus::UserListUpdate_UpdateType value);

  private:
  ::blokus::UserListUpdate_UpdateType _internal_update_type() const;
  void _internal_set_update_type(::blokus::UserListUpdate_UpdateType value);

  public:
  // .blokus.UserStatus old_status = 3;
  void clear_old_status() ;
  ::blokus::UserStatus old_status() const;
  void set_old_status(::blokus::UserStatus value);

  private:
  ::blokus::UserStatus _internal_old_status() const;
  void _internal_set_old_status(::blokus::UserStatus value);

  public:
  // .blokus.UserStatus new_status = 4;
  void clear_new_status() ;
  ::blokus::UserStatus new_status() const;
  void set_new_status(::blokus::UserStatus value);

  private:
  ::blokus::UserStatus _internal_new_status() const;
  void _internal_set_new_status(::blokus::UserStatus value);

  public:
  // int32 room_id = 5;
  void clear_room_id() ;
  ::int32_t room_id() const;
  void set_room_id(::int32_t value);

  private:
  ::int32_t _internal_room_id() const;
  void _internal_set_room_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.UserListUpdate)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UserListUpdate& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::blokus::UserInfo* user_info_;
    ::google::protobuf::Timestamp* updated_at_;
    int update_type_;
    int old_status_;
    int new_status_;
    ::int32_t room_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lobby_2eproto;
};
// -------------------------------------------------------------------

class RoomListUpdate final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.RoomListUpdate) */ {
 public:
  inline RoomListUpdate() : RoomListUpdate(nullptr) {}
  ~RoomListUpdate() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RoomListUpdate* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RoomListUpdate));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RoomListUpdate(
      ::google::protobuf::internal::ConstantInitialized);

  inline RoomListUpdate(const RoomListUpdate& from) : RoomListUpdate(nullptr, from) {}
  inline RoomListUpdate(RoomListUpdate&& from) noexcept
      : RoomListUpdate(nullptr, std::move(from)) {}
  inline RoomListUpdate& operator=(const RoomListUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomListUpdate& operator=(RoomListUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomListUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoomListUpdate* internal_default_instance() {
    return reinterpret_cast<const RoomListUpdate*>(
        &_RoomListUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(RoomListUpdate& a, RoomListUpdate& b) { a.Swap(&b); }
  inline void Swap(RoomListUpdate* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomListUpdate* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoomListUpdate* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RoomListUpdate>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RoomListUpdate& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RoomListUpdate& from) { RoomListUpdate::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RoomListUpdate* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.RoomListUpdate"; }

 protected:
  explicit RoomListUpdate(::google::protobuf::Arena* arena);
  RoomListUpdate(::google::protobuf::Arena* arena, const RoomListUpdate& from);
  RoomListUpdate(::google::protobuf::Arena* arena, RoomListUpdate&& from) noexcept
      : RoomListUpdate(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using UpdateType = RoomListUpdate_UpdateType;
  static constexpr UpdateType ROOM_CREATED = RoomListUpdate_UpdateType_ROOM_CREATED;
  static constexpr UpdateType ROOM_UPDATED = RoomListUpdate_UpdateType_ROOM_UPDATED;
  static constexpr UpdateType ROOM_DELETED = RoomListUpdate_UpdateType_ROOM_DELETED;
  static constexpr UpdateType PLAYER_JOINED = RoomListUpdate_UpdateType_PLAYER_JOINED;
  static constexpr UpdateType PLAYER_LEFT = RoomListUpdate_UpdateType_PLAYER_LEFT;
  static constexpr UpdateType GAME_STARTED = RoomListUpdate_UpdateType_GAME_STARTED;
  static constexpr UpdateType GAME_ENDED = RoomListUpdate_UpdateType_GAME_ENDED;
  static inline bool UpdateType_IsValid(int value) {
    return RoomListUpdate_UpdateType_IsValid(value);
  }
  static constexpr UpdateType UpdateType_MIN = RoomListUpdate_UpdateType_UpdateType_MIN;
  static constexpr UpdateType UpdateType_MAX = RoomListUpdate_UpdateType_UpdateType_MAX;
  static constexpr int UpdateType_ARRAYSIZE = RoomListUpdate_UpdateType_UpdateType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* UpdateType_descriptor() {
    return RoomListUpdate_UpdateType_descriptor();
  }
  template <typename T>
  static inline const std::string& UpdateType_Name(T value) {
    return RoomListUpdate_UpdateType_Name(value);
  }
  static inline bool UpdateType_Parse(absl::string_view name, UpdateType* value) {
    return RoomListUpdate_UpdateType_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kUpdatedFieldFieldNumber = 3,
    kPlayerUsernameFieldNumber = 5,
    kRoomInfoFieldNumber = 2,
    kUpdatedAtFieldNumber = 4,
    kUpdateTypeFieldNumber = 1,
    kPlayerColorFieldNumber = 6,
  };
  // string updated_field = 3;
  void clear_updated_field() ;
  const std::string& updated_field() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_updated_field(Arg_&& arg, Args_... args);
  std::string* mutable_updated_field();
  PROTOBUF_NODISCARD std::string* release_updated_field();
  void set_allocated_updated_field(std::string* value);

  private:
  const std::string& _internal_updated_field() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_updated_field(
      const std::string& value);
  std::string* _internal_mutable_updated_field();

  public:
  // string player_username = 5;
  void clear_player_username() ;
  const std::string& player_username() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_player_username(Arg_&& arg, Args_... args);
  std::string* mutable_player_username();
  PROTOBUF_NODISCARD std::string* release_player_username();
  void set_allocated_player_username(std::string* value);

  private:
  const std::string& _internal_player_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_username(
      const std::string& value);
  std::string* _internal_mutable_player_username();

  public:
  // .blokus.RoomInfo room_info = 2;
  bool has_room_info() const;
  void clear_room_info() ;
  const ::blokus::RoomInfo& room_info() const;
  PROTOBUF_NODISCARD ::blokus::RoomInfo* release_room_info();
  ::blokus::RoomInfo* mutable_room_info();
  void set_allocated_room_info(::blokus::RoomInfo* value);
  void unsafe_arena_set_allocated_room_info(::blokus::RoomInfo* value);
  ::blokus::RoomInfo* unsafe_arena_release_room_info();

  private:
  const ::blokus::RoomInfo& _internal_room_info() const;
  ::blokus::RoomInfo* _internal_mutable_room_info();

  public:
  // .google.protobuf.Timestamp updated_at = 4;
  bool has_updated_at() const;
  void clear_updated_at() ;
  const ::google::protobuf::Timestamp& updated_at() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_updated_at();
  ::google::protobuf::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_updated_at(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_updated_at();

  private:
  const ::google::protobuf::Timestamp& _internal_updated_at() const;
  ::google::protobuf::Timestamp* _internal_mutable_updated_at();

  public:
  // .blokus.RoomListUpdate.UpdateType update_type = 1;
  void clear_update_type() ;
  ::blokus::RoomListUpdate_UpdateType update_type() const;
  void set_update_type(::blokus::RoomListUpdate_UpdateType value);

  private:
  ::blokus::RoomListUpdate_UpdateType _internal_update_type() const;
  void _internal_set_update_type(::blokus::RoomListUpdate_UpdateType value);

  public:
  // .blokus.PlayerColor player_color = 6;
  void clear_player_color() ;
  ::blokus::PlayerColor player_color() const;
  void set_player_color(::blokus::PlayerColor value);

  private:
  ::blokus::PlayerColor _internal_player_color() const;
  void _internal_set_player_color(::blokus::PlayerColor value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.RoomListUpdate)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 2,
      58, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RoomListUpdate& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr updated_field_;
    ::google::protobuf::internal::ArenaStringPtr player_username_;
    ::blokus::RoomInfo* room_info_;
    ::google::protobuf::Timestamp* updated_at_;
    int update_type_;
    int player_color_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lobby_2eproto;
};
// -------------------------------------------------------------------

class RoomListResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.RoomListResponse) */ {
 public:
  inline RoomListResponse() : RoomListResponse(nullptr) {}
  ~RoomListResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RoomListResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RoomListResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RoomListResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline RoomListResponse(const RoomListResponse& from) : RoomListResponse(nullptr, from) {}
  inline RoomListResponse(RoomListResponse&& from) noexcept
      : RoomListResponse(nullptr, std::move(from)) {}
  inline RoomListResponse& operator=(const RoomListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomListResponse& operator=(RoomListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoomListResponse* internal_default_instance() {
    return reinterpret_cast<const RoomListResponse*>(
        &_RoomListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(RoomListResponse& a, RoomListResponse& b) { a.Swap(&b); }
  inline void Swap(RoomListResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomListResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoomListResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RoomListResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RoomListResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RoomListResponse& from) { RoomListResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RoomListResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.RoomListResponse"; }

 protected:
  explicit RoomListResponse(::google::protobuf::Arena* arena);
  RoomListResponse(::google::protobuf::Arena* arena, const RoomListResponse& from);
  RoomListResponse(::google::protobuf::Arena* arena, RoomListResponse&& from) noexcept
      : RoomListResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRoomsFieldNumber = 2,
    kResultFieldNumber = 1,
    kTotalRoomsFieldNumber = 3,
    kCurrentPageFieldNumber = 4,
    kTotalPagesFieldNumber = 5,
    kAvailableRoomsFieldNumber = 6,
    kPlayingRoomsFieldNumber = 7,
    kTotalPlayersInLobbyFieldNumber = 8,
  };
  // repeated .blokus.RoomInfo rooms = 2;
  int rooms_size() const;
  private:
  int _internal_rooms_size() const;

  public:
  void clear_rooms() ;
  ::blokus::RoomInfo* mutable_rooms(int index);
  ::google::protobuf::RepeatedPtrField<::blokus::RoomInfo>* mutable_rooms();

  private:
  const ::google::protobuf::RepeatedPtrField<::blokus::RoomInfo>& _internal_rooms() const;
  ::google::protobuf::RepeatedPtrField<::blokus::RoomInfo>* _internal_mutable_rooms();
  public:
  const ::blokus::RoomInfo& rooms(int index) const;
  ::blokus::RoomInfo* add_rooms();
  const ::google::protobuf::RepeatedPtrField<::blokus::RoomInfo>& rooms() const;
  // .blokus.Result result = 1;
  bool has_result() const;
  void clear_result() ;
  const ::blokus::Result& result() const;
  PROTOBUF_NODISCARD ::blokus::Result* release_result();
  ::blokus::Result* mutable_result();
  void set_allocated_result(::blokus::Result* value);
  void unsafe_arena_set_allocated_result(::blokus::Result* value);
  ::blokus::Result* unsafe_arena_release_result();

  private:
  const ::blokus::Result& _internal_result() const;
  ::blokus::Result* _internal_mutable_result();

  public:
  // int32 total_rooms = 3;
  void clear_total_rooms() ;
  ::int32_t total_rooms() const;
  void set_total_rooms(::int32_t value);

  private:
  ::int32_t _internal_total_rooms() const;
  void _internal_set_total_rooms(::int32_t value);

  public:
  // int32 current_page = 4;
  void clear_current_page() ;
  ::int32_t current_page() const;
  void set_current_page(::int32_t value);

  private:
  ::int32_t _internal_current_page() const;
  void _internal_set_current_page(::int32_t value);

  public:
  // int32 total_pages = 5;
  void clear_total_pages() ;
  ::int32_t total_pages() const;
  void set_total_pages(::int32_t value);

  private:
  ::int32_t _internal_total_pages() const;
  void _internal_set_total_pages(::int32_t value);

  public:
  // int32 available_rooms = 6;
  void clear_available_rooms() ;
  ::int32_t available_rooms() const;
  void set_available_rooms(::int32_t value);

  private:
  ::int32_t _internal_available_rooms() const;
  void _internal_set_available_rooms(::int32_t value);

  public:
  // int32 playing_rooms = 7;
  void clear_playing_rooms() ;
  ::int32_t playing_rooms() const;
  void set_playing_rooms(::int32_t value);

  private:
  ::int32_t _internal_playing_rooms() const;
  void _internal_set_playing_rooms(::int32_t value);

  public:
  // int32 total_players_in_lobby = 8;
  void clear_total_players_in_lobby() ;
  ::int32_t total_players_in_lobby() const;
  void set_total_players_in_lobby(::int32_t value);

  private:
  ::int32_t _internal_total_players_in_lobby() const;
  void _internal_set_total_players_in_lobby(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.RoomListResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RoomListResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::blokus::RoomInfo > rooms_;
    ::blokus::Result* result_;
    ::int32_t total_rooms_;
    ::int32_t current_page_;
    ::int32_t total_pages_;
    ::int32_t available_rooms_;
    ::int32_t playing_rooms_;
    ::int32_t total_players_in_lobby_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lobby_2eproto;
};
// -------------------------------------------------------------------

class PlayerJoinedNotification final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.PlayerJoinedNotification) */ {
 public:
  inline PlayerJoinedNotification() : PlayerJoinedNotification(nullptr) {}
  ~PlayerJoinedNotification() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PlayerJoinedNotification* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PlayerJoinedNotification));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PlayerJoinedNotification(
      ::google::protobuf::internal::ConstantInitialized);

  inline PlayerJoinedNotification(const PlayerJoinedNotification& from) : PlayerJoinedNotification(nullptr, from) {}
  inline PlayerJoinedNotification(PlayerJoinedNotification&& from) noexcept
      : PlayerJoinedNotification(nullptr, std::move(from)) {}
  inline PlayerJoinedNotification& operator=(const PlayerJoinedNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerJoinedNotification& operator=(PlayerJoinedNotification&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerJoinedNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerJoinedNotification* internal_default_instance() {
    return reinterpret_cast<const PlayerJoinedNotification*>(
        &_PlayerJoinedNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(PlayerJoinedNotification& a, PlayerJoinedNotification& b) { a.Swap(&b); }
  inline void Swap(PlayerJoinedNotification* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerJoinedNotification* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerJoinedNotification* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PlayerJoinedNotification>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PlayerJoinedNotification& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PlayerJoinedNotification& from) { PlayerJoinedNotification::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PlayerJoinedNotification* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.PlayerJoinedNotification"; }

 protected:
  explicit PlayerJoinedNotification(::google::protobuf::Arena* arena);
  PlayerJoinedNotification(::google::protobuf::Arena* arena, const PlayerJoinedNotification& from);
  PlayerJoinedNotification(::google::protobuf::Arena* arena, PlayerJoinedNotification&& from) noexcept
      : PlayerJoinedNotification(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUsernameFieldNumber = 1,
    kJoinMessageFieldNumber = 7,
    kPlayerInfoFieldNumber = 3,
    kJoinedAtFieldNumber = 5,
    kUserInfoFieldNumber = 6,
    kColorFieldNumber = 2,
    kIsRejoiningFieldNumber = 4,
  };
  // string username = 1;
  void clear_username() ;
  const std::string& username() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_username(Arg_&& arg, Args_... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* value);

  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(
      const std::string& value);
  std::string* _internal_mutable_username();

  public:
  // string join_message = 7;
  void clear_join_message() ;
  const std::string& join_message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_join_message(Arg_&& arg, Args_... args);
  std::string* mutable_join_message();
  PROTOBUF_NODISCARD std::string* release_join_message();
  void set_allocated_join_message(std::string* value);

  private:
  const std::string& _internal_join_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_join_message(
      const std::string& value);
  std::string* _internal_mutable_join_message();

  public:
  // .blokus.PlayerSlot player_info = 3;
  bool has_player_info() const;
  void clear_player_info() ;
  const ::blokus::PlayerSlot& player_info() const;
  PROTOBUF_NODISCARD ::blokus::PlayerSlot* release_player_info();
  ::blokus::PlayerSlot* mutable_player_info();
  void set_allocated_player_info(::blokus::PlayerSlot* value);
  void unsafe_arena_set_allocated_player_info(::blokus::PlayerSlot* value);
  ::blokus::PlayerSlot* unsafe_arena_release_player_info();

  private:
  const ::blokus::PlayerSlot& _internal_player_info() const;
  ::blokus::PlayerSlot* _internal_mutable_player_info();

  public:
  // .google.protobuf.Timestamp joined_at = 5;
  bool has_joined_at() const;
  void clear_joined_at() ;
  const ::google::protobuf::Timestamp& joined_at() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_joined_at();
  ::google::protobuf::Timestamp* mutable_joined_at();
  void set_allocated_joined_at(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_joined_at(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_joined_at();

  private:
  const ::google::protobuf::Timestamp& _internal_joined_at() const;
  ::google::protobuf::Timestamp* _internal_mutable_joined_at();

  public:
  // .blokus.UserInfo user_info = 6;
  bool has_user_info() const;
  void clear_user_info() ;
  const ::blokus::UserInfo& user_info() const;
  PROTOBUF_NODISCARD ::blokus::UserInfo* release_user_info();
  ::blokus::UserInfo* mutable_user_info();
  void set_allocated_user_info(::blokus::UserInfo* value);
  void unsafe_arena_set_allocated_user_info(::blokus::UserInfo* value);
  ::blokus::UserInfo* unsafe_arena_release_user_info();

  private:
  const ::blokus::UserInfo& _internal_user_info() const;
  ::blokus::UserInfo* _internal_mutable_user_info();

  public:
  // .blokus.PlayerColor color = 2;
  void clear_color() ;
  ::blokus::PlayerColor color() const;
  void set_color(::blokus::PlayerColor value);

  private:
  ::blokus::PlayerColor _internal_color() const;
  void _internal_set_color(::blokus::PlayerColor value);

  public:
  // bool is_rejoining = 4;
  void clear_is_rejoining() ;
  bool is_rejoining() const;
  void set_is_rejoining(bool value);

  private:
  bool _internal_is_rejoining() const;
  void _internal_set_is_rejoining(bool value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.PlayerJoinedNotification)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 3,
      60, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PlayerJoinedNotification& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr username_;
    ::google::protobuf::internal::ArenaStringPtr join_message_;
    ::blokus::PlayerSlot* player_info_;
    ::google::protobuf::Timestamp* joined_at_;
    ::blokus::UserInfo* user_info_;
    int color_;
    bool is_rejoining_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lobby_2eproto;
};
// -------------------------------------------------------------------

class LeaveRoomResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.LeaveRoomResponse) */ {
 public:
  inline LeaveRoomResponse() : LeaveRoomResponse(nullptr) {}
  ~LeaveRoomResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(LeaveRoomResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(LeaveRoomResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LeaveRoomResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline LeaveRoomResponse(const LeaveRoomResponse& from) : LeaveRoomResponse(nullptr, from) {}
  inline LeaveRoomResponse(LeaveRoomResponse&& from) noexcept
      : LeaveRoomResponse(nullptr, std::move(from)) {}
  inline LeaveRoomResponse& operator=(const LeaveRoomResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaveRoomResponse& operator=(LeaveRoomResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LeaveRoomResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LeaveRoomResponse* internal_default_instance() {
    return reinterpret_cast<const LeaveRoomResponse*>(
        &_LeaveRoomResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(LeaveRoomResponse& a, LeaveRoomResponse& b) { a.Swap(&b); }
  inline void Swap(LeaveRoomResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LeaveRoomResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LeaveRoomResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<LeaveRoomResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LeaveRoomResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LeaveRoomResponse& from) { LeaveRoomResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(LeaveRoomResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.LeaveRoomResponse"; }

 protected:
  explicit LeaveRoomResponse(::google::protobuf::Arena* arena);
  LeaveRoomResponse(::google::protobuf::Arena* arena, const LeaveRoomResponse& from);
  LeaveRoomResponse(::google::protobuf::Arena* arena, LeaveRoomResponse&& from) noexcept
      : LeaveRoomResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kNewHostFieldNumber = 4,
    kResultFieldNumber = 1,
    kRoomDisbandedFieldNumber = 3,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // string new_host = 4;
  void clear_new_host() ;
  const std::string& new_host() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_new_host(Arg_&& arg, Args_... args);
  std::string* mutable_new_host();
  PROTOBUF_NODISCARD std::string* release_new_host();
  void set_allocated_new_host(std::string* value);

  private:
  const std::string& _internal_new_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_new_host(
      const std::string& value);
  std::string* _internal_mutable_new_host();

  public:
  // .blokus.Result result = 1;
  bool has_result() const;
  void clear_result() ;
  const ::blokus::Result& result() const;
  PROTOBUF_NODISCARD ::blokus::Result* release_result();
  ::blokus::Result* mutable_result();
  void set_allocated_result(::blokus::Result* value);
  void unsafe_arena_set_allocated_result(::blokus::Result* value);
  ::blokus::Result* unsafe_arena_release_result();

  private:
  const ::blokus::Result& _internal_result() const;
  ::blokus::Result* _internal_mutable_result();

  public:
  // bool room_disbanded = 3;
  void clear_room_disbanded() ;
  bool room_disbanded() const;
  void set_room_disbanded(bool value);

  private:
  bool _internal_room_disbanded() const;
  void _internal_set_room_disbanded(bool value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.LeaveRoomResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      48, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LeaveRoomResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::google::protobuf::internal::ArenaStringPtr new_host_;
    ::blokus::Result* result_;
    bool room_disbanded_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lobby_2eproto;
};
// -------------------------------------------------------------------

class JoinRoomResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.JoinRoomResponse) */ {
 public:
  inline JoinRoomResponse() : JoinRoomResponse(nullptr) {}
  ~JoinRoomResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(JoinRoomResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(JoinRoomResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR JoinRoomResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline JoinRoomResponse(const JoinRoomResponse& from) : JoinRoomResponse(nullptr, from) {}
  inline JoinRoomResponse(JoinRoomResponse&& from) noexcept
      : JoinRoomResponse(nullptr, std::move(from)) {}
  inline JoinRoomResponse& operator=(const JoinRoomResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinRoomResponse& operator=(JoinRoomResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JoinRoomResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinRoomResponse* internal_default_instance() {
    return reinterpret_cast<const JoinRoomResponse*>(
        &_JoinRoomResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(JoinRoomResponse& a, JoinRoomResponse& b) { a.Swap(&b); }
  inline void Swap(JoinRoomResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinRoomResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JoinRoomResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<JoinRoomResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const JoinRoomResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const JoinRoomResponse& from) { JoinRoomResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(JoinRoomResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.JoinRoomResponse"; }

 protected:
  explicit JoinRoomResponse(::google::protobuf::Arena* arena);
  JoinRoomResponse(::google::protobuf::Arena* arena, const JoinRoomResponse& from);
  JoinRoomResponse(::google::protobuf::Arena* arena, JoinRoomResponse&& from) noexcept
      : JoinRoomResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPlayerSlotsFieldNumber = 4,
    kRoomRulesFieldNumber = 6,
    kWelcomeMessageFieldNumber = 5,
    kFailureReasonFieldNumber = 10,
    kResultFieldNumber = 1,
    kRoomInfoFieldNumber = 2,
    kAssignedColorFieldNumber = 3,
    kIsRejoiningFieldNumber = 7,
    kQueuePositionFieldNumber = 11,
  };
  // repeated .blokus.PlayerSlot player_slots = 4;
  int player_slots_size() const;
  private:
  int _internal_player_slots_size() const;

  public:
  void clear_player_slots() ;
  ::blokus::PlayerSlot* mutable_player_slots(int index);
  ::google::protobuf::RepeatedPtrField<::blokus::PlayerSlot>* mutable_player_slots();

  private:
  const ::google::protobuf::RepeatedPtrField<::blokus::PlayerSlot>& _internal_player_slots() const;
  ::google::protobuf::RepeatedPtrField<::blokus::PlayerSlot>* _internal_mutable_player_slots();
  public:
  const ::blokus::PlayerSlot& player_slots(int index) const;
  ::blokus::PlayerSlot* add_player_slots();
  const ::google::protobuf::RepeatedPtrField<::blokus::PlayerSlot>& player_slots() const;
  // repeated string room_rules = 6;
  int room_rules_size() const;
  private:
  int _internal_room_rules_size() const;

  public:
  void clear_room_rules() ;
  const std::string& room_rules(int index) const;
  std::string* mutable_room_rules(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_room_rules(int index, Arg_&& value, Args_... args);
  std::string* add_room_rules();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_room_rules(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& room_rules() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_room_rules();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_room_rules() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_room_rules();

  public:
  // string welcome_message = 5;
  void clear_welcome_message() ;
  const std::string& welcome_message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_welcome_message(Arg_&& arg, Args_... args);
  std::string* mutable_welcome_message();
  PROTOBUF_NODISCARD std::string* release_welcome_message();
  void set_allocated_welcome_message(std::string* value);

  private:
  const std::string& _internal_welcome_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_welcome_message(
      const std::string& value);
  std::string* _internal_mutable_welcome_message();

  public:
  // string failure_reason = 10;
  void clear_failure_reason() ;
  const std::string& failure_reason() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_failure_reason(Arg_&& arg, Args_... args);
  std::string* mutable_failure_reason();
  PROTOBUF_NODISCARD std::string* release_failure_reason();
  void set_allocated_failure_reason(std::string* value);

  private:
  const std::string& _internal_failure_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_failure_reason(
      const std::string& value);
  std::string* _internal_mutable_failure_reason();

  public:
  // .blokus.Result result = 1;
  bool has_result() const;
  void clear_result() ;
  const ::blokus::Result& result() const;
  PROTOBUF_NODISCARD ::blokus::Result* release_result();
  ::blokus::Result* mutable_result();
  void set_allocated_result(::blokus::Result* value);
  void unsafe_arena_set_allocated_result(::blokus::Result* value);
  ::blokus::Result* unsafe_arena_release_result();

  private:
  const ::blokus::Result& _internal_result() const;
  ::blokus::Result* _internal_mutable_result();

  public:
  // .blokus.RoomInfo room_info = 2;
  bool has_room_info() const;
  void clear_room_info() ;
  const ::blokus::RoomInfo& room_info() const;
  PROTOBUF_NODISCARD ::blokus::RoomInfo* release_room_info();
  ::blokus::RoomInfo* mutable_room_info();
  void set_allocated_room_info(::blokus::RoomInfo* value);
  void unsafe_arena_set_allocated_room_info(::blokus::RoomInfo* value);
  ::blokus::RoomInfo* unsafe_arena_release_room_info();

  private:
  const ::blokus::RoomInfo& _internal_room_info() const;
  ::blokus::RoomInfo* _internal_mutable_room_info();

  public:
  // .blokus.PlayerColor assigned_color = 3;
  void clear_assigned_color() ;
  ::blokus::PlayerColor assigned_color() const;
  void set_assigned_color(::blokus::PlayerColor value);

  private:
  ::blokus::PlayerColor _internal_assigned_color() const;
  void _internal_set_assigned_color(::blokus::PlayerColor value);

  public:
  // bool is_rejoining = 7;
  void clear_is_rejoining() ;
  bool is_rejoining() const;
  void set_is_rejoining(bool value);

  private:
  bool _internal_is_rejoining() const;
  void _internal_set_is_rejoining(bool value);

  public:
  // int32 queue_position = 11;
  void clear_queue_position() ;
  ::int32_t queue_position() const;
  void set_queue_position(::int32_t value);

  private:
  ::int32_t _internal_queue_position() const;
  void _internal_set_queue_position(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.JoinRoomResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 3,
      79, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const JoinRoomResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::blokus::PlayerSlot > player_slots_;
    ::google::protobuf::RepeatedPtrField<std::string> room_rules_;
    ::google::protobuf::internal::ArenaStringPtr welcome_message_;
    ::google::protobuf::internal::ArenaStringPtr failure_reason_;
    ::blokus::Result* result_;
    ::blokus::RoomInfo* room_info_;
    int assigned_color_;
    bool is_rejoining_;
    ::int32_t queue_position_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lobby_2eproto;
};
// -------------------------------------------------------------------

class FriendListResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.FriendListResponse) */ {
 public:
  inline FriendListResponse() : FriendListResponse(nullptr) {}
  ~FriendListResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(FriendListResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(FriendListResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FriendListResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline FriendListResponse(const FriendListResponse& from) : FriendListResponse(nullptr, from) {}
  inline FriendListResponse(FriendListResponse&& from) noexcept
      : FriendListResponse(nullptr, std::move(from)) {}
  inline FriendListResponse& operator=(const FriendListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendListResponse& operator=(FriendListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FriendListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FriendListResponse* internal_default_instance() {
    return reinterpret_cast<const FriendListResponse*>(
        &_FriendListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;
  friend void swap(FriendListResponse& a, FriendListResponse& b) { a.Swap(&b); }
  inline void Swap(FriendListResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendListResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FriendListResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<FriendListResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FriendListResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FriendListResponse& from) { FriendListResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(FriendListResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.FriendListResponse"; }

 protected:
  explicit FriendListResponse(::google::protobuf::Arena* arena);
  FriendListResponse(::google::protobuf::Arena* arena, const FriendListResponse& from);
  FriendListResponse(::google::protobuf::Arena* arena, FriendListResponse&& from) noexcept
      : FriendListResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFriendsFieldNumber = 2,
    kPendingRequestsFieldNumber = 3,
    kSentRequestsFieldNumber = 4,
    kResultFieldNumber = 1,
  };
  // repeated .blokus.UserInfo friends = 2;
  int friends_size() const;
  private:
  int _internal_friends_size() const;

  public:
  void clear_friends() ;
  ::blokus::UserInfo* mutable_friends(int index);
  ::google::protobuf::RepeatedPtrField<::blokus::UserInfo>* mutable_friends();

  private:
  const ::google::protobuf::RepeatedPtrField<::blokus::UserInfo>& _internal_friends() const;
  ::google::protobuf::RepeatedPtrField<::blokus::UserInfo>* _internal_mutable_friends();
  public:
  const ::blokus::UserInfo& friends(int index) const;
  ::blokus::UserInfo* add_friends();
  const ::google::protobuf::RepeatedPtrField<::blokus::UserInfo>& friends() const;
  // repeated .blokus.UserInfo pending_requests = 3;
  int pending_requests_size() const;
  private:
  int _internal_pending_requests_size() const;

  public:
  void clear_pending_requests() ;
  ::blokus::UserInfo* mutable_pending_requests(int index);
  ::google::protobuf::RepeatedPtrField<::blokus::UserInfo>* mutable_pending_requests();

  private:
  const ::google::protobuf::RepeatedPtrField<::blokus::UserInfo>& _internal_pending_requests() const;
  ::google::protobuf::RepeatedPtrField<::blokus::UserInfo>* _internal_mutable_pending_requests();
  public:
  const ::blokus::UserInfo& pending_requests(int index) const;
  ::blokus::UserInfo* add_pending_requests();
  const ::google::protobuf::RepeatedPtrField<::blokus::UserInfo>& pending_requests() const;
  // repeated .blokus.UserInfo sent_requests = 4;
  int sent_requests_size() const;
  private:
  int _internal_sent_requests_size() const;

  public:
  void clear_sent_requests() ;
  ::blokus::UserInfo* mutable_sent_requests(int index);
  ::google::protobuf::RepeatedPtrField<::blokus::UserInfo>* mutable_sent_requests();

  private:
  const ::google::protobuf::RepeatedPtrField<::blokus::UserInfo>& _internal_sent_requests() const;
  ::google::protobuf::RepeatedPtrField<::blokus::UserInfo>* _internal_mutable_sent_requests();
  public:
  const ::blokus::UserInfo& sent_requests(int index) const;
  ::blokus::UserInfo* add_sent_requests();
  const ::google::protobuf::RepeatedPtrField<::blokus::UserInfo>& sent_requests() const;
  // .blokus.Result result = 1;
  bool has_result() const;
  void clear_result() ;
  const ::blokus::Result& result() const;
  PROTOBUF_NODISCARD ::blokus::Result* release_result();
  ::blokus::Result* mutable_result();
  void set_allocated_result(::blokus::Result* value);
  void unsafe_arena_set_allocated_result(::blokus::Result* value);
  ::blokus::Result* unsafe_arena_release_result();

  private:
  const ::blokus::Result& _internal_result() const;
  ::blokus::Result* _internal_mutable_result();

  public:
  // @@protoc_insertion_point(class_scope:blokus.FriendListResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 4,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const FriendListResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::blokus::UserInfo > friends_;
    ::google::protobuf::RepeatedPtrField< ::blokus::UserInfo > pending_requests_;
    ::google::protobuf::RepeatedPtrField< ::blokus::UserInfo > sent_requests_;
    ::blokus::Result* result_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lobby_2eproto;
};
// -------------------------------------------------------------------

class CreateRoomResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.CreateRoomResponse) */ {
 public:
  inline CreateRoomResponse() : CreateRoomResponse(nullptr) {}
  ~CreateRoomResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CreateRoomResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CreateRoomResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CreateRoomResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline CreateRoomResponse(const CreateRoomResponse& from) : CreateRoomResponse(nullptr, from) {}
  inline CreateRoomResponse(CreateRoomResponse&& from) noexcept
      : CreateRoomResponse(nullptr, std::move(from)) {}
  inline CreateRoomResponse& operator=(const CreateRoomResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRoomResponse& operator=(CreateRoomResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateRoomResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateRoomResponse* internal_default_instance() {
    return reinterpret_cast<const CreateRoomResponse*>(
        &_CreateRoomResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(CreateRoomResponse& a, CreateRoomResponse& b) { a.Swap(&b); }
  inline void Swap(CreateRoomResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateRoomResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateRoomResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CreateRoomResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CreateRoomResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CreateRoomResponse& from) { CreateRoomResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CreateRoomResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.CreateRoomResponse"; }

 protected:
  explicit CreateRoomResponse(::google::protobuf::Arena* arena);
  CreateRoomResponse(::google::protobuf::Arena* arena, const CreateRoomResponse& from);
  CreateRoomResponse(::google::protobuf::Arena* arena, CreateRoomResponse&& from) noexcept
      : CreateRoomResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValidationErrorsFieldNumber = 10,
    kJoinTokenFieldNumber = 3,
    kSuggestedNameFieldNumber = 11,
    kResultFieldNumber = 1,
    kRoomInfoFieldNumber = 2,
  };
  // repeated string validation_errors = 10;
  int validation_errors_size() const;
  private:
  int _internal_validation_errors_size() const;

  public:
  void clear_validation_errors() ;
  const std::string& validation_errors(int index) const;
  std::string* mutable_validation_errors(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_validation_errors(int index, Arg_&& value, Args_... args);
  std::string* add_validation_errors();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_validation_errors(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& validation_errors() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_validation_errors();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_validation_errors() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_validation_errors();

  public:
  // string join_token = 3;
  void clear_join_token() ;
  const std::string& join_token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_join_token(Arg_&& arg, Args_... args);
  std::string* mutable_join_token();
  PROTOBUF_NODISCARD std::string* release_join_token();
  void set_allocated_join_token(std::string* value);

  private:
  const std::string& _internal_join_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_join_token(
      const std::string& value);
  std::string* _internal_mutable_join_token();

  public:
  // string suggested_name = 11;
  void clear_suggested_name() ;
  const std::string& suggested_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_suggested_name(Arg_&& arg, Args_... args);
  std::string* mutable_suggested_name();
  PROTOBUF_NODISCARD std::string* release_suggested_name();
  void set_allocated_suggested_name(std::string* value);

  private:
  const std::string& _internal_suggested_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_suggested_name(
      const std::string& value);
  std::string* _internal_mutable_suggested_name();

  public:
  // .blokus.Result result = 1;
  bool has_result() const;
  void clear_result() ;
  const ::blokus::Result& result() const;
  PROTOBUF_NODISCARD ::blokus::Result* release_result();
  ::blokus::Result* mutable_result();
  void set_allocated_result(::blokus::Result* value);
  void unsafe_arena_set_allocated_result(::blokus::Result* value);
  ::blokus::Result* unsafe_arena_release_result();

  private:
  const ::blokus::Result& _internal_result() const;
  ::blokus::Result* _internal_mutable_result();

  public:
  // .blokus.RoomInfo room_info = 2;
  bool has_room_info() const;
  void clear_room_info() ;
  const ::blokus::RoomInfo& room_info() const;
  PROTOBUF_NODISCARD ::blokus::RoomInfo* release_room_info();
  ::blokus::RoomInfo* mutable_room_info();
  void set_allocated_room_info(::blokus::RoomInfo* value);
  void unsafe_arena_set_allocated_room_info(::blokus::RoomInfo* value);
  ::blokus::RoomInfo* unsafe_arena_release_room_info();

  private:
  const ::blokus::RoomInfo& _internal_room_info() const;
  ::blokus::RoomInfo* _internal_mutable_room_info();

  public:
  // @@protoc_insertion_point(class_scope:blokus.CreateRoomResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 5, 2,
      75, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CreateRoomResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> validation_errors_;
    ::google::protobuf::internal::ArenaStringPtr join_token_;
    ::google::protobuf::internal::ArenaStringPtr suggested_name_;
    ::blokus::Result* result_;
    ::blokus::RoomInfo* room_info_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lobby_2eproto;
};
// -------------------------------------------------------------------

class AddFriendResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.AddFriendResponse) */ {
 public:
  inline AddFriendResponse() : AddFriendResponse(nullptr) {}
  ~AddFriendResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AddFriendResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AddFriendResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AddFriendResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline AddFriendResponse(const AddFriendResponse& from) : AddFriendResponse(nullptr, from) {}
  inline AddFriendResponse(AddFriendResponse&& from) noexcept
      : AddFriendResponse(nullptr, std::move(from)) {}
  inline AddFriendResponse& operator=(const AddFriendResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddFriendResponse& operator=(AddFriendResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddFriendResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddFriendResponse* internal_default_instance() {
    return reinterpret_cast<const AddFriendResponse*>(
        &_AddFriendResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 18;
  friend void swap(AddFriendResponse& a, AddFriendResponse& b) { a.Swap(&b); }
  inline void Swap(AddFriendResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddFriendResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddFriendResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AddFriendResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AddFriendResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AddFriendResponse& from) { AddFriendResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AddFriendResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.AddFriendResponse"; }

 protected:
  explicit AddFriendResponse(::google::protobuf::Arena* arena);
  AddFriendResponse(::google::protobuf::Arena* arena, const AddFriendResponse& from);
  AddFriendResponse(::google::protobuf::Arena* arena, AddFriendResponse&& from) noexcept
      : AddFriendResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kResultFieldNumber = 1,
    kAutoAcceptedFieldNumber = 3,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // .blokus.Result result = 1;
  bool has_result() const;
  void clear_result() ;
  const ::blokus::Result& result() const;
  PROTOBUF_NODISCARD ::blokus::Result* release_result();
  ::blokus::Result* mutable_result();
  void set_allocated_result(::blokus::Result* value);
  void unsafe_arena_set_allocated_result(::blokus::Result* value);
  ::blokus::Result* unsafe_arena_release_result();

  private:
  const ::blokus::Result& _internal_result() const;
  ::blokus::Result* _internal_mutable_result();

  public:
  // bool auto_accepted = 3;
  void clear_auto_accepted() ;
  bool auto_accepted() const;
  void set_auto_accepted(bool value);

  private:
  bool _internal_auto_accepted() const;
  void _internal_set_auto_accepted(bool value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.AddFriendResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      40, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AddFriendResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::blokus::Result* result_;
    bool auto_accepted_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lobby_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GetRoomListRequest

// .blokus.RoomFilter filter = 1;
inline void GetRoomListRequest::clear_filter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filter_ = 0;
}
inline ::blokus::RoomFilter GetRoomListRequest::filter() const {
  // @@protoc_insertion_point(field_get:blokus.GetRoomListRequest.filter)
  return _internal_filter();
}
inline void GetRoomListRequest::set_filter(::blokus::RoomFilter value) {
  _internal_set_filter(value);
  // @@protoc_insertion_point(field_set:blokus.GetRoomListRequest.filter)
}
inline ::blokus::RoomFilter GetRoomListRequest::_internal_filter() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::blokus::RoomFilter>(_impl_.filter_);
}
inline void GetRoomListRequest::_internal_set_filter(::blokus::RoomFilter value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filter_ = value;
}

// .blokus.RoomSortOrder sort_order = 2;
inline void GetRoomListRequest::clear_sort_order() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sort_order_ = 0;
}
inline ::blokus::RoomSortOrder GetRoomListRequest::sort_order() const {
  // @@protoc_insertion_point(field_get:blokus.GetRoomListRequest.sort_order)
  return _internal_sort_order();
}
inline void GetRoomListRequest::set_sort_order(::blokus::RoomSortOrder value) {
  _internal_set_sort_order(value);
  // @@protoc_insertion_point(field_set:blokus.GetRoomListRequest.sort_order)
}
inline ::blokus::RoomSortOrder GetRoomListRequest::_internal_sort_order() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::blokus::RoomSortOrder>(_impl_.sort_order_);
}
inline void GetRoomListRequest::_internal_set_sort_order(::blokus::RoomSortOrder value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sort_order_ = value;
}

// bool ascending = 3;
inline void GetRoomListRequest::clear_ascending() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ascending_ = false;
}
inline bool GetRoomListRequest::ascending() const {
  // @@protoc_insertion_point(field_get:blokus.GetRoomListRequest.ascending)
  return _internal_ascending();
}
inline void GetRoomListRequest::set_ascending(bool value) {
  _internal_set_ascending(value);
  // @@protoc_insertion_point(field_set:blokus.GetRoomListRequest.ascending)
}
inline bool GetRoomListRequest::_internal_ascending() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ascending_;
}
inline void GetRoomListRequest::_internal_set_ascending(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ascending_ = value;
}

// int32 page = 4;
inline void GetRoomListRequest::clear_page() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.page_ = 0;
}
inline ::int32_t GetRoomListRequest::page() const {
  // @@protoc_insertion_point(field_get:blokus.GetRoomListRequest.page)
  return _internal_page();
}
inline void GetRoomListRequest::set_page(::int32_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:blokus.GetRoomListRequest.page)
}
inline ::int32_t GetRoomListRequest::_internal_page() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.page_;
}
inline void GetRoomListRequest::_internal_set_page(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.page_ = value;
}

// int32 page_size = 5;
inline void GetRoomListRequest::clear_page_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.page_size_ = 0;
}
inline ::int32_t GetRoomListRequest::page_size() const {
  // @@protoc_insertion_point(field_get:blokus.GetRoomListRequest.page_size)
  return _internal_page_size();
}
inline void GetRoomListRequest::set_page_size(::int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:blokus.GetRoomListRequest.page_size)
}
inline ::int32_t GetRoomListRequest::_internal_page_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.page_size_;
}
inline void GetRoomListRequest::_internal_set_page_size(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.page_size_ = value;
}

// string search_query = 6;
inline void GetRoomListRequest::clear_search_query() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.search_query_.ClearToEmpty();
}
inline const std::string& GetRoomListRequest::search_query() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.GetRoomListRequest.search_query)
  return _internal_search_query();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetRoomListRequest::set_search_query(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.search_query_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.GetRoomListRequest.search_query)
}
inline std::string* GetRoomListRequest::mutable_search_query() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_search_query();
  // @@protoc_insertion_point(field_mutable:blokus.GetRoomListRequest.search_query)
  return _s;
}
inline const std::string& GetRoomListRequest::_internal_search_query() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.search_query_.Get();
}
inline void GetRoomListRequest::_internal_set_search_query(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.search_query_.Set(value, GetArena());
}
inline std::string* GetRoomListRequest::_internal_mutable_search_query() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.search_query_.Mutable( GetArena());
}
inline std::string* GetRoomListRequest::release_search_query() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.GetRoomListRequest.search_query)
  return _impl_.search_query_.Release();
}
inline void GetRoomListRequest::set_allocated_search_query(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.search_query_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.search_query_.IsDefault()) {
    _impl_.search_query_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.GetRoomListRequest.search_query)
}

// string host_name = 7;
inline void GetRoomListRequest::clear_host_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.host_name_.ClearToEmpty();
}
inline const std::string& GetRoomListRequest::host_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.GetRoomListRequest.host_name)
  return _internal_host_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetRoomListRequest::set_host_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.host_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.GetRoomListRequest.host_name)
}
inline std::string* GetRoomListRequest::mutable_host_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_host_name();
  // @@protoc_insertion_point(field_mutable:blokus.GetRoomListRequest.host_name)
  return _s;
}
inline const std::string& GetRoomListRequest::_internal_host_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.host_name_.Get();
}
inline void GetRoomListRequest::_internal_set_host_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.host_name_.Set(value, GetArena());
}
inline std::string* GetRoomListRequest::_internal_mutable_host_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.host_name_.Mutable( GetArena());
}
inline std::string* GetRoomListRequest::release_host_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.GetRoomListRequest.host_name)
  return _impl_.host_name_.Release();
}
inline void GetRoomListRequest::set_allocated_host_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.host_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.host_name_.IsDefault()) {
    _impl_.host_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.GetRoomListRequest.host_name)
}

// int32 min_players = 8;
inline void GetRoomListRequest::clear_min_players() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.min_players_ = 0;
}
inline ::int32_t GetRoomListRequest::min_players() const {
  // @@protoc_insertion_point(field_get:blokus.GetRoomListRequest.min_players)
  return _internal_min_players();
}
inline void GetRoomListRequest::set_min_players(::int32_t value) {
  _internal_set_min_players(value);
  // @@protoc_insertion_point(field_set:blokus.GetRoomListRequest.min_players)
}
inline ::int32_t GetRoomListRequest::_internal_min_players() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.min_players_;
}
inline void GetRoomListRequest::_internal_set_min_players(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.min_players_ = value;
}

// int32 max_players = 9;
inline void GetRoomListRequest::clear_max_players() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_players_ = 0;
}
inline ::int32_t GetRoomListRequest::max_players() const {
  // @@protoc_insertion_point(field_get:blokus.GetRoomListRequest.max_players)
  return _internal_max_players();
}
inline void GetRoomListRequest::set_max_players(::int32_t value) {
  _internal_set_max_players(value);
  // @@protoc_insertion_point(field_set:blokus.GetRoomListRequest.max_players)
}
inline ::int32_t GetRoomListRequest::_internal_max_players() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_players_;
}
inline void GetRoomListRequest::_internal_set_max_players(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_players_ = value;
}

// bool include_private = 10;
inline void GetRoomListRequest::clear_include_private() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.include_private_ = false;
}
inline bool GetRoomListRequest::include_private() const {
  // @@protoc_insertion_point(field_get:blokus.GetRoomListRequest.include_private)
  return _internal_include_private();
}
inline void GetRoomListRequest::set_include_private(bool value) {
  _internal_set_include_private(value);
  // @@protoc_insertion_point(field_set:blokus.GetRoomListRequest.include_private)
}
inline bool GetRoomListRequest::_internal_include_private() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.include_private_;
}
inline void GetRoomListRequest::_internal_set_include_private(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.include_private_ = value;
}

// -------------------------------------------------------------------

// RoomListResponse

// .blokus.Result result = 1;
inline bool RoomListResponse::has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.result_ != nullptr);
  return value;
}
inline const ::blokus::Result& RoomListResponse::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::Result* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::Result&>(::blokus::_Result_default_instance_);
}
inline const ::blokus::Result& RoomListResponse::result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.RoomListResponse.result)
  return _internal_result();
}
inline void RoomListResponse::unsafe_arena_set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.RoomListResponse.result)
}
inline ::blokus::Result* RoomListResponse::release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* released = _impl_.result_;
  _impl_.result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::Result* RoomListResponse::unsafe_arena_release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.RoomListResponse.result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::blokus::Result* RoomListResponse::_internal_mutable_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::Result>(GetArena());
    _impl_.result_ = reinterpret_cast<::blokus::Result*>(p);
  }
  return _impl_.result_;
}
inline ::blokus::Result* RoomListResponse::mutable_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::blokus::Result* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:blokus.RoomListResponse.result)
  return _msg;
}
inline void RoomListResponse::set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.RoomListResponse.result)
}

// repeated .blokus.RoomInfo rooms = 2;
inline int RoomListResponse::_internal_rooms_size() const {
  return _internal_rooms().size();
}
inline int RoomListResponse::rooms_size() const {
  return _internal_rooms_size();
}
inline ::blokus::RoomInfo* RoomListResponse::mutable_rooms(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.RoomListResponse.rooms)
  return _internal_mutable_rooms()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::blokus::RoomInfo>* RoomListResponse::mutable_rooms()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.RoomListResponse.rooms)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_rooms();
}
inline const ::blokus::RoomInfo& RoomListResponse::rooms(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.RoomListResponse.rooms)
  return _internal_rooms().Get(index);
}
inline ::blokus::RoomInfo* RoomListResponse::add_rooms() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::blokus::RoomInfo* _add = _internal_mutable_rooms()->Add();
  // @@protoc_insertion_point(field_add:blokus.RoomListResponse.rooms)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::blokus::RoomInfo>& RoomListResponse::rooms() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.RoomListResponse.rooms)
  return _internal_rooms();
}
inline const ::google::protobuf::RepeatedPtrField<::blokus::RoomInfo>&
RoomListResponse::_internal_rooms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rooms_;
}
inline ::google::protobuf::RepeatedPtrField<::blokus::RoomInfo>*
RoomListResponse::_internal_mutable_rooms() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.rooms_;
}

// int32 total_rooms = 3;
inline void RoomListResponse::clear_total_rooms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_rooms_ = 0;
}
inline ::int32_t RoomListResponse::total_rooms() const {
  // @@protoc_insertion_point(field_get:blokus.RoomListResponse.total_rooms)
  return _internal_total_rooms();
}
inline void RoomListResponse::set_total_rooms(::int32_t value) {
  _internal_set_total_rooms(value);
  // @@protoc_insertion_point(field_set:blokus.RoomListResponse.total_rooms)
}
inline ::int32_t RoomListResponse::_internal_total_rooms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_rooms_;
}
inline void RoomListResponse::_internal_set_total_rooms(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_rooms_ = value;
}

// int32 current_page = 4;
inline void RoomListResponse::clear_current_page() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_page_ = 0;
}
inline ::int32_t RoomListResponse::current_page() const {
  // @@protoc_insertion_point(field_get:blokus.RoomListResponse.current_page)
  return _internal_current_page();
}
inline void RoomListResponse::set_current_page(::int32_t value) {
  _internal_set_current_page(value);
  // @@protoc_insertion_point(field_set:blokus.RoomListResponse.current_page)
}
inline ::int32_t RoomListResponse::_internal_current_page() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.current_page_;
}
inline void RoomListResponse::_internal_set_current_page(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_page_ = value;
}

// int32 total_pages = 5;
inline void RoomListResponse::clear_total_pages() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_pages_ = 0;
}
inline ::int32_t RoomListResponse::total_pages() const {
  // @@protoc_insertion_point(field_get:blokus.RoomListResponse.total_pages)
  return _internal_total_pages();
}
inline void RoomListResponse::set_total_pages(::int32_t value) {
  _internal_set_total_pages(value);
  // @@protoc_insertion_point(field_set:blokus.RoomListResponse.total_pages)
}
inline ::int32_t RoomListResponse::_internal_total_pages() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_pages_;
}
inline void RoomListResponse::_internal_set_total_pages(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_pages_ = value;
}

// int32 available_rooms = 6;
inline void RoomListResponse::clear_available_rooms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.available_rooms_ = 0;
}
inline ::int32_t RoomListResponse::available_rooms() const {
  // @@protoc_insertion_point(field_get:blokus.RoomListResponse.available_rooms)
  return _internal_available_rooms();
}
inline void RoomListResponse::set_available_rooms(::int32_t value) {
  _internal_set_available_rooms(value);
  // @@protoc_insertion_point(field_set:blokus.RoomListResponse.available_rooms)
}
inline ::int32_t RoomListResponse::_internal_available_rooms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.available_rooms_;
}
inline void RoomListResponse::_internal_set_available_rooms(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.available_rooms_ = value;
}

// int32 playing_rooms = 7;
inline void RoomListResponse::clear_playing_rooms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.playing_rooms_ = 0;
}
inline ::int32_t RoomListResponse::playing_rooms() const {
  // @@protoc_insertion_point(field_get:blokus.RoomListResponse.playing_rooms)
  return _internal_playing_rooms();
}
inline void RoomListResponse::set_playing_rooms(::int32_t value) {
  _internal_set_playing_rooms(value);
  // @@protoc_insertion_point(field_set:blokus.RoomListResponse.playing_rooms)
}
inline ::int32_t RoomListResponse::_internal_playing_rooms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.playing_rooms_;
}
inline void RoomListResponse::_internal_set_playing_rooms(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.playing_rooms_ = value;
}

// int32 total_players_in_lobby = 8;
inline void RoomListResponse::clear_total_players_in_lobby() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_players_in_lobby_ = 0;
}
inline ::int32_t RoomListResponse::total_players_in_lobby() const {
  // @@protoc_insertion_point(field_get:blokus.RoomListResponse.total_players_in_lobby)
  return _internal_total_players_in_lobby();
}
inline void RoomListResponse::set_total_players_in_lobby(::int32_t value) {
  _internal_set_total_players_in_lobby(value);
  // @@protoc_insertion_point(field_set:blokus.RoomListResponse.total_players_in_lobby)
}
inline ::int32_t RoomListResponse::_internal_total_players_in_lobby() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_players_in_lobby_;
}
inline void RoomListResponse::_internal_set_total_players_in_lobby(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_players_in_lobby_ = value;
}

// -------------------------------------------------------------------

// RoomListUpdate

// .blokus.RoomListUpdate.UpdateType update_type = 1;
inline void RoomListUpdate::clear_update_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.update_type_ = 0;
}
inline ::blokus::RoomListUpdate_UpdateType RoomListUpdate::update_type() const {
  // @@protoc_insertion_point(field_get:blokus.RoomListUpdate.update_type)
  return _internal_update_type();
}
inline void RoomListUpdate::set_update_type(::blokus::RoomListUpdate_UpdateType value) {
  _internal_set_update_type(value);
  // @@protoc_insertion_point(field_set:blokus.RoomListUpdate.update_type)
}
inline ::blokus::RoomListUpdate_UpdateType RoomListUpdate::_internal_update_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::blokus::RoomListUpdate_UpdateType>(_impl_.update_type_);
}
inline void RoomListUpdate::_internal_set_update_type(::blokus::RoomListUpdate_UpdateType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.update_type_ = value;
}

// .blokus.RoomInfo room_info = 2;
inline bool RoomListUpdate::has_room_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.room_info_ != nullptr);
  return value;
}
inline const ::blokus::RoomInfo& RoomListUpdate::_internal_room_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::RoomInfo* p = _impl_.room_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::RoomInfo&>(::blokus::_RoomInfo_default_instance_);
}
inline const ::blokus::RoomInfo& RoomListUpdate::room_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.RoomListUpdate.room_info)
  return _internal_room_info();
}
inline void RoomListUpdate::unsafe_arena_set_allocated_room_info(::blokus::RoomInfo* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.room_info_);
  }
  _impl_.room_info_ = reinterpret_cast<::blokus::RoomInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.RoomListUpdate.room_info)
}
inline ::blokus::RoomInfo* RoomListUpdate::release_room_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::RoomInfo* released = _impl_.room_info_;
  _impl_.room_info_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::RoomInfo* RoomListUpdate::unsafe_arena_release_room_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.RoomListUpdate.room_info)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::RoomInfo* temp = _impl_.room_info_;
  _impl_.room_info_ = nullptr;
  return temp;
}
inline ::blokus::RoomInfo* RoomListUpdate::_internal_mutable_room_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.room_info_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::RoomInfo>(GetArena());
    _impl_.room_info_ = reinterpret_cast<::blokus::RoomInfo*>(p);
  }
  return _impl_.room_info_;
}
inline ::blokus::RoomInfo* RoomListUpdate::mutable_room_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::blokus::RoomInfo* _msg = _internal_mutable_room_info();
  // @@protoc_insertion_point(field_mutable:blokus.RoomListUpdate.room_info)
  return _msg;
}
inline void RoomListUpdate::set_allocated_room_info(::blokus::RoomInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.room_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.room_info_ = reinterpret_cast<::blokus::RoomInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.RoomListUpdate.room_info)
}

// string updated_field = 3;
inline void RoomListUpdate::clear_updated_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.updated_field_.ClearToEmpty();
}
inline const std::string& RoomListUpdate::updated_field() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.RoomListUpdate.updated_field)
  return _internal_updated_field();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RoomListUpdate::set_updated_field(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.updated_field_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.RoomListUpdate.updated_field)
}
inline std::string* RoomListUpdate::mutable_updated_field() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_updated_field();
  // @@protoc_insertion_point(field_mutable:blokus.RoomListUpdate.updated_field)
  return _s;
}
inline const std::string& RoomListUpdate::_internal_updated_field() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.updated_field_.Get();
}
inline void RoomListUpdate::_internal_set_updated_field(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.updated_field_.Set(value, GetArena());
}
inline std::string* RoomListUpdate::_internal_mutable_updated_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.updated_field_.Mutable( GetArena());
}
inline std::string* RoomListUpdate::release_updated_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.RoomListUpdate.updated_field)
  return _impl_.updated_field_.Release();
}
inline void RoomListUpdate::set_allocated_updated_field(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.updated_field_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.updated_field_.IsDefault()) {
    _impl_.updated_field_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.RoomListUpdate.updated_field)
}

// .google.protobuf.Timestamp updated_at = 4;
inline bool RoomListUpdate::has_updated_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.updated_at_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& RoomListUpdate::_internal_updated_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.updated_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& RoomListUpdate::updated_at() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.RoomListUpdate.updated_at)
  return _internal_updated_at();
}
inline void RoomListUpdate::unsafe_arena_set_allocated_updated_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.updated_at_);
  }
  _impl_.updated_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.RoomListUpdate.updated_at)
}
inline ::google::protobuf::Timestamp* RoomListUpdate::release_updated_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.updated_at_;
  _impl_.updated_at_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* RoomListUpdate::unsafe_arena_release_updated_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.RoomListUpdate.updated_at)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.updated_at_;
  _impl_.updated_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* RoomListUpdate::_internal_mutable_updated_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.updated_at_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.updated_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.updated_at_;
}
inline ::google::protobuf::Timestamp* RoomListUpdate::mutable_updated_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_updated_at();
  // @@protoc_insertion_point(field_mutable:blokus.RoomListUpdate.updated_at)
  return _msg;
}
inline void RoomListUpdate::set_allocated_updated_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.updated_at_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.updated_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.RoomListUpdate.updated_at)
}

// string player_username = 5;
inline void RoomListUpdate::clear_player_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_username_.ClearToEmpty();
}
inline const std::string& RoomListUpdate::player_username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.RoomListUpdate.player_username)
  return _internal_player_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RoomListUpdate::set_player_username(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.RoomListUpdate.player_username)
}
inline std::string* RoomListUpdate::mutable_player_username() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_player_username();
  // @@protoc_insertion_point(field_mutable:blokus.RoomListUpdate.player_username)
  return _s;
}
inline const std::string& RoomListUpdate::_internal_player_username() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.player_username_.Get();
}
inline void RoomListUpdate::_internal_set_player_username(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_username_.Set(value, GetArena());
}
inline std::string* RoomListUpdate::_internal_mutable_player_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.player_username_.Mutable( GetArena());
}
inline std::string* RoomListUpdate::release_player_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.RoomListUpdate.player_username)
  return _impl_.player_username_.Release();
}
inline void RoomListUpdate::set_allocated_player_username(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_username_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.player_username_.IsDefault()) {
    _impl_.player_username_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.RoomListUpdate.player_username)
}

// .blokus.PlayerColor player_color = 6;
inline void RoomListUpdate::clear_player_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_color_ = 0;
}
inline ::blokus::PlayerColor RoomListUpdate::player_color() const {
  // @@protoc_insertion_point(field_get:blokus.RoomListUpdate.player_color)
  return _internal_player_color();
}
inline void RoomListUpdate::set_player_color(::blokus::PlayerColor value) {
  _internal_set_player_color(value);
  // @@protoc_insertion_point(field_set:blokus.RoomListUpdate.player_color)
}
inline ::blokus::PlayerColor RoomListUpdate::_internal_player_color() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::blokus::PlayerColor>(_impl_.player_color_);
}
inline void RoomListUpdate::_internal_set_player_color(::blokus::PlayerColor value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_color_ = value;
}

// -------------------------------------------------------------------

// CreateRoomRequest

// string room_name = 1;
inline void CreateRoomRequest::clear_room_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_name_.ClearToEmpty();
}
inline const std::string& CreateRoomRequest::room_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.CreateRoomRequest.room_name)
  return _internal_room_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateRoomRequest::set_room_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.CreateRoomRequest.room_name)
}
inline std::string* CreateRoomRequest::mutable_room_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_room_name();
  // @@protoc_insertion_point(field_mutable:blokus.CreateRoomRequest.room_name)
  return _s;
}
inline const std::string& CreateRoomRequest::_internal_room_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.room_name_.Get();
}
inline void CreateRoomRequest::_internal_set_room_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_name_.Set(value, GetArena());
}
inline std::string* CreateRoomRequest::_internal_mutable_room_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.room_name_.Mutable( GetArena());
}
inline std::string* CreateRoomRequest::release_room_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.CreateRoomRequest.room_name)
  return _impl_.room_name_.Release();
}
inline void CreateRoomRequest::set_allocated_room_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.room_name_.IsDefault()) {
    _impl_.room_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.CreateRoomRequest.room_name)
}

// bool is_private = 2;
inline void CreateRoomRequest::clear_is_private() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_private_ = false;
}
inline bool CreateRoomRequest::is_private() const {
  // @@protoc_insertion_point(field_get:blokus.CreateRoomRequest.is_private)
  return _internal_is_private();
}
inline void CreateRoomRequest::set_is_private(bool value) {
  _internal_set_is_private(value);
  // @@protoc_insertion_point(field_set:blokus.CreateRoomRequest.is_private)
}
inline bool CreateRoomRequest::_internal_is_private() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_private_;
}
inline void CreateRoomRequest::_internal_set_is_private(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_private_ = value;
}

// string password = 3;
inline void CreateRoomRequest::clear_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.ClearToEmpty();
}
inline const std::string& CreateRoomRequest::password() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.CreateRoomRequest.password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateRoomRequest::set_password(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.CreateRoomRequest.password)
}
inline std::string* CreateRoomRequest::mutable_password() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:blokus.CreateRoomRequest.password)
  return _s;
}
inline const std::string& CreateRoomRequest::_internal_password() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.password_.Get();
}
inline void CreateRoomRequest::_internal_set_password(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.Set(value, GetArena());
}
inline std::string* CreateRoomRequest::_internal_mutable_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.password_.Mutable( GetArena());
}
inline std::string* CreateRoomRequest::release_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.CreateRoomRequest.password)
  return _impl_.password_.Release();
}
inline void CreateRoomRequest::set_allocated_password(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.CreateRoomRequest.password)
}

// string game_mode = 4;
inline void CreateRoomRequest::clear_game_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.game_mode_.ClearToEmpty();
}
inline const std::string& CreateRoomRequest::game_mode() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.CreateRoomRequest.game_mode)
  return _internal_game_mode();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateRoomRequest::set_game_mode(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.game_mode_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.CreateRoomRequest.game_mode)
}
inline std::string* CreateRoomRequest::mutable_game_mode() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_game_mode();
  // @@protoc_insertion_point(field_mutable:blokus.CreateRoomRequest.game_mode)
  return _s;
}
inline const std::string& CreateRoomRequest::_internal_game_mode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.game_mode_.Get();
}
inline void CreateRoomRequest::_internal_set_game_mode(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.game_mode_.Set(value, GetArena());
}
inline std::string* CreateRoomRequest::_internal_mutable_game_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.game_mode_.Mutable( GetArena());
}
inline std::string* CreateRoomRequest::release_game_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.CreateRoomRequest.game_mode)
  return _impl_.game_mode_.Release();
}
inline void CreateRoomRequest::set_allocated_game_mode(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.game_mode_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.game_mode_.IsDefault()) {
    _impl_.game_mode_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.CreateRoomRequest.game_mode)
}

// int32 max_players = 5;
inline void CreateRoomRequest::clear_max_players() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_players_ = 0;
}
inline ::int32_t CreateRoomRequest::max_players() const {
  // @@protoc_insertion_point(field_get:blokus.CreateRoomRequest.max_players)
  return _internal_max_players();
}
inline void CreateRoomRequest::set_max_players(::int32_t value) {
  _internal_set_max_players(value);
  // @@protoc_insertion_point(field_set:blokus.CreateRoomRequest.max_players)
}
inline ::int32_t CreateRoomRequest::_internal_max_players() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_players_;
}
inline void CreateRoomRequest::_internal_set_max_players(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_players_ = value;
}

// int32 turn_time_seconds = 6;
inline void CreateRoomRequest::clear_turn_time_seconds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.turn_time_seconds_ = 0;
}
inline ::int32_t CreateRoomRequest::turn_time_seconds() const {
  // @@protoc_insertion_point(field_get:blokus.CreateRoomRequest.turn_time_seconds)
  return _internal_turn_time_seconds();
}
inline void CreateRoomRequest::set_turn_time_seconds(::int32_t value) {
  _internal_set_turn_time_seconds(value);
  // @@protoc_insertion_point(field_set:blokus.CreateRoomRequest.turn_time_seconds)
}
inline ::int32_t CreateRoomRequest::_internal_turn_time_seconds() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.turn_time_seconds_;
}
inline void CreateRoomRequest::_internal_set_turn_time_seconds(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.turn_time_seconds_ = value;
}

// bool allow_ai = 7;
inline void CreateRoomRequest::clear_allow_ai() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allow_ai_ = false;
}
inline bool CreateRoomRequest::allow_ai() const {
  // @@protoc_insertion_point(field_get:blokus.CreateRoomRequest.allow_ai)
  return _internal_allow_ai();
}
inline void CreateRoomRequest::set_allow_ai(bool value) {
  _internal_set_allow_ai(value);
  // @@protoc_insertion_point(field_set:blokus.CreateRoomRequest.allow_ai)
}
inline bool CreateRoomRequest::_internal_allow_ai() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.allow_ai_;
}
inline void CreateRoomRequest::_internal_set_allow_ai(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allow_ai_ = value;
}

// string description = 8;
inline void CreateRoomRequest::clear_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.ClearToEmpty();
}
inline const std::string& CreateRoomRequest::description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.CreateRoomRequest.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateRoomRequest::set_description(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.CreateRoomRequest.description)
}
inline std::string* CreateRoomRequest::mutable_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:blokus.CreateRoomRequest.description)
  return _s;
}
inline const std::string& CreateRoomRequest::_internal_description() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.description_.Get();
}
inline void CreateRoomRequest::_internal_set_description(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.Set(value, GetArena());
}
inline std::string* CreateRoomRequest::_internal_mutable_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.description_.Mutable( GetArena());
}
inline std::string* CreateRoomRequest::release_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.CreateRoomRequest.description)
  return _impl_.description_.Release();
}
inline void CreateRoomRequest::set_allocated_description(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.CreateRoomRequest.description)
}

// repeated string tags = 9;
inline int CreateRoomRequest::_internal_tags_size() const {
  return _internal_tags().size();
}
inline int CreateRoomRequest::tags_size() const {
  return _internal_tags_size();
}
inline void CreateRoomRequest::clear_tags() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tags_.Clear();
}
inline std::string* CreateRoomRequest::add_tags() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_tags()->Add();
  // @@protoc_insertion_point(field_add_mutable:blokus.CreateRoomRequest.tags)
  return _s;
}
inline const std::string& CreateRoomRequest::tags(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.CreateRoomRequest.tags)
  return _internal_tags().Get(index);
}
inline std::string* CreateRoomRequest::mutable_tags(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.CreateRoomRequest.tags)
  return _internal_mutable_tags()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void CreateRoomRequest::set_tags(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_tags()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:blokus.CreateRoomRequest.tags)
}
template <typename Arg_, typename... Args_>
inline void CreateRoomRequest::add_tags(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_tags(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:blokus.CreateRoomRequest.tags)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
CreateRoomRequest::tags() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.CreateRoomRequest.tags)
  return _internal_tags();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
CreateRoomRequest::mutable_tags() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.CreateRoomRequest.tags)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_tags();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
CreateRoomRequest::_internal_tags() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tags_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
CreateRoomRequest::_internal_mutable_tags() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.tags_;
}

// int32 min_rating = 10;
inline void CreateRoomRequest::clear_min_rating() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.min_rating_ = 0;
}
inline ::int32_t CreateRoomRequest::min_rating() const {
  // @@protoc_insertion_point(field_get:blokus.CreateRoomRequest.min_rating)
  return _internal_min_rating();
}
inline void CreateRoomRequest::set_min_rating(::int32_t value) {
  _internal_set_min_rating(value);
  // @@protoc_insertion_point(field_set:blokus.CreateRoomRequest.min_rating)
}
inline ::int32_t CreateRoomRequest::_internal_min_rating() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.min_rating_;
}
inline void CreateRoomRequest::_internal_set_min_rating(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.min_rating_ = value;
}

// int32 max_rating = 11;
inline void CreateRoomRequest::clear_max_rating() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_rating_ = 0;
}
inline ::int32_t CreateRoomRequest::max_rating() const {
  // @@protoc_insertion_point(field_get:blokus.CreateRoomRequest.max_rating)
  return _internal_max_rating();
}
inline void CreateRoomRequest::set_max_rating(::int32_t value) {
  _internal_set_max_rating(value);
  // @@protoc_insertion_point(field_set:blokus.CreateRoomRequest.max_rating)
}
inline ::int32_t CreateRoomRequest::_internal_max_rating() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_rating_;
}
inline void CreateRoomRequest::_internal_set_max_rating(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_rating_ = value;
}

// bool spectators_allowed = 15;
inline void CreateRoomRequest::clear_spectators_allowed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.spectators_allowed_ = false;
}
inline bool CreateRoomRequest::spectators_allowed() const {
  // @@protoc_insertion_point(field_get:blokus.CreateRoomRequest.spectators_allowed)
  return _internal_spectators_allowed();
}
inline void CreateRoomRequest::set_spectators_allowed(bool value) {
  _internal_set_spectators_allowed(value);
  // @@protoc_insertion_point(field_set:blokus.CreateRoomRequest.spectators_allowed)
}
inline bool CreateRoomRequest::_internal_spectators_allowed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.spectators_allowed_;
}
inline void CreateRoomRequest::_internal_set_spectators_allowed(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.spectators_allowed_ = value;
}

// int32 max_spectators = 16;
inline void CreateRoomRequest::clear_max_spectators() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_spectators_ = 0;
}
inline ::int32_t CreateRoomRequest::max_spectators() const {
  // @@protoc_insertion_point(field_get:blokus.CreateRoomRequest.max_spectators)
  return _internal_max_spectators();
}
inline void CreateRoomRequest::set_max_spectators(::int32_t value) {
  _internal_set_max_spectators(value);
  // @@protoc_insertion_point(field_set:blokus.CreateRoomRequest.max_spectators)
}
inline ::int32_t CreateRoomRequest::_internal_max_spectators() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_spectators_;
}
inline void CreateRoomRequest::_internal_set_max_spectators(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_spectators_ = value;
}

// bool auto_start = 17;
inline void CreateRoomRequest::clear_auto_start() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auto_start_ = false;
}
inline bool CreateRoomRequest::auto_start() const {
  // @@protoc_insertion_point(field_get:blokus.CreateRoomRequest.auto_start)
  return _internal_auto_start();
}
inline void CreateRoomRequest::set_auto_start(bool value) {
  _internal_set_auto_start(value);
  // @@protoc_insertion_point(field_set:blokus.CreateRoomRequest.auto_start)
}
inline bool CreateRoomRequest::_internal_auto_start() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.auto_start_;
}
inline void CreateRoomRequest::_internal_set_auto_start(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auto_start_ = value;
}

// bool ranked_game = 18;
inline void CreateRoomRequest::clear_ranked_game() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ranked_game_ = false;
}
inline bool CreateRoomRequest::ranked_game() const {
  // @@protoc_insertion_point(field_get:blokus.CreateRoomRequest.ranked_game)
  return _internal_ranked_game();
}
inline void CreateRoomRequest::set_ranked_game(bool value) {
  _internal_set_ranked_game(value);
  // @@protoc_insertion_point(field_set:blokus.CreateRoomRequest.ranked_game)
}
inline bool CreateRoomRequest::_internal_ranked_game() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ranked_game_;
}
inline void CreateRoomRequest::_internal_set_ranked_game(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ranked_game_ = value;
}

// -------------------------------------------------------------------

// CreateRoomResponse

// .blokus.Result result = 1;
inline bool CreateRoomResponse::has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.result_ != nullptr);
  return value;
}
inline const ::blokus::Result& CreateRoomResponse::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::Result* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::Result&>(::blokus::_Result_default_instance_);
}
inline const ::blokus::Result& CreateRoomResponse::result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.CreateRoomResponse.result)
  return _internal_result();
}
inline void CreateRoomResponse::unsafe_arena_set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.CreateRoomResponse.result)
}
inline ::blokus::Result* CreateRoomResponse::release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* released = _impl_.result_;
  _impl_.result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::Result* CreateRoomResponse::unsafe_arena_release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.CreateRoomResponse.result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::blokus::Result* CreateRoomResponse::_internal_mutable_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::Result>(GetArena());
    _impl_.result_ = reinterpret_cast<::blokus::Result*>(p);
  }
  return _impl_.result_;
}
inline ::blokus::Result* CreateRoomResponse::mutable_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::blokus::Result* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:blokus.CreateRoomResponse.result)
  return _msg;
}
inline void CreateRoomResponse::set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.CreateRoomResponse.result)
}

// .blokus.RoomInfo room_info = 2;
inline bool CreateRoomResponse::has_room_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.room_info_ != nullptr);
  return value;
}
inline const ::blokus::RoomInfo& CreateRoomResponse::_internal_room_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::RoomInfo* p = _impl_.room_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::RoomInfo&>(::blokus::_RoomInfo_default_instance_);
}
inline const ::blokus::RoomInfo& CreateRoomResponse::room_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.CreateRoomResponse.room_info)
  return _internal_room_info();
}
inline void CreateRoomResponse::unsafe_arena_set_allocated_room_info(::blokus::RoomInfo* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.room_info_);
  }
  _impl_.room_info_ = reinterpret_cast<::blokus::RoomInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.CreateRoomResponse.room_info)
}
inline ::blokus::RoomInfo* CreateRoomResponse::release_room_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::blokus::RoomInfo* released = _impl_.room_info_;
  _impl_.room_info_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::RoomInfo* CreateRoomResponse::unsafe_arena_release_room_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.CreateRoomResponse.room_info)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::blokus::RoomInfo* temp = _impl_.room_info_;
  _impl_.room_info_ = nullptr;
  return temp;
}
inline ::blokus::RoomInfo* CreateRoomResponse::_internal_mutable_room_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.room_info_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::RoomInfo>(GetArena());
    _impl_.room_info_ = reinterpret_cast<::blokus::RoomInfo*>(p);
  }
  return _impl_.room_info_;
}
inline ::blokus::RoomInfo* CreateRoomResponse::mutable_room_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::blokus::RoomInfo* _msg = _internal_mutable_room_info();
  // @@protoc_insertion_point(field_mutable:blokus.CreateRoomResponse.room_info)
  return _msg;
}
inline void CreateRoomResponse::set_allocated_room_info(::blokus::RoomInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.room_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.room_info_ = reinterpret_cast<::blokus::RoomInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.CreateRoomResponse.room_info)
}

// string join_token = 3;
inline void CreateRoomResponse::clear_join_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.join_token_.ClearToEmpty();
}
inline const std::string& CreateRoomResponse::join_token() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.CreateRoomResponse.join_token)
  return _internal_join_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateRoomResponse::set_join_token(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.join_token_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.CreateRoomResponse.join_token)
}
inline std::string* CreateRoomResponse::mutable_join_token() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_join_token();
  // @@protoc_insertion_point(field_mutable:blokus.CreateRoomResponse.join_token)
  return _s;
}
inline const std::string& CreateRoomResponse::_internal_join_token() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.join_token_.Get();
}
inline void CreateRoomResponse::_internal_set_join_token(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.join_token_.Set(value, GetArena());
}
inline std::string* CreateRoomResponse::_internal_mutable_join_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.join_token_.Mutable( GetArena());
}
inline std::string* CreateRoomResponse::release_join_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.CreateRoomResponse.join_token)
  return _impl_.join_token_.Release();
}
inline void CreateRoomResponse::set_allocated_join_token(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.join_token_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.join_token_.IsDefault()) {
    _impl_.join_token_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.CreateRoomResponse.join_token)
}

// repeated string validation_errors = 10;
inline int CreateRoomResponse::_internal_validation_errors_size() const {
  return _internal_validation_errors().size();
}
inline int CreateRoomResponse::validation_errors_size() const {
  return _internal_validation_errors_size();
}
inline void CreateRoomResponse::clear_validation_errors() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validation_errors_.Clear();
}
inline std::string* CreateRoomResponse::add_validation_errors() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_validation_errors()->Add();
  // @@protoc_insertion_point(field_add_mutable:blokus.CreateRoomResponse.validation_errors)
  return _s;
}
inline const std::string& CreateRoomResponse::validation_errors(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.CreateRoomResponse.validation_errors)
  return _internal_validation_errors().Get(index);
}
inline std::string* CreateRoomResponse::mutable_validation_errors(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.CreateRoomResponse.validation_errors)
  return _internal_mutable_validation_errors()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void CreateRoomResponse::set_validation_errors(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_validation_errors()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:blokus.CreateRoomResponse.validation_errors)
}
template <typename Arg_, typename... Args_>
inline void CreateRoomResponse::add_validation_errors(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_validation_errors(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:blokus.CreateRoomResponse.validation_errors)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
CreateRoomResponse::validation_errors() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.CreateRoomResponse.validation_errors)
  return _internal_validation_errors();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
CreateRoomResponse::mutable_validation_errors() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.CreateRoomResponse.validation_errors)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_validation_errors();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
CreateRoomResponse::_internal_validation_errors() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.validation_errors_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
CreateRoomResponse::_internal_mutable_validation_errors() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.validation_errors_;
}

// string suggested_name = 11;
inline void CreateRoomResponse::clear_suggested_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.suggested_name_.ClearToEmpty();
}
inline const std::string& CreateRoomResponse::suggested_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.CreateRoomResponse.suggested_name)
  return _internal_suggested_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateRoomResponse::set_suggested_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.suggested_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.CreateRoomResponse.suggested_name)
}
inline std::string* CreateRoomResponse::mutable_suggested_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_suggested_name();
  // @@protoc_insertion_point(field_mutable:blokus.CreateRoomResponse.suggested_name)
  return _s;
}
inline const std::string& CreateRoomResponse::_internal_suggested_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.suggested_name_.Get();
}
inline void CreateRoomResponse::_internal_set_suggested_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.suggested_name_.Set(value, GetArena());
}
inline std::string* CreateRoomResponse::_internal_mutable_suggested_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.suggested_name_.Mutable( GetArena());
}
inline std::string* CreateRoomResponse::release_suggested_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.CreateRoomResponse.suggested_name)
  return _impl_.suggested_name_.Release();
}
inline void CreateRoomResponse::set_allocated_suggested_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.suggested_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.suggested_name_.IsDefault()) {
    _impl_.suggested_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.CreateRoomResponse.suggested_name)
}

// -------------------------------------------------------------------

// JoinRoomRequest

// int32 room_id = 1;
inline void JoinRoomRequest::clear_room_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_id_ = 0;
}
inline ::int32_t JoinRoomRequest::room_id() const {
  // @@protoc_insertion_point(field_get:blokus.JoinRoomRequest.room_id)
  return _internal_room_id();
}
inline void JoinRoomRequest::set_room_id(::int32_t value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:blokus.JoinRoomRequest.room_id)
}
inline ::int32_t JoinRoomRequest::_internal_room_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.room_id_;
}
inline void JoinRoomRequest::_internal_set_room_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_id_ = value;
}

// string password = 2;
inline void JoinRoomRequest::clear_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.ClearToEmpty();
}
inline const std::string& JoinRoomRequest::password() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.JoinRoomRequest.password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void JoinRoomRequest::set_password(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.JoinRoomRequest.password)
}
inline std::string* JoinRoomRequest::mutable_password() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:blokus.JoinRoomRequest.password)
  return _s;
}
inline const std::string& JoinRoomRequest::_internal_password() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.password_.Get();
}
inline void JoinRoomRequest::_internal_set_password(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.Set(value, GetArena());
}
inline std::string* JoinRoomRequest::_internal_mutable_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.password_.Mutable( GetArena());
}
inline std::string* JoinRoomRequest::release_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.JoinRoomRequest.password)
  return _impl_.password_.Release();
}
inline void JoinRoomRequest::set_allocated_password(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.JoinRoomRequest.password)
}

// string join_token = 3;
inline void JoinRoomRequest::clear_join_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.join_token_.ClearToEmpty();
}
inline const std::string& JoinRoomRequest::join_token() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.JoinRoomRequest.join_token)
  return _internal_join_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void JoinRoomRequest::set_join_token(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.join_token_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.JoinRoomRequest.join_token)
}
inline std::string* JoinRoomRequest::mutable_join_token() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_join_token();
  // @@protoc_insertion_point(field_mutable:blokus.JoinRoomRequest.join_token)
  return _s;
}
inline const std::string& JoinRoomRequest::_internal_join_token() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.join_token_.Get();
}
inline void JoinRoomRequest::_internal_set_join_token(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.join_token_.Set(value, GetArena());
}
inline std::string* JoinRoomRequest::_internal_mutable_join_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.join_token_.Mutable( GetArena());
}
inline std::string* JoinRoomRequest::release_join_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.JoinRoomRequest.join_token)
  return _impl_.join_token_.Release();
}
inline void JoinRoomRequest::set_allocated_join_token(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.join_token_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.join_token_.IsDefault()) {
    _impl_.join_token_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.JoinRoomRequest.join_token)
}

// .blokus.PlayerColor preferred_color = 4;
inline void JoinRoomRequest::clear_preferred_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.preferred_color_ = 0;
}
inline ::blokus::PlayerColor JoinRoomRequest::preferred_color() const {
  // @@protoc_insertion_point(field_get:blokus.JoinRoomRequest.preferred_color)
  return _internal_preferred_color();
}
inline void JoinRoomRequest::set_preferred_color(::blokus::PlayerColor value) {
  _internal_set_preferred_color(value);
  // @@protoc_insertion_point(field_set:blokus.JoinRoomRequest.preferred_color)
}
inline ::blokus::PlayerColor JoinRoomRequest::_internal_preferred_color() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::blokus::PlayerColor>(_impl_.preferred_color_);
}
inline void JoinRoomRequest::_internal_set_preferred_color(::blokus::PlayerColor value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.preferred_color_ = value;
}

// bool as_spectator = 5;
inline void JoinRoomRequest::clear_as_spectator() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.as_spectator_ = false;
}
inline bool JoinRoomRequest::as_spectator() const {
  // @@protoc_insertion_point(field_get:blokus.JoinRoomRequest.as_spectator)
  return _internal_as_spectator();
}
inline void JoinRoomRequest::set_as_spectator(bool value) {
  _internal_set_as_spectator(value);
  // @@protoc_insertion_point(field_set:blokus.JoinRoomRequest.as_spectator)
}
inline bool JoinRoomRequest::_internal_as_spectator() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.as_spectator_;
}
inline void JoinRoomRequest::_internal_set_as_spectator(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.as_spectator_ = value;
}

// -------------------------------------------------------------------

// JoinRoomResponse

// .blokus.Result result = 1;
inline bool JoinRoomResponse::has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.result_ != nullptr);
  return value;
}
inline const ::blokus::Result& JoinRoomResponse::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::Result* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::Result&>(::blokus::_Result_default_instance_);
}
inline const ::blokus::Result& JoinRoomResponse::result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.JoinRoomResponse.result)
  return _internal_result();
}
inline void JoinRoomResponse::unsafe_arena_set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.JoinRoomResponse.result)
}
inline ::blokus::Result* JoinRoomResponse::release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* released = _impl_.result_;
  _impl_.result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::Result* JoinRoomResponse::unsafe_arena_release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.JoinRoomResponse.result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::blokus::Result* JoinRoomResponse::_internal_mutable_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::Result>(GetArena());
    _impl_.result_ = reinterpret_cast<::blokus::Result*>(p);
  }
  return _impl_.result_;
}
inline ::blokus::Result* JoinRoomResponse::mutable_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::blokus::Result* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:blokus.JoinRoomResponse.result)
  return _msg;
}
inline void JoinRoomResponse::set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.JoinRoomResponse.result)
}

// .blokus.RoomInfo room_info = 2;
inline bool JoinRoomResponse::has_room_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.room_info_ != nullptr);
  return value;
}
inline const ::blokus::RoomInfo& JoinRoomResponse::_internal_room_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::RoomInfo* p = _impl_.room_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::RoomInfo&>(::blokus::_RoomInfo_default_instance_);
}
inline const ::blokus::RoomInfo& JoinRoomResponse::room_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.JoinRoomResponse.room_info)
  return _internal_room_info();
}
inline void JoinRoomResponse::unsafe_arena_set_allocated_room_info(::blokus::RoomInfo* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.room_info_);
  }
  _impl_.room_info_ = reinterpret_cast<::blokus::RoomInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.JoinRoomResponse.room_info)
}
inline ::blokus::RoomInfo* JoinRoomResponse::release_room_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::blokus::RoomInfo* released = _impl_.room_info_;
  _impl_.room_info_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::RoomInfo* JoinRoomResponse::unsafe_arena_release_room_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.JoinRoomResponse.room_info)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::blokus::RoomInfo* temp = _impl_.room_info_;
  _impl_.room_info_ = nullptr;
  return temp;
}
inline ::blokus::RoomInfo* JoinRoomResponse::_internal_mutable_room_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.room_info_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::RoomInfo>(GetArena());
    _impl_.room_info_ = reinterpret_cast<::blokus::RoomInfo*>(p);
  }
  return _impl_.room_info_;
}
inline ::blokus::RoomInfo* JoinRoomResponse::mutable_room_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::blokus::RoomInfo* _msg = _internal_mutable_room_info();
  // @@protoc_insertion_point(field_mutable:blokus.JoinRoomResponse.room_info)
  return _msg;
}
inline void JoinRoomResponse::set_allocated_room_info(::blokus::RoomInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.room_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.room_info_ = reinterpret_cast<::blokus::RoomInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.JoinRoomResponse.room_info)
}

// .blokus.PlayerColor assigned_color = 3;
inline void JoinRoomResponse::clear_assigned_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.assigned_color_ = 0;
}
inline ::blokus::PlayerColor JoinRoomResponse::assigned_color() const {
  // @@protoc_insertion_point(field_get:blokus.JoinRoomResponse.assigned_color)
  return _internal_assigned_color();
}
inline void JoinRoomResponse::set_assigned_color(::blokus::PlayerColor value) {
  _internal_set_assigned_color(value);
  // @@protoc_insertion_point(field_set:blokus.JoinRoomResponse.assigned_color)
}
inline ::blokus::PlayerColor JoinRoomResponse::_internal_assigned_color() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::blokus::PlayerColor>(_impl_.assigned_color_);
}
inline void JoinRoomResponse::_internal_set_assigned_color(::blokus::PlayerColor value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.assigned_color_ = value;
}

// repeated .blokus.PlayerSlot player_slots = 4;
inline int JoinRoomResponse::_internal_player_slots_size() const {
  return _internal_player_slots().size();
}
inline int JoinRoomResponse::player_slots_size() const {
  return _internal_player_slots_size();
}
inline ::blokus::PlayerSlot* JoinRoomResponse::mutable_player_slots(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.JoinRoomResponse.player_slots)
  return _internal_mutable_player_slots()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::blokus::PlayerSlot>* JoinRoomResponse::mutable_player_slots()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.JoinRoomResponse.player_slots)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_player_slots();
}
inline const ::blokus::PlayerSlot& JoinRoomResponse::player_slots(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.JoinRoomResponse.player_slots)
  return _internal_player_slots().Get(index);
}
inline ::blokus::PlayerSlot* JoinRoomResponse::add_player_slots() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::blokus::PlayerSlot* _add = _internal_mutable_player_slots()->Add();
  // @@protoc_insertion_point(field_add:blokus.JoinRoomResponse.player_slots)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::blokus::PlayerSlot>& JoinRoomResponse::player_slots() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.JoinRoomResponse.player_slots)
  return _internal_player_slots();
}
inline const ::google::protobuf::RepeatedPtrField<::blokus::PlayerSlot>&
JoinRoomResponse::_internal_player_slots() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.player_slots_;
}
inline ::google::protobuf::RepeatedPtrField<::blokus::PlayerSlot>*
JoinRoomResponse::_internal_mutable_player_slots() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.player_slots_;
}

// string welcome_message = 5;
inline void JoinRoomResponse::clear_welcome_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.welcome_message_.ClearToEmpty();
}
inline const std::string& JoinRoomResponse::welcome_message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.JoinRoomResponse.welcome_message)
  return _internal_welcome_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void JoinRoomResponse::set_welcome_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.welcome_message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.JoinRoomResponse.welcome_message)
}
inline std::string* JoinRoomResponse::mutable_welcome_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_welcome_message();
  // @@protoc_insertion_point(field_mutable:blokus.JoinRoomResponse.welcome_message)
  return _s;
}
inline const std::string& JoinRoomResponse::_internal_welcome_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.welcome_message_.Get();
}
inline void JoinRoomResponse::_internal_set_welcome_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.welcome_message_.Set(value, GetArena());
}
inline std::string* JoinRoomResponse::_internal_mutable_welcome_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.welcome_message_.Mutable( GetArena());
}
inline std::string* JoinRoomResponse::release_welcome_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.JoinRoomResponse.welcome_message)
  return _impl_.welcome_message_.Release();
}
inline void JoinRoomResponse::set_allocated_welcome_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.welcome_message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.welcome_message_.IsDefault()) {
    _impl_.welcome_message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.JoinRoomResponse.welcome_message)
}

// repeated string room_rules = 6;
inline int JoinRoomResponse::_internal_room_rules_size() const {
  return _internal_room_rules().size();
}
inline int JoinRoomResponse::room_rules_size() const {
  return _internal_room_rules_size();
}
inline void JoinRoomResponse::clear_room_rules() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_rules_.Clear();
}
inline std::string* JoinRoomResponse::add_room_rules() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_room_rules()->Add();
  // @@protoc_insertion_point(field_add_mutable:blokus.JoinRoomResponse.room_rules)
  return _s;
}
inline const std::string& JoinRoomResponse::room_rules(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.JoinRoomResponse.room_rules)
  return _internal_room_rules().Get(index);
}
inline std::string* JoinRoomResponse::mutable_room_rules(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.JoinRoomResponse.room_rules)
  return _internal_mutable_room_rules()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void JoinRoomResponse::set_room_rules(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_room_rules()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:blokus.JoinRoomResponse.room_rules)
}
template <typename Arg_, typename... Args_>
inline void JoinRoomResponse::add_room_rules(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_room_rules(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:blokus.JoinRoomResponse.room_rules)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
JoinRoomResponse::room_rules() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.JoinRoomResponse.room_rules)
  return _internal_room_rules();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
JoinRoomResponse::mutable_room_rules() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.JoinRoomResponse.room_rules)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_room_rules();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
JoinRoomResponse::_internal_room_rules() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.room_rules_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
JoinRoomResponse::_internal_mutable_room_rules() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.room_rules_;
}

// bool is_rejoining = 7;
inline void JoinRoomResponse::clear_is_rejoining() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_rejoining_ = false;
}
inline bool JoinRoomResponse::is_rejoining() const {
  // @@protoc_insertion_point(field_get:blokus.JoinRoomResponse.is_rejoining)
  return _internal_is_rejoining();
}
inline void JoinRoomResponse::set_is_rejoining(bool value) {
  _internal_set_is_rejoining(value);
  // @@protoc_insertion_point(field_set:blokus.JoinRoomResponse.is_rejoining)
}
inline bool JoinRoomResponse::_internal_is_rejoining() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_rejoining_;
}
inline void JoinRoomResponse::_internal_set_is_rejoining(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_rejoining_ = value;
}

// string failure_reason = 10;
inline void JoinRoomResponse::clear_failure_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.failure_reason_.ClearToEmpty();
}
inline const std::string& JoinRoomResponse::failure_reason() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.JoinRoomResponse.failure_reason)
  return _internal_failure_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void JoinRoomResponse::set_failure_reason(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.failure_reason_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.JoinRoomResponse.failure_reason)
}
inline std::string* JoinRoomResponse::mutable_failure_reason() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_failure_reason();
  // @@protoc_insertion_point(field_mutable:blokus.JoinRoomResponse.failure_reason)
  return _s;
}
inline const std::string& JoinRoomResponse::_internal_failure_reason() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.failure_reason_.Get();
}
inline void JoinRoomResponse::_internal_set_failure_reason(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.failure_reason_.Set(value, GetArena());
}
inline std::string* JoinRoomResponse::_internal_mutable_failure_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.failure_reason_.Mutable( GetArena());
}
inline std::string* JoinRoomResponse::release_failure_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.JoinRoomResponse.failure_reason)
  return _impl_.failure_reason_.Release();
}
inline void JoinRoomResponse::set_allocated_failure_reason(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.failure_reason_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.failure_reason_.IsDefault()) {
    _impl_.failure_reason_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.JoinRoomResponse.failure_reason)
}

// int32 queue_position = 11;
inline void JoinRoomResponse::clear_queue_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.queue_position_ = 0;
}
inline ::int32_t JoinRoomResponse::queue_position() const {
  // @@protoc_insertion_point(field_get:blokus.JoinRoomResponse.queue_position)
  return _internal_queue_position();
}
inline void JoinRoomResponse::set_queue_position(::int32_t value) {
  _internal_set_queue_position(value);
  // @@protoc_insertion_point(field_set:blokus.JoinRoomResponse.queue_position)
}
inline ::int32_t JoinRoomResponse::_internal_queue_position() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.queue_position_;
}
inline void JoinRoomResponse::_internal_set_queue_position(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.queue_position_ = value;
}

// -------------------------------------------------------------------

// LeaveRoomRequest

// int32 room_id = 1;
inline void LeaveRoomRequest::clear_room_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_id_ = 0;
}
inline ::int32_t LeaveRoomRequest::room_id() const {
  // @@protoc_insertion_point(field_get:blokus.LeaveRoomRequest.room_id)
  return _internal_room_id();
}
inline void LeaveRoomRequest::set_room_id(::int32_t value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:blokus.LeaveRoomRequest.room_id)
}
inline ::int32_t LeaveRoomRequest::_internal_room_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.room_id_;
}
inline void LeaveRoomRequest::_internal_set_room_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_id_ = value;
}

// string reason = 2;
inline void LeaveRoomRequest::clear_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.ClearToEmpty();
}
inline const std::string& LeaveRoomRequest::reason() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.LeaveRoomRequest.reason)
  return _internal_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LeaveRoomRequest::set_reason(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.LeaveRoomRequest.reason)
}
inline std::string* LeaveRoomRequest::mutable_reason() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:blokus.LeaveRoomRequest.reason)
  return _s;
}
inline const std::string& LeaveRoomRequest::_internal_reason() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reason_.Get();
}
inline void LeaveRoomRequest::_internal_set_reason(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.Set(value, GetArena());
}
inline std::string* LeaveRoomRequest::_internal_mutable_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.reason_.Mutable( GetArena());
}
inline std::string* LeaveRoomRequest::release_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.LeaveRoomRequest.reason)
  return _impl_.reason_.Release();
}
inline void LeaveRoomRequest::set_allocated_reason(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.reason_.IsDefault()) {
    _impl_.reason_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.LeaveRoomRequest.reason)
}

// bool transfer_host = 3;
inline void LeaveRoomRequest::clear_transfer_host() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transfer_host_ = false;
}
inline bool LeaveRoomRequest::transfer_host() const {
  // @@protoc_insertion_point(field_get:blokus.LeaveRoomRequest.transfer_host)
  return _internal_transfer_host();
}
inline void LeaveRoomRequest::set_transfer_host(bool value) {
  _internal_set_transfer_host(value);
  // @@protoc_insertion_point(field_set:blokus.LeaveRoomRequest.transfer_host)
}
inline bool LeaveRoomRequest::_internal_transfer_host() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.transfer_host_;
}
inline void LeaveRoomRequest::_internal_set_transfer_host(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transfer_host_ = value;
}

// string new_host_username = 4;
inline void LeaveRoomRequest::clear_new_host_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_host_username_.ClearToEmpty();
}
inline const std::string& LeaveRoomRequest::new_host_username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.LeaveRoomRequest.new_host_username)
  return _internal_new_host_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LeaveRoomRequest::set_new_host_username(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_host_username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.LeaveRoomRequest.new_host_username)
}
inline std::string* LeaveRoomRequest::mutable_new_host_username() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_new_host_username();
  // @@protoc_insertion_point(field_mutable:blokus.LeaveRoomRequest.new_host_username)
  return _s;
}
inline const std::string& LeaveRoomRequest::_internal_new_host_username() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.new_host_username_.Get();
}
inline void LeaveRoomRequest::_internal_set_new_host_username(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_host_username_.Set(value, GetArena());
}
inline std::string* LeaveRoomRequest::_internal_mutable_new_host_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.new_host_username_.Mutable( GetArena());
}
inline std::string* LeaveRoomRequest::release_new_host_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.LeaveRoomRequest.new_host_username)
  return _impl_.new_host_username_.Release();
}
inline void LeaveRoomRequest::set_allocated_new_host_username(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_host_username_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.new_host_username_.IsDefault()) {
    _impl_.new_host_username_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.LeaveRoomRequest.new_host_username)
}

// -------------------------------------------------------------------

// LeaveRoomResponse

// .blokus.Result result = 1;
inline bool LeaveRoomResponse::has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.result_ != nullptr);
  return value;
}
inline const ::blokus::Result& LeaveRoomResponse::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::Result* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::Result&>(::blokus::_Result_default_instance_);
}
inline const ::blokus::Result& LeaveRoomResponse::result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.LeaveRoomResponse.result)
  return _internal_result();
}
inline void LeaveRoomResponse::unsafe_arena_set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.LeaveRoomResponse.result)
}
inline ::blokus::Result* LeaveRoomResponse::release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* released = _impl_.result_;
  _impl_.result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::Result* LeaveRoomResponse::unsafe_arena_release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.LeaveRoomResponse.result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::blokus::Result* LeaveRoomResponse::_internal_mutable_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::Result>(GetArena());
    _impl_.result_ = reinterpret_cast<::blokus::Result*>(p);
  }
  return _impl_.result_;
}
inline ::blokus::Result* LeaveRoomResponse::mutable_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::blokus::Result* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:blokus.LeaveRoomResponse.result)
  return _msg;
}
inline void LeaveRoomResponse::set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.LeaveRoomResponse.result)
}

// string message = 2;
inline void LeaveRoomResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& LeaveRoomResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.LeaveRoomResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LeaveRoomResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.LeaveRoomResponse.message)
}
inline std::string* LeaveRoomResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:blokus.LeaveRoomResponse.message)
  return _s;
}
inline const std::string& LeaveRoomResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void LeaveRoomResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* LeaveRoomResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* LeaveRoomResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.LeaveRoomResponse.message)
  return _impl_.message_.Release();
}
inline void LeaveRoomResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.LeaveRoomResponse.message)
}

// bool room_disbanded = 3;
inline void LeaveRoomResponse::clear_room_disbanded() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_disbanded_ = false;
}
inline bool LeaveRoomResponse::room_disbanded() const {
  // @@protoc_insertion_point(field_get:blokus.LeaveRoomResponse.room_disbanded)
  return _internal_room_disbanded();
}
inline void LeaveRoomResponse::set_room_disbanded(bool value) {
  _internal_set_room_disbanded(value);
  // @@protoc_insertion_point(field_set:blokus.LeaveRoomResponse.room_disbanded)
}
inline bool LeaveRoomResponse::_internal_room_disbanded() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.room_disbanded_;
}
inline void LeaveRoomResponse::_internal_set_room_disbanded(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_disbanded_ = value;
}

// string new_host = 4;
inline void LeaveRoomResponse::clear_new_host() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_host_.ClearToEmpty();
}
inline const std::string& LeaveRoomResponse::new_host() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.LeaveRoomResponse.new_host)
  return _internal_new_host();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LeaveRoomResponse::set_new_host(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_host_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.LeaveRoomResponse.new_host)
}
inline std::string* LeaveRoomResponse::mutable_new_host() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_new_host();
  // @@protoc_insertion_point(field_mutable:blokus.LeaveRoomResponse.new_host)
  return _s;
}
inline const std::string& LeaveRoomResponse::_internal_new_host() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.new_host_.Get();
}
inline void LeaveRoomResponse::_internal_set_new_host(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_host_.Set(value, GetArena());
}
inline std::string* LeaveRoomResponse::_internal_mutable_new_host() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.new_host_.Mutable( GetArena());
}
inline std::string* LeaveRoomResponse::release_new_host() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.LeaveRoomResponse.new_host)
  return _impl_.new_host_.Release();
}
inline void LeaveRoomResponse::set_allocated_new_host(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_host_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.new_host_.IsDefault()) {
    _impl_.new_host_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.LeaveRoomResponse.new_host)
}

// -------------------------------------------------------------------

// PlayerJoinedNotification

// string username = 1;
inline void PlayerJoinedNotification::clear_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.ClearToEmpty();
}
inline const std::string& PlayerJoinedNotification::username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.PlayerJoinedNotification.username)
  return _internal_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PlayerJoinedNotification::set_username(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.PlayerJoinedNotification.username)
}
inline std::string* PlayerJoinedNotification::mutable_username() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:blokus.PlayerJoinedNotification.username)
  return _s;
}
inline const std::string& PlayerJoinedNotification::_internal_username() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.username_.Get();
}
inline void PlayerJoinedNotification::_internal_set_username(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.Set(value, GetArena());
}
inline std::string* PlayerJoinedNotification::_internal_mutable_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.username_.Mutable( GetArena());
}
inline std::string* PlayerJoinedNotification::release_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.PlayerJoinedNotification.username)
  return _impl_.username_.Release();
}
inline void PlayerJoinedNotification::set_allocated_username(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.PlayerJoinedNotification.username)
}

// .blokus.PlayerColor color = 2;
inline void PlayerJoinedNotification::clear_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.color_ = 0;
}
inline ::blokus::PlayerColor PlayerJoinedNotification::color() const {
  // @@protoc_insertion_point(field_get:blokus.PlayerJoinedNotification.color)
  return _internal_color();
}
inline void PlayerJoinedNotification::set_color(::blokus::PlayerColor value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:blokus.PlayerJoinedNotification.color)
}
inline ::blokus::PlayerColor PlayerJoinedNotification::_internal_color() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::blokus::PlayerColor>(_impl_.color_);
}
inline void PlayerJoinedNotification::_internal_set_color(::blokus::PlayerColor value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.color_ = value;
}

// .blokus.PlayerSlot player_info = 3;
inline bool PlayerJoinedNotification::has_player_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.player_info_ != nullptr);
  return value;
}
inline const ::blokus::PlayerSlot& PlayerJoinedNotification::_internal_player_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::PlayerSlot* p = _impl_.player_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::PlayerSlot&>(::blokus::_PlayerSlot_default_instance_);
}
inline const ::blokus::PlayerSlot& PlayerJoinedNotification::player_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.PlayerJoinedNotification.player_info)
  return _internal_player_info();
}
inline void PlayerJoinedNotification::unsafe_arena_set_allocated_player_info(::blokus::PlayerSlot* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.player_info_);
  }
  _impl_.player_info_ = reinterpret_cast<::blokus::PlayerSlot*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.PlayerJoinedNotification.player_info)
}
inline ::blokus::PlayerSlot* PlayerJoinedNotification::release_player_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::PlayerSlot* released = _impl_.player_info_;
  _impl_.player_info_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::PlayerSlot* PlayerJoinedNotification::unsafe_arena_release_player_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.PlayerJoinedNotification.player_info)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::PlayerSlot* temp = _impl_.player_info_;
  _impl_.player_info_ = nullptr;
  return temp;
}
inline ::blokus::PlayerSlot* PlayerJoinedNotification::_internal_mutable_player_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.player_info_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::PlayerSlot>(GetArena());
    _impl_.player_info_ = reinterpret_cast<::blokus::PlayerSlot*>(p);
  }
  return _impl_.player_info_;
}
inline ::blokus::PlayerSlot* PlayerJoinedNotification::mutable_player_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::blokus::PlayerSlot* _msg = _internal_mutable_player_info();
  // @@protoc_insertion_point(field_mutable:blokus.PlayerJoinedNotification.player_info)
  return _msg;
}
inline void PlayerJoinedNotification::set_allocated_player_info(::blokus::PlayerSlot* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.player_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.player_info_ = reinterpret_cast<::blokus::PlayerSlot*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.PlayerJoinedNotification.player_info)
}

// bool is_rejoining = 4;
inline void PlayerJoinedNotification::clear_is_rejoining() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_rejoining_ = false;
}
inline bool PlayerJoinedNotification::is_rejoining() const {
  // @@protoc_insertion_point(field_get:blokus.PlayerJoinedNotification.is_rejoining)
  return _internal_is_rejoining();
}
inline void PlayerJoinedNotification::set_is_rejoining(bool value) {
  _internal_set_is_rejoining(value);
  // @@protoc_insertion_point(field_set:blokus.PlayerJoinedNotification.is_rejoining)
}
inline bool PlayerJoinedNotification::_internal_is_rejoining() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_rejoining_;
}
inline void PlayerJoinedNotification::_internal_set_is_rejoining(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_rejoining_ = value;
}

// .google.protobuf.Timestamp joined_at = 5;
inline bool PlayerJoinedNotification::has_joined_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.joined_at_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& PlayerJoinedNotification::_internal_joined_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.joined_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& PlayerJoinedNotification::joined_at() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.PlayerJoinedNotification.joined_at)
  return _internal_joined_at();
}
inline void PlayerJoinedNotification::unsafe_arena_set_allocated_joined_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.joined_at_);
  }
  _impl_.joined_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.PlayerJoinedNotification.joined_at)
}
inline ::google::protobuf::Timestamp* PlayerJoinedNotification::release_joined_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.joined_at_;
  _impl_.joined_at_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* PlayerJoinedNotification::unsafe_arena_release_joined_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.PlayerJoinedNotification.joined_at)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.joined_at_;
  _impl_.joined_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* PlayerJoinedNotification::_internal_mutable_joined_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.joined_at_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.joined_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.joined_at_;
}
inline ::google::protobuf::Timestamp* PlayerJoinedNotification::mutable_joined_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_joined_at();
  // @@protoc_insertion_point(field_mutable:blokus.PlayerJoinedNotification.joined_at)
  return _msg;
}
inline void PlayerJoinedNotification::set_allocated_joined_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.joined_at_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.joined_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.PlayerJoinedNotification.joined_at)
}

// .blokus.UserInfo user_info = 6;
inline bool PlayerJoinedNotification::has_user_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_info_ != nullptr);
  return value;
}
inline const ::blokus::UserInfo& PlayerJoinedNotification::_internal_user_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::UserInfo* p = _impl_.user_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::UserInfo&>(::blokus::_UserInfo_default_instance_);
}
inline const ::blokus::UserInfo& PlayerJoinedNotification::user_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.PlayerJoinedNotification.user_info)
  return _internal_user_info();
}
inline void PlayerJoinedNotification::unsafe_arena_set_allocated_user_info(::blokus::UserInfo* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.user_info_);
  }
  _impl_.user_info_ = reinterpret_cast<::blokus::UserInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.PlayerJoinedNotification.user_info)
}
inline ::blokus::UserInfo* PlayerJoinedNotification::release_user_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::blokus::UserInfo* released = _impl_.user_info_;
  _impl_.user_info_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::UserInfo* PlayerJoinedNotification::unsafe_arena_release_user_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.PlayerJoinedNotification.user_info)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::blokus::UserInfo* temp = _impl_.user_info_;
  _impl_.user_info_ = nullptr;
  return temp;
}
inline ::blokus::UserInfo* PlayerJoinedNotification::_internal_mutable_user_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.user_info_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::UserInfo>(GetArena());
    _impl_.user_info_ = reinterpret_cast<::blokus::UserInfo*>(p);
  }
  return _impl_.user_info_;
}
inline ::blokus::UserInfo* PlayerJoinedNotification::mutable_user_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::blokus::UserInfo* _msg = _internal_mutable_user_info();
  // @@protoc_insertion_point(field_mutable:blokus.PlayerJoinedNotification.user_info)
  return _msg;
}
inline void PlayerJoinedNotification::set_allocated_user_info(::blokus::UserInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.user_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.user_info_ = reinterpret_cast<::blokus::UserInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.PlayerJoinedNotification.user_info)
}

// string join_message = 7;
inline void PlayerJoinedNotification::clear_join_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.join_message_.ClearToEmpty();
}
inline const std::string& PlayerJoinedNotification::join_message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.PlayerJoinedNotification.join_message)
  return _internal_join_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PlayerJoinedNotification::set_join_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.join_message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.PlayerJoinedNotification.join_message)
}
inline std::string* PlayerJoinedNotification::mutable_join_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_join_message();
  // @@protoc_insertion_point(field_mutable:blokus.PlayerJoinedNotification.join_message)
  return _s;
}
inline const std::string& PlayerJoinedNotification::_internal_join_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.join_message_.Get();
}
inline void PlayerJoinedNotification::_internal_set_join_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.join_message_.Set(value, GetArena());
}
inline std::string* PlayerJoinedNotification::_internal_mutable_join_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.join_message_.Mutable( GetArena());
}
inline std::string* PlayerJoinedNotification::release_join_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.PlayerJoinedNotification.join_message)
  return _impl_.join_message_.Release();
}
inline void PlayerJoinedNotification::set_allocated_join_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.join_message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.join_message_.IsDefault()) {
    _impl_.join_message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.PlayerJoinedNotification.join_message)
}

// -------------------------------------------------------------------

// PlayerLeftNotification

// string username = 1;
inline void PlayerLeftNotification::clear_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.ClearToEmpty();
}
inline const std::string& PlayerLeftNotification::username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.PlayerLeftNotification.username)
  return _internal_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PlayerLeftNotification::set_username(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.PlayerLeftNotification.username)
}
inline std::string* PlayerLeftNotification::mutable_username() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:blokus.PlayerLeftNotification.username)
  return _s;
}
inline const std::string& PlayerLeftNotification::_internal_username() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.username_.Get();
}
inline void PlayerLeftNotification::_internal_set_username(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.Set(value, GetArena());
}
inline std::string* PlayerLeftNotification::_internal_mutable_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.username_.Mutable( GetArena());
}
inline std::string* PlayerLeftNotification::release_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.PlayerLeftNotification.username)
  return _impl_.username_.Release();
}
inline void PlayerLeftNotification::set_allocated_username(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.PlayerLeftNotification.username)
}

// .blokus.PlayerColor color = 2;
inline void PlayerLeftNotification::clear_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.color_ = 0;
}
inline ::blokus::PlayerColor PlayerLeftNotification::color() const {
  // @@protoc_insertion_point(field_get:blokus.PlayerLeftNotification.color)
  return _internal_color();
}
inline void PlayerLeftNotification::set_color(::blokus::PlayerColor value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:blokus.PlayerLeftNotification.color)
}
inline ::blokus::PlayerColor PlayerLeftNotification::_internal_color() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::blokus::PlayerColor>(_impl_.color_);
}
inline void PlayerLeftNotification::_internal_set_color(::blokus::PlayerColor value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.color_ = value;
}

// string reason = 3;
inline void PlayerLeftNotification::clear_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.ClearToEmpty();
}
inline const std::string& PlayerLeftNotification::reason() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.PlayerLeftNotification.reason)
  return _internal_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PlayerLeftNotification::set_reason(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.PlayerLeftNotification.reason)
}
inline std::string* PlayerLeftNotification::mutable_reason() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:blokus.PlayerLeftNotification.reason)
  return _s;
}
inline const std::string& PlayerLeftNotification::_internal_reason() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reason_.Get();
}
inline void PlayerLeftNotification::_internal_set_reason(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.Set(value, GetArena());
}
inline std::string* PlayerLeftNotification::_internal_mutable_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.reason_.Mutable( GetArena());
}
inline std::string* PlayerLeftNotification::release_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.PlayerLeftNotification.reason)
  return _impl_.reason_.Release();
}
inline void PlayerLeftNotification::set_allocated_reason(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.reason_.IsDefault()) {
    _impl_.reason_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.PlayerLeftNotification.reason)
}

// bool was_kicked = 4;
inline void PlayerLeftNotification::clear_was_kicked() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.was_kicked_ = false;
}
inline bool PlayerLeftNotification::was_kicked() const {
  // @@protoc_insertion_point(field_get:blokus.PlayerLeftNotification.was_kicked)
  return _internal_was_kicked();
}
inline void PlayerLeftNotification::set_was_kicked(bool value) {
  _internal_set_was_kicked(value);
  // @@protoc_insertion_point(field_set:blokus.PlayerLeftNotification.was_kicked)
}
inline bool PlayerLeftNotification::_internal_was_kicked() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.was_kicked_;
}
inline void PlayerLeftNotification::_internal_set_was_kicked(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.was_kicked_ = value;
}

// .google.protobuf.Timestamp left_at = 5;
inline bool PlayerLeftNotification::has_left_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.left_at_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& PlayerLeftNotification::_internal_left_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.left_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& PlayerLeftNotification::left_at() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.PlayerLeftNotification.left_at)
  return _internal_left_at();
}
inline void PlayerLeftNotification::unsafe_arena_set_allocated_left_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.left_at_);
  }
  _impl_.left_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.PlayerLeftNotification.left_at)
}
inline ::google::protobuf::Timestamp* PlayerLeftNotification::release_left_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.left_at_;
  _impl_.left_at_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* PlayerLeftNotification::unsafe_arena_release_left_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.PlayerLeftNotification.left_at)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.left_at_;
  _impl_.left_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* PlayerLeftNotification::_internal_mutable_left_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.left_at_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.left_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.left_at_;
}
inline ::google::protobuf::Timestamp* PlayerLeftNotification::mutable_left_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_left_at();
  // @@protoc_insertion_point(field_mutable:blokus.PlayerLeftNotification.left_at)
  return _msg;
}
inline void PlayerLeftNotification::set_allocated_left_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.left_at_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.left_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.PlayerLeftNotification.left_at)
}

// string new_host = 6;
inline void PlayerLeftNotification::clear_new_host() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_host_.ClearToEmpty();
}
inline const std::string& PlayerLeftNotification::new_host() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.PlayerLeftNotification.new_host)
  return _internal_new_host();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PlayerLeftNotification::set_new_host(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_host_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.PlayerLeftNotification.new_host)
}
inline std::string* PlayerLeftNotification::mutable_new_host() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_new_host();
  // @@protoc_insertion_point(field_mutable:blokus.PlayerLeftNotification.new_host)
  return _s;
}
inline const std::string& PlayerLeftNotification::_internal_new_host() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.new_host_.Get();
}
inline void PlayerLeftNotification::_internal_set_new_host(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_host_.Set(value, GetArena());
}
inline std::string* PlayerLeftNotification::_internal_mutable_new_host() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.new_host_.Mutable( GetArena());
}
inline std::string* PlayerLeftNotification::release_new_host() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.PlayerLeftNotification.new_host)
  return _impl_.new_host_.Release();
}
inline void PlayerLeftNotification::set_allocated_new_host(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_host_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.new_host_.IsDefault()) {
    _impl_.new_host_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.PlayerLeftNotification.new_host)
}

// bool room_disbanded = 7;
inline void PlayerLeftNotification::clear_room_disbanded() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_disbanded_ = false;
}
inline bool PlayerLeftNotification::room_disbanded() const {
  // @@protoc_insertion_point(field_get:blokus.PlayerLeftNotification.room_disbanded)
  return _internal_room_disbanded();
}
inline void PlayerLeftNotification::set_room_disbanded(bool value) {
  _internal_set_room_disbanded(value);
  // @@protoc_insertion_point(field_set:blokus.PlayerLeftNotification.room_disbanded)
}
inline bool PlayerLeftNotification::_internal_room_disbanded() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.room_disbanded_;
}
inline void PlayerLeftNotification::_internal_set_room_disbanded(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_disbanded_ = value;
}

// -------------------------------------------------------------------

// GetUserListRequest

// .blokus.UserStatus status_filter = 1;
inline void GetUserListRequest::clear_status_filter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_filter_ = 0;
}
inline ::blokus::UserStatus GetUserListRequest::status_filter() const {
  // @@protoc_insertion_point(field_get:blokus.GetUserListRequest.status_filter)
  return _internal_status_filter();
}
inline void GetUserListRequest::set_status_filter(::blokus::UserStatus value) {
  _internal_set_status_filter(value);
  // @@protoc_insertion_point(field_set:blokus.GetUserListRequest.status_filter)
}
inline ::blokus::UserStatus GetUserListRequest::_internal_status_filter() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::blokus::UserStatus>(_impl_.status_filter_);
}
inline void GetUserListRequest::_internal_set_status_filter(::blokus::UserStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_filter_ = value;
}

// string search_query = 2;
inline void GetUserListRequest::clear_search_query() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.search_query_.ClearToEmpty();
}
inline const std::string& GetUserListRequest::search_query() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.GetUserListRequest.search_query)
  return _internal_search_query();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetUserListRequest::set_search_query(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.search_query_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.GetUserListRequest.search_query)
}
inline std::string* GetUserListRequest::mutable_search_query() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_search_query();
  // @@protoc_insertion_point(field_mutable:blokus.GetUserListRequest.search_query)
  return _s;
}
inline const std::string& GetUserListRequest::_internal_search_query() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.search_query_.Get();
}
inline void GetUserListRequest::_internal_set_search_query(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.search_query_.Set(value, GetArena());
}
inline std::string* GetUserListRequest::_internal_mutable_search_query() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.search_query_.Mutable( GetArena());
}
inline std::string* GetUserListRequest::release_search_query() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.GetUserListRequest.search_query)
  return _impl_.search_query_.Release();
}
inline void GetUserListRequest::set_allocated_search_query(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.search_query_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.search_query_.IsDefault()) {
    _impl_.search_query_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.GetUserListRequest.search_query)
}

// int32 page = 3;
inline void GetUserListRequest::clear_page() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.page_ = 0;
}
inline ::int32_t GetUserListRequest::page() const {
  // @@protoc_insertion_point(field_get:blokus.GetUserListRequest.page)
  return _internal_page();
}
inline void GetUserListRequest::set_page(::int32_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:blokus.GetUserListRequest.page)
}
inline ::int32_t GetUserListRequest::_internal_page() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.page_;
}
inline void GetUserListRequest::_internal_set_page(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.page_ = value;
}

// int32 page_size = 4;
inline void GetUserListRequest::clear_page_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.page_size_ = 0;
}
inline ::int32_t GetUserListRequest::page_size() const {
  // @@protoc_insertion_point(field_get:blokus.GetUserListRequest.page_size)
  return _internal_page_size();
}
inline void GetUserListRequest::set_page_size(::int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:blokus.GetUserListRequest.page_size)
}
inline ::int32_t GetUserListRequest::_internal_page_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.page_size_;
}
inline void GetUserListRequest::_internal_set_page_size(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.page_size_ = value;
}

// -------------------------------------------------------------------

// UserListUpdate

// .blokus.UserListUpdate.UpdateType update_type = 1;
inline void UserListUpdate::clear_update_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.update_type_ = 0;
}
inline ::blokus::UserListUpdate_UpdateType UserListUpdate::update_type() const {
  // @@protoc_insertion_point(field_get:blokus.UserListUpdate.update_type)
  return _internal_update_type();
}
inline void UserListUpdate::set_update_type(::blokus::UserListUpdate_UpdateType value) {
  _internal_set_update_type(value);
  // @@protoc_insertion_point(field_set:blokus.UserListUpdate.update_type)
}
inline ::blokus::UserListUpdate_UpdateType UserListUpdate::_internal_update_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::blokus::UserListUpdate_UpdateType>(_impl_.update_type_);
}
inline void UserListUpdate::_internal_set_update_type(::blokus::UserListUpdate_UpdateType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.update_type_ = value;
}

// .blokus.UserInfo user_info = 2;
inline bool UserListUpdate::has_user_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_info_ != nullptr);
  return value;
}
inline const ::blokus::UserInfo& UserListUpdate::_internal_user_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::UserInfo* p = _impl_.user_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::UserInfo&>(::blokus::_UserInfo_default_instance_);
}
inline const ::blokus::UserInfo& UserListUpdate::user_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.UserListUpdate.user_info)
  return _internal_user_info();
}
inline void UserListUpdate::unsafe_arena_set_allocated_user_info(::blokus::UserInfo* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.user_info_);
  }
  _impl_.user_info_ = reinterpret_cast<::blokus::UserInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.UserListUpdate.user_info)
}
inline ::blokus::UserInfo* UserListUpdate::release_user_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::UserInfo* released = _impl_.user_info_;
  _impl_.user_info_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::UserInfo* UserListUpdate::unsafe_arena_release_user_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.UserListUpdate.user_info)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::UserInfo* temp = _impl_.user_info_;
  _impl_.user_info_ = nullptr;
  return temp;
}
inline ::blokus::UserInfo* UserListUpdate::_internal_mutable_user_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.user_info_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::UserInfo>(GetArena());
    _impl_.user_info_ = reinterpret_cast<::blokus::UserInfo*>(p);
  }
  return _impl_.user_info_;
}
inline ::blokus::UserInfo* UserListUpdate::mutable_user_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::blokus::UserInfo* _msg = _internal_mutable_user_info();
  // @@protoc_insertion_point(field_mutable:blokus.UserListUpdate.user_info)
  return _msg;
}
inline void UserListUpdate::set_allocated_user_info(::blokus::UserInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.user_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.user_info_ = reinterpret_cast<::blokus::UserInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.UserListUpdate.user_info)
}

// .blokus.UserStatus old_status = 3;
inline void UserListUpdate::clear_old_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.old_status_ = 0;
}
inline ::blokus::UserStatus UserListUpdate::old_status() const {
  // @@protoc_insertion_point(field_get:blokus.UserListUpdate.old_status)
  return _internal_old_status();
}
inline void UserListUpdate::set_old_status(::blokus::UserStatus value) {
  _internal_set_old_status(value);
  // @@protoc_insertion_point(field_set:blokus.UserListUpdate.old_status)
}
inline ::blokus::UserStatus UserListUpdate::_internal_old_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::blokus::UserStatus>(_impl_.old_status_);
}
inline void UserListUpdate::_internal_set_old_status(::blokus::UserStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.old_status_ = value;
}

// .blokus.UserStatus new_status = 4;
inline void UserListUpdate::clear_new_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_status_ = 0;
}
inline ::blokus::UserStatus UserListUpdate::new_status() const {
  // @@protoc_insertion_point(field_get:blokus.UserListUpdate.new_status)
  return _internal_new_status();
}
inline void UserListUpdate::set_new_status(::blokus::UserStatus value) {
  _internal_set_new_status(value);
  // @@protoc_insertion_point(field_set:blokus.UserListUpdate.new_status)
}
inline ::blokus::UserStatus UserListUpdate::_internal_new_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::blokus::UserStatus>(_impl_.new_status_);
}
inline void UserListUpdate::_internal_set_new_status(::blokus::UserStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_status_ = value;
}

// int32 room_id = 5;
inline void UserListUpdate::clear_room_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_id_ = 0;
}
inline ::int32_t UserListUpdate::room_id() const {
  // @@protoc_insertion_point(field_get:blokus.UserListUpdate.room_id)
  return _internal_room_id();
}
inline void UserListUpdate::set_room_id(::int32_t value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:blokus.UserListUpdate.room_id)
}
inline ::int32_t UserListUpdate::_internal_room_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.room_id_;
}
inline void UserListUpdate::_internal_set_room_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_id_ = value;
}

// .google.protobuf.Timestamp updated_at = 6;
inline bool UserListUpdate::has_updated_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.updated_at_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& UserListUpdate::_internal_updated_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.updated_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& UserListUpdate::updated_at() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.UserListUpdate.updated_at)
  return _internal_updated_at();
}
inline void UserListUpdate::unsafe_arena_set_allocated_updated_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.updated_at_);
  }
  _impl_.updated_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.UserListUpdate.updated_at)
}
inline ::google::protobuf::Timestamp* UserListUpdate::release_updated_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.updated_at_;
  _impl_.updated_at_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* UserListUpdate::unsafe_arena_release_updated_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.UserListUpdate.updated_at)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.updated_at_;
  _impl_.updated_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* UserListUpdate::_internal_mutable_updated_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.updated_at_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.updated_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.updated_at_;
}
inline ::google::protobuf::Timestamp* UserListUpdate::mutable_updated_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_updated_at();
  // @@protoc_insertion_point(field_mutable:blokus.UserListUpdate.updated_at)
  return _msg;
}
inline void UserListUpdate::set_allocated_updated_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.updated_at_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.updated_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.UserListUpdate.updated_at)
}

// -------------------------------------------------------------------

// GetUserStatsRequest

// string username = 1;
inline void GetUserStatsRequest::clear_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.ClearToEmpty();
}
inline const std::string& GetUserStatsRequest::username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.GetUserStatsRequest.username)
  return _internal_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetUserStatsRequest::set_username(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.GetUserStatsRequest.username)
}
inline std::string* GetUserStatsRequest::mutable_username() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:blokus.GetUserStatsRequest.username)
  return _s;
}
inline const std::string& GetUserStatsRequest::_internal_username() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.username_.Get();
}
inline void GetUserStatsRequest::_internal_set_username(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.Set(value, GetArena());
}
inline std::string* GetUserStatsRequest::_internal_mutable_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.username_.Mutable( GetArena());
}
inline std::string* GetUserStatsRequest::release_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.GetUserStatsRequest.username)
  return _impl_.username_.Release();
}
inline void GetUserStatsRequest::set_allocated_username(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.GetUserStatsRequest.username)
}

// bool include_game_history = 2;
inline void GetUserStatsRequest::clear_include_game_history() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.include_game_history_ = false;
}
inline bool GetUserStatsRequest::include_game_history() const {
  // @@protoc_insertion_point(field_get:blokus.GetUserStatsRequest.include_game_history)
  return _internal_include_game_history();
}
inline void GetUserStatsRequest::set_include_game_history(bool value) {
  _internal_set_include_game_history(value);
  // @@protoc_insertion_point(field_set:blokus.GetUserStatsRequest.include_game_history)
}
inline bool GetUserStatsRequest::_internal_include_game_history() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.include_game_history_;
}
inline void GetUserStatsRequest::_internal_set_include_game_history(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.include_game_history_ = value;
}

// bool include_achievements = 3;
inline void GetUserStatsRequest::clear_include_achievements() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.include_achievements_ = false;
}
inline bool GetUserStatsRequest::include_achievements() const {
  // @@protoc_insertion_point(field_get:blokus.GetUserStatsRequest.include_achievements)
  return _internal_include_achievements();
}
inline void GetUserStatsRequest::set_include_achievements(bool value) {
  _internal_set_include_achievements(value);
  // @@protoc_insertion_point(field_set:blokus.GetUserStatsRequest.include_achievements)
}
inline bool GetUserStatsRequest::_internal_include_achievements() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.include_achievements_;
}
inline void GetUserStatsRequest::_internal_set_include_achievements(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.include_achievements_ = value;
}

// int32 recent_games_count = 4;
inline void GetUserStatsRequest::clear_recent_games_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recent_games_count_ = 0;
}
inline ::int32_t GetUserStatsRequest::recent_games_count() const {
  // @@protoc_insertion_point(field_get:blokus.GetUserStatsRequest.recent_games_count)
  return _internal_recent_games_count();
}
inline void GetUserStatsRequest::set_recent_games_count(::int32_t value) {
  _internal_set_recent_games_count(value);
  // @@protoc_insertion_point(field_set:blokus.GetUserStatsRequest.recent_games_count)
}
inline ::int32_t GetUserStatsRequest::_internal_recent_games_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.recent_games_count_;
}
inline void GetUserStatsRequest::_internal_set_recent_games_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recent_games_count_ = value;
}

// -------------------------------------------------------------------

// UserStatsResponse

// .blokus.Result result = 1;
inline bool UserStatsResponse::has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.result_ != nullptr);
  return value;
}
inline const ::blokus::Result& UserStatsResponse::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::Result* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::Result&>(::blokus::_Result_default_instance_);
}
inline const ::blokus::Result& UserStatsResponse::result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.UserStatsResponse.result)
  return _internal_result();
}
inline void UserStatsResponse::unsafe_arena_set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.UserStatsResponse.result)
}
inline ::blokus::Result* UserStatsResponse::release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* released = _impl_.result_;
  _impl_.result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::Result* UserStatsResponse::unsafe_arena_release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.UserStatsResponse.result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::blokus::Result* UserStatsResponse::_internal_mutable_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::Result>(GetArena());
    _impl_.result_ = reinterpret_cast<::blokus::Result*>(p);
  }
  return _impl_.result_;
}
inline ::blokus::Result* UserStatsResponse::mutable_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::blokus::Result* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:blokus.UserStatsResponse.result)
  return _msg;
}
inline void UserStatsResponse::set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.UserStatsResponse.result)
}

// .blokus.UserInfo user_info = 2;
inline bool UserStatsResponse::has_user_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_info_ != nullptr);
  return value;
}
inline const ::blokus::UserInfo& UserStatsResponse::_internal_user_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::UserInfo* p = _impl_.user_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::UserInfo&>(::blokus::_UserInfo_default_instance_);
}
inline const ::blokus::UserInfo& UserStatsResponse::user_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.UserStatsResponse.user_info)
  return _internal_user_info();
}
inline void UserStatsResponse::unsafe_arena_set_allocated_user_info(::blokus::UserInfo* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.user_info_);
  }
  _impl_.user_info_ = reinterpret_cast<::blokus::UserInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.UserStatsResponse.user_info)
}
inline ::blokus::UserInfo* UserStatsResponse::release_user_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::blokus::UserInfo* released = _impl_.user_info_;
  _impl_.user_info_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::UserInfo* UserStatsResponse::unsafe_arena_release_user_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.UserStatsResponse.user_info)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::blokus::UserInfo* temp = _impl_.user_info_;
  _impl_.user_info_ = nullptr;
  return temp;
}
inline ::blokus::UserInfo* UserStatsResponse::_internal_mutable_user_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.user_info_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::UserInfo>(GetArena());
    _impl_.user_info_ = reinterpret_cast<::blokus::UserInfo*>(p);
  }
  return _impl_.user_info_;
}
inline ::blokus::UserInfo* UserStatsResponse::mutable_user_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::blokus::UserInfo* _msg = _internal_mutable_user_info();
  // @@protoc_insertion_point(field_mutable:blokus.UserStatsResponse.user_info)
  return _msg;
}
inline void UserStatsResponse::set_allocated_user_info(::blokus::UserInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.user_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.user_info_ = reinterpret_cast<::blokus::UserInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.UserStatsResponse.user_info)
}

// int32 games_today = 3;
inline void UserStatsResponse::clear_games_today() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.games_today_ = 0;
}
inline ::int32_t UserStatsResponse::games_today() const {
  // @@protoc_insertion_point(field_get:blokus.UserStatsResponse.games_today)
  return _internal_games_today();
}
inline void UserStatsResponse::set_games_today(::int32_t value) {
  _internal_set_games_today(value);
  // @@protoc_insertion_point(field_set:blokus.UserStatsResponse.games_today)
}
inline ::int32_t UserStatsResponse::_internal_games_today() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.games_today_;
}
inline void UserStatsResponse::_internal_set_games_today(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.games_today_ = value;
}

// int32 games_this_week = 4;
inline void UserStatsResponse::clear_games_this_week() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.games_this_week_ = 0;
}
inline ::int32_t UserStatsResponse::games_this_week() const {
  // @@protoc_insertion_point(field_get:blokus.UserStatsResponse.games_this_week)
  return _internal_games_this_week();
}
inline void UserStatsResponse::set_games_this_week(::int32_t value) {
  _internal_set_games_this_week(value);
  // @@protoc_insertion_point(field_set:blokus.UserStatsResponse.games_this_week)
}
inline ::int32_t UserStatsResponse::_internal_games_this_week() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.games_this_week_;
}
inline void UserStatsResponse::_internal_set_games_this_week(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.games_this_week_ = value;
}

// int32 games_this_month = 5;
inline void UserStatsResponse::clear_games_this_month() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.games_this_month_ = 0;
}
inline ::int32_t UserStatsResponse::games_this_month() const {
  // @@protoc_insertion_point(field_get:blokus.UserStatsResponse.games_this_month)
  return _internal_games_this_month();
}
inline void UserStatsResponse::set_games_this_month(::int32_t value) {
  _internal_set_games_this_month(value);
  // @@protoc_insertion_point(field_set:blokus.UserStatsResponse.games_this_month)
}
inline ::int32_t UserStatsResponse::_internal_games_this_month() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.games_this_month_;
}
inline void UserStatsResponse::_internal_set_games_this_month(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.games_this_month_ = value;
}

// int32 consecutive_wins = 6;
inline void UserStatsResponse::clear_consecutive_wins() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.consecutive_wins_ = 0;
}
inline ::int32_t UserStatsResponse::consecutive_wins() const {
  // @@protoc_insertion_point(field_get:blokus.UserStatsResponse.consecutive_wins)
  return _internal_consecutive_wins();
}
inline void UserStatsResponse::set_consecutive_wins(::int32_t value) {
  _internal_set_consecutive_wins(value);
  // @@protoc_insertion_point(field_set:blokus.UserStatsResponse.consecutive_wins)
}
inline ::int32_t UserStatsResponse::_internal_consecutive_wins() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.consecutive_wins_;
}
inline void UserStatsResponse::_internal_set_consecutive_wins(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.consecutive_wins_ = value;
}

// int32 longest_win_streak = 7;
inline void UserStatsResponse::clear_longest_win_streak() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.longest_win_streak_ = 0;
}
inline ::int32_t UserStatsResponse::longest_win_streak() const {
  // @@protoc_insertion_point(field_get:blokus.UserStatsResponse.longest_win_streak)
  return _internal_longest_win_streak();
}
inline void UserStatsResponse::set_longest_win_streak(::int32_t value) {
  _internal_set_longest_win_streak(value);
  // @@protoc_insertion_point(field_set:blokus.UserStatsResponse.longest_win_streak)
}
inline ::int32_t UserStatsResponse::_internal_longest_win_streak() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.longest_win_streak_;
}
inline void UserStatsResponse::_internal_set_longest_win_streak(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.longest_win_streak_ = value;
}

// float average_game_duration = 8;
inline void UserStatsResponse::clear_average_game_duration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.average_game_duration_ = 0;
}
inline float UserStatsResponse::average_game_duration() const {
  // @@protoc_insertion_point(field_get:blokus.UserStatsResponse.average_game_duration)
  return _internal_average_game_duration();
}
inline void UserStatsResponse::set_average_game_duration(float value) {
  _internal_set_average_game_duration(value);
  // @@protoc_insertion_point(field_set:blokus.UserStatsResponse.average_game_duration)
}
inline float UserStatsResponse::_internal_average_game_duration() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.average_game_duration_;
}
inline void UserStatsResponse::_internal_set_average_game_duration(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.average_game_duration_ = value;
}

// int32 favorite_color = 9;
inline void UserStatsResponse::clear_favorite_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.favorite_color_ = 0;
}
inline ::int32_t UserStatsResponse::favorite_color() const {
  // @@protoc_insertion_point(field_get:blokus.UserStatsResponse.favorite_color)
  return _internal_favorite_color();
}
inline void UserStatsResponse::set_favorite_color(::int32_t value) {
  _internal_set_favorite_color(value);
  // @@protoc_insertion_point(field_set:blokus.UserStatsResponse.favorite_color)
}
inline ::int32_t UserStatsResponse::_internal_favorite_color() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.favorite_color_;
}
inline void UserStatsResponse::_internal_set_favorite_color(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.favorite_color_ = value;
}

// repeated .blokus.GameStats recent_games = 10;
inline int UserStatsResponse::_internal_recent_games_size() const {
  return _internal_recent_games().size();
}
inline int UserStatsResponse::recent_games_size() const {
  return _internal_recent_games_size();
}
inline ::blokus::GameStats* UserStatsResponse::mutable_recent_games(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.UserStatsResponse.recent_games)
  return _internal_mutable_recent_games()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::blokus::GameStats>* UserStatsResponse::mutable_recent_games()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.UserStatsResponse.recent_games)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_recent_games();
}
inline const ::blokus::GameStats& UserStatsResponse::recent_games(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.UserStatsResponse.recent_games)
  return _internal_recent_games().Get(index);
}
inline ::blokus::GameStats* UserStatsResponse::add_recent_games() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::blokus::GameStats* _add = _internal_mutable_recent_games()->Add();
  // @@protoc_insertion_point(field_add:blokus.UserStatsResponse.recent_games)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::blokus::GameStats>& UserStatsResponse::recent_games() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.UserStatsResponse.recent_games)
  return _internal_recent_games();
}
inline const ::google::protobuf::RepeatedPtrField<::blokus::GameStats>&
UserStatsResponse::_internal_recent_games() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.recent_games_;
}
inline ::google::protobuf::RepeatedPtrField<::blokus::GameStats>*
UserStatsResponse::_internal_mutable_recent_games() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.recent_games_;
}

// repeated string achievements = 11;
inline int UserStatsResponse::_internal_achievements_size() const {
  return _internal_achievements().size();
}
inline int UserStatsResponse::achievements_size() const {
  return _internal_achievements_size();
}
inline void UserStatsResponse::clear_achievements() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.achievements_.Clear();
}
inline std::string* UserStatsResponse::add_achievements() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_achievements()->Add();
  // @@protoc_insertion_point(field_add_mutable:blokus.UserStatsResponse.achievements)
  return _s;
}
inline const std::string& UserStatsResponse::achievements(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.UserStatsResponse.achievements)
  return _internal_achievements().Get(index);
}
inline std::string* UserStatsResponse::mutable_achievements(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.UserStatsResponse.achievements)
  return _internal_mutable_achievements()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void UserStatsResponse::set_achievements(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_achievements()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:blokus.UserStatsResponse.achievements)
}
template <typename Arg_, typename... Args_>
inline void UserStatsResponse::add_achievements(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_achievements(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:blokus.UserStatsResponse.achievements)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
UserStatsResponse::achievements() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.UserStatsResponse.achievements)
  return _internal_achievements();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
UserStatsResponse::mutable_achievements() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.UserStatsResponse.achievements)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_achievements();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
UserStatsResponse::_internal_achievements() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.achievements_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
UserStatsResponse::_internal_mutable_achievements() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.achievements_;
}

// int32 achievement_points = 12;
inline void UserStatsResponse::clear_achievement_points() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.achievement_points_ = 0;
}
inline ::int32_t UserStatsResponse::achievement_points() const {
  // @@protoc_insertion_point(field_get:blokus.UserStatsResponse.achievement_points)
  return _internal_achievement_points();
}
inline void UserStatsResponse::set_achievement_points(::int32_t value) {
  _internal_set_achievement_points(value);
  // @@protoc_insertion_point(field_set:blokus.UserStatsResponse.achievement_points)
}
inline ::int32_t UserStatsResponse::_internal_achievement_points() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.achievement_points_;
}
inline void UserStatsResponse::_internal_set_achievement_points(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.achievement_points_ = value;
}

// int32 current_rank = 13;
inline void UserStatsResponse::clear_current_rank() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_rank_ = 0;
}
inline ::int32_t UserStatsResponse::current_rank() const {
  // @@protoc_insertion_point(field_get:blokus.UserStatsResponse.current_rank)
  return _internal_current_rank();
}
inline void UserStatsResponse::set_current_rank(::int32_t value) {
  _internal_set_current_rank(value);
  // @@protoc_insertion_point(field_set:blokus.UserStatsResponse.current_rank)
}
inline ::int32_t UserStatsResponse::_internal_current_rank() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.current_rank_;
}
inline void UserStatsResponse::_internal_set_current_rank(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_rank_ = value;
}

// int32 rank_change = 14;
inline void UserStatsResponse::clear_rank_change() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rank_change_ = 0;
}
inline ::int32_t UserStatsResponse::rank_change() const {
  // @@protoc_insertion_point(field_get:blokus.UserStatsResponse.rank_change)
  return _internal_rank_change();
}
inline void UserStatsResponse::set_rank_change(::int32_t value) {
  _internal_set_rank_change(value);
  // @@protoc_insertion_point(field_set:blokus.UserStatsResponse.rank_change)
}
inline ::int32_t UserStatsResponse::_internal_rank_change() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rank_change_;
}
inline void UserStatsResponse::_internal_set_rank_change(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rank_change_ = value;
}

// int32 rating_points = 15;
inline void UserStatsResponse::clear_rating_points() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rating_points_ = 0;
}
inline ::int32_t UserStatsResponse::rating_points() const {
  // @@protoc_insertion_point(field_get:blokus.UserStatsResponse.rating_points)
  return _internal_rating_points();
}
inline void UserStatsResponse::set_rating_points(::int32_t value) {
  _internal_set_rating_points(value);
  // @@protoc_insertion_point(field_set:blokus.UserStatsResponse.rating_points)
}
inline ::int32_t UserStatsResponse::_internal_rating_points() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rating_points_;
}
inline void UserStatsResponse::_internal_set_rating_points(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rating_points_ = value;
}

// string tier = 16;
inline void UserStatsResponse::clear_tier() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tier_.ClearToEmpty();
}
inline const std::string& UserStatsResponse::tier() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.UserStatsResponse.tier)
  return _internal_tier();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserStatsResponse::set_tier(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tier_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.UserStatsResponse.tier)
}
inline std::string* UserStatsResponse::mutable_tier() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_tier();
  // @@protoc_insertion_point(field_mutable:blokus.UserStatsResponse.tier)
  return _s;
}
inline const std::string& UserStatsResponse::_internal_tier() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tier_.Get();
}
inline void UserStatsResponse::_internal_set_tier(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tier_.Set(value, GetArena());
}
inline std::string* UserStatsResponse::_internal_mutable_tier() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.tier_.Mutable( GetArena());
}
inline std::string* UserStatsResponse::release_tier() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.UserStatsResponse.tier)
  return _impl_.tier_.Release();
}
inline void UserStatsResponse::set_allocated_tier(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tier_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.tier_.IsDefault()) {
    _impl_.tier_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.UserStatsResponse.tier)
}

// -------------------------------------------------------------------

// FriendListRequest

// bool include_offline = 1;
inline void FriendListRequest::clear_include_offline() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.include_offline_ = false;
}
inline bool FriendListRequest::include_offline() const {
  // @@protoc_insertion_point(field_get:blokus.FriendListRequest.include_offline)
  return _internal_include_offline();
}
inline void FriendListRequest::set_include_offline(bool value) {
  _internal_set_include_offline(value);
  // @@protoc_insertion_point(field_set:blokus.FriendListRequest.include_offline)
}
inline bool FriendListRequest::_internal_include_offline() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.include_offline_;
}
inline void FriendListRequest::_internal_set_include_offline(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.include_offline_ = value;
}

// -------------------------------------------------------------------

// FriendListResponse

// .blokus.Result result = 1;
inline bool FriendListResponse::has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.result_ != nullptr);
  return value;
}
inline const ::blokus::Result& FriendListResponse::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::Result* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::Result&>(::blokus::_Result_default_instance_);
}
inline const ::blokus::Result& FriendListResponse::result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.FriendListResponse.result)
  return _internal_result();
}
inline void FriendListResponse::unsafe_arena_set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.FriendListResponse.result)
}
inline ::blokus::Result* FriendListResponse::release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* released = _impl_.result_;
  _impl_.result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::Result* FriendListResponse::unsafe_arena_release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.FriendListResponse.result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::blokus::Result* FriendListResponse::_internal_mutable_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::Result>(GetArena());
    _impl_.result_ = reinterpret_cast<::blokus::Result*>(p);
  }
  return _impl_.result_;
}
inline ::blokus::Result* FriendListResponse::mutable_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::blokus::Result* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:blokus.FriendListResponse.result)
  return _msg;
}
inline void FriendListResponse::set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.FriendListResponse.result)
}

// repeated .blokus.UserInfo friends = 2;
inline int FriendListResponse::_internal_friends_size() const {
  return _internal_friends().size();
}
inline int FriendListResponse::friends_size() const {
  return _internal_friends_size();
}
inline ::blokus::UserInfo* FriendListResponse::mutable_friends(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.FriendListResponse.friends)
  return _internal_mutable_friends()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::blokus::UserInfo>* FriendListResponse::mutable_friends()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.FriendListResponse.friends)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_friends();
}
inline const ::blokus::UserInfo& FriendListResponse::friends(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.FriendListResponse.friends)
  return _internal_friends().Get(index);
}
inline ::blokus::UserInfo* FriendListResponse::add_friends() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::blokus::UserInfo* _add = _internal_mutable_friends()->Add();
  // @@protoc_insertion_point(field_add:blokus.FriendListResponse.friends)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::blokus::UserInfo>& FriendListResponse::friends() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.FriendListResponse.friends)
  return _internal_friends();
}
inline const ::google::protobuf::RepeatedPtrField<::blokus::UserInfo>&
FriendListResponse::_internal_friends() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.friends_;
}
inline ::google::protobuf::RepeatedPtrField<::blokus::UserInfo>*
FriendListResponse::_internal_mutable_friends() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.friends_;
}

// repeated .blokus.UserInfo pending_requests = 3;
inline int FriendListResponse::_internal_pending_requests_size() const {
  return _internal_pending_requests().size();
}
inline int FriendListResponse::pending_requests_size() const {
  return _internal_pending_requests_size();
}
inline ::blokus::UserInfo* FriendListResponse::mutable_pending_requests(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.FriendListResponse.pending_requests)
  return _internal_mutable_pending_requests()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::blokus::UserInfo>* FriendListResponse::mutable_pending_requests()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.FriendListResponse.pending_requests)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_pending_requests();
}
inline const ::blokus::UserInfo& FriendListResponse::pending_requests(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.FriendListResponse.pending_requests)
  return _internal_pending_requests().Get(index);
}
inline ::blokus::UserInfo* FriendListResponse::add_pending_requests() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::blokus::UserInfo* _add = _internal_mutable_pending_requests()->Add();
  // @@protoc_insertion_point(field_add:blokus.FriendListResponse.pending_requests)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::blokus::UserInfo>& FriendListResponse::pending_requests() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.FriendListResponse.pending_requests)
  return _internal_pending_requests();
}
inline const ::google::protobuf::RepeatedPtrField<::blokus::UserInfo>&
FriendListResponse::_internal_pending_requests() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pending_requests_;
}
inline ::google::protobuf::RepeatedPtrField<::blokus::UserInfo>*
FriendListResponse::_internal_mutable_pending_requests() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.pending_requests_;
}

// repeated .blokus.UserInfo sent_requests = 4;
inline int FriendListResponse::_internal_sent_requests_size() const {
  return _internal_sent_requests().size();
}
inline int FriendListResponse::sent_requests_size() const {
  return _internal_sent_requests_size();
}
inline ::blokus::UserInfo* FriendListResponse::mutable_sent_requests(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.FriendListResponse.sent_requests)
  return _internal_mutable_sent_requests()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::blokus::UserInfo>* FriendListResponse::mutable_sent_requests()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.FriendListResponse.sent_requests)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_sent_requests();
}
inline const ::blokus::UserInfo& FriendListResponse::sent_requests(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.FriendListResponse.sent_requests)
  return _internal_sent_requests().Get(index);
}
inline ::blokus::UserInfo* FriendListResponse::add_sent_requests() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::blokus::UserInfo* _add = _internal_mutable_sent_requests()->Add();
  // @@protoc_insertion_point(field_add:blokus.FriendListResponse.sent_requests)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::blokus::UserInfo>& FriendListResponse::sent_requests() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.FriendListResponse.sent_requests)
  return _internal_sent_requests();
}
inline const ::google::protobuf::RepeatedPtrField<::blokus::UserInfo>&
FriendListResponse::_internal_sent_requests() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sent_requests_;
}
inline ::google::protobuf::RepeatedPtrField<::blokus::UserInfo>*
FriendListResponse::_internal_mutable_sent_requests() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.sent_requests_;
}

// -------------------------------------------------------------------

// AddFriendRequest

// string username = 1;
inline void AddFriendRequest::clear_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.ClearToEmpty();
}
inline const std::string& AddFriendRequest::username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.AddFriendRequest.username)
  return _internal_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AddFriendRequest::set_username(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.AddFriendRequest.username)
}
inline std::string* AddFriendRequest::mutable_username() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:blokus.AddFriendRequest.username)
  return _s;
}
inline const std::string& AddFriendRequest::_internal_username() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.username_.Get();
}
inline void AddFriendRequest::_internal_set_username(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.Set(value, GetArena());
}
inline std::string* AddFriendRequest::_internal_mutable_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.username_.Mutable( GetArena());
}
inline std::string* AddFriendRequest::release_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.AddFriendRequest.username)
  return _impl_.username_.Release();
}
inline void AddFriendRequest::set_allocated_username(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.AddFriendRequest.username)
}

// string message = 2;
inline void AddFriendRequest::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& AddFriendRequest::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.AddFriendRequest.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AddFriendRequest::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.AddFriendRequest.message)
}
inline std::string* AddFriendRequest::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:blokus.AddFriendRequest.message)
  return _s;
}
inline const std::string& AddFriendRequest::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void AddFriendRequest::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* AddFriendRequest::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* AddFriendRequest::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.AddFriendRequest.message)
  return _impl_.message_.Release();
}
inline void AddFriendRequest::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.AddFriendRequest.message)
}

// -------------------------------------------------------------------

// AddFriendResponse

// .blokus.Result result = 1;
inline bool AddFriendResponse::has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.result_ != nullptr);
  return value;
}
inline const ::blokus::Result& AddFriendResponse::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::Result* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::Result&>(::blokus::_Result_default_instance_);
}
inline const ::blokus::Result& AddFriendResponse::result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.AddFriendResponse.result)
  return _internal_result();
}
inline void AddFriendResponse::unsafe_arena_set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.AddFriendResponse.result)
}
inline ::blokus::Result* AddFriendResponse::release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* released = _impl_.result_;
  _impl_.result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::Result* AddFriendResponse::unsafe_arena_release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.AddFriendResponse.result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::blokus::Result* AddFriendResponse::_internal_mutable_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::Result>(GetArena());
    _impl_.result_ = reinterpret_cast<::blokus::Result*>(p);
  }
  return _impl_.result_;
}
inline ::blokus::Result* AddFriendResponse::mutable_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::blokus::Result* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:blokus.AddFriendResponse.result)
  return _msg;
}
inline void AddFriendResponse::set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.AddFriendResponse.result)
}

// string message = 2;
inline void AddFriendResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& AddFriendResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.AddFriendResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AddFriendResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.AddFriendResponse.message)
}
inline std::string* AddFriendResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:blokus.AddFriendResponse.message)
  return _s;
}
inline const std::string& AddFriendResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void AddFriendResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* AddFriendResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* AddFriendResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.AddFriendResponse.message)
  return _impl_.message_.Release();
}
inline void AddFriendResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.AddFriendResponse.message)
}

// bool auto_accepted = 3;
inline void AddFriendResponse::clear_auto_accepted() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auto_accepted_ = false;
}
inline bool AddFriendResponse::auto_accepted() const {
  // @@protoc_insertion_point(field_get:blokus.AddFriendResponse.auto_accepted)
  return _internal_auto_accepted();
}
inline void AddFriendResponse::set_auto_accepted(bool value) {
  _internal_set_auto_accepted(value);
  // @@protoc_insertion_point(field_set:blokus.AddFriendResponse.auto_accepted)
}
inline bool AddFriendResponse::_internal_auto_accepted() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.auto_accepted_;
}
inline void AddFriendResponse::_internal_set_auto_accepted(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auto_accepted_ = value;
}

// -------------------------------------------------------------------

// ServerAnnouncementNotification

// .blokus.ServerAnnouncementNotification.AnnouncementType type = 1;
inline void ServerAnnouncementNotification::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::blokus::ServerAnnouncementNotification_AnnouncementType ServerAnnouncementNotification::type() const {
  // @@protoc_insertion_point(field_get:blokus.ServerAnnouncementNotification.type)
  return _internal_type();
}
inline void ServerAnnouncementNotification::set_type(::blokus::ServerAnnouncementNotification_AnnouncementType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:blokus.ServerAnnouncementNotification.type)
}
inline ::blokus::ServerAnnouncementNotification_AnnouncementType ServerAnnouncementNotification::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::blokus::ServerAnnouncementNotification_AnnouncementType>(_impl_.type_);
}
inline void ServerAnnouncementNotification::_internal_set_type(::blokus::ServerAnnouncementNotification_AnnouncementType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// string title = 2;
inline void ServerAnnouncementNotification::clear_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.ClearToEmpty();
}
inline const std::string& ServerAnnouncementNotification::title() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ServerAnnouncementNotification.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServerAnnouncementNotification::set_title(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.ServerAnnouncementNotification.title)
}
inline std::string* ServerAnnouncementNotification::mutable_title() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:blokus.ServerAnnouncementNotification.title)
  return _s;
}
inline const std::string& ServerAnnouncementNotification::_internal_title() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.title_.Get();
}
inline void ServerAnnouncementNotification::_internal_set_title(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(value, GetArena());
}
inline std::string* ServerAnnouncementNotification::_internal_mutable_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.title_.Mutable( GetArena());
}
inline std::string* ServerAnnouncementNotification::release_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ServerAnnouncementNotification.title)
  return _impl_.title_.Release();
}
inline void ServerAnnouncementNotification::set_allocated_title(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.ServerAnnouncementNotification.title)
}

// string message = 3;
inline void ServerAnnouncementNotification::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& ServerAnnouncementNotification::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ServerAnnouncementNotification.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServerAnnouncementNotification::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.ServerAnnouncementNotification.message)
}
inline std::string* ServerAnnouncementNotification::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:blokus.ServerAnnouncementNotification.message)
  return _s;
}
inline const std::string& ServerAnnouncementNotification::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void ServerAnnouncementNotification::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* ServerAnnouncementNotification::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* ServerAnnouncementNotification::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ServerAnnouncementNotification.message)
  return _impl_.message_.Release();
}
inline void ServerAnnouncementNotification::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.ServerAnnouncementNotification.message)
}

// string url = 4;
inline void ServerAnnouncementNotification::clear_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.url_.ClearToEmpty();
}
inline const std::string& ServerAnnouncementNotification::url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ServerAnnouncementNotification.url)
  return _internal_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServerAnnouncementNotification::set_url(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.ServerAnnouncementNotification.url)
}
inline std::string* ServerAnnouncementNotification::mutable_url() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:blokus.ServerAnnouncementNotification.url)
  return _s;
}
inline const std::string& ServerAnnouncementNotification::_internal_url() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.url_.Get();
}
inline void ServerAnnouncementNotification::_internal_set_url(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.url_.Set(value, GetArena());
}
inline std::string* ServerAnnouncementNotification::_internal_mutable_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.url_.Mutable( GetArena());
}
inline std::string* ServerAnnouncementNotification::release_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ServerAnnouncementNotification.url)
  return _impl_.url_.Release();
}
inline void ServerAnnouncementNotification::set_allocated_url(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.url_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.url_.IsDefault()) {
    _impl_.url_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.ServerAnnouncementNotification.url)
}

// .google.protobuf.Timestamp valid_until = 5;
inline bool ServerAnnouncementNotification::has_valid_until() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.valid_until_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& ServerAnnouncementNotification::_internal_valid_until() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.valid_until_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& ServerAnnouncementNotification::valid_until() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ServerAnnouncementNotification.valid_until)
  return _internal_valid_until();
}
inline void ServerAnnouncementNotification::unsafe_arena_set_allocated_valid_until(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.valid_until_);
  }
  _impl_.valid_until_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.ServerAnnouncementNotification.valid_until)
}
inline ::google::protobuf::Timestamp* ServerAnnouncementNotification::release_valid_until() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.valid_until_;
  _impl_.valid_until_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* ServerAnnouncementNotification::unsafe_arena_release_valid_until() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ServerAnnouncementNotification.valid_until)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.valid_until_;
  _impl_.valid_until_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* ServerAnnouncementNotification::_internal_mutable_valid_until() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.valid_until_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.valid_until_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.valid_until_;
}
inline ::google::protobuf::Timestamp* ServerAnnouncementNotification::mutable_valid_until() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_valid_until();
  // @@protoc_insertion_point(field_mutable:blokus.ServerAnnouncementNotification.valid_until)
  return _msg;
}
inline void ServerAnnouncementNotification::set_allocated_valid_until(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.valid_until_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.valid_until_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.ServerAnnouncementNotification.valid_until)
}

// bool requires_acknowledgment = 6;
inline void ServerAnnouncementNotification::clear_requires_acknowledgment() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requires_acknowledgment_ = false;
}
inline bool ServerAnnouncementNotification::requires_acknowledgment() const {
  // @@protoc_insertion_point(field_get:blokus.ServerAnnouncementNotification.requires_acknowledgment)
  return _internal_requires_acknowledgment();
}
inline void ServerAnnouncementNotification::set_requires_acknowledgment(bool value) {
  _internal_set_requires_acknowledgment(value);
  // @@protoc_insertion_point(field_set:blokus.ServerAnnouncementNotification.requires_acknowledgment)
}
inline bool ServerAnnouncementNotification::_internal_requires_acknowledgment() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.requires_acknowledgment_;
}
inline void ServerAnnouncementNotification::_internal_set_requires_acknowledgment(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requires_acknowledgment_ = value;
}

// bool show_popup = 7;
inline void ServerAnnouncementNotification::clear_show_popup() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.show_popup_ = false;
}
inline bool ServerAnnouncementNotification::show_popup() const {
  // @@protoc_insertion_point(field_get:blokus.ServerAnnouncementNotification.show_popup)
  return _internal_show_popup();
}
inline void ServerAnnouncementNotification::set_show_popup(bool value) {
  _internal_set_show_popup(value);
  // @@protoc_insertion_point(field_set:blokus.ServerAnnouncementNotification.show_popup)
}
inline bool ServerAnnouncementNotification::_internal_show_popup() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.show_popup_;
}
inline void ServerAnnouncementNotification::_internal_set_show_popup(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.show_popup_ = value;
}

// bool show_banner = 8;
inline void ServerAnnouncementNotification::clear_show_banner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.show_banner_ = false;
}
inline bool ServerAnnouncementNotification::show_banner() const {
  // @@protoc_insertion_point(field_get:blokus.ServerAnnouncementNotification.show_banner)
  return _internal_show_banner();
}
inline void ServerAnnouncementNotification::set_show_banner(bool value) {
  _internal_set_show_banner(value);
  // @@protoc_insertion_point(field_set:blokus.ServerAnnouncementNotification.show_banner)
}
inline bool ServerAnnouncementNotification::_internal_show_banner() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.show_banner_;
}
inline void ServerAnnouncementNotification::_internal_set_show_banner(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.show_banner_ = value;
}

// int32 priority = 9;
inline void ServerAnnouncementNotification::clear_priority() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.priority_ = 0;
}
inline ::int32_t ServerAnnouncementNotification::priority() const {
  // @@protoc_insertion_point(field_get:blokus.ServerAnnouncementNotification.priority)
  return _internal_priority();
}
inline void ServerAnnouncementNotification::set_priority(::int32_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:blokus.ServerAnnouncementNotification.priority)
}
inline ::int32_t ServerAnnouncementNotification::_internal_priority() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.priority_;
}
inline void ServerAnnouncementNotification::_internal_set_priority(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.priority_ = value;
}

// -------------------------------------------------------------------

// MaintenanceNotification

// .google.protobuf.Timestamp start_time = 1;
inline bool MaintenanceNotification::has_start_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.start_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& MaintenanceNotification::_internal_start_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.start_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& MaintenanceNotification::start_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.MaintenanceNotification.start_time)
  return _internal_start_time();
}
inline void MaintenanceNotification::unsafe_arena_set_allocated_start_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.start_time_);
  }
  _impl_.start_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.MaintenanceNotification.start_time)
}
inline ::google::protobuf::Timestamp* MaintenanceNotification::release_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.start_time_;
  _impl_.start_time_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* MaintenanceNotification::unsafe_arena_release_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.MaintenanceNotification.start_time)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.start_time_;
  _impl_.start_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* MaintenanceNotification::_internal_mutable_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.start_time_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.start_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.start_time_;
}
inline ::google::protobuf::Timestamp* MaintenanceNotification::mutable_start_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_start_time();
  // @@protoc_insertion_point(field_mutable:blokus.MaintenanceNotification.start_time)
  return _msg;
}
inline void MaintenanceNotification::set_allocated_start_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.start_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.start_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.MaintenanceNotification.start_time)
}

// .google.protobuf.Timestamp end_time = 2;
inline bool MaintenanceNotification::has_end_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.end_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& MaintenanceNotification::_internal_end_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.end_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& MaintenanceNotification::end_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.MaintenanceNotification.end_time)
  return _internal_end_time();
}
inline void MaintenanceNotification::unsafe_arena_set_allocated_end_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.end_time_);
  }
  _impl_.end_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.MaintenanceNotification.end_time)
}
inline ::google::protobuf::Timestamp* MaintenanceNotification::release_end_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.end_time_;
  _impl_.end_time_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* MaintenanceNotification::unsafe_arena_release_end_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.MaintenanceNotification.end_time)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.end_time_;
  _impl_.end_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* MaintenanceNotification::_internal_mutable_end_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.end_time_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.end_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.end_time_;
}
inline ::google::protobuf::Timestamp* MaintenanceNotification::mutable_end_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_end_time();
  // @@protoc_insertion_point(field_mutable:blokus.MaintenanceNotification.end_time)
  return _msg;
}
inline void MaintenanceNotification::set_allocated_end_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.end_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.end_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.MaintenanceNotification.end_time)
}

// string reason = 3;
inline void MaintenanceNotification::clear_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.ClearToEmpty();
}
inline const std::string& MaintenanceNotification::reason() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.MaintenanceNotification.reason)
  return _internal_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MaintenanceNotification::set_reason(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.MaintenanceNotification.reason)
}
inline std::string* MaintenanceNotification::mutable_reason() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:blokus.MaintenanceNotification.reason)
  return _s;
}
inline const std::string& MaintenanceNotification::_internal_reason() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reason_.Get();
}
inline void MaintenanceNotification::_internal_set_reason(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.Set(value, GetArena());
}
inline std::string* MaintenanceNotification::_internal_mutable_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.reason_.Mutable( GetArena());
}
inline std::string* MaintenanceNotification::release_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.MaintenanceNotification.reason)
  return _impl_.reason_.Release();
}
inline void MaintenanceNotification::set_allocated_reason(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.reason_.IsDefault()) {
    _impl_.reason_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.MaintenanceNotification.reason)
}

// string details = 4;
inline void MaintenanceNotification::clear_details() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.details_.ClearToEmpty();
}
inline const std::string& MaintenanceNotification::details() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.MaintenanceNotification.details)
  return _internal_details();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MaintenanceNotification::set_details(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.details_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.MaintenanceNotification.details)
}
inline std::string* MaintenanceNotification::mutable_details() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_details();
  // @@protoc_insertion_point(field_mutable:blokus.MaintenanceNotification.details)
  return _s;
}
inline const std::string& MaintenanceNotification::_internal_details() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.details_.Get();
}
inline void MaintenanceNotification::_internal_set_details(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.details_.Set(value, GetArena());
}
inline std::string* MaintenanceNotification::_internal_mutable_details() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.details_.Mutable( GetArena());
}
inline std::string* MaintenanceNotification::release_details() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.MaintenanceNotification.details)
  return _impl_.details_.Release();
}
inline void MaintenanceNotification::set_allocated_details(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.details_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.details_.IsDefault()) {
    _impl_.details_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.MaintenanceNotification.details)
}

// bool force_disconnect = 5;
inline void MaintenanceNotification::clear_force_disconnect() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.force_disconnect_ = false;
}
inline bool MaintenanceNotification::force_disconnect() const {
  // @@protoc_insertion_point(field_get:blokus.MaintenanceNotification.force_disconnect)
  return _internal_force_disconnect();
}
inline void MaintenanceNotification::set_force_disconnect(bool value) {
  _internal_set_force_disconnect(value);
  // @@protoc_insertion_point(field_set:blokus.MaintenanceNotification.force_disconnect)
}
inline bool MaintenanceNotification::_internal_force_disconnect() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.force_disconnect_;
}
inline void MaintenanceNotification::_internal_set_force_disconnect(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.force_disconnect_ = value;
}

// int32 warning_minutes = 6;
inline void MaintenanceNotification::clear_warning_minutes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.warning_minutes_ = 0;
}
inline ::int32_t MaintenanceNotification::warning_minutes() const {
  // @@protoc_insertion_point(field_get:blokus.MaintenanceNotification.warning_minutes)
  return _internal_warning_minutes();
}
inline void MaintenanceNotification::set_warning_minutes(::int32_t value) {
  _internal_set_warning_minutes(value);
  // @@protoc_insertion_point(field_set:blokus.MaintenanceNotification.warning_minutes)
}
inline ::int32_t MaintenanceNotification::_internal_warning_minutes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.warning_minutes_;
}
inline void MaintenanceNotification::_internal_set_warning_minutes(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.warning_minutes_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace blokus


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::blokus::RoomListUpdate_UpdateType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::blokus::RoomListUpdate_UpdateType>() {
  return ::blokus::RoomListUpdate_UpdateType_descriptor();
}
template <>
struct is_proto_enum<::blokus::UserListUpdate_UpdateType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::blokus::UserListUpdate_UpdateType>() {
  return ::blokus::UserListUpdate_UpdateType_descriptor();
}
template <>
struct is_proto_enum<::blokus::ServerAnnouncementNotification_AnnouncementType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::blokus::ServerAnnouncementNotification_AnnouncementType>() {
  return ::blokus::ServerAnnouncementNotification_AnnouncementType_descriptor();
}
template <>
struct is_proto_enum<::blokus::RoomFilter> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::blokus::RoomFilter>() {
  return ::blokus::RoomFilter_descriptor();
}
template <>
struct is_proto_enum<::blokus::RoomSortOrder> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::blokus::RoomSortOrder>() {
  return ::blokus::RoomSortOrder_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // lobby_2eproto_2epb_2eh
