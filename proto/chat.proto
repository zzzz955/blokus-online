syntax = "proto3";

package blokus;

import "google/protobuf/timestamp.proto";
import "common.proto";

// ========================================
// 채팅 관련 열거형
// ========================================

enum ChatType {
  CHAT_TYPE_NORMAL = 0;        // 일반 채팅
  CHAT_TYPE_WHISPER = 1;       // 귓속말
  CHAT_TYPE_SYSTEM = 2;        // 시스템 메시지
  CHAT_TYPE_ANNOUNCEMENT = 3;   // 공지사항
  CHAT_TYPE_GAME_EVENT = 4;    // 게임 이벤트 (블록 배치, 턴 변경 등)
  CHAT_TYPE_EMOTE = 5;         // 이모티콘/감정 표현
  CHAT_TYPE_TEAM = 6;          // 팀 채팅 (팀 모드)
}

enum ChatScope {
  CHAT_SCOPE_GLOBAL = 0;       // 전체 채팅 (로비)
  CHAT_SCOPE_ROOM = 1;         // 방 채팅
  CHAT_SCOPE_PRIVATE = 2;      // 개인 채팅 (귓속말)
  CHAT_SCOPE_TEAM = 3;         // 팀 채팅
  CHAT_SCOPE_SPECTATOR = 4;    // 관전자 채팅
}

enum MessageStatus {
  MESSAGE_STATUS_SENT = 0;
  MESSAGE_STATUS_DELIVERED = 1;
  MESSAGE_STATUS_READ = 2;
  MESSAGE_STATUS_FAILED = 3;
  MESSAGE_STATUS_BLOCKED = 4;   // 차단된 사용자
  MESSAGE_STATUS_MODERATED = 5; // 검열된 메시지
}

// ========================================
// 채팅 메시지 구조
// ========================================

message ChatMessage {
  string message_id = 1;       // 메시지 고유 ID
  ChatType type = 2;
  ChatScope scope = 3;
  
  // 발신자 정보
  string sender_username = 4;
  string sender_display_name = 5;
  PlayerColor sender_color = 6; // 게임 중일 때 플레이어 색상
  
  // 메시지 내용
  string content = 7;
  repeated string mentions = 8; // @username 멘션 목록
  repeated ChatEmote emotes = 9; // 이모티콘 정보
  
  // 메타데이터
  google.protobuf.Timestamp timestamp = 10;
  int32 room_id = 11;          // 방 채팅인 경우
  string target_username = 12;  // 귓속말 대상
  
  // 메시지 상태
  MessageStatus status = 13;
  bool is_edited = 14;
  google.protobuf.Timestamp edited_at = 15;
  
  // 추가 기능
  string reply_to_message_id = 16; // 답장 대상 메시지
  repeated string attachments = 17; // 첨부파일 (이미지 URL 등)
  map<string, string> metadata = 18; // 확장 메타데이터
}

message ChatEmote {
  string emote_id = 1;
  string emote_name = 2;       // :smile:, :thumbsup: 등
  string emote_url = 3;        // 커스텀 이모티콘 URL
  int32 start_position = 4;    // 텍스트 내 시작 위치
  int32 end_position = 5;      // 텍스트 내 끝 위치
}

// ========================================
// 채팅 메시지 전송
// ========================================

message SendChatRequest {
  ChatType type = 1;
  ChatScope scope = 2;
  string content = 3;
  
  // 대상 정보
  int32 room_id = 4;           // 방 채팅인 경우
  string target_username = 5;  // 귓속말 대상
  
  // 메시지 옵션
  string reply_to_message_id = 6; // 답장할 메시지 ID
  repeated string attachments = 7; // 첨부파일
  bool silent = 8;             // 알림 없이 전송
  
  // 클라이언트 정보
  string client_message_id = 9; // 클라이언트에서 생성한 임시 ID
}

message SendChatResponse {
  Result result = 1;
  string message_id = 2;       // 서버에서 할당한 메시지 ID
  string client_message_id = 3; // 요청에서 받은 클라이언트 ID
  google.protobuf.Timestamp sent_at = 4;
  
  // 실패 시 정보
  string filtered_content = 5; // 욕설 필터링된 내용
  repeated string blocked_words = 6; // 차단된 단어들
  int32 cooldown_seconds = 7;  // 쿨다운 시간
}

// ========================================
// 채팅 알림
// ========================================

message ChatNotification {
  ChatMessage message = 1;
  
  // 알림 설정
  bool should_notify = 2;      // 알림 표시 여부
  bool mentioned = 3;          // 멘션된 경우
  bool is_important = 4;       // 중요한 메시지
  
  // 추가 정보
  int32 unread_count = 5;      // 읽지 않은 메시지 수
  bool is_first_message = 6;   // 첫 메시지 여부
}

// ========================================
// 시스템 메시지
// ========================================

message SystemMessage {
  enum SystemMessageType {
    PLAYER_JOINED = 0;
    PLAYER_LEFT = 1;
    GAME_STARTED = 2;
    GAME_ENDED = 3;
    BLOCK_PLACED = 4;
    TURN_CHANGED = 5;
    ACHIEVEMENT_UNLOCKED = 6;
    LEVEL_UP = 7;
    SERVER_ANNOUNCEMENT = 8;
    MAINTENANCE_WARNING = 9;
    ROOM_CREATED = 10;
    ROOM_DISBANDED = 11;
  }
  
  SystemMessageType system_type = 1;
  string message = 2;
  map<string, string> parameters = 3; // 메시지 파라미터
  
  // 표시 옵션
  bool show_in_chat = 4;       // 채팅창에 표시
  bool show_as_popup = 5;      // 팝업으로 표시
  string icon = 6;             // 표시할 아이콘
  string color = 7;            // 메시지 색상
}

// ========================================
// 채팅 기록 조회
// ========================================

message GetChatHistoryRequest {
  ChatScope scope = 1;
  int32 room_id = 2;           // 방 채팅 기록
  string target_username = 3;  // 특정 사용자와의 채팅
  
  // 페이징
  int32 limit = 4;             // 가져올 메시지 수
  string before_message_id = 5; // 이 메시지 이전의 메시지들
  string after_message_id = 6;  // 이 메시지 이후의 메시지들
  
  // 필터링
  repeated ChatType type_filter = 7; // 특정 타입만 조회
  google.protobuf.Timestamp since = 8; // 특정 시간 이후
  google.protobuf.Timestamp until = 9; // 특정 시간 이전
  string search_query = 10;    // 메시지 내용 검색
}

message ChatHistoryResponse {
  Result result = 1;
  repeated ChatMessage messages = 2;
  
  // 페이징 정보
  bool has_more_before = 3;    // 이전 메시지가 더 있는지
  bool has_more_after = 4;     // 이후 메시지가 더 있는지
  int32 total_count = 5;       // 전체 메시지 수
  
  // 메타데이터
  google.protobuf.Timestamp oldest_message = 6;
  google.protobuf.Timestamp newest_message = 7;
}

// ========================================
// 귓속말 시스템
// ========================================

message WhisperMessage {
  string target_username = 1;
  string content = 2;
  bool request_read_receipt = 3; // 읽음 확인 요청
}

message WhisperNotification {
  ChatMessage whisper = 1;
  bool sender_online = 2;      // 발신자 온라인 상태
  bool auto_away_reply = 3;    // 자동 부재중 답장 여부
}

message ReadReceiptNotification {
  string message_id = 1;
  string reader_username = 2;
  google.protobuf.Timestamp read_at = 3;
}

// ========================================
// 채팅 관리 및 모더레이션
// ========================================

message ModerateChatRequest {
  string message_id = 1;
  enum ModerationAction {
    DELETE_MESSAGE = 0;
    EDIT_MESSAGE = 1;
    MUTE_USER = 2;
    WARN_USER = 3;
    BAN_USER = 4;
  }
  ModerationAction action = 2;
  string reason = 3;
  int32 duration_minutes = 4;  // 제재 기간
  string new_content = 5;      // 메시지 수정 시 새 내용
}

message ModerateChatResponse {
  Result result = 1;
  string message = 2;
  bool user_notified = 3;      // 사용자에게 알림 전송 여부
}

message ChatModerationNotification {
  string message_id = 1;
  string moderated_username = 2;
  string moderator_username = 3;
  string action = 4;           // "deleted", "edited", "muted" 등
  string reason = 5;
  google.protobuf.Timestamp moderated_at = 6;
}

// ========================================
// 채팅 설정 및 필터
// ========================================

message ChatSettings {
  bool global_chat_enabled = 1;
  bool whispers_enabled = 2;
  bool system_messages_enabled = 3;
  bool emotes_enabled = 4;
  bool mentions_enabled = 5;
  
  // 필터 설정
  bool profanity_filter = 6;
  bool spam_filter = 7;
  repeated string blocked_users = 8; // 차단한 사용자 목록
  repeated string muted_rooms = 9;   // 음소거한 방 목록
  
  // 알림 설정
  bool desktop_notifications = 10;
  bool sound_notifications = 11;
  bool mention_notifications = 12;
  
  // 표시 설정
  bool show_timestamps = 13;
  bool show_user_colors = 14;
  int32 max_message_length = 15;
  string chat_font_size = 16;
}

message UpdateChatSettingsRequest {
  ChatSettings settings = 1;
}

message UpdateChatSettingsResponse {
  Result result = 1;
  ChatSettings updated_settings = 2;
}

// ========================================
// 채팅방 관리 (방 채팅 전용)
// ========================================

message RoomChatSettings {
  int32 room_id = 1;
  bool chat_enabled = 2;
  bool spectator_chat_enabled = 3;
  bool team_chat_enabled = 4;     // 팀 모드에서
  
  // 제한 설정
  int32 message_rate_limit = 5;   // 분당 메시지 수 제한
  int32 max_message_length = 6;
  bool links_allowed = 7;
  bool emotes_allowed = 8;
  
  // 모더레이션
  repeated string chat_moderators = 9; // 채팅 관리자 목록
  repeated string banned_users = 10;   // 채팅 금지 사용자
  string welcome_message = 11;         // 입장 시 표시할 메시지
}

// ========================================
// 이모티콘 및 스티커
// ========================================

message EmotePackInfo {
  string pack_id = 1;
  string pack_name = 2;
  string description = 3;
  repeated EmoteInfo emotes = 4;
  bool is_premium = 5;         // 유료 이모티콘 팩
  bool is_unlocked = 6;        // 사용자가 잠금 해제했는지
}

message EmoteInfo {
  string emote_id = 1;
  string emote_name = 2;
  string emote_url = 3;
  repeated string tags = 4;    // 검색용 태그
  bool is_animated = 5;
}

message GetEmotePacksRequest {
  bool include_locked = 1;     // 잠금된 팩도 포함
}

message GetEmotePacksResponse {
  Result result = 1;
  repeated EmotePackInfo emote_packs = 2;
  repeated string unlocked_pack_ids = 3;
}