syntax = "proto3";

package blokus;

import "google/protobuf/timestamp.proto";
import "common.proto";

// ========================================
// Chat System Messages
// ========================================

enum ChatType {
  CHAT_TYPE_PUBLIC = 0;        // Normal chat
  CHAT_TYPE_WHISPER = 1;       // Private message
  CHAT_TYPE_SYSTEM = 2;        // System message
  CHAT_TYPE_ANNOUNCEMENT = 3;   // Server announcement
  CHAT_TYPE_GAME_EVENT = 4;    // Game events (block placed, turn changed etc)
  CHAT_TYPE_EMOTE = 5;         // Emoticons/emoji expressions
  CHAT_TYPE_TEAM = 6;          // Team chat (team modes)
}

enum ChatScope {
  CHAT_SCOPE_GLOBAL = 0;       // Global chat (lobby)
  CHAT_SCOPE_ROOM = 1;         // Room chat
  CHAT_SCOPE_PRIVATE = 2;      // Private chat (whisper)
  CHAT_SCOPE_TEAM = 3;         // Team chat
  CHAT_SCOPE_SPECTATOR = 4;    // Spectator chat
}

enum MessageStatus {
  MESSAGE_STATUS_SENT = 0;
  MESSAGE_STATUS_DELIVERED = 1;
  MESSAGE_STATUS_READ = 2;
  MESSAGE_STATUS_FAILED = 3;
  MESSAGE_STATUS_BLOCKED = 4;   // Blocked message
  MESSAGE_STATUS_MODERATED = 5; // Moderated message
}

// ========================================
// Chat Message Structure
// ========================================

message ChatMessage {
  string message_id = 1;       // Unique message ID
  ChatType type = 2;
  ChatScope scope = 3;
  
  // Message content
  string sender_username = 4;
  string sender_display_name = 5;
  PlayerColor sender_color = 6; // Player color in game
  
  // Message data
  string content = 7;
  repeated string mentions = 8; // @username mentions
  repeated ChatEmote emotes = 9; // Emoticon data
  
  // Metadata
  google.protobuf.Timestamp timestamp = 10;
  int32 room_id = 11;          // For room chat
  string target_username = 12;  // For whisper
  
  // Message status
  MessageStatus status = 13;
  bool is_edited = 14;
  google.protobuf.Timestamp edited_at = 15;
  
  // Additional features
  string reply_to_message_id = 16; // Reply to message
  repeated string attachments = 17; // Attachment URLs (images etc)
  map<string, string> metadata = 18; // Extended metadata
}

message ChatEmote {
  string emote_id = 1;
  string emote_name = 2;       // :smile:, :thumbsup: etc
  string emote_url = 3;        // Custom emoticon URL
  int32 start_position = 4;    // Start position in text
  int32 end_position = 5;      // End position in text
}

// ========================================
// Send Chat Message
// ========================================

message SendChatRequest {
  ChatType type = 1;
  ChatScope scope = 2;
  string content = 3;
  
  // Target information
  int32 room_id = 4;           // For room chat
  string target_username = 5;  // For whisper
  
  // Message options
  string reply_to_message_id = 6; // Reply to message ID
  repeated string attachments = 7; // Attachments
  bool silent = 8;             // Silent notification
  
  // Client information
  string client_message_id = 9; // Client-generated temp ID
  string username = 10;
}

message SendChatResponse {
  Result result = 1;
  string message_id = 2;       // Server-assigned message ID
  string client_message_id = 3; // Client ID from request
  google.protobuf.Timestamp sent_at = 4;
  
  // Moderation info
  string filtered_content = 5; // After content filtering
  repeated string blocked_words = 6; // Blocked words
  int32 cooldown_seconds = 7;  // Cooldown time
}

// ========================================
// Chat Notifications
// ========================================

message ChatNotification {
  ChatMessage message = 1;
  
  // Notification settings
  bool should_notify = 2;      // Show notification
  bool mentioned = 3;          // User was mentioned
  bool is_important = 4;       // Important message
  
  // Additional info
  int32 unread_count = 5;      // Unread message count
  bool is_first_message = 6;   // First message indicator
}

// ========================================
// System Messages
// ========================================

message SystemMessage {
  enum SystemMessageType {
    PLAYER_JOINED = 0;
    PLAYER_LEFT = 1;
    GAME_STARTED = 2;
    GAME_ENDED = 3;
    BLOCK_PLACED = 4;
    TURN_CHANGED = 5;
    ACHIEVEMENT_UNLOCKED = 6;
    LEVEL_UP = 7;
    SERVER_ANNOUNCEMENT = 8;
    MAINTENANCE_WARNING = 9;
    ROOM_CREATED = 10;
    ROOM_DISBANDED = 11;
  }
  
  SystemMessageType system_type = 1;
  string message = 2;
  map<string, string> parameters = 3; // Message parameters
  
  // Display options
  bool show_in_chat = 4;       // Show in chat window
  bool show_as_popup = 5;      // Show as popup
  string icon = 6;             // Display icon
  string color = 7;            // Message color
}

// ========================================
// Chat History Retrieval
// ========================================

message GetChatHistoryRequest {
  ChatScope scope = 1;
  int32 room_id = 2;           // For room chat
  string target_username = 3;  // For specific user chat
  
  // Pagination
  int32 limit = 4;             // Number of messages
  string before_message_id = 5; // Messages before this ID
  string after_message_id = 6;  // Messages after this ID
  
  // Filters
  repeated ChatType type_filter = 7; // Specific types only
  google.protobuf.Timestamp since = 8; // Since specific time
  google.protobuf.Timestamp until = 9; // Until specific time
  string search_query = 10;    // Message content search
}

message ChatHistoryResponse {
  Result result = 1;
  repeated ChatMessage messages = 2;
  
  // Pagination info
  bool has_more_before = 3;    // More messages before
  bool has_more_after = 4;     // More messages after
  int32 total_count = 5;       // Total message count
  
  // Metadata
  google.protobuf.Timestamp oldest_message = 6;
  google.protobuf.Timestamp newest_message = 7;
}