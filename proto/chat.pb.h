// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: chat.proto
// Protobuf C++ Version: 5.29.3

#ifndef chat_2eproto_2epb_2eh
#define chat_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
#include "common.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_chat_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_chat_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_chat_2eproto;
namespace blokus {
class ChatEmote;
struct ChatEmoteDefaultTypeInternal;
extern ChatEmoteDefaultTypeInternal _ChatEmote_default_instance_;
class ChatHistoryResponse;
struct ChatHistoryResponseDefaultTypeInternal;
extern ChatHistoryResponseDefaultTypeInternal _ChatHistoryResponse_default_instance_;
class ChatMessage;
struct ChatMessageDefaultTypeInternal;
extern ChatMessageDefaultTypeInternal _ChatMessage_default_instance_;
class ChatMessage_MetadataEntry_DoNotUse;
struct ChatMessage_MetadataEntry_DoNotUseDefaultTypeInternal;
extern ChatMessage_MetadataEntry_DoNotUseDefaultTypeInternal _ChatMessage_MetadataEntry_DoNotUse_default_instance_;
class ChatModerationNotification;
struct ChatModerationNotificationDefaultTypeInternal;
extern ChatModerationNotificationDefaultTypeInternal _ChatModerationNotification_default_instance_;
class ChatNotification;
struct ChatNotificationDefaultTypeInternal;
extern ChatNotificationDefaultTypeInternal _ChatNotification_default_instance_;
class ChatSettings;
struct ChatSettingsDefaultTypeInternal;
extern ChatSettingsDefaultTypeInternal _ChatSettings_default_instance_;
class EmoteInfo;
struct EmoteInfoDefaultTypeInternal;
extern EmoteInfoDefaultTypeInternal _EmoteInfo_default_instance_;
class EmotePackInfo;
struct EmotePackInfoDefaultTypeInternal;
extern EmotePackInfoDefaultTypeInternal _EmotePackInfo_default_instance_;
class GetChatHistoryRequest;
struct GetChatHistoryRequestDefaultTypeInternal;
extern GetChatHistoryRequestDefaultTypeInternal _GetChatHistoryRequest_default_instance_;
class GetEmotePacksRequest;
struct GetEmotePacksRequestDefaultTypeInternal;
extern GetEmotePacksRequestDefaultTypeInternal _GetEmotePacksRequest_default_instance_;
class GetEmotePacksResponse;
struct GetEmotePacksResponseDefaultTypeInternal;
extern GetEmotePacksResponseDefaultTypeInternal _GetEmotePacksResponse_default_instance_;
class ModerateChatRequest;
struct ModerateChatRequestDefaultTypeInternal;
extern ModerateChatRequestDefaultTypeInternal _ModerateChatRequest_default_instance_;
class ModerateChatResponse;
struct ModerateChatResponseDefaultTypeInternal;
extern ModerateChatResponseDefaultTypeInternal _ModerateChatResponse_default_instance_;
class ReadReceiptNotification;
struct ReadReceiptNotificationDefaultTypeInternal;
extern ReadReceiptNotificationDefaultTypeInternal _ReadReceiptNotification_default_instance_;
class RoomChatSettings;
struct RoomChatSettingsDefaultTypeInternal;
extern RoomChatSettingsDefaultTypeInternal _RoomChatSettings_default_instance_;
class SendChatRequest;
struct SendChatRequestDefaultTypeInternal;
extern SendChatRequestDefaultTypeInternal _SendChatRequest_default_instance_;
class SendChatResponse;
struct SendChatResponseDefaultTypeInternal;
extern SendChatResponseDefaultTypeInternal _SendChatResponse_default_instance_;
class SystemMessage;
struct SystemMessageDefaultTypeInternal;
extern SystemMessageDefaultTypeInternal _SystemMessage_default_instance_;
class SystemMessage_ParametersEntry_DoNotUse;
struct SystemMessage_ParametersEntry_DoNotUseDefaultTypeInternal;
extern SystemMessage_ParametersEntry_DoNotUseDefaultTypeInternal _SystemMessage_ParametersEntry_DoNotUse_default_instance_;
class UpdateChatSettingsRequest;
struct UpdateChatSettingsRequestDefaultTypeInternal;
extern UpdateChatSettingsRequestDefaultTypeInternal _UpdateChatSettingsRequest_default_instance_;
class UpdateChatSettingsResponse;
struct UpdateChatSettingsResponseDefaultTypeInternal;
extern UpdateChatSettingsResponseDefaultTypeInternal _UpdateChatSettingsResponse_default_instance_;
class WhisperMessage;
struct WhisperMessageDefaultTypeInternal;
extern WhisperMessageDefaultTypeInternal _WhisperMessage_default_instance_;
class WhisperNotification;
struct WhisperNotificationDefaultTypeInternal;
extern WhisperNotificationDefaultTypeInternal _WhisperNotification_default_instance_;
}  // namespace blokus
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace blokus {
enum SystemMessage_SystemMessageType : int {
  SystemMessage_SystemMessageType_PLAYER_JOINED = 0,
  SystemMessage_SystemMessageType_PLAYER_LEFT = 1,
  SystemMessage_SystemMessageType_GAME_STARTED = 2,
  SystemMessage_SystemMessageType_GAME_ENDED = 3,
  SystemMessage_SystemMessageType_BLOCK_PLACED = 4,
  SystemMessage_SystemMessageType_TURN_CHANGED = 5,
  SystemMessage_SystemMessageType_ACHIEVEMENT_UNLOCKED = 6,
  SystemMessage_SystemMessageType_LEVEL_UP = 7,
  SystemMessage_SystemMessageType_SERVER_ANNOUNCEMENT = 8,
  SystemMessage_SystemMessageType_MAINTENANCE_WARNING = 9,
  SystemMessage_SystemMessageType_ROOM_CREATED = 10,
  SystemMessage_SystemMessageType_ROOM_DISBANDED = 11,
  SystemMessage_SystemMessageType_SystemMessage_SystemMessageType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  SystemMessage_SystemMessageType_SystemMessage_SystemMessageType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool SystemMessage_SystemMessageType_IsValid(int value);
extern const uint32_t SystemMessage_SystemMessageType_internal_data_[];
constexpr SystemMessage_SystemMessageType SystemMessage_SystemMessageType_SystemMessageType_MIN = static_cast<SystemMessage_SystemMessageType>(0);
constexpr SystemMessage_SystemMessageType SystemMessage_SystemMessageType_SystemMessageType_MAX = static_cast<SystemMessage_SystemMessageType>(11);
constexpr int SystemMessage_SystemMessageType_SystemMessageType_ARRAYSIZE = 11 + 1;
const ::google::protobuf::EnumDescriptor*
SystemMessage_SystemMessageType_descriptor();
template <typename T>
const std::string& SystemMessage_SystemMessageType_Name(T value) {
  static_assert(std::is_same<T, SystemMessage_SystemMessageType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SystemMessageType_Name().");
  return SystemMessage_SystemMessageType_Name(static_cast<SystemMessage_SystemMessageType>(value));
}
template <>
inline const std::string& SystemMessage_SystemMessageType_Name(SystemMessage_SystemMessageType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<SystemMessage_SystemMessageType_descriptor,
                                                 0, 11>(
      static_cast<int>(value));
}
inline bool SystemMessage_SystemMessageType_Parse(absl::string_view name, SystemMessage_SystemMessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SystemMessage_SystemMessageType>(
      SystemMessage_SystemMessageType_descriptor(), name, value);
}
enum ModerateChatRequest_ModerationAction : int {
  ModerateChatRequest_ModerationAction_DELETE_MESSAGE = 0,
  ModerateChatRequest_ModerationAction_EDIT_MESSAGE = 1,
  ModerateChatRequest_ModerationAction_MUTE_USER = 2,
  ModerateChatRequest_ModerationAction_WARN_USER = 3,
  ModerateChatRequest_ModerationAction_BAN_USER = 4,
  ModerateChatRequest_ModerationAction_ModerateChatRequest_ModerationAction_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ModerateChatRequest_ModerationAction_ModerateChatRequest_ModerationAction_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ModerateChatRequest_ModerationAction_IsValid(int value);
extern const uint32_t ModerateChatRequest_ModerationAction_internal_data_[];
constexpr ModerateChatRequest_ModerationAction ModerateChatRequest_ModerationAction_ModerationAction_MIN = static_cast<ModerateChatRequest_ModerationAction>(0);
constexpr ModerateChatRequest_ModerationAction ModerateChatRequest_ModerationAction_ModerationAction_MAX = static_cast<ModerateChatRequest_ModerationAction>(4);
constexpr int ModerateChatRequest_ModerationAction_ModerationAction_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
ModerateChatRequest_ModerationAction_descriptor();
template <typename T>
const std::string& ModerateChatRequest_ModerationAction_Name(T value) {
  static_assert(std::is_same<T, ModerateChatRequest_ModerationAction>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ModerationAction_Name().");
  return ModerateChatRequest_ModerationAction_Name(static_cast<ModerateChatRequest_ModerationAction>(value));
}
template <>
inline const std::string& ModerateChatRequest_ModerationAction_Name(ModerateChatRequest_ModerationAction value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ModerateChatRequest_ModerationAction_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool ModerateChatRequest_ModerationAction_Parse(absl::string_view name, ModerateChatRequest_ModerationAction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ModerateChatRequest_ModerationAction>(
      ModerateChatRequest_ModerationAction_descriptor(), name, value);
}
enum ChatType : int {
  CHAT_TYPE_NORMAL = 0,
  CHAT_TYPE_WHISPER = 1,
  CHAT_TYPE_SYSTEM = 2,
  CHAT_TYPE_ANNOUNCEMENT = 3,
  CHAT_TYPE_GAME_EVENT = 4,
  CHAT_TYPE_EMOTE = 5,
  CHAT_TYPE_TEAM = 6,
  ChatType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ChatType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ChatType_IsValid(int value);
extern const uint32_t ChatType_internal_data_[];
constexpr ChatType ChatType_MIN = static_cast<ChatType>(0);
constexpr ChatType ChatType_MAX = static_cast<ChatType>(6);
constexpr int ChatType_ARRAYSIZE = 6 + 1;
const ::google::protobuf::EnumDescriptor*
ChatType_descriptor();
template <typename T>
const std::string& ChatType_Name(T value) {
  static_assert(std::is_same<T, ChatType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ChatType_Name().");
  return ChatType_Name(static_cast<ChatType>(value));
}
template <>
inline const std::string& ChatType_Name(ChatType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ChatType_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool ChatType_Parse(absl::string_view name, ChatType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChatType>(
      ChatType_descriptor(), name, value);
}
enum ChatScope : int {
  CHAT_SCOPE_GLOBAL = 0,
  CHAT_SCOPE_ROOM = 1,
  CHAT_SCOPE_PRIVATE = 2,
  CHAT_SCOPE_TEAM = 3,
  CHAT_SCOPE_SPECTATOR = 4,
  ChatScope_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ChatScope_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ChatScope_IsValid(int value);
extern const uint32_t ChatScope_internal_data_[];
constexpr ChatScope ChatScope_MIN = static_cast<ChatScope>(0);
constexpr ChatScope ChatScope_MAX = static_cast<ChatScope>(4);
constexpr int ChatScope_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
ChatScope_descriptor();
template <typename T>
const std::string& ChatScope_Name(T value) {
  static_assert(std::is_same<T, ChatScope>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ChatScope_Name().");
  return ChatScope_Name(static_cast<ChatScope>(value));
}
template <>
inline const std::string& ChatScope_Name(ChatScope value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ChatScope_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool ChatScope_Parse(absl::string_view name, ChatScope* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChatScope>(
      ChatScope_descriptor(), name, value);
}
enum MessageStatus : int {
  MESSAGE_STATUS_SENT = 0,
  MESSAGE_STATUS_DELIVERED = 1,
  MESSAGE_STATUS_READ = 2,
  MESSAGE_STATUS_FAILED = 3,
  MESSAGE_STATUS_BLOCKED = 4,
  MESSAGE_STATUS_MODERATED = 5,
  MessageStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MessageStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MessageStatus_IsValid(int value);
extern const uint32_t MessageStatus_internal_data_[];
constexpr MessageStatus MessageStatus_MIN = static_cast<MessageStatus>(0);
constexpr MessageStatus MessageStatus_MAX = static_cast<MessageStatus>(5);
constexpr int MessageStatus_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
MessageStatus_descriptor();
template <typename T>
const std::string& MessageStatus_Name(T value) {
  static_assert(std::is_same<T, MessageStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MessageStatus_Name().");
  return MessageStatus_Name(static_cast<MessageStatus>(value));
}
template <>
inline const std::string& MessageStatus_Name(MessageStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MessageStatus_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool MessageStatus_Parse(absl::string_view name, MessageStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageStatus>(
      MessageStatus_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class WhisperMessage final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.WhisperMessage) */ {
 public:
  inline WhisperMessage() : WhisperMessage(nullptr) {}
  ~WhisperMessage() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(WhisperMessage* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(WhisperMessage));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR WhisperMessage(
      ::google::protobuf::internal::ConstantInitialized);

  inline WhisperMessage(const WhisperMessage& from) : WhisperMessage(nullptr, from) {}
  inline WhisperMessage(WhisperMessage&& from) noexcept
      : WhisperMessage(nullptr, std::move(from)) {}
  inline WhisperMessage& operator=(const WhisperMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline WhisperMessage& operator=(WhisperMessage&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WhisperMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const WhisperMessage* internal_default_instance() {
    return reinterpret_cast<const WhisperMessage*>(
        &_WhisperMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(WhisperMessage& a, WhisperMessage& b) { a.Swap(&b); }
  inline void Swap(WhisperMessage* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WhisperMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WhisperMessage* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<WhisperMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WhisperMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const WhisperMessage& from) { WhisperMessage::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(WhisperMessage* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.WhisperMessage"; }

 protected:
  explicit WhisperMessage(::google::protobuf::Arena* arena);
  WhisperMessage(::google::protobuf::Arena* arena, const WhisperMessage& from);
  WhisperMessage(::google::protobuf::Arena* arena, WhisperMessage&& from) noexcept
      : WhisperMessage(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTargetUsernameFieldNumber = 1,
    kContentFieldNumber = 2,
    kRequestReadReceiptFieldNumber = 3,
  };
  // string target_username = 1;
  void clear_target_username() ;
  const std::string& target_username() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_target_username(Arg_&& arg, Args_... args);
  std::string* mutable_target_username();
  PROTOBUF_NODISCARD std::string* release_target_username();
  void set_allocated_target_username(std::string* value);

  private:
  const std::string& _internal_target_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_username(
      const std::string& value);
  std::string* _internal_mutable_target_username();

  public:
  // string content = 2;
  void clear_content() ;
  const std::string& content() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content(Arg_&& arg, Args_... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* value);

  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(
      const std::string& value);
  std::string* _internal_mutable_content();

  public:
  // bool request_read_receipt = 3;
  void clear_request_read_receipt() ;
  bool request_read_receipt() const;
  void set_request_read_receipt(bool value);

  private:
  bool _internal_request_read_receipt() const;
  void _internal_set_request_read_receipt(bool value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.WhisperMessage)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      52, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const WhisperMessage& from_msg);
    ::google::protobuf::internal::ArenaStringPtr target_username_;
    ::google::protobuf::internal::ArenaStringPtr content_;
    bool request_read_receipt_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class SystemMessage_ParametersEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  SystemMessage_ParametersEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SystemMessage_ParametersEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit SystemMessage_ParametersEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const SystemMessage_ParametersEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const SystemMessage_ParametersEntry_DoNotUse*>(
        &_SystemMessage_ParametersEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_chat_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      53, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class SendChatRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.SendChatRequest) */ {
 public:
  inline SendChatRequest() : SendChatRequest(nullptr) {}
  ~SendChatRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SendChatRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SendChatRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SendChatRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline SendChatRequest(const SendChatRequest& from) : SendChatRequest(nullptr, from) {}
  inline SendChatRequest(SendChatRequest&& from) noexcept
      : SendChatRequest(nullptr, std::move(from)) {}
  inline SendChatRequest& operator=(const SendChatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendChatRequest& operator=(SendChatRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendChatRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendChatRequest* internal_default_instance() {
    return reinterpret_cast<const SendChatRequest*>(
        &_SendChatRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(SendChatRequest& a, SendChatRequest& b) { a.Swap(&b); }
  inline void Swap(SendChatRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendChatRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendChatRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SendChatRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SendChatRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SendChatRequest& from) { SendChatRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SendChatRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.SendChatRequest"; }

 protected:
  explicit SendChatRequest(::google::protobuf::Arena* arena);
  SendChatRequest(::google::protobuf::Arena* arena, const SendChatRequest& from);
  SendChatRequest(::google::protobuf::Arena* arena, SendChatRequest&& from) noexcept
      : SendChatRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAttachmentsFieldNumber = 7,
    kContentFieldNumber = 3,
    kTargetUsernameFieldNumber = 5,
    kReplyToMessageIdFieldNumber = 6,
    kClientMessageIdFieldNumber = 9,
    kTypeFieldNumber = 1,
    kScopeFieldNumber = 2,
    kRoomIdFieldNumber = 4,
    kSilentFieldNumber = 8,
  };
  // repeated string attachments = 7;
  int attachments_size() const;
  private:
  int _internal_attachments_size() const;

  public:
  void clear_attachments() ;
  const std::string& attachments(int index) const;
  std::string* mutable_attachments(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_attachments(int index, Arg_&& value, Args_... args);
  std::string* add_attachments();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_attachments(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& attachments() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_attachments();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_attachments() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_attachments();

  public:
  // string content = 3;
  void clear_content() ;
  const std::string& content() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content(Arg_&& arg, Args_... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* value);

  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(
      const std::string& value);
  std::string* _internal_mutable_content();

  public:
  // string target_username = 5;
  void clear_target_username() ;
  const std::string& target_username() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_target_username(Arg_&& arg, Args_... args);
  std::string* mutable_target_username();
  PROTOBUF_NODISCARD std::string* release_target_username();
  void set_allocated_target_username(std::string* value);

  private:
  const std::string& _internal_target_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_username(
      const std::string& value);
  std::string* _internal_mutable_target_username();

  public:
  // string reply_to_message_id = 6;
  void clear_reply_to_message_id() ;
  const std::string& reply_to_message_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reply_to_message_id(Arg_&& arg, Args_... args);
  std::string* mutable_reply_to_message_id();
  PROTOBUF_NODISCARD std::string* release_reply_to_message_id();
  void set_allocated_reply_to_message_id(std::string* value);

  private:
  const std::string& _internal_reply_to_message_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reply_to_message_id(
      const std::string& value);
  std::string* _internal_mutable_reply_to_message_id();

  public:
  // string client_message_id = 9;
  void clear_client_message_id() ;
  const std::string& client_message_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_client_message_id(Arg_&& arg, Args_... args);
  std::string* mutable_client_message_id();
  PROTOBUF_NODISCARD std::string* release_client_message_id();
  void set_allocated_client_message_id(std::string* value);

  private:
  const std::string& _internal_client_message_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_message_id(
      const std::string& value);
  std::string* _internal_mutable_client_message_id();

  public:
  // .blokus.ChatType type = 1;
  void clear_type() ;
  ::blokus::ChatType type() const;
  void set_type(::blokus::ChatType value);

  private:
  ::blokus::ChatType _internal_type() const;
  void _internal_set_type(::blokus::ChatType value);

  public:
  // .blokus.ChatScope scope = 2;
  void clear_scope() ;
  ::blokus::ChatScope scope() const;
  void set_scope(::blokus::ChatScope value);

  private:
  ::blokus::ChatScope _internal_scope() const;
  void _internal_set_scope(::blokus::ChatScope value);

  public:
  // int32 room_id = 4;
  void clear_room_id() ;
  ::int32_t room_id() const;
  void set_room_id(::int32_t value);

  private:
  ::int32_t _internal_room_id() const;
  void _internal_set_room_id(::int32_t value);

  public:
  // bool silent = 8;
  void clear_silent() ;
  bool silent() const;
  void set_silent(bool value);

  private:
  bool _internal_silent() const;
  void _internal_set_silent(bool value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.SendChatRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 0,
      108, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SendChatRequest& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> attachments_;
    ::google::protobuf::internal::ArenaStringPtr content_;
    ::google::protobuf::internal::ArenaStringPtr target_username_;
    ::google::protobuf::internal::ArenaStringPtr reply_to_message_id_;
    ::google::protobuf::internal::ArenaStringPtr client_message_id_;
    int type_;
    int scope_;
    ::int32_t room_id_;
    bool silent_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class RoomChatSettings final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.RoomChatSettings) */ {
 public:
  inline RoomChatSettings() : RoomChatSettings(nullptr) {}
  ~RoomChatSettings() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RoomChatSettings* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RoomChatSettings));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RoomChatSettings(
      ::google::protobuf::internal::ConstantInitialized);

  inline RoomChatSettings(const RoomChatSettings& from) : RoomChatSettings(nullptr, from) {}
  inline RoomChatSettings(RoomChatSettings&& from) noexcept
      : RoomChatSettings(nullptr, std::move(from)) {}
  inline RoomChatSettings& operator=(const RoomChatSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomChatSettings& operator=(RoomChatSettings&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomChatSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoomChatSettings* internal_default_instance() {
    return reinterpret_cast<const RoomChatSettings*>(
        &_RoomChatSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 19;
  friend void swap(RoomChatSettings& a, RoomChatSettings& b) { a.Swap(&b); }
  inline void Swap(RoomChatSettings* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomChatSettings* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoomChatSettings* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RoomChatSettings>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RoomChatSettings& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RoomChatSettings& from) { RoomChatSettings::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RoomChatSettings* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.RoomChatSettings"; }

 protected:
  explicit RoomChatSettings(::google::protobuf::Arena* arena);
  RoomChatSettings(::google::protobuf::Arena* arena, const RoomChatSettings& from);
  RoomChatSettings(::google::protobuf::Arena* arena, RoomChatSettings&& from) noexcept
      : RoomChatSettings(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kChatModeratorsFieldNumber = 9,
    kBannedUsersFieldNumber = 10,
    kWelcomeMessageFieldNumber = 11,
    kRoomIdFieldNumber = 1,
    kChatEnabledFieldNumber = 2,
    kSpectatorChatEnabledFieldNumber = 3,
    kTeamChatEnabledFieldNumber = 4,
    kLinksAllowedFieldNumber = 7,
    kMessageRateLimitFieldNumber = 5,
    kMaxMessageLengthFieldNumber = 6,
    kEmotesAllowedFieldNumber = 8,
  };
  // repeated string chat_moderators = 9;
  int chat_moderators_size() const;
  private:
  int _internal_chat_moderators_size() const;

  public:
  void clear_chat_moderators() ;
  const std::string& chat_moderators(int index) const;
  std::string* mutable_chat_moderators(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_chat_moderators(int index, Arg_&& value, Args_... args);
  std::string* add_chat_moderators();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_chat_moderators(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& chat_moderators() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_chat_moderators();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_chat_moderators() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_chat_moderators();

  public:
  // repeated string banned_users = 10;
  int banned_users_size() const;
  private:
  int _internal_banned_users_size() const;

  public:
  void clear_banned_users() ;
  const std::string& banned_users(int index) const;
  std::string* mutable_banned_users(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_banned_users(int index, Arg_&& value, Args_... args);
  std::string* add_banned_users();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_banned_users(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& banned_users() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_banned_users();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_banned_users() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_banned_users();

  public:
  // string welcome_message = 11;
  void clear_welcome_message() ;
  const std::string& welcome_message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_welcome_message(Arg_&& arg, Args_... args);
  std::string* mutable_welcome_message();
  PROTOBUF_NODISCARD std::string* release_welcome_message();
  void set_allocated_welcome_message(std::string* value);

  private:
  const std::string& _internal_welcome_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_welcome_message(
      const std::string& value);
  std::string* _internal_mutable_welcome_message();

  public:
  // int32 room_id = 1;
  void clear_room_id() ;
  ::int32_t room_id() const;
  void set_room_id(::int32_t value);

  private:
  ::int32_t _internal_room_id() const;
  void _internal_set_room_id(::int32_t value);

  public:
  // bool chat_enabled = 2;
  void clear_chat_enabled() ;
  bool chat_enabled() const;
  void set_chat_enabled(bool value);

  private:
  bool _internal_chat_enabled() const;
  void _internal_set_chat_enabled(bool value);

  public:
  // bool spectator_chat_enabled = 3;
  void clear_spectator_chat_enabled() ;
  bool spectator_chat_enabled() const;
  void set_spectator_chat_enabled(bool value);

  private:
  bool _internal_spectator_chat_enabled() const;
  void _internal_set_spectator_chat_enabled(bool value);

  public:
  // bool team_chat_enabled = 4;
  void clear_team_chat_enabled() ;
  bool team_chat_enabled() const;
  void set_team_chat_enabled(bool value);

  private:
  bool _internal_team_chat_enabled() const;
  void _internal_set_team_chat_enabled(bool value);

  public:
  // bool links_allowed = 7;
  void clear_links_allowed() ;
  bool links_allowed() const;
  void set_links_allowed(bool value);

  private:
  bool _internal_links_allowed() const;
  void _internal_set_links_allowed(bool value);

  public:
  // int32 message_rate_limit = 5;
  void clear_message_rate_limit() ;
  ::int32_t message_rate_limit() const;
  void set_message_rate_limit(::int32_t value);

  private:
  ::int32_t _internal_message_rate_limit() const;
  void _internal_set_message_rate_limit(::int32_t value);

  public:
  // int32 max_message_length = 6;
  void clear_max_message_length() ;
  ::int32_t max_message_length() const;
  void set_max_message_length(::int32_t value);

  private:
  ::int32_t _internal_max_message_length() const;
  void _internal_set_max_message_length(::int32_t value);

  public:
  // bool emotes_allowed = 8;
  void clear_emotes_allowed() ;
  bool emotes_allowed() const;
  void set_emotes_allowed(bool value);

  private:
  bool _internal_emotes_allowed() const;
  void _internal_set_emotes_allowed(bool value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.RoomChatSettings)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 11, 0,
      82, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RoomChatSettings& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> chat_moderators_;
    ::google::protobuf::RepeatedPtrField<std::string> banned_users_;
    ::google::protobuf::internal::ArenaStringPtr welcome_message_;
    ::int32_t room_id_;
    bool chat_enabled_;
    bool spectator_chat_enabled_;
    bool team_chat_enabled_;
    bool links_allowed_;
    ::int32_t message_rate_limit_;
    ::int32_t max_message_length_;
    bool emotes_allowed_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class ModerateChatRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.ModerateChatRequest) */ {
 public:
  inline ModerateChatRequest() : ModerateChatRequest(nullptr) {}
  ~ModerateChatRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ModerateChatRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ModerateChatRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ModerateChatRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline ModerateChatRequest(const ModerateChatRequest& from) : ModerateChatRequest(nullptr, from) {}
  inline ModerateChatRequest(ModerateChatRequest&& from) noexcept
      : ModerateChatRequest(nullptr, std::move(from)) {}
  inline ModerateChatRequest& operator=(const ModerateChatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModerateChatRequest& operator=(ModerateChatRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModerateChatRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModerateChatRequest* internal_default_instance() {
    return reinterpret_cast<const ModerateChatRequest*>(
        &_ModerateChatRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(ModerateChatRequest& a, ModerateChatRequest& b) { a.Swap(&b); }
  inline void Swap(ModerateChatRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModerateChatRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModerateChatRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ModerateChatRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ModerateChatRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ModerateChatRequest& from) { ModerateChatRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ModerateChatRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.ModerateChatRequest"; }

 protected:
  explicit ModerateChatRequest(::google::protobuf::Arena* arena);
  ModerateChatRequest(::google::protobuf::Arena* arena, const ModerateChatRequest& from);
  ModerateChatRequest(::google::protobuf::Arena* arena, ModerateChatRequest&& from) noexcept
      : ModerateChatRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using ModerationAction = ModerateChatRequest_ModerationAction;
  static constexpr ModerationAction DELETE_MESSAGE = ModerateChatRequest_ModerationAction_DELETE_MESSAGE;
  static constexpr ModerationAction EDIT_MESSAGE = ModerateChatRequest_ModerationAction_EDIT_MESSAGE;
  static constexpr ModerationAction MUTE_USER = ModerateChatRequest_ModerationAction_MUTE_USER;
  static constexpr ModerationAction WARN_USER = ModerateChatRequest_ModerationAction_WARN_USER;
  static constexpr ModerationAction BAN_USER = ModerateChatRequest_ModerationAction_BAN_USER;
  static inline bool ModerationAction_IsValid(int value) {
    return ModerateChatRequest_ModerationAction_IsValid(value);
  }
  static constexpr ModerationAction ModerationAction_MIN = ModerateChatRequest_ModerationAction_ModerationAction_MIN;
  static constexpr ModerationAction ModerationAction_MAX = ModerateChatRequest_ModerationAction_ModerationAction_MAX;
  static constexpr int ModerationAction_ARRAYSIZE = ModerateChatRequest_ModerationAction_ModerationAction_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* ModerationAction_descriptor() {
    return ModerateChatRequest_ModerationAction_descriptor();
  }
  template <typename T>
  static inline const std::string& ModerationAction_Name(T value) {
    return ModerateChatRequest_ModerationAction_Name(value);
  }
  static inline bool ModerationAction_Parse(absl::string_view name, ModerationAction* value) {
    return ModerateChatRequest_ModerationAction_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kMessageIdFieldNumber = 1,
    kReasonFieldNumber = 3,
    kNewContentFieldNumber = 5,
    kActionFieldNumber = 2,
    kDurationMinutesFieldNumber = 4,
  };
  // string message_id = 1;
  void clear_message_id() ;
  const std::string& message_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message_id(Arg_&& arg, Args_... args);
  std::string* mutable_message_id();
  PROTOBUF_NODISCARD std::string* release_message_id();
  void set_allocated_message_id(std::string* value);

  private:
  const std::string& _internal_message_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message_id(
      const std::string& value);
  std::string* _internal_mutable_message_id();

  public:
  // string reason = 3;
  void clear_reason() ;
  const std::string& reason() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reason(Arg_&& arg, Args_... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* value);

  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(
      const std::string& value);
  std::string* _internal_mutable_reason();

  public:
  // string new_content = 5;
  void clear_new_content() ;
  const std::string& new_content() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_new_content(Arg_&& arg, Args_... args);
  std::string* mutable_new_content();
  PROTOBUF_NODISCARD std::string* release_new_content();
  void set_allocated_new_content(std::string* value);

  private:
  const std::string& _internal_new_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_new_content(
      const std::string& value);
  std::string* _internal_mutable_new_content();

  public:
  // .blokus.ModerateChatRequest.ModerationAction action = 2;
  void clear_action() ;
  ::blokus::ModerateChatRequest_ModerationAction action() const;
  void set_action(::blokus::ModerateChatRequest_ModerationAction value);

  private:
  ::blokus::ModerateChatRequest_ModerationAction _internal_action() const;
  void _internal_set_action(::blokus::ModerateChatRequest_ModerationAction value);

  public:
  // int32 duration_minutes = 4;
  void clear_duration_minutes() ;
  ::int32_t duration_minutes() const;
  void set_duration_minutes(::int32_t value);

  private:
  ::int32_t _internal_duration_minutes() const;
  void _internal_set_duration_minutes(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.ModerateChatRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      62, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ModerateChatRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr message_id_;
    ::google::protobuf::internal::ArenaStringPtr reason_;
    ::google::protobuf::internal::ArenaStringPtr new_content_;
    int action_;
    ::int32_t duration_minutes_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class GetEmotePacksRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.GetEmotePacksRequest) */ {
 public:
  inline GetEmotePacksRequest() : GetEmotePacksRequest(nullptr) {}
  ~GetEmotePacksRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetEmotePacksRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetEmotePacksRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetEmotePacksRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetEmotePacksRequest(const GetEmotePacksRequest& from) : GetEmotePacksRequest(nullptr, from) {}
  inline GetEmotePacksRequest(GetEmotePacksRequest&& from) noexcept
      : GetEmotePacksRequest(nullptr, std::move(from)) {}
  inline GetEmotePacksRequest& operator=(const GetEmotePacksRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEmotePacksRequest& operator=(GetEmotePacksRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetEmotePacksRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetEmotePacksRequest* internal_default_instance() {
    return reinterpret_cast<const GetEmotePacksRequest*>(
        &_GetEmotePacksRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 22;
  friend void swap(GetEmotePacksRequest& a, GetEmotePacksRequest& b) { a.Swap(&b); }
  inline void Swap(GetEmotePacksRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEmotePacksRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetEmotePacksRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetEmotePacksRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetEmotePacksRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetEmotePacksRequest& from) { GetEmotePacksRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetEmotePacksRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.GetEmotePacksRequest"; }

 protected:
  explicit GetEmotePacksRequest(::google::protobuf::Arena* arena);
  GetEmotePacksRequest(::google::protobuf::Arena* arena, const GetEmotePacksRequest& from);
  GetEmotePacksRequest(::google::protobuf::Arena* arena, GetEmotePacksRequest&& from) noexcept
      : GetEmotePacksRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIncludeLockedFieldNumber = 1,
  };
  // bool include_locked = 1;
  void clear_include_locked() ;
  bool include_locked() const;
  void set_include_locked(bool value);

  private:
  bool _internal_include_locked() const;
  void _internal_set_include_locked(bool value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.GetEmotePacksRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetEmotePacksRequest& from_msg);
    bool include_locked_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class EmoteInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.EmoteInfo) */ {
 public:
  inline EmoteInfo() : EmoteInfo(nullptr) {}
  ~EmoteInfo() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(EmoteInfo* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(EmoteInfo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EmoteInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline EmoteInfo(const EmoteInfo& from) : EmoteInfo(nullptr, from) {}
  inline EmoteInfo(EmoteInfo&& from) noexcept
      : EmoteInfo(nullptr, std::move(from)) {}
  inline EmoteInfo& operator=(const EmoteInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmoteInfo& operator=(EmoteInfo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmoteInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmoteInfo* internal_default_instance() {
    return reinterpret_cast<const EmoteInfo*>(
        &_EmoteInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 21;
  friend void swap(EmoteInfo& a, EmoteInfo& b) { a.Swap(&b); }
  inline void Swap(EmoteInfo* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmoteInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmoteInfo* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<EmoteInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EmoteInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EmoteInfo& from) { EmoteInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(EmoteInfo* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.EmoteInfo"; }

 protected:
  explicit EmoteInfo(::google::protobuf::Arena* arena);
  EmoteInfo(::google::protobuf::Arena* arena, const EmoteInfo& from);
  EmoteInfo(::google::protobuf::Arena* arena, EmoteInfo&& from) noexcept
      : EmoteInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTagsFieldNumber = 4,
    kEmoteIdFieldNumber = 1,
    kEmoteNameFieldNumber = 2,
    kEmoteUrlFieldNumber = 3,
    kIsAnimatedFieldNumber = 5,
  };
  // repeated string tags = 4;
  int tags_size() const;
  private:
  int _internal_tags_size() const;

  public:
  void clear_tags() ;
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tags(int index, Arg_&& value, Args_... args);
  std::string* add_tags();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_tags(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& tags() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_tags();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_tags() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_tags();

  public:
  // string emote_id = 1;
  void clear_emote_id() ;
  const std::string& emote_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_emote_id(Arg_&& arg, Args_... args);
  std::string* mutable_emote_id();
  PROTOBUF_NODISCARD std::string* release_emote_id();
  void set_allocated_emote_id(std::string* value);

  private:
  const std::string& _internal_emote_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_emote_id(
      const std::string& value);
  std::string* _internal_mutable_emote_id();

  public:
  // string emote_name = 2;
  void clear_emote_name() ;
  const std::string& emote_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_emote_name(Arg_&& arg, Args_... args);
  std::string* mutable_emote_name();
  PROTOBUF_NODISCARD std::string* release_emote_name();
  void set_allocated_emote_name(std::string* value);

  private:
  const std::string& _internal_emote_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_emote_name(
      const std::string& value);
  std::string* _internal_mutable_emote_name();

  public:
  // string emote_url = 3;
  void clear_emote_url() ;
  const std::string& emote_url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_emote_url(Arg_&& arg, Args_... args);
  std::string* mutable_emote_url();
  PROTOBUF_NODISCARD std::string* release_emote_url();
  void set_allocated_emote_url(std::string* value);

  private:
  const std::string& _internal_emote_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_emote_url(
      const std::string& value);
  std::string* _internal_mutable_emote_url();

  public:
  // bool is_animated = 5;
  void clear_is_animated() ;
  bool is_animated() const;
  void set_is_animated(bool value);

  private:
  bool _internal_is_animated() const;
  void _internal_set_is_animated(bool value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.EmoteInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      56, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EmoteInfo& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> tags_;
    ::google::protobuf::internal::ArenaStringPtr emote_id_;
    ::google::protobuf::internal::ArenaStringPtr emote_name_;
    ::google::protobuf::internal::ArenaStringPtr emote_url_;
    bool is_animated_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class ChatSettings final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.ChatSettings) */ {
 public:
  inline ChatSettings() : ChatSettings(nullptr) {}
  ~ChatSettings() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ChatSettings* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ChatSettings));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ChatSettings(
      ::google::protobuf::internal::ConstantInitialized);

  inline ChatSettings(const ChatSettings& from) : ChatSettings(nullptr, from) {}
  inline ChatSettings(ChatSettings&& from) noexcept
      : ChatSettings(nullptr, std::move(from)) {}
  inline ChatSettings& operator=(const ChatSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatSettings& operator=(ChatSettings&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatSettings* internal_default_instance() {
    return reinterpret_cast<const ChatSettings*>(
        &_ChatSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;
  friend void swap(ChatSettings& a, ChatSettings& b) { a.Swap(&b); }
  inline void Swap(ChatSettings* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatSettings* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatSettings* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ChatSettings>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ChatSettings& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ChatSettings& from) { ChatSettings::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ChatSettings* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.ChatSettings"; }

 protected:
  explicit ChatSettings(::google::protobuf::Arena* arena);
  ChatSettings(::google::protobuf::Arena* arena, const ChatSettings& from);
  ChatSettings(::google::protobuf::Arena* arena, ChatSettings&& from) noexcept
      : ChatSettings(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBlockedUsersFieldNumber = 8,
    kMutedRoomsFieldNumber = 9,
    kChatFontSizeFieldNumber = 16,
    kGlobalChatEnabledFieldNumber = 1,
    kWhispersEnabledFieldNumber = 2,
    kSystemMessagesEnabledFieldNumber = 3,
    kEmotesEnabledFieldNumber = 4,
    kMentionsEnabledFieldNumber = 5,
    kProfanityFilterFieldNumber = 6,
    kSpamFilterFieldNumber = 7,
    kDesktopNotificationsFieldNumber = 10,
    kSoundNotificationsFieldNumber = 11,
    kMentionNotificationsFieldNumber = 12,
    kShowTimestampsFieldNumber = 13,
    kShowUserColorsFieldNumber = 14,
    kMaxMessageLengthFieldNumber = 15,
  };
  // repeated string blocked_users = 8;
  int blocked_users_size() const;
  private:
  int _internal_blocked_users_size() const;

  public:
  void clear_blocked_users() ;
  const std::string& blocked_users(int index) const;
  std::string* mutable_blocked_users(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_blocked_users(int index, Arg_&& value, Args_... args);
  std::string* add_blocked_users();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_blocked_users(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& blocked_users() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_blocked_users();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_blocked_users() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_blocked_users();

  public:
  // repeated string muted_rooms = 9;
  int muted_rooms_size() const;
  private:
  int _internal_muted_rooms_size() const;

  public:
  void clear_muted_rooms() ;
  const std::string& muted_rooms(int index) const;
  std::string* mutable_muted_rooms(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_muted_rooms(int index, Arg_&& value, Args_... args);
  std::string* add_muted_rooms();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_muted_rooms(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& muted_rooms() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_muted_rooms();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_muted_rooms() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_muted_rooms();

  public:
  // string chat_font_size = 16;
  void clear_chat_font_size() ;
  const std::string& chat_font_size() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_chat_font_size(Arg_&& arg, Args_... args);
  std::string* mutable_chat_font_size();
  PROTOBUF_NODISCARD std::string* release_chat_font_size();
  void set_allocated_chat_font_size(std::string* value);

  private:
  const std::string& _internal_chat_font_size() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chat_font_size(
      const std::string& value);
  std::string* _internal_mutable_chat_font_size();

  public:
  // bool global_chat_enabled = 1;
  void clear_global_chat_enabled() ;
  bool global_chat_enabled() const;
  void set_global_chat_enabled(bool value);

  private:
  bool _internal_global_chat_enabled() const;
  void _internal_set_global_chat_enabled(bool value);

  public:
  // bool whispers_enabled = 2;
  void clear_whispers_enabled() ;
  bool whispers_enabled() const;
  void set_whispers_enabled(bool value);

  private:
  bool _internal_whispers_enabled() const;
  void _internal_set_whispers_enabled(bool value);

  public:
  // bool system_messages_enabled = 3;
  void clear_system_messages_enabled() ;
  bool system_messages_enabled() const;
  void set_system_messages_enabled(bool value);

  private:
  bool _internal_system_messages_enabled() const;
  void _internal_set_system_messages_enabled(bool value);

  public:
  // bool emotes_enabled = 4;
  void clear_emotes_enabled() ;
  bool emotes_enabled() const;
  void set_emotes_enabled(bool value);

  private:
  bool _internal_emotes_enabled() const;
  void _internal_set_emotes_enabled(bool value);

  public:
  // bool mentions_enabled = 5;
  void clear_mentions_enabled() ;
  bool mentions_enabled() const;
  void set_mentions_enabled(bool value);

  private:
  bool _internal_mentions_enabled() const;
  void _internal_set_mentions_enabled(bool value);

  public:
  // bool profanity_filter = 6;
  void clear_profanity_filter() ;
  bool profanity_filter() const;
  void set_profanity_filter(bool value);

  private:
  bool _internal_profanity_filter() const;
  void _internal_set_profanity_filter(bool value);

  public:
  // bool spam_filter = 7;
  void clear_spam_filter() ;
  bool spam_filter() const;
  void set_spam_filter(bool value);

  private:
  bool _internal_spam_filter() const;
  void _internal_set_spam_filter(bool value);

  public:
  // bool desktop_notifications = 10;
  void clear_desktop_notifications() ;
  bool desktop_notifications() const;
  void set_desktop_notifications(bool value);

  private:
  bool _internal_desktop_notifications() const;
  void _internal_set_desktop_notifications(bool value);

  public:
  // bool sound_notifications = 11;
  void clear_sound_notifications() ;
  bool sound_notifications() const;
  void set_sound_notifications(bool value);

  private:
  bool _internal_sound_notifications() const;
  void _internal_set_sound_notifications(bool value);

  public:
  // bool mention_notifications = 12;
  void clear_mention_notifications() ;
  bool mention_notifications() const;
  void set_mention_notifications(bool value);

  private:
  bool _internal_mention_notifications() const;
  void _internal_set_mention_notifications(bool value);

  public:
  // bool show_timestamps = 13;
  void clear_show_timestamps() ;
  bool show_timestamps() const;
  void set_show_timestamps(bool value);

  private:
  bool _internal_show_timestamps() const;
  void _internal_set_show_timestamps(bool value);

  public:
  // bool show_user_colors = 14;
  void clear_show_user_colors() ;
  bool show_user_colors() const;
  void set_show_user_colors(bool value);

  private:
  bool _internal_show_user_colors() const;
  void _internal_set_show_user_colors(bool value);

  public:
  // int32 max_message_length = 15;
  void clear_max_message_length() ;
  ::int32_t max_message_length() const;
  void set_max_message_length(::int32_t value);

  private:
  ::int32_t _internal_max_message_length() const;
  void _internal_set_max_message_length(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.ChatSettings)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 16, 0,
      82, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ChatSettings& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> blocked_users_;
    ::google::protobuf::RepeatedPtrField<std::string> muted_rooms_;
    ::google::protobuf::internal::ArenaStringPtr chat_font_size_;
    bool global_chat_enabled_;
    bool whispers_enabled_;
    bool system_messages_enabled_;
    bool emotes_enabled_;
    bool mentions_enabled_;
    bool profanity_filter_;
    bool spam_filter_;
    bool desktop_notifications_;
    bool sound_notifications_;
    bool mention_notifications_;
    bool show_timestamps_;
    bool show_user_colors_;
    ::int32_t max_message_length_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class ChatMessage_MetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  ChatMessage_MetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ChatMessage_MetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit ChatMessage_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const ChatMessage_MetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const ChatMessage_MetadataEntry_DoNotUse*>(
        &_ChatMessage_MetadataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_chat_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      49, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class ChatEmote final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.ChatEmote) */ {
 public:
  inline ChatEmote() : ChatEmote(nullptr) {}
  ~ChatEmote() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ChatEmote* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ChatEmote));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ChatEmote(
      ::google::protobuf::internal::ConstantInitialized);

  inline ChatEmote(const ChatEmote& from) : ChatEmote(nullptr, from) {}
  inline ChatEmote(ChatEmote&& from) noexcept
      : ChatEmote(nullptr, std::move(from)) {}
  inline ChatEmote& operator=(const ChatEmote& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatEmote& operator=(ChatEmote&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatEmote& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatEmote* internal_default_instance() {
    return reinterpret_cast<const ChatEmote*>(
        &_ChatEmote_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(ChatEmote& a, ChatEmote& b) { a.Swap(&b); }
  inline void Swap(ChatEmote* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatEmote* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatEmote* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ChatEmote>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ChatEmote& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ChatEmote& from) { ChatEmote::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ChatEmote* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.ChatEmote"; }

 protected:
  explicit ChatEmote(::google::protobuf::Arena* arena);
  ChatEmote(::google::protobuf::Arena* arena, const ChatEmote& from);
  ChatEmote(::google::protobuf::Arena* arena, ChatEmote&& from) noexcept
      : ChatEmote(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEmoteIdFieldNumber = 1,
    kEmoteNameFieldNumber = 2,
    kEmoteUrlFieldNumber = 3,
    kStartPositionFieldNumber = 4,
    kEndPositionFieldNumber = 5,
  };
  // string emote_id = 1;
  void clear_emote_id() ;
  const std::string& emote_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_emote_id(Arg_&& arg, Args_... args);
  std::string* mutable_emote_id();
  PROTOBUF_NODISCARD std::string* release_emote_id();
  void set_allocated_emote_id(std::string* value);

  private:
  const std::string& _internal_emote_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_emote_id(
      const std::string& value);
  std::string* _internal_mutable_emote_id();

  public:
  // string emote_name = 2;
  void clear_emote_name() ;
  const std::string& emote_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_emote_name(Arg_&& arg, Args_... args);
  std::string* mutable_emote_name();
  PROTOBUF_NODISCARD std::string* release_emote_name();
  void set_allocated_emote_name(std::string* value);

  private:
  const std::string& _internal_emote_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_emote_name(
      const std::string& value);
  std::string* _internal_mutable_emote_name();

  public:
  // string emote_url = 3;
  void clear_emote_url() ;
  const std::string& emote_url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_emote_url(Arg_&& arg, Args_... args);
  std::string* mutable_emote_url();
  PROTOBUF_NODISCARD std::string* release_emote_url();
  void set_allocated_emote_url(std::string* value);

  private:
  const std::string& _internal_emote_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_emote_url(
      const std::string& value);
  std::string* _internal_mutable_emote_url();

  public:
  // int32 start_position = 4;
  void clear_start_position() ;
  ::int32_t start_position() const;
  void set_start_position(::int32_t value);

  private:
  ::int32_t _internal_start_position() const;
  void _internal_set_start_position(::int32_t value);

  public:
  // int32 end_position = 5;
  void clear_end_position() ;
  ::int32_t end_position() const;
  void set_end_position(::int32_t value);

  private:
  ::int32_t _internal_end_position() const;
  void _internal_set_end_position(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.ChatEmote)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      52, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ChatEmote& from_msg);
    ::google::protobuf::internal::ArenaStringPtr emote_id_;
    ::google::protobuf::internal::ArenaStringPtr emote_name_;
    ::google::protobuf::internal::ArenaStringPtr emote_url_;
    ::int32_t start_position_;
    ::int32_t end_position_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class UpdateChatSettingsRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.UpdateChatSettingsRequest) */ {
 public:
  inline UpdateChatSettingsRequest() : UpdateChatSettingsRequest(nullptr) {}
  ~UpdateChatSettingsRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(UpdateChatSettingsRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(UpdateChatSettingsRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateChatSettingsRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline UpdateChatSettingsRequest(const UpdateChatSettingsRequest& from) : UpdateChatSettingsRequest(nullptr, from) {}
  inline UpdateChatSettingsRequest(UpdateChatSettingsRequest&& from) noexcept
      : UpdateChatSettingsRequest(nullptr, std::move(from)) {}
  inline UpdateChatSettingsRequest& operator=(const UpdateChatSettingsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateChatSettingsRequest& operator=(UpdateChatSettingsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateChatSettingsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateChatSettingsRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateChatSettingsRequest*>(
        &_UpdateChatSettingsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 17;
  friend void swap(UpdateChatSettingsRequest& a, UpdateChatSettingsRequest& b) { a.Swap(&b); }
  inline void Swap(UpdateChatSettingsRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateChatSettingsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateChatSettingsRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<UpdateChatSettingsRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UpdateChatSettingsRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UpdateChatSettingsRequest& from) { UpdateChatSettingsRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(UpdateChatSettingsRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.UpdateChatSettingsRequest"; }

 protected:
  explicit UpdateChatSettingsRequest(::google::protobuf::Arena* arena);
  UpdateChatSettingsRequest(::google::protobuf::Arena* arena, const UpdateChatSettingsRequest& from);
  UpdateChatSettingsRequest(::google::protobuf::Arena* arena, UpdateChatSettingsRequest&& from) noexcept
      : UpdateChatSettingsRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSettingsFieldNumber = 1,
  };
  // .blokus.ChatSettings settings = 1;
  bool has_settings() const;
  void clear_settings() ;
  const ::blokus::ChatSettings& settings() const;
  PROTOBUF_NODISCARD ::blokus::ChatSettings* release_settings();
  ::blokus::ChatSettings* mutable_settings();
  void set_allocated_settings(::blokus::ChatSettings* value);
  void unsafe_arena_set_allocated_settings(::blokus::ChatSettings* value);
  ::blokus::ChatSettings* unsafe_arena_release_settings();

  private:
  const ::blokus::ChatSettings& _internal_settings() const;
  ::blokus::ChatSettings* _internal_mutable_settings();

  public:
  // @@protoc_insertion_point(class_scope:blokus.UpdateChatSettingsRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UpdateChatSettingsRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::blokus::ChatSettings* settings_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class SystemMessage final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.SystemMessage) */ {
 public:
  inline SystemMessage() : SystemMessage(nullptr) {}
  ~SystemMessage() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SystemMessage* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SystemMessage));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SystemMessage(
      ::google::protobuf::internal::ConstantInitialized);

  inline SystemMessage(const SystemMessage& from) : SystemMessage(nullptr, from) {}
  inline SystemMessage(SystemMessage&& from) noexcept
      : SystemMessage(nullptr, std::move(from)) {}
  inline SystemMessage& operator=(const SystemMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemMessage& operator=(SystemMessage&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SystemMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const SystemMessage* internal_default_instance() {
    return reinterpret_cast<const SystemMessage*>(
        &_SystemMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(SystemMessage& a, SystemMessage& b) { a.Swap(&b); }
  inline void Swap(SystemMessage* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SystemMessage* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SystemMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SystemMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SystemMessage& from) { SystemMessage::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SystemMessage* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.SystemMessage"; }

 protected:
  explicit SystemMessage(::google::protobuf::Arena* arena);
  SystemMessage(::google::protobuf::Arena* arena, const SystemMessage& from);
  SystemMessage(::google::protobuf::Arena* arena, SystemMessage&& from) noexcept
      : SystemMessage(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using SystemMessageType = SystemMessage_SystemMessageType;
  static constexpr SystemMessageType PLAYER_JOINED = SystemMessage_SystemMessageType_PLAYER_JOINED;
  static constexpr SystemMessageType PLAYER_LEFT = SystemMessage_SystemMessageType_PLAYER_LEFT;
  static constexpr SystemMessageType GAME_STARTED = SystemMessage_SystemMessageType_GAME_STARTED;
  static constexpr SystemMessageType GAME_ENDED = SystemMessage_SystemMessageType_GAME_ENDED;
  static constexpr SystemMessageType BLOCK_PLACED = SystemMessage_SystemMessageType_BLOCK_PLACED;
  static constexpr SystemMessageType TURN_CHANGED = SystemMessage_SystemMessageType_TURN_CHANGED;
  static constexpr SystemMessageType ACHIEVEMENT_UNLOCKED = SystemMessage_SystemMessageType_ACHIEVEMENT_UNLOCKED;
  static constexpr SystemMessageType LEVEL_UP = SystemMessage_SystemMessageType_LEVEL_UP;
  static constexpr SystemMessageType SERVER_ANNOUNCEMENT = SystemMessage_SystemMessageType_SERVER_ANNOUNCEMENT;
  static constexpr SystemMessageType MAINTENANCE_WARNING = SystemMessage_SystemMessageType_MAINTENANCE_WARNING;
  static constexpr SystemMessageType ROOM_CREATED = SystemMessage_SystemMessageType_ROOM_CREATED;
  static constexpr SystemMessageType ROOM_DISBANDED = SystemMessage_SystemMessageType_ROOM_DISBANDED;
  static inline bool SystemMessageType_IsValid(int value) {
    return SystemMessage_SystemMessageType_IsValid(value);
  }
  static constexpr SystemMessageType SystemMessageType_MIN = SystemMessage_SystemMessageType_SystemMessageType_MIN;
  static constexpr SystemMessageType SystemMessageType_MAX = SystemMessage_SystemMessageType_SystemMessageType_MAX;
  static constexpr int SystemMessageType_ARRAYSIZE = SystemMessage_SystemMessageType_SystemMessageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* SystemMessageType_descriptor() {
    return SystemMessage_SystemMessageType_descriptor();
  }
  template <typename T>
  static inline const std::string& SystemMessageType_Name(T value) {
    return SystemMessage_SystemMessageType_Name(value);
  }
  static inline bool SystemMessageType_Parse(absl::string_view name, SystemMessageType* value) {
    return SystemMessage_SystemMessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kParametersFieldNumber = 3,
    kMessageFieldNumber = 2,
    kIconFieldNumber = 6,
    kColorFieldNumber = 7,
    kSystemTypeFieldNumber = 1,
    kShowInChatFieldNumber = 4,
    kShowAsPopupFieldNumber = 5,
  };
  // map<string, string> parameters = 3;
  int parameters_size() const;
  private:
  int _internal_parameters_size() const;

  public:
  void clear_parameters() ;
  const ::google::protobuf::Map<std::string, std::string>& parameters() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_parameters();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_parameters() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_parameters();

  public:
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // string icon = 6;
  void clear_icon() ;
  const std::string& icon() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_icon(Arg_&& arg, Args_... args);
  std::string* mutable_icon();
  PROTOBUF_NODISCARD std::string* release_icon();
  void set_allocated_icon(std::string* value);

  private:
  const std::string& _internal_icon() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_icon(
      const std::string& value);
  std::string* _internal_mutable_icon();

  public:
  // string color = 7;
  void clear_color() ;
  const std::string& color() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_color(Arg_&& arg, Args_... args);
  std::string* mutable_color();
  PROTOBUF_NODISCARD std::string* release_color();
  void set_allocated_color(std::string* value);

  private:
  const std::string& _internal_color() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_color(
      const std::string& value);
  std::string* _internal_mutable_color();

  public:
  // .blokus.SystemMessage.SystemMessageType system_type = 1;
  void clear_system_type() ;
  ::blokus::SystemMessage_SystemMessageType system_type() const;
  void set_system_type(::blokus::SystemMessage_SystemMessageType value);

  private:
  ::blokus::SystemMessage_SystemMessageType _internal_system_type() const;
  void _internal_set_system_type(::blokus::SystemMessage_SystemMessageType value);

  public:
  // bool show_in_chat = 4;
  void clear_show_in_chat() ;
  bool show_in_chat() const;
  void set_show_in_chat(bool value);

  private:
  bool _internal_show_in_chat() const;
  void _internal_set_show_in_chat(bool value);

  public:
  // bool show_as_popup = 5;
  void clear_show_as_popup() ;
  bool show_as_popup() const;
  void set_show_as_popup(bool value);

  private:
  bool _internal_show_as_popup() const;
  void _internal_set_show_as_popup(bool value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.SystemMessage)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 1,
      55, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SystemMessage& from_msg);
    ::google::protobuf::internal::MapField<SystemMessage_ParametersEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        parameters_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::google::protobuf::internal::ArenaStringPtr icon_;
    ::google::protobuf::internal::ArenaStringPtr color_;
    int system_type_;
    bool show_in_chat_;
    bool show_as_popup_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class ReadReceiptNotification final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.ReadReceiptNotification) */ {
 public:
  inline ReadReceiptNotification() : ReadReceiptNotification(nullptr) {}
  ~ReadReceiptNotification() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ReadReceiptNotification* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ReadReceiptNotification));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ReadReceiptNotification(
      ::google::protobuf::internal::ConstantInitialized);

  inline ReadReceiptNotification(const ReadReceiptNotification& from) : ReadReceiptNotification(nullptr, from) {}
  inline ReadReceiptNotification(ReadReceiptNotification&& from) noexcept
      : ReadReceiptNotification(nullptr, std::move(from)) {}
  inline ReadReceiptNotification& operator=(const ReadReceiptNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadReceiptNotification& operator=(ReadReceiptNotification&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadReceiptNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadReceiptNotification* internal_default_instance() {
    return reinterpret_cast<const ReadReceiptNotification*>(
        &_ReadReceiptNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(ReadReceiptNotification& a, ReadReceiptNotification& b) { a.Swap(&b); }
  inline void Swap(ReadReceiptNotification* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadReceiptNotification* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadReceiptNotification* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ReadReceiptNotification>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReadReceiptNotification& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ReadReceiptNotification& from) { ReadReceiptNotification::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ReadReceiptNotification* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.ReadReceiptNotification"; }

 protected:
  explicit ReadReceiptNotification(::google::protobuf::Arena* arena);
  ReadReceiptNotification(::google::protobuf::Arena* arena, const ReadReceiptNotification& from);
  ReadReceiptNotification(::google::protobuf::Arena* arena, ReadReceiptNotification&& from) noexcept
      : ReadReceiptNotification(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageIdFieldNumber = 1,
    kReaderUsernameFieldNumber = 2,
    kReadAtFieldNumber = 3,
  };
  // string message_id = 1;
  void clear_message_id() ;
  const std::string& message_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message_id(Arg_&& arg, Args_... args);
  std::string* mutable_message_id();
  PROTOBUF_NODISCARD std::string* release_message_id();
  void set_allocated_message_id(std::string* value);

  private:
  const std::string& _internal_message_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message_id(
      const std::string& value);
  std::string* _internal_mutable_message_id();

  public:
  // string reader_username = 2;
  void clear_reader_username() ;
  const std::string& reader_username() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reader_username(Arg_&& arg, Args_... args);
  std::string* mutable_reader_username();
  PROTOBUF_NODISCARD std::string* release_reader_username();
  void set_allocated_reader_username(std::string* value);

  private:
  const std::string& _internal_reader_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reader_username(
      const std::string& value);
  std::string* _internal_mutable_reader_username();

  public:
  // .google.protobuf.Timestamp read_at = 3;
  bool has_read_at() const;
  void clear_read_at() ;
  const ::google::protobuf::Timestamp& read_at() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_read_at();
  ::google::protobuf::Timestamp* mutable_read_at();
  void set_allocated_read_at(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_read_at(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_read_at();

  private:
  const ::google::protobuf::Timestamp& _internal_read_at() const;
  ::google::protobuf::Timestamp* _internal_mutable_read_at();

  public:
  // @@protoc_insertion_point(class_scope:blokus.ReadReceiptNotification)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      64, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ReadReceiptNotification& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr message_id_;
    ::google::protobuf::internal::ArenaStringPtr reader_username_;
    ::google::protobuf::Timestamp* read_at_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class GetChatHistoryRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.GetChatHistoryRequest) */ {
 public:
  inline GetChatHistoryRequest() : GetChatHistoryRequest(nullptr) {}
  ~GetChatHistoryRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetChatHistoryRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetChatHistoryRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetChatHistoryRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetChatHistoryRequest(const GetChatHistoryRequest& from) : GetChatHistoryRequest(nullptr, from) {}
  inline GetChatHistoryRequest(GetChatHistoryRequest&& from) noexcept
      : GetChatHistoryRequest(nullptr, std::move(from)) {}
  inline GetChatHistoryRequest& operator=(const GetChatHistoryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChatHistoryRequest& operator=(GetChatHistoryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetChatHistoryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetChatHistoryRequest* internal_default_instance() {
    return reinterpret_cast<const GetChatHistoryRequest*>(
        &_GetChatHistoryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(GetChatHistoryRequest& a, GetChatHistoryRequest& b) { a.Swap(&b); }
  inline void Swap(GetChatHistoryRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetChatHistoryRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetChatHistoryRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetChatHistoryRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetChatHistoryRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetChatHistoryRequest& from) { GetChatHistoryRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetChatHistoryRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.GetChatHistoryRequest"; }

 protected:
  explicit GetChatHistoryRequest(::google::protobuf::Arena* arena);
  GetChatHistoryRequest(::google::protobuf::Arena* arena, const GetChatHistoryRequest& from);
  GetChatHistoryRequest(::google::protobuf::Arena* arena, GetChatHistoryRequest&& from) noexcept
      : GetChatHistoryRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTypeFilterFieldNumber = 7,
    kTargetUsernameFieldNumber = 3,
    kBeforeMessageIdFieldNumber = 5,
    kAfterMessageIdFieldNumber = 6,
    kSearchQueryFieldNumber = 10,
    kSinceFieldNumber = 8,
    kUntilFieldNumber = 9,
    kScopeFieldNumber = 1,
    kRoomIdFieldNumber = 2,
    kLimitFieldNumber = 4,
  };
  // repeated .blokus.ChatType type_filter = 7;
  int type_filter_size() const;
  private:
  int _internal_type_filter_size() const;

  public:
  void clear_type_filter() ;
  public:
  ::blokus::ChatType type_filter(int index) const;
  void set_type_filter(int index, ::blokus::ChatType value);
  void add_type_filter(::blokus::ChatType value);
  const ::google::protobuf::RepeatedField<int>& type_filter() const;
  ::google::protobuf::RepeatedField<int>* mutable_type_filter();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_type_filter() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_type_filter();

  public:
  // string target_username = 3;
  void clear_target_username() ;
  const std::string& target_username() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_target_username(Arg_&& arg, Args_... args);
  std::string* mutable_target_username();
  PROTOBUF_NODISCARD std::string* release_target_username();
  void set_allocated_target_username(std::string* value);

  private:
  const std::string& _internal_target_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_username(
      const std::string& value);
  std::string* _internal_mutable_target_username();

  public:
  // string before_message_id = 5;
  void clear_before_message_id() ;
  const std::string& before_message_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_before_message_id(Arg_&& arg, Args_... args);
  std::string* mutable_before_message_id();
  PROTOBUF_NODISCARD std::string* release_before_message_id();
  void set_allocated_before_message_id(std::string* value);

  private:
  const std::string& _internal_before_message_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_before_message_id(
      const std::string& value);
  std::string* _internal_mutable_before_message_id();

  public:
  // string after_message_id = 6;
  void clear_after_message_id() ;
  const std::string& after_message_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_after_message_id(Arg_&& arg, Args_... args);
  std::string* mutable_after_message_id();
  PROTOBUF_NODISCARD std::string* release_after_message_id();
  void set_allocated_after_message_id(std::string* value);

  private:
  const std::string& _internal_after_message_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_after_message_id(
      const std::string& value);
  std::string* _internal_mutable_after_message_id();

  public:
  // string search_query = 10;
  void clear_search_query() ;
  const std::string& search_query() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_search_query(Arg_&& arg, Args_... args);
  std::string* mutable_search_query();
  PROTOBUF_NODISCARD std::string* release_search_query();
  void set_allocated_search_query(std::string* value);

  private:
  const std::string& _internal_search_query() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_search_query(
      const std::string& value);
  std::string* _internal_mutable_search_query();

  public:
  // .google.protobuf.Timestamp since = 8;
  bool has_since() const;
  void clear_since() ;
  const ::google::protobuf::Timestamp& since() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_since();
  ::google::protobuf::Timestamp* mutable_since();
  void set_allocated_since(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_since(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_since();

  private:
  const ::google::protobuf::Timestamp& _internal_since() const;
  ::google::protobuf::Timestamp* _internal_mutable_since();

  public:
  // .google.protobuf.Timestamp until = 9;
  bool has_until() const;
  void clear_until() ;
  const ::google::protobuf::Timestamp& until() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_until();
  ::google::protobuf::Timestamp* mutable_until();
  void set_allocated_until(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_until(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_until();

  private:
  const ::google::protobuf::Timestamp& _internal_until() const;
  ::google::protobuf::Timestamp* _internal_mutable_until();

  public:
  // .blokus.ChatScope scope = 1;
  void clear_scope() ;
  ::blokus::ChatScope scope() const;
  void set_scope(::blokus::ChatScope value);

  private:
  ::blokus::ChatScope _internal_scope() const;
  void _internal_set_scope(::blokus::ChatScope value);

  public:
  // int32 room_id = 2;
  void clear_room_id() ;
  ::int32_t room_id() const;
  void set_room_id(::int32_t value);

  private:
  ::int32_t _internal_room_id() const;
  void _internal_set_room_id(::int32_t value);

  public:
  // int32 limit = 4;
  void clear_limit() ;
  ::int32_t limit() const;
  void set_limit(::int32_t value);

  private:
  ::int32_t _internal_limit() const;
  void _internal_set_limit(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.GetChatHistoryRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 10, 2,
      105, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetChatHistoryRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<int> type_filter_;
    ::google::protobuf::internal::CachedSize _type_filter_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr target_username_;
    ::google::protobuf::internal::ArenaStringPtr before_message_id_;
    ::google::protobuf::internal::ArenaStringPtr after_message_id_;
    ::google::protobuf::internal::ArenaStringPtr search_query_;
    ::google::protobuf::Timestamp* since_;
    ::google::protobuf::Timestamp* until_;
    int scope_;
    ::int32_t room_id_;
    ::int32_t limit_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class EmotePackInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.EmotePackInfo) */ {
 public:
  inline EmotePackInfo() : EmotePackInfo(nullptr) {}
  ~EmotePackInfo() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(EmotePackInfo* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(EmotePackInfo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EmotePackInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline EmotePackInfo(const EmotePackInfo& from) : EmotePackInfo(nullptr, from) {}
  inline EmotePackInfo(EmotePackInfo&& from) noexcept
      : EmotePackInfo(nullptr, std::move(from)) {}
  inline EmotePackInfo& operator=(const EmotePackInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmotePackInfo& operator=(EmotePackInfo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmotePackInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmotePackInfo* internal_default_instance() {
    return reinterpret_cast<const EmotePackInfo*>(
        &_EmotePackInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 20;
  friend void swap(EmotePackInfo& a, EmotePackInfo& b) { a.Swap(&b); }
  inline void Swap(EmotePackInfo* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmotePackInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmotePackInfo* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<EmotePackInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EmotePackInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EmotePackInfo& from) { EmotePackInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(EmotePackInfo* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.EmotePackInfo"; }

 protected:
  explicit EmotePackInfo(::google::protobuf::Arena* arena);
  EmotePackInfo(::google::protobuf::Arena* arena, const EmotePackInfo& from);
  EmotePackInfo(::google::protobuf::Arena* arena, EmotePackInfo&& from) noexcept
      : EmotePackInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEmotesFieldNumber = 4,
    kPackIdFieldNumber = 1,
    kPackNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kIsPremiumFieldNumber = 5,
    kIsUnlockedFieldNumber = 6,
  };
  // repeated .blokus.EmoteInfo emotes = 4;
  int emotes_size() const;
  private:
  int _internal_emotes_size() const;

  public:
  void clear_emotes() ;
  ::blokus::EmoteInfo* mutable_emotes(int index);
  ::google::protobuf::RepeatedPtrField<::blokus::EmoteInfo>* mutable_emotes();

  private:
  const ::google::protobuf::RepeatedPtrField<::blokus::EmoteInfo>& _internal_emotes() const;
  ::google::protobuf::RepeatedPtrField<::blokus::EmoteInfo>* _internal_mutable_emotes();
  public:
  const ::blokus::EmoteInfo& emotes(int index) const;
  ::blokus::EmoteInfo* add_emotes();
  const ::google::protobuf::RepeatedPtrField<::blokus::EmoteInfo>& emotes() const;
  // string pack_id = 1;
  void clear_pack_id() ;
  const std::string& pack_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_pack_id(Arg_&& arg, Args_... args);
  std::string* mutable_pack_id();
  PROTOBUF_NODISCARD std::string* release_pack_id();
  void set_allocated_pack_id(std::string* value);

  private:
  const std::string& _internal_pack_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pack_id(
      const std::string& value);
  std::string* _internal_mutable_pack_id();

  public:
  // string pack_name = 2;
  void clear_pack_name() ;
  const std::string& pack_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_pack_name(Arg_&& arg, Args_... args);
  std::string* mutable_pack_name();
  PROTOBUF_NODISCARD std::string* release_pack_name();
  void set_allocated_pack_name(std::string* value);

  private:
  const std::string& _internal_pack_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pack_name(
      const std::string& value);
  std::string* _internal_mutable_pack_name();

  public:
  // string description = 3;
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* value);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // bool is_premium = 5;
  void clear_is_premium() ;
  bool is_premium() const;
  void set_is_premium(bool value);

  private:
  bool _internal_is_premium() const;
  void _internal_set_is_premium(bool value);

  public:
  // bool is_unlocked = 6;
  void clear_is_unlocked() ;
  bool is_unlocked() const;
  void set_is_unlocked(bool value);

  private:
  bool _internal_is_unlocked() const;
  void _internal_set_is_unlocked(bool value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.EmotePackInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 1,
      56, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EmotePackInfo& from_msg);
    ::google::protobuf::RepeatedPtrField< ::blokus::EmoteInfo > emotes_;
    ::google::protobuf::internal::ArenaStringPtr pack_id_;
    ::google::protobuf::internal::ArenaStringPtr pack_name_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    bool is_premium_;
    bool is_unlocked_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class ChatModerationNotification final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.ChatModerationNotification) */ {
 public:
  inline ChatModerationNotification() : ChatModerationNotification(nullptr) {}
  ~ChatModerationNotification() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ChatModerationNotification* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ChatModerationNotification));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ChatModerationNotification(
      ::google::protobuf::internal::ConstantInitialized);

  inline ChatModerationNotification(const ChatModerationNotification& from) : ChatModerationNotification(nullptr, from) {}
  inline ChatModerationNotification(ChatModerationNotification&& from) noexcept
      : ChatModerationNotification(nullptr, std::move(from)) {}
  inline ChatModerationNotification& operator=(const ChatModerationNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatModerationNotification& operator=(ChatModerationNotification&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatModerationNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatModerationNotification* internal_default_instance() {
    return reinterpret_cast<const ChatModerationNotification*>(
        &_ChatModerationNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(ChatModerationNotification& a, ChatModerationNotification& b) { a.Swap(&b); }
  inline void Swap(ChatModerationNotification* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatModerationNotification* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatModerationNotification* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ChatModerationNotification>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ChatModerationNotification& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ChatModerationNotification& from) { ChatModerationNotification::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ChatModerationNotification* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.ChatModerationNotification"; }

 protected:
  explicit ChatModerationNotification(::google::protobuf::Arena* arena);
  ChatModerationNotification(::google::protobuf::Arena* arena, const ChatModerationNotification& from);
  ChatModerationNotification(::google::protobuf::Arena* arena, ChatModerationNotification&& from) noexcept
      : ChatModerationNotification(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageIdFieldNumber = 1,
    kModeratedUsernameFieldNumber = 2,
    kModeratorUsernameFieldNumber = 3,
    kActionFieldNumber = 4,
    kReasonFieldNumber = 5,
    kModeratedAtFieldNumber = 6,
  };
  // string message_id = 1;
  void clear_message_id() ;
  const std::string& message_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message_id(Arg_&& arg, Args_... args);
  std::string* mutable_message_id();
  PROTOBUF_NODISCARD std::string* release_message_id();
  void set_allocated_message_id(std::string* value);

  private:
  const std::string& _internal_message_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message_id(
      const std::string& value);
  std::string* _internal_mutable_message_id();

  public:
  // string moderated_username = 2;
  void clear_moderated_username() ;
  const std::string& moderated_username() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_moderated_username(Arg_&& arg, Args_... args);
  std::string* mutable_moderated_username();
  PROTOBUF_NODISCARD std::string* release_moderated_username();
  void set_allocated_moderated_username(std::string* value);

  private:
  const std::string& _internal_moderated_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_moderated_username(
      const std::string& value);
  std::string* _internal_mutable_moderated_username();

  public:
  // string moderator_username = 3;
  void clear_moderator_username() ;
  const std::string& moderator_username() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_moderator_username(Arg_&& arg, Args_... args);
  std::string* mutable_moderator_username();
  PROTOBUF_NODISCARD std::string* release_moderator_username();
  void set_allocated_moderator_username(std::string* value);

  private:
  const std::string& _internal_moderator_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_moderator_username(
      const std::string& value);
  std::string* _internal_mutable_moderator_username();

  public:
  // string action = 4;
  void clear_action() ;
  const std::string& action() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_action(Arg_&& arg, Args_... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* value);

  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(
      const std::string& value);
  std::string* _internal_mutable_action();

  public:
  // string reason = 5;
  void clear_reason() ;
  const std::string& reason() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reason(Arg_&& arg, Args_... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* value);

  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(
      const std::string& value);
  std::string* _internal_mutable_reason();

  public:
  // .google.protobuf.Timestamp moderated_at = 6;
  bool has_moderated_at() const;
  void clear_moderated_at() ;
  const ::google::protobuf::Timestamp& moderated_at() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_moderated_at();
  ::google::protobuf::Timestamp* mutable_moderated_at();
  void set_allocated_moderated_at(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_moderated_at(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_moderated_at();

  private:
  const ::google::protobuf::Timestamp& _internal_moderated_at() const;
  ::google::protobuf::Timestamp* _internal_mutable_moderated_at();

  public:
  // @@protoc_insertion_point(class_scope:blokus.ChatModerationNotification)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 1,
      100, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ChatModerationNotification& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr message_id_;
    ::google::protobuf::internal::ArenaStringPtr moderated_username_;
    ::google::protobuf::internal::ArenaStringPtr moderator_username_;
    ::google::protobuf::internal::ArenaStringPtr action_;
    ::google::protobuf::internal::ArenaStringPtr reason_;
    ::google::protobuf::Timestamp* moderated_at_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class ChatMessage final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.ChatMessage) */ {
 public:
  inline ChatMessage() : ChatMessage(nullptr) {}
  ~ChatMessage() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ChatMessage* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ChatMessage));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ChatMessage(
      ::google::protobuf::internal::ConstantInitialized);

  inline ChatMessage(const ChatMessage& from) : ChatMessage(nullptr, from) {}
  inline ChatMessage(ChatMessage&& from) noexcept
      : ChatMessage(nullptr, std::move(from)) {}
  inline ChatMessage& operator=(const ChatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatMessage& operator=(ChatMessage&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatMessage* internal_default_instance() {
    return reinterpret_cast<const ChatMessage*>(
        &_ChatMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ChatMessage& a, ChatMessage& b) { a.Swap(&b); }
  inline void Swap(ChatMessage* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatMessage* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ChatMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ChatMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ChatMessage& from) { ChatMessage::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ChatMessage* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.ChatMessage"; }

 protected:
  explicit ChatMessage(::google::protobuf::Arena* arena);
  ChatMessage(::google::protobuf::Arena* arena, const ChatMessage& from);
  ChatMessage(::google::protobuf::Arena* arena, ChatMessage&& from) noexcept
      : ChatMessage(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMentionsFieldNumber = 8,
    kEmotesFieldNumber = 9,
    kAttachmentsFieldNumber = 17,
    kMetadataFieldNumber = 18,
    kMessageIdFieldNumber = 1,
    kSenderUsernameFieldNumber = 4,
    kSenderDisplayNameFieldNumber = 5,
    kContentFieldNumber = 7,
    kTargetUsernameFieldNumber = 12,
    kReplyToMessageIdFieldNumber = 16,
    kTimestampFieldNumber = 10,
    kEditedAtFieldNumber = 15,
    kTypeFieldNumber = 2,
    kScopeFieldNumber = 3,
    kSenderColorFieldNumber = 6,
    kRoomIdFieldNumber = 11,
    kStatusFieldNumber = 13,
    kIsEditedFieldNumber = 14,
  };
  // repeated string mentions = 8;
  int mentions_size() const;
  private:
  int _internal_mentions_size() const;

  public:
  void clear_mentions() ;
  const std::string& mentions(int index) const;
  std::string* mutable_mentions(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_mentions(int index, Arg_&& value, Args_... args);
  std::string* add_mentions();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_mentions(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& mentions() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_mentions();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_mentions() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_mentions();

  public:
  // repeated .blokus.ChatEmote emotes = 9;
  int emotes_size() const;
  private:
  int _internal_emotes_size() const;

  public:
  void clear_emotes() ;
  ::blokus::ChatEmote* mutable_emotes(int index);
  ::google::protobuf::RepeatedPtrField<::blokus::ChatEmote>* mutable_emotes();

  private:
  const ::google::protobuf::RepeatedPtrField<::blokus::ChatEmote>& _internal_emotes() const;
  ::google::protobuf::RepeatedPtrField<::blokus::ChatEmote>* _internal_mutable_emotes();
  public:
  const ::blokus::ChatEmote& emotes(int index) const;
  ::blokus::ChatEmote* add_emotes();
  const ::google::protobuf::RepeatedPtrField<::blokus::ChatEmote>& emotes() const;
  // repeated string attachments = 17;
  int attachments_size() const;
  private:
  int _internal_attachments_size() const;

  public:
  void clear_attachments() ;
  const std::string& attachments(int index) const;
  std::string* mutable_attachments(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_attachments(int index, Arg_&& value, Args_... args);
  std::string* add_attachments();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_attachments(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& attachments() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_attachments();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_attachments() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_attachments();

  public:
  // map<string, string> metadata = 18;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  const ::google::protobuf::Map<std::string, std::string>& metadata() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_metadata();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_metadata() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_metadata();

  public:
  // string message_id = 1;
  void clear_message_id() ;
  const std::string& message_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message_id(Arg_&& arg, Args_... args);
  std::string* mutable_message_id();
  PROTOBUF_NODISCARD std::string* release_message_id();
  void set_allocated_message_id(std::string* value);

  private:
  const std::string& _internal_message_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message_id(
      const std::string& value);
  std::string* _internal_mutable_message_id();

  public:
  // string sender_username = 4;
  void clear_sender_username() ;
  const std::string& sender_username() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sender_username(Arg_&& arg, Args_... args);
  std::string* mutable_sender_username();
  PROTOBUF_NODISCARD std::string* release_sender_username();
  void set_allocated_sender_username(std::string* value);

  private:
  const std::string& _internal_sender_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender_username(
      const std::string& value);
  std::string* _internal_mutable_sender_username();

  public:
  // string sender_display_name = 5;
  void clear_sender_display_name() ;
  const std::string& sender_display_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sender_display_name(Arg_&& arg, Args_... args);
  std::string* mutable_sender_display_name();
  PROTOBUF_NODISCARD std::string* release_sender_display_name();
  void set_allocated_sender_display_name(std::string* value);

  private:
  const std::string& _internal_sender_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender_display_name(
      const std::string& value);
  std::string* _internal_mutable_sender_display_name();

  public:
  // string content = 7;
  void clear_content() ;
  const std::string& content() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content(Arg_&& arg, Args_... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* value);

  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(
      const std::string& value);
  std::string* _internal_mutable_content();

  public:
  // string target_username = 12;
  void clear_target_username() ;
  const std::string& target_username() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_target_username(Arg_&& arg, Args_... args);
  std::string* mutable_target_username();
  PROTOBUF_NODISCARD std::string* release_target_username();
  void set_allocated_target_username(std::string* value);

  private:
  const std::string& _internal_target_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_username(
      const std::string& value);
  std::string* _internal_mutable_target_username();

  public:
  // string reply_to_message_id = 16;
  void clear_reply_to_message_id() ;
  const std::string& reply_to_message_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reply_to_message_id(Arg_&& arg, Args_... args);
  std::string* mutable_reply_to_message_id();
  PROTOBUF_NODISCARD std::string* release_reply_to_message_id();
  void set_allocated_reply_to_message_id(std::string* value);

  private:
  const std::string& _internal_reply_to_message_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reply_to_message_id(
      const std::string& value);
  std::string* _internal_mutable_reply_to_message_id();

  public:
  // .google.protobuf.Timestamp timestamp = 10;
  bool has_timestamp() const;
  void clear_timestamp() ;
  const ::google::protobuf::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_timestamp();
  ::google::protobuf::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_timestamp(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_timestamp();

  private:
  const ::google::protobuf::Timestamp& _internal_timestamp() const;
  ::google::protobuf::Timestamp* _internal_mutable_timestamp();

  public:
  // .google.protobuf.Timestamp edited_at = 15;
  bool has_edited_at() const;
  void clear_edited_at() ;
  const ::google::protobuf::Timestamp& edited_at() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_edited_at();
  ::google::protobuf::Timestamp* mutable_edited_at();
  void set_allocated_edited_at(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_edited_at(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_edited_at();

  private:
  const ::google::protobuf::Timestamp& _internal_edited_at() const;
  ::google::protobuf::Timestamp* _internal_mutable_edited_at();

  public:
  // .blokus.ChatType type = 2;
  void clear_type() ;
  ::blokus::ChatType type() const;
  void set_type(::blokus::ChatType value);

  private:
  ::blokus::ChatType _internal_type() const;
  void _internal_set_type(::blokus::ChatType value);

  public:
  // .blokus.ChatScope scope = 3;
  void clear_scope() ;
  ::blokus::ChatScope scope() const;
  void set_scope(::blokus::ChatScope value);

  private:
  ::blokus::ChatScope _internal_scope() const;
  void _internal_set_scope(::blokus::ChatScope value);

  public:
  // .blokus.PlayerColor sender_color = 6;
  void clear_sender_color() ;
  ::blokus::PlayerColor sender_color() const;
  void set_sender_color(::blokus::PlayerColor value);

  private:
  ::blokus::PlayerColor _internal_sender_color() const;
  void _internal_set_sender_color(::blokus::PlayerColor value);

  public:
  // int32 room_id = 11;
  void clear_room_id() ;
  ::int32_t room_id() const;
  void set_room_id(::int32_t value);

  private:
  ::int32_t _internal_room_id() const;
  void _internal_set_room_id(::int32_t value);

  public:
  // .blokus.MessageStatus status = 13;
  void clear_status() ;
  ::blokus::MessageStatus status() const;
  void set_status(::blokus::MessageStatus value);

  private:
  ::blokus::MessageStatus _internal_status() const;
  void _internal_set_status(::blokus::MessageStatus value);

  public:
  // bool is_edited = 14;
  void clear_is_edited() ;
  bool is_edited() const;
  void set_is_edited(bool value);

  private:
  bool _internal_is_edited() const;
  void _internal_set_is_edited(bool value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.ChatMessage)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 18, 4,
      155, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ChatMessage& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> mentions_;
    ::google::protobuf::RepeatedPtrField< ::blokus::ChatEmote > emotes_;
    ::google::protobuf::RepeatedPtrField<std::string> attachments_;
    ::google::protobuf::internal::MapField<ChatMessage_MetadataEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        metadata_;
    ::google::protobuf::internal::ArenaStringPtr message_id_;
    ::google::protobuf::internal::ArenaStringPtr sender_username_;
    ::google::protobuf::internal::ArenaStringPtr sender_display_name_;
    ::google::protobuf::internal::ArenaStringPtr content_;
    ::google::protobuf::internal::ArenaStringPtr target_username_;
    ::google::protobuf::internal::ArenaStringPtr reply_to_message_id_;
    ::google::protobuf::Timestamp* timestamp_;
    ::google::protobuf::Timestamp* edited_at_;
    int type_;
    int scope_;
    int sender_color_;
    ::int32_t room_id_;
    int status_;
    bool is_edited_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class WhisperNotification final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.WhisperNotification) */ {
 public:
  inline WhisperNotification() : WhisperNotification(nullptr) {}
  ~WhisperNotification() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(WhisperNotification* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(WhisperNotification));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR WhisperNotification(
      ::google::protobuf::internal::ConstantInitialized);

  inline WhisperNotification(const WhisperNotification& from) : WhisperNotification(nullptr, from) {}
  inline WhisperNotification(WhisperNotification&& from) noexcept
      : WhisperNotification(nullptr, std::move(from)) {}
  inline WhisperNotification& operator=(const WhisperNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline WhisperNotification& operator=(WhisperNotification&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WhisperNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const WhisperNotification* internal_default_instance() {
    return reinterpret_cast<const WhisperNotification*>(
        &_WhisperNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(WhisperNotification& a, WhisperNotification& b) { a.Swap(&b); }
  inline void Swap(WhisperNotification* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WhisperNotification* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WhisperNotification* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<WhisperNotification>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WhisperNotification& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const WhisperNotification& from) { WhisperNotification::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(WhisperNotification* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.WhisperNotification"; }

 protected:
  explicit WhisperNotification(::google::protobuf::Arena* arena);
  WhisperNotification(::google::protobuf::Arena* arena, const WhisperNotification& from);
  WhisperNotification(::google::protobuf::Arena* arena, WhisperNotification&& from) noexcept
      : WhisperNotification(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kWhisperFieldNumber = 1,
    kSenderOnlineFieldNumber = 2,
    kAutoAwayReplyFieldNumber = 3,
  };
  // .blokus.ChatMessage whisper = 1;
  bool has_whisper() const;
  void clear_whisper() ;
  const ::blokus::ChatMessage& whisper() const;
  PROTOBUF_NODISCARD ::blokus::ChatMessage* release_whisper();
  ::blokus::ChatMessage* mutable_whisper();
  void set_allocated_whisper(::blokus::ChatMessage* value);
  void unsafe_arena_set_allocated_whisper(::blokus::ChatMessage* value);
  ::blokus::ChatMessage* unsafe_arena_release_whisper();

  private:
  const ::blokus::ChatMessage& _internal_whisper() const;
  ::blokus::ChatMessage* _internal_mutable_whisper();

  public:
  // bool sender_online = 2;
  void clear_sender_online() ;
  bool sender_online() const;
  void set_sender_online(bool value);

  private:
  bool _internal_sender_online() const;
  void _internal_set_sender_online(bool value);

  public:
  // bool auto_away_reply = 3;
  void clear_auto_away_reply() ;
  bool auto_away_reply() const;
  void set_auto_away_reply(bool value);

  private:
  bool _internal_auto_away_reply() const;
  void _internal_set_auto_away_reply(bool value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.WhisperNotification)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const WhisperNotification& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::blokus::ChatMessage* whisper_;
    bool sender_online_;
    bool auto_away_reply_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class UpdateChatSettingsResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.UpdateChatSettingsResponse) */ {
 public:
  inline UpdateChatSettingsResponse() : UpdateChatSettingsResponse(nullptr) {}
  ~UpdateChatSettingsResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(UpdateChatSettingsResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(UpdateChatSettingsResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateChatSettingsResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline UpdateChatSettingsResponse(const UpdateChatSettingsResponse& from) : UpdateChatSettingsResponse(nullptr, from) {}
  inline UpdateChatSettingsResponse(UpdateChatSettingsResponse&& from) noexcept
      : UpdateChatSettingsResponse(nullptr, std::move(from)) {}
  inline UpdateChatSettingsResponse& operator=(const UpdateChatSettingsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateChatSettingsResponse& operator=(UpdateChatSettingsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateChatSettingsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateChatSettingsResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateChatSettingsResponse*>(
        &_UpdateChatSettingsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 18;
  friend void swap(UpdateChatSettingsResponse& a, UpdateChatSettingsResponse& b) { a.Swap(&b); }
  inline void Swap(UpdateChatSettingsResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateChatSettingsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateChatSettingsResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<UpdateChatSettingsResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UpdateChatSettingsResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UpdateChatSettingsResponse& from) { UpdateChatSettingsResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(UpdateChatSettingsResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.UpdateChatSettingsResponse"; }

 protected:
  explicit UpdateChatSettingsResponse(::google::protobuf::Arena* arena);
  UpdateChatSettingsResponse(::google::protobuf::Arena* arena, const UpdateChatSettingsResponse& from);
  UpdateChatSettingsResponse(::google::protobuf::Arena* arena, UpdateChatSettingsResponse&& from) noexcept
      : UpdateChatSettingsResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kResultFieldNumber = 1,
    kUpdatedSettingsFieldNumber = 2,
  };
  // .blokus.Result result = 1;
  bool has_result() const;
  void clear_result() ;
  const ::blokus::Result& result() const;
  PROTOBUF_NODISCARD ::blokus::Result* release_result();
  ::blokus::Result* mutable_result();
  void set_allocated_result(::blokus::Result* value);
  void unsafe_arena_set_allocated_result(::blokus::Result* value);
  ::blokus::Result* unsafe_arena_release_result();

  private:
  const ::blokus::Result& _internal_result() const;
  ::blokus::Result* _internal_mutable_result();

  public:
  // .blokus.ChatSettings updated_settings = 2;
  bool has_updated_settings() const;
  void clear_updated_settings() ;
  const ::blokus::ChatSettings& updated_settings() const;
  PROTOBUF_NODISCARD ::blokus::ChatSettings* release_updated_settings();
  ::blokus::ChatSettings* mutable_updated_settings();
  void set_allocated_updated_settings(::blokus::ChatSettings* value);
  void unsafe_arena_set_allocated_updated_settings(::blokus::ChatSettings* value);
  ::blokus::ChatSettings* unsafe_arena_release_updated_settings();

  private:
  const ::blokus::ChatSettings& _internal_updated_settings() const;
  ::blokus::ChatSettings* _internal_mutable_updated_settings();

  public:
  // @@protoc_insertion_point(class_scope:blokus.UpdateChatSettingsResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UpdateChatSettingsResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::blokus::Result* result_;
    ::blokus::ChatSettings* updated_settings_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class SendChatResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.SendChatResponse) */ {
 public:
  inline SendChatResponse() : SendChatResponse(nullptr) {}
  ~SendChatResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SendChatResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SendChatResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SendChatResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline SendChatResponse(const SendChatResponse& from) : SendChatResponse(nullptr, from) {}
  inline SendChatResponse(SendChatResponse&& from) noexcept
      : SendChatResponse(nullptr, std::move(from)) {}
  inline SendChatResponse& operator=(const SendChatResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendChatResponse& operator=(SendChatResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendChatResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendChatResponse* internal_default_instance() {
    return reinterpret_cast<const SendChatResponse*>(
        &_SendChatResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(SendChatResponse& a, SendChatResponse& b) { a.Swap(&b); }
  inline void Swap(SendChatResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendChatResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendChatResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SendChatResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SendChatResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SendChatResponse& from) { SendChatResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SendChatResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.SendChatResponse"; }

 protected:
  explicit SendChatResponse(::google::protobuf::Arena* arena);
  SendChatResponse(::google::protobuf::Arena* arena, const SendChatResponse& from);
  SendChatResponse(::google::protobuf::Arena* arena, SendChatResponse&& from) noexcept
      : SendChatResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBlockedWordsFieldNumber = 6,
    kMessageIdFieldNumber = 2,
    kClientMessageIdFieldNumber = 3,
    kFilteredContentFieldNumber = 5,
    kResultFieldNumber = 1,
    kSentAtFieldNumber = 4,
    kCooldownSecondsFieldNumber = 7,
  };
  // repeated string blocked_words = 6;
  int blocked_words_size() const;
  private:
  int _internal_blocked_words_size() const;

  public:
  void clear_blocked_words() ;
  const std::string& blocked_words(int index) const;
  std::string* mutable_blocked_words(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_blocked_words(int index, Arg_&& value, Args_... args);
  std::string* add_blocked_words();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_blocked_words(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& blocked_words() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_blocked_words();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_blocked_words() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_blocked_words();

  public:
  // string message_id = 2;
  void clear_message_id() ;
  const std::string& message_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message_id(Arg_&& arg, Args_... args);
  std::string* mutable_message_id();
  PROTOBUF_NODISCARD std::string* release_message_id();
  void set_allocated_message_id(std::string* value);

  private:
  const std::string& _internal_message_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message_id(
      const std::string& value);
  std::string* _internal_mutable_message_id();

  public:
  // string client_message_id = 3;
  void clear_client_message_id() ;
  const std::string& client_message_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_client_message_id(Arg_&& arg, Args_... args);
  std::string* mutable_client_message_id();
  PROTOBUF_NODISCARD std::string* release_client_message_id();
  void set_allocated_client_message_id(std::string* value);

  private:
  const std::string& _internal_client_message_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_message_id(
      const std::string& value);
  std::string* _internal_mutable_client_message_id();

  public:
  // string filtered_content = 5;
  void clear_filtered_content() ;
  const std::string& filtered_content() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_filtered_content(Arg_&& arg, Args_... args);
  std::string* mutable_filtered_content();
  PROTOBUF_NODISCARD std::string* release_filtered_content();
  void set_allocated_filtered_content(std::string* value);

  private:
  const std::string& _internal_filtered_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filtered_content(
      const std::string& value);
  std::string* _internal_mutable_filtered_content();

  public:
  // .blokus.Result result = 1;
  bool has_result() const;
  void clear_result() ;
  const ::blokus::Result& result() const;
  PROTOBUF_NODISCARD ::blokus::Result* release_result();
  ::blokus::Result* mutable_result();
  void set_allocated_result(::blokus::Result* value);
  void unsafe_arena_set_allocated_result(::blokus::Result* value);
  ::blokus::Result* unsafe_arena_release_result();

  private:
  const ::blokus::Result& _internal_result() const;
  ::blokus::Result* _internal_mutable_result();

  public:
  // .google.protobuf.Timestamp sent_at = 4;
  bool has_sent_at() const;
  void clear_sent_at() ;
  const ::google::protobuf::Timestamp& sent_at() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_sent_at();
  ::google::protobuf::Timestamp* mutable_sent_at();
  void set_allocated_sent_at(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_sent_at(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_sent_at();

  private:
  const ::google::protobuf::Timestamp& _internal_sent_at() const;
  ::google::protobuf::Timestamp* _internal_mutable_sent_at();

  public:
  // int32 cooldown_seconds = 7;
  void clear_cooldown_seconds() ;
  ::int32_t cooldown_seconds() const;
  void set_cooldown_seconds(::int32_t value);

  private:
  ::int32_t _internal_cooldown_seconds() const;
  void _internal_set_cooldown_seconds(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.SendChatResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 2,
      88, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SendChatResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> blocked_words_;
    ::google::protobuf::internal::ArenaStringPtr message_id_;
    ::google::protobuf::internal::ArenaStringPtr client_message_id_;
    ::google::protobuf::internal::ArenaStringPtr filtered_content_;
    ::blokus::Result* result_;
    ::google::protobuf::Timestamp* sent_at_;
    ::int32_t cooldown_seconds_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class ModerateChatResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.ModerateChatResponse) */ {
 public:
  inline ModerateChatResponse() : ModerateChatResponse(nullptr) {}
  ~ModerateChatResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ModerateChatResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ModerateChatResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ModerateChatResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline ModerateChatResponse(const ModerateChatResponse& from) : ModerateChatResponse(nullptr, from) {}
  inline ModerateChatResponse(ModerateChatResponse&& from) noexcept
      : ModerateChatResponse(nullptr, std::move(from)) {}
  inline ModerateChatResponse& operator=(const ModerateChatResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModerateChatResponse& operator=(ModerateChatResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModerateChatResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModerateChatResponse* internal_default_instance() {
    return reinterpret_cast<const ModerateChatResponse*>(
        &_ModerateChatResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(ModerateChatResponse& a, ModerateChatResponse& b) { a.Swap(&b); }
  inline void Swap(ModerateChatResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModerateChatResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModerateChatResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ModerateChatResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ModerateChatResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ModerateChatResponse& from) { ModerateChatResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ModerateChatResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.ModerateChatResponse"; }

 protected:
  explicit ModerateChatResponse(::google::protobuf::Arena* arena);
  ModerateChatResponse(::google::protobuf::Arena* arena, const ModerateChatResponse& from);
  ModerateChatResponse(::google::protobuf::Arena* arena, ModerateChatResponse&& from) noexcept
      : ModerateChatResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kResultFieldNumber = 1,
    kUserNotifiedFieldNumber = 3,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // .blokus.Result result = 1;
  bool has_result() const;
  void clear_result() ;
  const ::blokus::Result& result() const;
  PROTOBUF_NODISCARD ::blokus::Result* release_result();
  ::blokus::Result* mutable_result();
  void set_allocated_result(::blokus::Result* value);
  void unsafe_arena_set_allocated_result(::blokus::Result* value);
  ::blokus::Result* unsafe_arena_release_result();

  private:
  const ::blokus::Result& _internal_result() const;
  ::blokus::Result* _internal_mutable_result();

  public:
  // bool user_notified = 3;
  void clear_user_notified() ;
  bool user_notified() const;
  void set_user_notified(bool value);

  private:
  bool _internal_user_notified() const;
  void _internal_set_user_notified(bool value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.ModerateChatResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      43, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ModerateChatResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::blokus::Result* result_;
    bool user_notified_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class GetEmotePacksResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.GetEmotePacksResponse) */ {
 public:
  inline GetEmotePacksResponse() : GetEmotePacksResponse(nullptr) {}
  ~GetEmotePacksResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetEmotePacksResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetEmotePacksResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetEmotePacksResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetEmotePacksResponse(const GetEmotePacksResponse& from) : GetEmotePacksResponse(nullptr, from) {}
  inline GetEmotePacksResponse(GetEmotePacksResponse&& from) noexcept
      : GetEmotePacksResponse(nullptr, std::move(from)) {}
  inline GetEmotePacksResponse& operator=(const GetEmotePacksResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEmotePacksResponse& operator=(GetEmotePacksResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetEmotePacksResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetEmotePacksResponse* internal_default_instance() {
    return reinterpret_cast<const GetEmotePacksResponse*>(
        &_GetEmotePacksResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 23;
  friend void swap(GetEmotePacksResponse& a, GetEmotePacksResponse& b) { a.Swap(&b); }
  inline void Swap(GetEmotePacksResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEmotePacksResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetEmotePacksResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetEmotePacksResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetEmotePacksResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetEmotePacksResponse& from) { GetEmotePacksResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetEmotePacksResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.GetEmotePacksResponse"; }

 protected:
  explicit GetEmotePacksResponse(::google::protobuf::Arena* arena);
  GetEmotePacksResponse(::google::protobuf::Arena* arena, const GetEmotePacksResponse& from);
  GetEmotePacksResponse(::google::protobuf::Arena* arena, GetEmotePacksResponse&& from) noexcept
      : GetEmotePacksResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEmotePacksFieldNumber = 2,
    kUnlockedPackIdsFieldNumber = 3,
    kResultFieldNumber = 1,
  };
  // repeated .blokus.EmotePackInfo emote_packs = 2;
  int emote_packs_size() const;
  private:
  int _internal_emote_packs_size() const;

  public:
  void clear_emote_packs() ;
  ::blokus::EmotePackInfo* mutable_emote_packs(int index);
  ::google::protobuf::RepeatedPtrField<::blokus::EmotePackInfo>* mutable_emote_packs();

  private:
  const ::google::protobuf::RepeatedPtrField<::blokus::EmotePackInfo>& _internal_emote_packs() const;
  ::google::protobuf::RepeatedPtrField<::blokus::EmotePackInfo>* _internal_mutable_emote_packs();
  public:
  const ::blokus::EmotePackInfo& emote_packs(int index) const;
  ::blokus::EmotePackInfo* add_emote_packs();
  const ::google::protobuf::RepeatedPtrField<::blokus::EmotePackInfo>& emote_packs() const;
  // repeated string unlocked_pack_ids = 3;
  int unlocked_pack_ids_size() const;
  private:
  int _internal_unlocked_pack_ids_size() const;

  public:
  void clear_unlocked_pack_ids() ;
  const std::string& unlocked_pack_ids(int index) const;
  std::string* mutable_unlocked_pack_ids(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_unlocked_pack_ids(int index, Arg_&& value, Args_... args);
  std::string* add_unlocked_pack_ids();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_unlocked_pack_ids(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& unlocked_pack_ids() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_unlocked_pack_ids();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_unlocked_pack_ids() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_unlocked_pack_ids();

  public:
  // .blokus.Result result = 1;
  bool has_result() const;
  void clear_result() ;
  const ::blokus::Result& result() const;
  PROTOBUF_NODISCARD ::blokus::Result* release_result();
  ::blokus::Result* mutable_result();
  void set_allocated_result(::blokus::Result* value);
  void unsafe_arena_set_allocated_result(::blokus::Result* value);
  ::blokus::Result* unsafe_arena_release_result();

  private:
  const ::blokus::Result& _internal_result() const;
  ::blokus::Result* _internal_mutable_result();

  public:
  // @@protoc_insertion_point(class_scope:blokus.GetEmotePacksResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      54, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetEmotePacksResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::blokus::EmotePackInfo > emote_packs_;
    ::google::protobuf::RepeatedPtrField<std::string> unlocked_pack_ids_;
    ::blokus::Result* result_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class ChatNotification final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.ChatNotification) */ {
 public:
  inline ChatNotification() : ChatNotification(nullptr) {}
  ~ChatNotification() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ChatNotification* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ChatNotification));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ChatNotification(
      ::google::protobuf::internal::ConstantInitialized);

  inline ChatNotification(const ChatNotification& from) : ChatNotification(nullptr, from) {}
  inline ChatNotification(ChatNotification&& from) noexcept
      : ChatNotification(nullptr, std::move(from)) {}
  inline ChatNotification& operator=(const ChatNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatNotification& operator=(ChatNotification&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatNotification* internal_default_instance() {
    return reinterpret_cast<const ChatNotification*>(
        &_ChatNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(ChatNotification& a, ChatNotification& b) { a.Swap(&b); }
  inline void Swap(ChatNotification* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatNotification* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatNotification* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ChatNotification>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ChatNotification& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ChatNotification& from) { ChatNotification::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ChatNotification* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.ChatNotification"; }

 protected:
  explicit ChatNotification(::google::protobuf::Arena* arena);
  ChatNotification(::google::protobuf::Arena* arena, const ChatNotification& from);
  ChatNotification(::google::protobuf::Arena* arena, ChatNotification&& from) noexcept
      : ChatNotification(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 1,
    kShouldNotifyFieldNumber = 2,
    kMentionedFieldNumber = 3,
    kIsImportantFieldNumber = 4,
    kIsFirstMessageFieldNumber = 6,
    kUnreadCountFieldNumber = 5,
  };
  // .blokus.ChatMessage message = 1;
  bool has_message() const;
  void clear_message() ;
  const ::blokus::ChatMessage& message() const;
  PROTOBUF_NODISCARD ::blokus::ChatMessage* release_message();
  ::blokus::ChatMessage* mutable_message();
  void set_allocated_message(::blokus::ChatMessage* value);
  void unsafe_arena_set_allocated_message(::blokus::ChatMessage* value);
  ::blokus::ChatMessage* unsafe_arena_release_message();

  private:
  const ::blokus::ChatMessage& _internal_message() const;
  ::blokus::ChatMessage* _internal_mutable_message();

  public:
  // bool should_notify = 2;
  void clear_should_notify() ;
  bool should_notify() const;
  void set_should_notify(bool value);

  private:
  bool _internal_should_notify() const;
  void _internal_set_should_notify(bool value);

  public:
  // bool mentioned = 3;
  void clear_mentioned() ;
  bool mentioned() const;
  void set_mentioned(bool value);

  private:
  bool _internal_mentioned() const;
  void _internal_set_mentioned(bool value);

  public:
  // bool is_important = 4;
  void clear_is_important() ;
  bool is_important() const;
  void set_is_important(bool value);

  private:
  bool _internal_is_important() const;
  void _internal_set_is_important(bool value);

  public:
  // bool is_first_message = 6;
  void clear_is_first_message() ;
  bool is_first_message() const;
  void set_is_first_message(bool value);

  private:
  bool _internal_is_first_message() const;
  void _internal_set_is_first_message(bool value);

  public:
  // int32 unread_count = 5;
  void clear_unread_count() ;
  ::int32_t unread_count() const;
  void set_unread_count(::int32_t value);

  private:
  ::int32_t _internal_unread_count() const;
  void _internal_set_unread_count(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.ChatNotification)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ChatNotification& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::blokus::ChatMessage* message_;
    bool should_notify_;
    bool mentioned_;
    bool is_important_;
    bool is_first_message_;
    ::int32_t unread_count_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class ChatHistoryResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.ChatHistoryResponse) */ {
 public:
  inline ChatHistoryResponse() : ChatHistoryResponse(nullptr) {}
  ~ChatHistoryResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ChatHistoryResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ChatHistoryResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ChatHistoryResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline ChatHistoryResponse(const ChatHistoryResponse& from) : ChatHistoryResponse(nullptr, from) {}
  inline ChatHistoryResponse(ChatHistoryResponse&& from) noexcept
      : ChatHistoryResponse(nullptr, std::move(from)) {}
  inline ChatHistoryResponse& operator=(const ChatHistoryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatHistoryResponse& operator=(ChatHistoryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatHistoryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatHistoryResponse* internal_default_instance() {
    return reinterpret_cast<const ChatHistoryResponse*>(
        &_ChatHistoryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(ChatHistoryResponse& a, ChatHistoryResponse& b) { a.Swap(&b); }
  inline void Swap(ChatHistoryResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatHistoryResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatHistoryResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ChatHistoryResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ChatHistoryResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ChatHistoryResponse& from) { ChatHistoryResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ChatHistoryResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.ChatHistoryResponse"; }

 protected:
  explicit ChatHistoryResponse(::google::protobuf::Arena* arena);
  ChatHistoryResponse(::google::protobuf::Arena* arena, const ChatHistoryResponse& from);
  ChatHistoryResponse(::google::protobuf::Arena* arena, ChatHistoryResponse&& from) noexcept
      : ChatHistoryResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessagesFieldNumber = 2,
    kResultFieldNumber = 1,
    kOldestMessageFieldNumber = 6,
    kNewestMessageFieldNumber = 7,
    kHasMoreBeforeFieldNumber = 3,
    kHasMoreAfterFieldNumber = 4,
    kTotalCountFieldNumber = 5,
  };
  // repeated .blokus.ChatMessage messages = 2;
  int messages_size() const;
  private:
  int _internal_messages_size() const;

  public:
  void clear_messages() ;
  ::blokus::ChatMessage* mutable_messages(int index);
  ::google::protobuf::RepeatedPtrField<::blokus::ChatMessage>* mutable_messages();

  private:
  const ::google::protobuf::RepeatedPtrField<::blokus::ChatMessage>& _internal_messages() const;
  ::google::protobuf::RepeatedPtrField<::blokus::ChatMessage>* _internal_mutable_messages();
  public:
  const ::blokus::ChatMessage& messages(int index) const;
  ::blokus::ChatMessage* add_messages();
  const ::google::protobuf::RepeatedPtrField<::blokus::ChatMessage>& messages() const;
  // .blokus.Result result = 1;
  bool has_result() const;
  void clear_result() ;
  const ::blokus::Result& result() const;
  PROTOBUF_NODISCARD ::blokus::Result* release_result();
  ::blokus::Result* mutable_result();
  void set_allocated_result(::blokus::Result* value);
  void unsafe_arena_set_allocated_result(::blokus::Result* value);
  ::blokus::Result* unsafe_arena_release_result();

  private:
  const ::blokus::Result& _internal_result() const;
  ::blokus::Result* _internal_mutable_result();

  public:
  // .google.protobuf.Timestamp oldest_message = 6;
  bool has_oldest_message() const;
  void clear_oldest_message() ;
  const ::google::protobuf::Timestamp& oldest_message() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_oldest_message();
  ::google::protobuf::Timestamp* mutable_oldest_message();
  void set_allocated_oldest_message(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_oldest_message(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_oldest_message();

  private:
  const ::google::protobuf::Timestamp& _internal_oldest_message() const;
  ::google::protobuf::Timestamp* _internal_mutable_oldest_message();

  public:
  // .google.protobuf.Timestamp newest_message = 7;
  bool has_newest_message() const;
  void clear_newest_message() ;
  const ::google::protobuf::Timestamp& newest_message() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_newest_message();
  ::google::protobuf::Timestamp* mutable_newest_message();
  void set_allocated_newest_message(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_newest_message(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_newest_message();

  private:
  const ::google::protobuf::Timestamp& _internal_newest_message() const;
  ::google::protobuf::Timestamp* _internal_mutable_newest_message();

  public:
  // bool has_more_before = 3;
  void clear_has_more_before() ;
  bool has_more_before() const;
  void set_has_more_before(bool value);

  private:
  bool _internal_has_more_before() const;
  void _internal_set_has_more_before(bool value);

  public:
  // bool has_more_after = 4;
  void clear_has_more_after() ;
  bool has_more_after() const;
  void set_has_more_after(bool value);

  private:
  bool _internal_has_more_after() const;
  void _internal_set_has_more_after(bool value);

  public:
  // int32 total_count = 5;
  void clear_total_count() ;
  ::int32_t total_count() const;
  void set_total_count(::int32_t value);

  private:
  ::int32_t _internal_total_count() const;
  void _internal_set_total_count(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.ChatHistoryResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 4,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ChatHistoryResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::blokus::ChatMessage > messages_;
    ::blokus::Result* result_;
    ::google::protobuf::Timestamp* oldest_message_;
    ::google::protobuf::Timestamp* newest_message_;
    bool has_more_before_;
    bool has_more_after_;
    ::int32_t total_count_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ChatMessage

// string message_id = 1;
inline void ChatMessage::clear_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_id_.ClearToEmpty();
}
inline const std::string& ChatMessage::message_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ChatMessage.message_id)
  return _internal_message_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChatMessage::set_message_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.ChatMessage.message_id)
}
inline std::string* ChatMessage::mutable_message_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message_id();
  // @@protoc_insertion_point(field_mutable:blokus.ChatMessage.message_id)
  return _s;
}
inline const std::string& ChatMessage::_internal_message_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_id_.Get();
}
inline void ChatMessage::_internal_set_message_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_id_.Set(value, GetArena());
}
inline std::string* ChatMessage::_internal_mutable_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_id_.Mutable( GetArena());
}
inline std::string* ChatMessage::release_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ChatMessage.message_id)
  return _impl_.message_id_.Release();
}
inline void ChatMessage::set_allocated_message_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_id_.IsDefault()) {
    _impl_.message_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.ChatMessage.message_id)
}

// .blokus.ChatType type = 2;
inline void ChatMessage::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::blokus::ChatType ChatMessage::type() const {
  // @@protoc_insertion_point(field_get:blokus.ChatMessage.type)
  return _internal_type();
}
inline void ChatMessage::set_type(::blokus::ChatType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:blokus.ChatMessage.type)
}
inline ::blokus::ChatType ChatMessage::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::blokus::ChatType>(_impl_.type_);
}
inline void ChatMessage::_internal_set_type(::blokus::ChatType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// .blokus.ChatScope scope = 3;
inline void ChatMessage::clear_scope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.scope_ = 0;
}
inline ::blokus::ChatScope ChatMessage::scope() const {
  // @@protoc_insertion_point(field_get:blokus.ChatMessage.scope)
  return _internal_scope();
}
inline void ChatMessage::set_scope(::blokus::ChatScope value) {
  _internal_set_scope(value);
  // @@protoc_insertion_point(field_set:blokus.ChatMessage.scope)
}
inline ::blokus::ChatScope ChatMessage::_internal_scope() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::blokus::ChatScope>(_impl_.scope_);
}
inline void ChatMessage::_internal_set_scope(::blokus::ChatScope value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.scope_ = value;
}

// string sender_username = 4;
inline void ChatMessage::clear_sender_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_username_.ClearToEmpty();
}
inline const std::string& ChatMessage::sender_username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ChatMessage.sender_username)
  return _internal_sender_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChatMessage::set_sender_username(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.ChatMessage.sender_username)
}
inline std::string* ChatMessage::mutable_sender_username() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sender_username();
  // @@protoc_insertion_point(field_mutable:blokus.ChatMessage.sender_username)
  return _s;
}
inline const std::string& ChatMessage::_internal_sender_username() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sender_username_.Get();
}
inline void ChatMessage::_internal_set_sender_username(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_username_.Set(value, GetArena());
}
inline std::string* ChatMessage::_internal_mutable_sender_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.sender_username_.Mutable( GetArena());
}
inline std::string* ChatMessage::release_sender_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ChatMessage.sender_username)
  return _impl_.sender_username_.Release();
}
inline void ChatMessage::set_allocated_sender_username(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_username_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.sender_username_.IsDefault()) {
    _impl_.sender_username_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.ChatMessage.sender_username)
}

// string sender_display_name = 5;
inline void ChatMessage::clear_sender_display_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_display_name_.ClearToEmpty();
}
inline const std::string& ChatMessage::sender_display_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ChatMessage.sender_display_name)
  return _internal_sender_display_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChatMessage::set_sender_display_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_display_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.ChatMessage.sender_display_name)
}
inline std::string* ChatMessage::mutable_sender_display_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sender_display_name();
  // @@protoc_insertion_point(field_mutable:blokus.ChatMessage.sender_display_name)
  return _s;
}
inline const std::string& ChatMessage::_internal_sender_display_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sender_display_name_.Get();
}
inline void ChatMessage::_internal_set_sender_display_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_display_name_.Set(value, GetArena());
}
inline std::string* ChatMessage::_internal_mutable_sender_display_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.sender_display_name_.Mutable( GetArena());
}
inline std::string* ChatMessage::release_sender_display_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ChatMessage.sender_display_name)
  return _impl_.sender_display_name_.Release();
}
inline void ChatMessage::set_allocated_sender_display_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_display_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.sender_display_name_.IsDefault()) {
    _impl_.sender_display_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.ChatMessage.sender_display_name)
}

// .blokus.PlayerColor sender_color = 6;
inline void ChatMessage::clear_sender_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_color_ = 0;
}
inline ::blokus::PlayerColor ChatMessage::sender_color() const {
  // @@protoc_insertion_point(field_get:blokus.ChatMessage.sender_color)
  return _internal_sender_color();
}
inline void ChatMessage::set_sender_color(::blokus::PlayerColor value) {
  _internal_set_sender_color(value);
  // @@protoc_insertion_point(field_set:blokus.ChatMessage.sender_color)
}
inline ::blokus::PlayerColor ChatMessage::_internal_sender_color() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::blokus::PlayerColor>(_impl_.sender_color_);
}
inline void ChatMessage::_internal_set_sender_color(::blokus::PlayerColor value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_color_ = value;
}

// string content = 7;
inline void ChatMessage::clear_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.ClearToEmpty();
}
inline const std::string& ChatMessage::content() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ChatMessage.content)
  return _internal_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChatMessage::set_content(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.ChatMessage.content)
}
inline std::string* ChatMessage::mutable_content() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:blokus.ChatMessage.content)
  return _s;
}
inline const std::string& ChatMessage::_internal_content() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.content_.Get();
}
inline void ChatMessage::_internal_set_content(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.Set(value, GetArena());
}
inline std::string* ChatMessage::_internal_mutable_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.content_.Mutable( GetArena());
}
inline std::string* ChatMessage::release_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ChatMessage.content)
  return _impl_.content_.Release();
}
inline void ChatMessage::set_allocated_content(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.ChatMessage.content)
}

// repeated string mentions = 8;
inline int ChatMessage::_internal_mentions_size() const {
  return _internal_mentions().size();
}
inline int ChatMessage::mentions_size() const {
  return _internal_mentions_size();
}
inline void ChatMessage::clear_mentions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mentions_.Clear();
}
inline std::string* ChatMessage::add_mentions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_mentions()->Add();
  // @@protoc_insertion_point(field_add_mutable:blokus.ChatMessage.mentions)
  return _s;
}
inline const std::string& ChatMessage::mentions(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ChatMessage.mentions)
  return _internal_mentions().Get(index);
}
inline std::string* ChatMessage::mutable_mentions(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.ChatMessage.mentions)
  return _internal_mutable_mentions()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void ChatMessage::set_mentions(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_mentions()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:blokus.ChatMessage.mentions)
}
template <typename Arg_, typename... Args_>
inline void ChatMessage::add_mentions(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_mentions(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:blokus.ChatMessage.mentions)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ChatMessage::mentions() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.ChatMessage.mentions)
  return _internal_mentions();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ChatMessage::mutable_mentions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.ChatMessage.mentions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_mentions();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ChatMessage::_internal_mentions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mentions_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ChatMessage::_internal_mutable_mentions() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.mentions_;
}

// repeated .blokus.ChatEmote emotes = 9;
inline int ChatMessage::_internal_emotes_size() const {
  return _internal_emotes().size();
}
inline int ChatMessage::emotes_size() const {
  return _internal_emotes_size();
}
inline void ChatMessage::clear_emotes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.emotes_.Clear();
}
inline ::blokus::ChatEmote* ChatMessage::mutable_emotes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.ChatMessage.emotes)
  return _internal_mutable_emotes()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::blokus::ChatEmote>* ChatMessage::mutable_emotes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.ChatMessage.emotes)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_emotes();
}
inline const ::blokus::ChatEmote& ChatMessage::emotes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ChatMessage.emotes)
  return _internal_emotes().Get(index);
}
inline ::blokus::ChatEmote* ChatMessage::add_emotes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::blokus::ChatEmote* _add = _internal_mutable_emotes()->Add();
  // @@protoc_insertion_point(field_add:blokus.ChatMessage.emotes)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::blokus::ChatEmote>& ChatMessage::emotes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.ChatMessage.emotes)
  return _internal_emotes();
}
inline const ::google::protobuf::RepeatedPtrField<::blokus::ChatEmote>&
ChatMessage::_internal_emotes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.emotes_;
}
inline ::google::protobuf::RepeatedPtrField<::blokus::ChatEmote>*
ChatMessage::_internal_mutable_emotes() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.emotes_;
}

// .google.protobuf.Timestamp timestamp = 10;
inline bool ChatMessage::has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.timestamp_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& ChatMessage::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& ChatMessage::timestamp() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ChatMessage.timestamp)
  return _internal_timestamp();
}
inline void ChatMessage::unsafe_arena_set_allocated_timestamp(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.ChatMessage.timestamp)
}
inline ::google::protobuf::Timestamp* ChatMessage::release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* ChatMessage::unsafe_arena_release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ChatMessage.timestamp)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* ChatMessage::_internal_mutable_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.timestamp_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.timestamp_;
}
inline ::google::protobuf::Timestamp* ChatMessage::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:blokus.ChatMessage.timestamp)
  return _msg;
}
inline void ChatMessage::set_allocated_timestamp(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.timestamp_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.ChatMessage.timestamp)
}

// int32 room_id = 11;
inline void ChatMessage::clear_room_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_id_ = 0;
}
inline ::int32_t ChatMessage::room_id() const {
  // @@protoc_insertion_point(field_get:blokus.ChatMessage.room_id)
  return _internal_room_id();
}
inline void ChatMessage::set_room_id(::int32_t value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:blokus.ChatMessage.room_id)
}
inline ::int32_t ChatMessage::_internal_room_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.room_id_;
}
inline void ChatMessage::_internal_set_room_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_id_ = value;
}

// string target_username = 12;
inline void ChatMessage::clear_target_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_username_.ClearToEmpty();
}
inline const std::string& ChatMessage::target_username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ChatMessage.target_username)
  return _internal_target_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChatMessage::set_target_username(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.ChatMessage.target_username)
}
inline std::string* ChatMessage::mutable_target_username() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_target_username();
  // @@protoc_insertion_point(field_mutable:blokus.ChatMessage.target_username)
  return _s;
}
inline const std::string& ChatMessage::_internal_target_username() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.target_username_.Get();
}
inline void ChatMessage::_internal_set_target_username(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_username_.Set(value, GetArena());
}
inline std::string* ChatMessage::_internal_mutable_target_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.target_username_.Mutable( GetArena());
}
inline std::string* ChatMessage::release_target_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ChatMessage.target_username)
  return _impl_.target_username_.Release();
}
inline void ChatMessage::set_allocated_target_username(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_username_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.target_username_.IsDefault()) {
    _impl_.target_username_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.ChatMessage.target_username)
}

// .blokus.MessageStatus status = 13;
inline void ChatMessage::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = 0;
}
inline ::blokus::MessageStatus ChatMessage::status() const {
  // @@protoc_insertion_point(field_get:blokus.ChatMessage.status)
  return _internal_status();
}
inline void ChatMessage::set_status(::blokus::MessageStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:blokus.ChatMessage.status)
}
inline ::blokus::MessageStatus ChatMessage::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::blokus::MessageStatus>(_impl_.status_);
}
inline void ChatMessage::_internal_set_status(::blokus::MessageStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = value;
}

// bool is_edited = 14;
inline void ChatMessage::clear_is_edited() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_edited_ = false;
}
inline bool ChatMessage::is_edited() const {
  // @@protoc_insertion_point(field_get:blokus.ChatMessage.is_edited)
  return _internal_is_edited();
}
inline void ChatMessage::set_is_edited(bool value) {
  _internal_set_is_edited(value);
  // @@protoc_insertion_point(field_set:blokus.ChatMessage.is_edited)
}
inline bool ChatMessage::_internal_is_edited() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_edited_;
}
inline void ChatMessage::_internal_set_is_edited(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_edited_ = value;
}

// .google.protobuf.Timestamp edited_at = 15;
inline bool ChatMessage::has_edited_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.edited_at_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& ChatMessage::_internal_edited_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.edited_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& ChatMessage::edited_at() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ChatMessage.edited_at)
  return _internal_edited_at();
}
inline void ChatMessage::unsafe_arena_set_allocated_edited_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.edited_at_);
  }
  _impl_.edited_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.ChatMessage.edited_at)
}
inline ::google::protobuf::Timestamp* ChatMessage::release_edited_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.edited_at_;
  _impl_.edited_at_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* ChatMessage::unsafe_arena_release_edited_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ChatMessage.edited_at)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.edited_at_;
  _impl_.edited_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* ChatMessage::_internal_mutable_edited_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.edited_at_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.edited_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.edited_at_;
}
inline ::google::protobuf::Timestamp* ChatMessage::mutable_edited_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_edited_at();
  // @@protoc_insertion_point(field_mutable:blokus.ChatMessage.edited_at)
  return _msg;
}
inline void ChatMessage::set_allocated_edited_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.edited_at_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.edited_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.ChatMessage.edited_at)
}

// string reply_to_message_id = 16;
inline void ChatMessage::clear_reply_to_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reply_to_message_id_.ClearToEmpty();
}
inline const std::string& ChatMessage::reply_to_message_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ChatMessage.reply_to_message_id)
  return _internal_reply_to_message_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChatMessage::set_reply_to_message_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reply_to_message_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.ChatMessage.reply_to_message_id)
}
inline std::string* ChatMessage::mutable_reply_to_message_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reply_to_message_id();
  // @@protoc_insertion_point(field_mutable:blokus.ChatMessage.reply_to_message_id)
  return _s;
}
inline const std::string& ChatMessage::_internal_reply_to_message_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reply_to_message_id_.Get();
}
inline void ChatMessage::_internal_set_reply_to_message_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reply_to_message_id_.Set(value, GetArena());
}
inline std::string* ChatMessage::_internal_mutable_reply_to_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.reply_to_message_id_.Mutable( GetArena());
}
inline std::string* ChatMessage::release_reply_to_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ChatMessage.reply_to_message_id)
  return _impl_.reply_to_message_id_.Release();
}
inline void ChatMessage::set_allocated_reply_to_message_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reply_to_message_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.reply_to_message_id_.IsDefault()) {
    _impl_.reply_to_message_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.ChatMessage.reply_to_message_id)
}

// repeated string attachments = 17;
inline int ChatMessage::_internal_attachments_size() const {
  return _internal_attachments().size();
}
inline int ChatMessage::attachments_size() const {
  return _internal_attachments_size();
}
inline void ChatMessage::clear_attachments() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attachments_.Clear();
}
inline std::string* ChatMessage::add_attachments() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_attachments()->Add();
  // @@protoc_insertion_point(field_add_mutable:blokus.ChatMessage.attachments)
  return _s;
}
inline const std::string& ChatMessage::attachments(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ChatMessage.attachments)
  return _internal_attachments().Get(index);
}
inline std::string* ChatMessage::mutable_attachments(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.ChatMessage.attachments)
  return _internal_mutable_attachments()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void ChatMessage::set_attachments(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_attachments()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:blokus.ChatMessage.attachments)
}
template <typename Arg_, typename... Args_>
inline void ChatMessage::add_attachments(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_attachments(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:blokus.ChatMessage.attachments)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ChatMessage::attachments() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.ChatMessage.attachments)
  return _internal_attachments();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ChatMessage::mutable_attachments() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.ChatMessage.attachments)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_attachments();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ChatMessage::_internal_attachments() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.attachments_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ChatMessage::_internal_mutable_attachments() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.attachments_;
}

// map<string, string> metadata = 18;
inline int ChatMessage::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int ChatMessage::metadata_size() const {
  return _internal_metadata_size();
}
inline void ChatMessage::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& ChatMessage::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& ChatMessage::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:blokus.ChatMessage.metadata)
  return _internal_metadata();
}
inline ::google::protobuf::Map<std::string, std::string>* ChatMessage::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* ChatMessage::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:blokus.ChatMessage.metadata)
  return _internal_mutable_metadata();
}

// -------------------------------------------------------------------

// ChatEmote

// string emote_id = 1;
inline void ChatEmote::clear_emote_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.emote_id_.ClearToEmpty();
}
inline const std::string& ChatEmote::emote_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ChatEmote.emote_id)
  return _internal_emote_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChatEmote::set_emote_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.emote_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.ChatEmote.emote_id)
}
inline std::string* ChatEmote::mutable_emote_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_emote_id();
  // @@protoc_insertion_point(field_mutable:blokus.ChatEmote.emote_id)
  return _s;
}
inline const std::string& ChatEmote::_internal_emote_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.emote_id_.Get();
}
inline void ChatEmote::_internal_set_emote_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.emote_id_.Set(value, GetArena());
}
inline std::string* ChatEmote::_internal_mutable_emote_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.emote_id_.Mutable( GetArena());
}
inline std::string* ChatEmote::release_emote_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ChatEmote.emote_id)
  return _impl_.emote_id_.Release();
}
inline void ChatEmote::set_allocated_emote_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.emote_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.emote_id_.IsDefault()) {
    _impl_.emote_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.ChatEmote.emote_id)
}

// string emote_name = 2;
inline void ChatEmote::clear_emote_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.emote_name_.ClearToEmpty();
}
inline const std::string& ChatEmote::emote_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ChatEmote.emote_name)
  return _internal_emote_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChatEmote::set_emote_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.emote_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.ChatEmote.emote_name)
}
inline std::string* ChatEmote::mutable_emote_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_emote_name();
  // @@protoc_insertion_point(field_mutable:blokus.ChatEmote.emote_name)
  return _s;
}
inline const std::string& ChatEmote::_internal_emote_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.emote_name_.Get();
}
inline void ChatEmote::_internal_set_emote_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.emote_name_.Set(value, GetArena());
}
inline std::string* ChatEmote::_internal_mutable_emote_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.emote_name_.Mutable( GetArena());
}
inline std::string* ChatEmote::release_emote_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ChatEmote.emote_name)
  return _impl_.emote_name_.Release();
}
inline void ChatEmote::set_allocated_emote_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.emote_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.emote_name_.IsDefault()) {
    _impl_.emote_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.ChatEmote.emote_name)
}

// string emote_url = 3;
inline void ChatEmote::clear_emote_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.emote_url_.ClearToEmpty();
}
inline const std::string& ChatEmote::emote_url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ChatEmote.emote_url)
  return _internal_emote_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChatEmote::set_emote_url(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.emote_url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.ChatEmote.emote_url)
}
inline std::string* ChatEmote::mutable_emote_url() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_emote_url();
  // @@protoc_insertion_point(field_mutable:blokus.ChatEmote.emote_url)
  return _s;
}
inline const std::string& ChatEmote::_internal_emote_url() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.emote_url_.Get();
}
inline void ChatEmote::_internal_set_emote_url(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.emote_url_.Set(value, GetArena());
}
inline std::string* ChatEmote::_internal_mutable_emote_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.emote_url_.Mutable( GetArena());
}
inline std::string* ChatEmote::release_emote_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ChatEmote.emote_url)
  return _impl_.emote_url_.Release();
}
inline void ChatEmote::set_allocated_emote_url(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.emote_url_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.emote_url_.IsDefault()) {
    _impl_.emote_url_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.ChatEmote.emote_url)
}

// int32 start_position = 4;
inline void ChatEmote::clear_start_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.start_position_ = 0;
}
inline ::int32_t ChatEmote::start_position() const {
  // @@protoc_insertion_point(field_get:blokus.ChatEmote.start_position)
  return _internal_start_position();
}
inline void ChatEmote::set_start_position(::int32_t value) {
  _internal_set_start_position(value);
  // @@protoc_insertion_point(field_set:blokus.ChatEmote.start_position)
}
inline ::int32_t ChatEmote::_internal_start_position() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.start_position_;
}
inline void ChatEmote::_internal_set_start_position(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.start_position_ = value;
}

// int32 end_position = 5;
inline void ChatEmote::clear_end_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.end_position_ = 0;
}
inline ::int32_t ChatEmote::end_position() const {
  // @@protoc_insertion_point(field_get:blokus.ChatEmote.end_position)
  return _internal_end_position();
}
inline void ChatEmote::set_end_position(::int32_t value) {
  _internal_set_end_position(value);
  // @@protoc_insertion_point(field_set:blokus.ChatEmote.end_position)
}
inline ::int32_t ChatEmote::_internal_end_position() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.end_position_;
}
inline void ChatEmote::_internal_set_end_position(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.end_position_ = value;
}

// -------------------------------------------------------------------

// SendChatRequest

// .blokus.ChatType type = 1;
inline void SendChatRequest::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::blokus::ChatType SendChatRequest::type() const {
  // @@protoc_insertion_point(field_get:blokus.SendChatRequest.type)
  return _internal_type();
}
inline void SendChatRequest::set_type(::blokus::ChatType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:blokus.SendChatRequest.type)
}
inline ::blokus::ChatType SendChatRequest::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::blokus::ChatType>(_impl_.type_);
}
inline void SendChatRequest::_internal_set_type(::blokus::ChatType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// .blokus.ChatScope scope = 2;
inline void SendChatRequest::clear_scope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.scope_ = 0;
}
inline ::blokus::ChatScope SendChatRequest::scope() const {
  // @@protoc_insertion_point(field_get:blokus.SendChatRequest.scope)
  return _internal_scope();
}
inline void SendChatRequest::set_scope(::blokus::ChatScope value) {
  _internal_set_scope(value);
  // @@protoc_insertion_point(field_set:blokus.SendChatRequest.scope)
}
inline ::blokus::ChatScope SendChatRequest::_internal_scope() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::blokus::ChatScope>(_impl_.scope_);
}
inline void SendChatRequest::_internal_set_scope(::blokus::ChatScope value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.scope_ = value;
}

// string content = 3;
inline void SendChatRequest::clear_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.ClearToEmpty();
}
inline const std::string& SendChatRequest::content() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.SendChatRequest.content)
  return _internal_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SendChatRequest::set_content(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.SendChatRequest.content)
}
inline std::string* SendChatRequest::mutable_content() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:blokus.SendChatRequest.content)
  return _s;
}
inline const std::string& SendChatRequest::_internal_content() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.content_.Get();
}
inline void SendChatRequest::_internal_set_content(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.Set(value, GetArena());
}
inline std::string* SendChatRequest::_internal_mutable_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.content_.Mutable( GetArena());
}
inline std::string* SendChatRequest::release_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.SendChatRequest.content)
  return _impl_.content_.Release();
}
inline void SendChatRequest::set_allocated_content(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.SendChatRequest.content)
}

// int32 room_id = 4;
inline void SendChatRequest::clear_room_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_id_ = 0;
}
inline ::int32_t SendChatRequest::room_id() const {
  // @@protoc_insertion_point(field_get:blokus.SendChatRequest.room_id)
  return _internal_room_id();
}
inline void SendChatRequest::set_room_id(::int32_t value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:blokus.SendChatRequest.room_id)
}
inline ::int32_t SendChatRequest::_internal_room_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.room_id_;
}
inline void SendChatRequest::_internal_set_room_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_id_ = value;
}

// string target_username = 5;
inline void SendChatRequest::clear_target_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_username_.ClearToEmpty();
}
inline const std::string& SendChatRequest::target_username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.SendChatRequest.target_username)
  return _internal_target_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SendChatRequest::set_target_username(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.SendChatRequest.target_username)
}
inline std::string* SendChatRequest::mutable_target_username() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_target_username();
  // @@protoc_insertion_point(field_mutable:blokus.SendChatRequest.target_username)
  return _s;
}
inline const std::string& SendChatRequest::_internal_target_username() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.target_username_.Get();
}
inline void SendChatRequest::_internal_set_target_username(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_username_.Set(value, GetArena());
}
inline std::string* SendChatRequest::_internal_mutable_target_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.target_username_.Mutable( GetArena());
}
inline std::string* SendChatRequest::release_target_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.SendChatRequest.target_username)
  return _impl_.target_username_.Release();
}
inline void SendChatRequest::set_allocated_target_username(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_username_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.target_username_.IsDefault()) {
    _impl_.target_username_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.SendChatRequest.target_username)
}

// string reply_to_message_id = 6;
inline void SendChatRequest::clear_reply_to_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reply_to_message_id_.ClearToEmpty();
}
inline const std::string& SendChatRequest::reply_to_message_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.SendChatRequest.reply_to_message_id)
  return _internal_reply_to_message_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SendChatRequest::set_reply_to_message_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reply_to_message_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.SendChatRequest.reply_to_message_id)
}
inline std::string* SendChatRequest::mutable_reply_to_message_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reply_to_message_id();
  // @@protoc_insertion_point(field_mutable:blokus.SendChatRequest.reply_to_message_id)
  return _s;
}
inline const std::string& SendChatRequest::_internal_reply_to_message_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reply_to_message_id_.Get();
}
inline void SendChatRequest::_internal_set_reply_to_message_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reply_to_message_id_.Set(value, GetArena());
}
inline std::string* SendChatRequest::_internal_mutable_reply_to_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.reply_to_message_id_.Mutable( GetArena());
}
inline std::string* SendChatRequest::release_reply_to_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.SendChatRequest.reply_to_message_id)
  return _impl_.reply_to_message_id_.Release();
}
inline void SendChatRequest::set_allocated_reply_to_message_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reply_to_message_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.reply_to_message_id_.IsDefault()) {
    _impl_.reply_to_message_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.SendChatRequest.reply_to_message_id)
}

// repeated string attachments = 7;
inline int SendChatRequest::_internal_attachments_size() const {
  return _internal_attachments().size();
}
inline int SendChatRequest::attachments_size() const {
  return _internal_attachments_size();
}
inline void SendChatRequest::clear_attachments() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attachments_.Clear();
}
inline std::string* SendChatRequest::add_attachments() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_attachments()->Add();
  // @@protoc_insertion_point(field_add_mutable:blokus.SendChatRequest.attachments)
  return _s;
}
inline const std::string& SendChatRequest::attachments(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.SendChatRequest.attachments)
  return _internal_attachments().Get(index);
}
inline std::string* SendChatRequest::mutable_attachments(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.SendChatRequest.attachments)
  return _internal_mutable_attachments()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void SendChatRequest::set_attachments(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_attachments()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:blokus.SendChatRequest.attachments)
}
template <typename Arg_, typename... Args_>
inline void SendChatRequest::add_attachments(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_attachments(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:blokus.SendChatRequest.attachments)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
SendChatRequest::attachments() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.SendChatRequest.attachments)
  return _internal_attachments();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
SendChatRequest::mutable_attachments() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.SendChatRequest.attachments)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_attachments();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
SendChatRequest::_internal_attachments() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.attachments_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
SendChatRequest::_internal_mutable_attachments() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.attachments_;
}

// bool silent = 8;
inline void SendChatRequest::clear_silent() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.silent_ = false;
}
inline bool SendChatRequest::silent() const {
  // @@protoc_insertion_point(field_get:blokus.SendChatRequest.silent)
  return _internal_silent();
}
inline void SendChatRequest::set_silent(bool value) {
  _internal_set_silent(value);
  // @@protoc_insertion_point(field_set:blokus.SendChatRequest.silent)
}
inline bool SendChatRequest::_internal_silent() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.silent_;
}
inline void SendChatRequest::_internal_set_silent(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.silent_ = value;
}

// string client_message_id = 9;
inline void SendChatRequest::clear_client_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_message_id_.ClearToEmpty();
}
inline const std::string& SendChatRequest::client_message_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.SendChatRequest.client_message_id)
  return _internal_client_message_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SendChatRequest::set_client_message_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_message_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.SendChatRequest.client_message_id)
}
inline std::string* SendChatRequest::mutable_client_message_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_client_message_id();
  // @@protoc_insertion_point(field_mutable:blokus.SendChatRequest.client_message_id)
  return _s;
}
inline const std::string& SendChatRequest::_internal_client_message_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.client_message_id_.Get();
}
inline void SendChatRequest::_internal_set_client_message_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_message_id_.Set(value, GetArena());
}
inline std::string* SendChatRequest::_internal_mutable_client_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.client_message_id_.Mutable( GetArena());
}
inline std::string* SendChatRequest::release_client_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.SendChatRequest.client_message_id)
  return _impl_.client_message_id_.Release();
}
inline void SendChatRequest::set_allocated_client_message_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_message_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.client_message_id_.IsDefault()) {
    _impl_.client_message_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.SendChatRequest.client_message_id)
}

// -------------------------------------------------------------------

// SendChatResponse

// .blokus.Result result = 1;
inline bool SendChatResponse::has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.result_ != nullptr);
  return value;
}
inline const ::blokus::Result& SendChatResponse::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::Result* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::Result&>(::blokus::_Result_default_instance_);
}
inline const ::blokus::Result& SendChatResponse::result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.SendChatResponse.result)
  return _internal_result();
}
inline void SendChatResponse::unsafe_arena_set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.SendChatResponse.result)
}
inline ::blokus::Result* SendChatResponse::release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* released = _impl_.result_;
  _impl_.result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::Result* SendChatResponse::unsafe_arena_release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.SendChatResponse.result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::blokus::Result* SendChatResponse::_internal_mutable_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::Result>(GetArena());
    _impl_.result_ = reinterpret_cast<::blokus::Result*>(p);
  }
  return _impl_.result_;
}
inline ::blokus::Result* SendChatResponse::mutable_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::blokus::Result* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:blokus.SendChatResponse.result)
  return _msg;
}
inline void SendChatResponse::set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.SendChatResponse.result)
}

// string message_id = 2;
inline void SendChatResponse::clear_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_id_.ClearToEmpty();
}
inline const std::string& SendChatResponse::message_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.SendChatResponse.message_id)
  return _internal_message_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SendChatResponse::set_message_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.SendChatResponse.message_id)
}
inline std::string* SendChatResponse::mutable_message_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message_id();
  // @@protoc_insertion_point(field_mutable:blokus.SendChatResponse.message_id)
  return _s;
}
inline const std::string& SendChatResponse::_internal_message_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_id_.Get();
}
inline void SendChatResponse::_internal_set_message_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_id_.Set(value, GetArena());
}
inline std::string* SendChatResponse::_internal_mutable_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_id_.Mutable( GetArena());
}
inline std::string* SendChatResponse::release_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.SendChatResponse.message_id)
  return _impl_.message_id_.Release();
}
inline void SendChatResponse::set_allocated_message_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_id_.IsDefault()) {
    _impl_.message_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.SendChatResponse.message_id)
}

// string client_message_id = 3;
inline void SendChatResponse::clear_client_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_message_id_.ClearToEmpty();
}
inline const std::string& SendChatResponse::client_message_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.SendChatResponse.client_message_id)
  return _internal_client_message_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SendChatResponse::set_client_message_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_message_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.SendChatResponse.client_message_id)
}
inline std::string* SendChatResponse::mutable_client_message_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_client_message_id();
  // @@protoc_insertion_point(field_mutable:blokus.SendChatResponse.client_message_id)
  return _s;
}
inline const std::string& SendChatResponse::_internal_client_message_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.client_message_id_.Get();
}
inline void SendChatResponse::_internal_set_client_message_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_message_id_.Set(value, GetArena());
}
inline std::string* SendChatResponse::_internal_mutable_client_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.client_message_id_.Mutable( GetArena());
}
inline std::string* SendChatResponse::release_client_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.SendChatResponse.client_message_id)
  return _impl_.client_message_id_.Release();
}
inline void SendChatResponse::set_allocated_client_message_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_message_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.client_message_id_.IsDefault()) {
    _impl_.client_message_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.SendChatResponse.client_message_id)
}

// .google.protobuf.Timestamp sent_at = 4;
inline bool SendChatResponse::has_sent_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sent_at_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& SendChatResponse::_internal_sent_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.sent_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& SendChatResponse::sent_at() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.SendChatResponse.sent_at)
  return _internal_sent_at();
}
inline void SendChatResponse::unsafe_arena_set_allocated_sent_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.sent_at_);
  }
  _impl_.sent_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.SendChatResponse.sent_at)
}
inline ::google::protobuf::Timestamp* SendChatResponse::release_sent_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.sent_at_;
  _impl_.sent_at_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* SendChatResponse::unsafe_arena_release_sent_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.SendChatResponse.sent_at)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.sent_at_;
  _impl_.sent_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* SendChatResponse::_internal_mutable_sent_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.sent_at_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.sent_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.sent_at_;
}
inline ::google::protobuf::Timestamp* SendChatResponse::mutable_sent_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_sent_at();
  // @@protoc_insertion_point(field_mutable:blokus.SendChatResponse.sent_at)
  return _msg;
}
inline void SendChatResponse::set_allocated_sent_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.sent_at_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.sent_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.SendChatResponse.sent_at)
}

// string filtered_content = 5;
inline void SendChatResponse::clear_filtered_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filtered_content_.ClearToEmpty();
}
inline const std::string& SendChatResponse::filtered_content() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.SendChatResponse.filtered_content)
  return _internal_filtered_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SendChatResponse::set_filtered_content(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filtered_content_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.SendChatResponse.filtered_content)
}
inline std::string* SendChatResponse::mutable_filtered_content() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_filtered_content();
  // @@protoc_insertion_point(field_mutable:blokus.SendChatResponse.filtered_content)
  return _s;
}
inline const std::string& SendChatResponse::_internal_filtered_content() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.filtered_content_.Get();
}
inline void SendChatResponse::_internal_set_filtered_content(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filtered_content_.Set(value, GetArena());
}
inline std::string* SendChatResponse::_internal_mutable_filtered_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.filtered_content_.Mutable( GetArena());
}
inline std::string* SendChatResponse::release_filtered_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.SendChatResponse.filtered_content)
  return _impl_.filtered_content_.Release();
}
inline void SendChatResponse::set_allocated_filtered_content(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filtered_content_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.filtered_content_.IsDefault()) {
    _impl_.filtered_content_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.SendChatResponse.filtered_content)
}

// repeated string blocked_words = 6;
inline int SendChatResponse::_internal_blocked_words_size() const {
  return _internal_blocked_words().size();
}
inline int SendChatResponse::blocked_words_size() const {
  return _internal_blocked_words_size();
}
inline void SendChatResponse::clear_blocked_words() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.blocked_words_.Clear();
}
inline std::string* SendChatResponse::add_blocked_words() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_blocked_words()->Add();
  // @@protoc_insertion_point(field_add_mutable:blokus.SendChatResponse.blocked_words)
  return _s;
}
inline const std::string& SendChatResponse::blocked_words(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.SendChatResponse.blocked_words)
  return _internal_blocked_words().Get(index);
}
inline std::string* SendChatResponse::mutable_blocked_words(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.SendChatResponse.blocked_words)
  return _internal_mutable_blocked_words()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void SendChatResponse::set_blocked_words(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_blocked_words()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:blokus.SendChatResponse.blocked_words)
}
template <typename Arg_, typename... Args_>
inline void SendChatResponse::add_blocked_words(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_blocked_words(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:blokus.SendChatResponse.blocked_words)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
SendChatResponse::blocked_words() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.SendChatResponse.blocked_words)
  return _internal_blocked_words();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
SendChatResponse::mutable_blocked_words() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.SendChatResponse.blocked_words)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_blocked_words();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
SendChatResponse::_internal_blocked_words() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.blocked_words_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
SendChatResponse::_internal_mutable_blocked_words() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.blocked_words_;
}

// int32 cooldown_seconds = 7;
inline void SendChatResponse::clear_cooldown_seconds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cooldown_seconds_ = 0;
}
inline ::int32_t SendChatResponse::cooldown_seconds() const {
  // @@protoc_insertion_point(field_get:blokus.SendChatResponse.cooldown_seconds)
  return _internal_cooldown_seconds();
}
inline void SendChatResponse::set_cooldown_seconds(::int32_t value) {
  _internal_set_cooldown_seconds(value);
  // @@protoc_insertion_point(field_set:blokus.SendChatResponse.cooldown_seconds)
}
inline ::int32_t SendChatResponse::_internal_cooldown_seconds() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cooldown_seconds_;
}
inline void SendChatResponse::_internal_set_cooldown_seconds(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cooldown_seconds_ = value;
}

// -------------------------------------------------------------------

// ChatNotification

// .blokus.ChatMessage message = 1;
inline bool ChatNotification::has_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.message_ != nullptr);
  return value;
}
inline void ChatNotification::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.message_ != nullptr) _impl_.message_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::blokus::ChatMessage& ChatNotification::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::ChatMessage* p = _impl_.message_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::ChatMessage&>(::blokus::_ChatMessage_default_instance_);
}
inline const ::blokus::ChatMessage& ChatNotification::message() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ChatNotification.message)
  return _internal_message();
}
inline void ChatNotification::unsafe_arena_set_allocated_message(::blokus::ChatMessage* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.message_);
  }
  _impl_.message_ = reinterpret_cast<::blokus::ChatMessage*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.ChatNotification.message)
}
inline ::blokus::ChatMessage* ChatNotification::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::ChatMessage* released = _impl_.message_;
  _impl_.message_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::ChatMessage* ChatNotification::unsafe_arena_release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ChatNotification.message)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::ChatMessage* temp = _impl_.message_;
  _impl_.message_ = nullptr;
  return temp;
}
inline ::blokus::ChatMessage* ChatNotification::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.message_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::ChatMessage>(GetArena());
    _impl_.message_ = reinterpret_cast<::blokus::ChatMessage*>(p);
  }
  return _impl_.message_;
}
inline ::blokus::ChatMessage* ChatNotification::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::blokus::ChatMessage* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:blokus.ChatNotification.message)
  return _msg;
}
inline void ChatNotification::set_allocated_message(::blokus::ChatMessage* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.message_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.message_ = reinterpret_cast<::blokus::ChatMessage*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.ChatNotification.message)
}

// bool should_notify = 2;
inline void ChatNotification::clear_should_notify() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.should_notify_ = false;
}
inline bool ChatNotification::should_notify() const {
  // @@protoc_insertion_point(field_get:blokus.ChatNotification.should_notify)
  return _internal_should_notify();
}
inline void ChatNotification::set_should_notify(bool value) {
  _internal_set_should_notify(value);
  // @@protoc_insertion_point(field_set:blokus.ChatNotification.should_notify)
}
inline bool ChatNotification::_internal_should_notify() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.should_notify_;
}
inline void ChatNotification::_internal_set_should_notify(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.should_notify_ = value;
}

// bool mentioned = 3;
inline void ChatNotification::clear_mentioned() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mentioned_ = false;
}
inline bool ChatNotification::mentioned() const {
  // @@protoc_insertion_point(field_get:blokus.ChatNotification.mentioned)
  return _internal_mentioned();
}
inline void ChatNotification::set_mentioned(bool value) {
  _internal_set_mentioned(value);
  // @@protoc_insertion_point(field_set:blokus.ChatNotification.mentioned)
}
inline bool ChatNotification::_internal_mentioned() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mentioned_;
}
inline void ChatNotification::_internal_set_mentioned(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mentioned_ = value;
}

// bool is_important = 4;
inline void ChatNotification::clear_is_important() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_important_ = false;
}
inline bool ChatNotification::is_important() const {
  // @@protoc_insertion_point(field_get:blokus.ChatNotification.is_important)
  return _internal_is_important();
}
inline void ChatNotification::set_is_important(bool value) {
  _internal_set_is_important(value);
  // @@protoc_insertion_point(field_set:blokus.ChatNotification.is_important)
}
inline bool ChatNotification::_internal_is_important() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_important_;
}
inline void ChatNotification::_internal_set_is_important(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_important_ = value;
}

// int32 unread_count = 5;
inline void ChatNotification::clear_unread_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.unread_count_ = 0;
}
inline ::int32_t ChatNotification::unread_count() const {
  // @@protoc_insertion_point(field_get:blokus.ChatNotification.unread_count)
  return _internal_unread_count();
}
inline void ChatNotification::set_unread_count(::int32_t value) {
  _internal_set_unread_count(value);
  // @@protoc_insertion_point(field_set:blokus.ChatNotification.unread_count)
}
inline ::int32_t ChatNotification::_internal_unread_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.unread_count_;
}
inline void ChatNotification::_internal_set_unread_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.unread_count_ = value;
}

// bool is_first_message = 6;
inline void ChatNotification::clear_is_first_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_first_message_ = false;
}
inline bool ChatNotification::is_first_message() const {
  // @@protoc_insertion_point(field_get:blokus.ChatNotification.is_first_message)
  return _internal_is_first_message();
}
inline void ChatNotification::set_is_first_message(bool value) {
  _internal_set_is_first_message(value);
  // @@protoc_insertion_point(field_set:blokus.ChatNotification.is_first_message)
}
inline bool ChatNotification::_internal_is_first_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_first_message_;
}
inline void ChatNotification::_internal_set_is_first_message(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_first_message_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SystemMessage

// .blokus.SystemMessage.SystemMessageType system_type = 1;
inline void SystemMessage::clear_system_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.system_type_ = 0;
}
inline ::blokus::SystemMessage_SystemMessageType SystemMessage::system_type() const {
  // @@protoc_insertion_point(field_get:blokus.SystemMessage.system_type)
  return _internal_system_type();
}
inline void SystemMessage::set_system_type(::blokus::SystemMessage_SystemMessageType value) {
  _internal_set_system_type(value);
  // @@protoc_insertion_point(field_set:blokus.SystemMessage.system_type)
}
inline ::blokus::SystemMessage_SystemMessageType SystemMessage::_internal_system_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::blokus::SystemMessage_SystemMessageType>(_impl_.system_type_);
}
inline void SystemMessage::_internal_set_system_type(::blokus::SystemMessage_SystemMessageType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.system_type_ = value;
}

// string message = 2;
inline void SystemMessage::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& SystemMessage::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.SystemMessage.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SystemMessage::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.SystemMessage.message)
}
inline std::string* SystemMessage::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:blokus.SystemMessage.message)
  return _s;
}
inline const std::string& SystemMessage::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void SystemMessage::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* SystemMessage::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* SystemMessage::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.SystemMessage.message)
  return _impl_.message_.Release();
}
inline void SystemMessage::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.SystemMessage.message)
}

// map<string, string> parameters = 3;
inline int SystemMessage::_internal_parameters_size() const {
  return _internal_parameters().size();
}
inline int SystemMessage::parameters_size() const {
  return _internal_parameters_size();
}
inline void SystemMessage::clear_parameters() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.parameters_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& SystemMessage::_internal_parameters() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.parameters_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& SystemMessage::parameters() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:blokus.SystemMessage.parameters)
  return _internal_parameters();
}
inline ::google::protobuf::Map<std::string, std::string>* SystemMessage::_internal_mutable_parameters() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.parameters_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* SystemMessage::mutable_parameters() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:blokus.SystemMessage.parameters)
  return _internal_mutable_parameters();
}

// bool show_in_chat = 4;
inline void SystemMessage::clear_show_in_chat() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.show_in_chat_ = false;
}
inline bool SystemMessage::show_in_chat() const {
  // @@protoc_insertion_point(field_get:blokus.SystemMessage.show_in_chat)
  return _internal_show_in_chat();
}
inline void SystemMessage::set_show_in_chat(bool value) {
  _internal_set_show_in_chat(value);
  // @@protoc_insertion_point(field_set:blokus.SystemMessage.show_in_chat)
}
inline bool SystemMessage::_internal_show_in_chat() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.show_in_chat_;
}
inline void SystemMessage::_internal_set_show_in_chat(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.show_in_chat_ = value;
}

// bool show_as_popup = 5;
inline void SystemMessage::clear_show_as_popup() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.show_as_popup_ = false;
}
inline bool SystemMessage::show_as_popup() const {
  // @@protoc_insertion_point(field_get:blokus.SystemMessage.show_as_popup)
  return _internal_show_as_popup();
}
inline void SystemMessage::set_show_as_popup(bool value) {
  _internal_set_show_as_popup(value);
  // @@protoc_insertion_point(field_set:blokus.SystemMessage.show_as_popup)
}
inline bool SystemMessage::_internal_show_as_popup() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.show_as_popup_;
}
inline void SystemMessage::_internal_set_show_as_popup(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.show_as_popup_ = value;
}

// string icon = 6;
inline void SystemMessage::clear_icon() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.icon_.ClearToEmpty();
}
inline const std::string& SystemMessage::icon() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.SystemMessage.icon)
  return _internal_icon();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SystemMessage::set_icon(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.icon_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.SystemMessage.icon)
}
inline std::string* SystemMessage::mutable_icon() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_icon();
  // @@protoc_insertion_point(field_mutable:blokus.SystemMessage.icon)
  return _s;
}
inline const std::string& SystemMessage::_internal_icon() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.icon_.Get();
}
inline void SystemMessage::_internal_set_icon(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.icon_.Set(value, GetArena());
}
inline std::string* SystemMessage::_internal_mutable_icon() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.icon_.Mutable( GetArena());
}
inline std::string* SystemMessage::release_icon() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.SystemMessage.icon)
  return _impl_.icon_.Release();
}
inline void SystemMessage::set_allocated_icon(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.icon_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.icon_.IsDefault()) {
    _impl_.icon_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.SystemMessage.icon)
}

// string color = 7;
inline void SystemMessage::clear_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.color_.ClearToEmpty();
}
inline const std::string& SystemMessage::color() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.SystemMessage.color)
  return _internal_color();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SystemMessage::set_color(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.color_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.SystemMessage.color)
}
inline std::string* SystemMessage::mutable_color() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:blokus.SystemMessage.color)
  return _s;
}
inline const std::string& SystemMessage::_internal_color() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.color_.Get();
}
inline void SystemMessage::_internal_set_color(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.color_.Set(value, GetArena());
}
inline std::string* SystemMessage::_internal_mutable_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.color_.Mutable( GetArena());
}
inline std::string* SystemMessage::release_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.SystemMessage.color)
  return _impl_.color_.Release();
}
inline void SystemMessage::set_allocated_color(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.color_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.color_.IsDefault()) {
    _impl_.color_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.SystemMessage.color)
}

// -------------------------------------------------------------------

// GetChatHistoryRequest

// .blokus.ChatScope scope = 1;
inline void GetChatHistoryRequest::clear_scope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.scope_ = 0;
}
inline ::blokus::ChatScope GetChatHistoryRequest::scope() const {
  // @@protoc_insertion_point(field_get:blokus.GetChatHistoryRequest.scope)
  return _internal_scope();
}
inline void GetChatHistoryRequest::set_scope(::blokus::ChatScope value) {
  _internal_set_scope(value);
  // @@protoc_insertion_point(field_set:blokus.GetChatHistoryRequest.scope)
}
inline ::blokus::ChatScope GetChatHistoryRequest::_internal_scope() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::blokus::ChatScope>(_impl_.scope_);
}
inline void GetChatHistoryRequest::_internal_set_scope(::blokus::ChatScope value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.scope_ = value;
}

// int32 room_id = 2;
inline void GetChatHistoryRequest::clear_room_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_id_ = 0;
}
inline ::int32_t GetChatHistoryRequest::room_id() const {
  // @@protoc_insertion_point(field_get:blokus.GetChatHistoryRequest.room_id)
  return _internal_room_id();
}
inline void GetChatHistoryRequest::set_room_id(::int32_t value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:blokus.GetChatHistoryRequest.room_id)
}
inline ::int32_t GetChatHistoryRequest::_internal_room_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.room_id_;
}
inline void GetChatHistoryRequest::_internal_set_room_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_id_ = value;
}

// string target_username = 3;
inline void GetChatHistoryRequest::clear_target_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_username_.ClearToEmpty();
}
inline const std::string& GetChatHistoryRequest::target_username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.GetChatHistoryRequest.target_username)
  return _internal_target_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetChatHistoryRequest::set_target_username(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.GetChatHistoryRequest.target_username)
}
inline std::string* GetChatHistoryRequest::mutable_target_username() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_target_username();
  // @@protoc_insertion_point(field_mutable:blokus.GetChatHistoryRequest.target_username)
  return _s;
}
inline const std::string& GetChatHistoryRequest::_internal_target_username() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.target_username_.Get();
}
inline void GetChatHistoryRequest::_internal_set_target_username(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_username_.Set(value, GetArena());
}
inline std::string* GetChatHistoryRequest::_internal_mutable_target_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.target_username_.Mutable( GetArena());
}
inline std::string* GetChatHistoryRequest::release_target_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.GetChatHistoryRequest.target_username)
  return _impl_.target_username_.Release();
}
inline void GetChatHistoryRequest::set_allocated_target_username(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_username_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.target_username_.IsDefault()) {
    _impl_.target_username_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.GetChatHistoryRequest.target_username)
}

// int32 limit = 4;
inline void GetChatHistoryRequest::clear_limit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.limit_ = 0;
}
inline ::int32_t GetChatHistoryRequest::limit() const {
  // @@protoc_insertion_point(field_get:blokus.GetChatHistoryRequest.limit)
  return _internal_limit();
}
inline void GetChatHistoryRequest::set_limit(::int32_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:blokus.GetChatHistoryRequest.limit)
}
inline ::int32_t GetChatHistoryRequest::_internal_limit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.limit_;
}
inline void GetChatHistoryRequest::_internal_set_limit(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.limit_ = value;
}

// string before_message_id = 5;
inline void GetChatHistoryRequest::clear_before_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.before_message_id_.ClearToEmpty();
}
inline const std::string& GetChatHistoryRequest::before_message_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.GetChatHistoryRequest.before_message_id)
  return _internal_before_message_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetChatHistoryRequest::set_before_message_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.before_message_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.GetChatHistoryRequest.before_message_id)
}
inline std::string* GetChatHistoryRequest::mutable_before_message_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_before_message_id();
  // @@protoc_insertion_point(field_mutable:blokus.GetChatHistoryRequest.before_message_id)
  return _s;
}
inline const std::string& GetChatHistoryRequest::_internal_before_message_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.before_message_id_.Get();
}
inline void GetChatHistoryRequest::_internal_set_before_message_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.before_message_id_.Set(value, GetArena());
}
inline std::string* GetChatHistoryRequest::_internal_mutable_before_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.before_message_id_.Mutable( GetArena());
}
inline std::string* GetChatHistoryRequest::release_before_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.GetChatHistoryRequest.before_message_id)
  return _impl_.before_message_id_.Release();
}
inline void GetChatHistoryRequest::set_allocated_before_message_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.before_message_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.before_message_id_.IsDefault()) {
    _impl_.before_message_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.GetChatHistoryRequest.before_message_id)
}

// string after_message_id = 6;
inline void GetChatHistoryRequest::clear_after_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.after_message_id_.ClearToEmpty();
}
inline const std::string& GetChatHistoryRequest::after_message_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.GetChatHistoryRequest.after_message_id)
  return _internal_after_message_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetChatHistoryRequest::set_after_message_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.after_message_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.GetChatHistoryRequest.after_message_id)
}
inline std::string* GetChatHistoryRequest::mutable_after_message_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_after_message_id();
  // @@protoc_insertion_point(field_mutable:blokus.GetChatHistoryRequest.after_message_id)
  return _s;
}
inline const std::string& GetChatHistoryRequest::_internal_after_message_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.after_message_id_.Get();
}
inline void GetChatHistoryRequest::_internal_set_after_message_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.after_message_id_.Set(value, GetArena());
}
inline std::string* GetChatHistoryRequest::_internal_mutable_after_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.after_message_id_.Mutable( GetArena());
}
inline std::string* GetChatHistoryRequest::release_after_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.GetChatHistoryRequest.after_message_id)
  return _impl_.after_message_id_.Release();
}
inline void GetChatHistoryRequest::set_allocated_after_message_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.after_message_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.after_message_id_.IsDefault()) {
    _impl_.after_message_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.GetChatHistoryRequest.after_message_id)
}

// repeated .blokus.ChatType type_filter = 7;
inline int GetChatHistoryRequest::_internal_type_filter_size() const {
  return _internal_type_filter().size();
}
inline int GetChatHistoryRequest::type_filter_size() const {
  return _internal_type_filter_size();
}
inline void GetChatHistoryRequest::clear_type_filter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_filter_.Clear();
}
inline ::blokus::ChatType GetChatHistoryRequest::type_filter(int index) const {
  // @@protoc_insertion_point(field_get:blokus.GetChatHistoryRequest.type_filter)
  return static_cast<::blokus::ChatType>(_internal_type_filter().Get(index));
}
inline void GetChatHistoryRequest::set_type_filter(int index, ::blokus::ChatType value) {
  _internal_mutable_type_filter()->Set(index, value);
  // @@protoc_insertion_point(field_set:blokus.GetChatHistoryRequest.type_filter)
}
inline void GetChatHistoryRequest::add_type_filter(::blokus::ChatType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_type_filter()->Add(value);
  // @@protoc_insertion_point(field_add:blokus.GetChatHistoryRequest.type_filter)
}
inline const ::google::protobuf::RepeatedField<int>& GetChatHistoryRequest::type_filter() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.GetChatHistoryRequest.type_filter)
  return _internal_type_filter();
}
inline ::google::protobuf::RepeatedField<int>* GetChatHistoryRequest::mutable_type_filter()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.GetChatHistoryRequest.type_filter)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_type_filter();
}
inline const ::google::protobuf::RepeatedField<int>& GetChatHistoryRequest::_internal_type_filter()
    const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.type_filter_;
}
inline ::google::protobuf::RepeatedField<int>* GetChatHistoryRequest::_internal_mutable_type_filter() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.type_filter_;
}

// .google.protobuf.Timestamp since = 8;
inline bool GetChatHistoryRequest::has_since() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.since_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& GetChatHistoryRequest::_internal_since() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.since_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& GetChatHistoryRequest::since() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.GetChatHistoryRequest.since)
  return _internal_since();
}
inline void GetChatHistoryRequest::unsafe_arena_set_allocated_since(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.since_);
  }
  _impl_.since_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.GetChatHistoryRequest.since)
}
inline ::google::protobuf::Timestamp* GetChatHistoryRequest::release_since() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.since_;
  _impl_.since_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* GetChatHistoryRequest::unsafe_arena_release_since() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.GetChatHistoryRequest.since)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.since_;
  _impl_.since_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* GetChatHistoryRequest::_internal_mutable_since() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.since_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.since_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.since_;
}
inline ::google::protobuf::Timestamp* GetChatHistoryRequest::mutable_since() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_since();
  // @@protoc_insertion_point(field_mutable:blokus.GetChatHistoryRequest.since)
  return _msg;
}
inline void GetChatHistoryRequest::set_allocated_since(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.since_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.since_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.GetChatHistoryRequest.since)
}

// .google.protobuf.Timestamp until = 9;
inline bool GetChatHistoryRequest::has_until() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.until_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& GetChatHistoryRequest::_internal_until() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.until_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& GetChatHistoryRequest::until() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.GetChatHistoryRequest.until)
  return _internal_until();
}
inline void GetChatHistoryRequest::unsafe_arena_set_allocated_until(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.until_);
  }
  _impl_.until_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.GetChatHistoryRequest.until)
}
inline ::google::protobuf::Timestamp* GetChatHistoryRequest::release_until() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.until_;
  _impl_.until_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* GetChatHistoryRequest::unsafe_arena_release_until() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.GetChatHistoryRequest.until)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.until_;
  _impl_.until_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* GetChatHistoryRequest::_internal_mutable_until() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.until_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.until_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.until_;
}
inline ::google::protobuf::Timestamp* GetChatHistoryRequest::mutable_until() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_until();
  // @@protoc_insertion_point(field_mutable:blokus.GetChatHistoryRequest.until)
  return _msg;
}
inline void GetChatHistoryRequest::set_allocated_until(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.until_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.until_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.GetChatHistoryRequest.until)
}

// string search_query = 10;
inline void GetChatHistoryRequest::clear_search_query() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.search_query_.ClearToEmpty();
}
inline const std::string& GetChatHistoryRequest::search_query() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.GetChatHistoryRequest.search_query)
  return _internal_search_query();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetChatHistoryRequest::set_search_query(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.search_query_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.GetChatHistoryRequest.search_query)
}
inline std::string* GetChatHistoryRequest::mutable_search_query() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_search_query();
  // @@protoc_insertion_point(field_mutable:blokus.GetChatHistoryRequest.search_query)
  return _s;
}
inline const std::string& GetChatHistoryRequest::_internal_search_query() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.search_query_.Get();
}
inline void GetChatHistoryRequest::_internal_set_search_query(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.search_query_.Set(value, GetArena());
}
inline std::string* GetChatHistoryRequest::_internal_mutable_search_query() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.search_query_.Mutable( GetArena());
}
inline std::string* GetChatHistoryRequest::release_search_query() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.GetChatHistoryRequest.search_query)
  return _impl_.search_query_.Release();
}
inline void GetChatHistoryRequest::set_allocated_search_query(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.search_query_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.search_query_.IsDefault()) {
    _impl_.search_query_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.GetChatHistoryRequest.search_query)
}

// -------------------------------------------------------------------

// ChatHistoryResponse

// .blokus.Result result = 1;
inline bool ChatHistoryResponse::has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.result_ != nullptr);
  return value;
}
inline const ::blokus::Result& ChatHistoryResponse::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::Result* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::Result&>(::blokus::_Result_default_instance_);
}
inline const ::blokus::Result& ChatHistoryResponse::result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ChatHistoryResponse.result)
  return _internal_result();
}
inline void ChatHistoryResponse::unsafe_arena_set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.ChatHistoryResponse.result)
}
inline ::blokus::Result* ChatHistoryResponse::release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* released = _impl_.result_;
  _impl_.result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::Result* ChatHistoryResponse::unsafe_arena_release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ChatHistoryResponse.result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::blokus::Result* ChatHistoryResponse::_internal_mutable_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::Result>(GetArena());
    _impl_.result_ = reinterpret_cast<::blokus::Result*>(p);
  }
  return _impl_.result_;
}
inline ::blokus::Result* ChatHistoryResponse::mutable_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::blokus::Result* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:blokus.ChatHistoryResponse.result)
  return _msg;
}
inline void ChatHistoryResponse::set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.ChatHistoryResponse.result)
}

// repeated .blokus.ChatMessage messages = 2;
inline int ChatHistoryResponse::_internal_messages_size() const {
  return _internal_messages().size();
}
inline int ChatHistoryResponse::messages_size() const {
  return _internal_messages_size();
}
inline void ChatHistoryResponse::clear_messages() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.messages_.Clear();
}
inline ::blokus::ChatMessage* ChatHistoryResponse::mutable_messages(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.ChatHistoryResponse.messages)
  return _internal_mutable_messages()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::blokus::ChatMessage>* ChatHistoryResponse::mutable_messages()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.ChatHistoryResponse.messages)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_messages();
}
inline const ::blokus::ChatMessage& ChatHistoryResponse::messages(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ChatHistoryResponse.messages)
  return _internal_messages().Get(index);
}
inline ::blokus::ChatMessage* ChatHistoryResponse::add_messages() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::blokus::ChatMessage* _add = _internal_mutable_messages()->Add();
  // @@protoc_insertion_point(field_add:blokus.ChatHistoryResponse.messages)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::blokus::ChatMessage>& ChatHistoryResponse::messages() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.ChatHistoryResponse.messages)
  return _internal_messages();
}
inline const ::google::protobuf::RepeatedPtrField<::blokus::ChatMessage>&
ChatHistoryResponse::_internal_messages() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.messages_;
}
inline ::google::protobuf::RepeatedPtrField<::blokus::ChatMessage>*
ChatHistoryResponse::_internal_mutable_messages() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.messages_;
}

// bool has_more_before = 3;
inline void ChatHistoryResponse::clear_has_more_before() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.has_more_before_ = false;
}
inline bool ChatHistoryResponse::has_more_before() const {
  // @@protoc_insertion_point(field_get:blokus.ChatHistoryResponse.has_more_before)
  return _internal_has_more_before();
}
inline void ChatHistoryResponse::set_has_more_before(bool value) {
  _internal_set_has_more_before(value);
  // @@protoc_insertion_point(field_set:blokus.ChatHistoryResponse.has_more_before)
}
inline bool ChatHistoryResponse::_internal_has_more_before() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.has_more_before_;
}
inline void ChatHistoryResponse::_internal_set_has_more_before(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.has_more_before_ = value;
}

// bool has_more_after = 4;
inline void ChatHistoryResponse::clear_has_more_after() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.has_more_after_ = false;
}
inline bool ChatHistoryResponse::has_more_after() const {
  // @@protoc_insertion_point(field_get:blokus.ChatHistoryResponse.has_more_after)
  return _internal_has_more_after();
}
inline void ChatHistoryResponse::set_has_more_after(bool value) {
  _internal_set_has_more_after(value);
  // @@protoc_insertion_point(field_set:blokus.ChatHistoryResponse.has_more_after)
}
inline bool ChatHistoryResponse::_internal_has_more_after() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.has_more_after_;
}
inline void ChatHistoryResponse::_internal_set_has_more_after(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.has_more_after_ = value;
}

// int32 total_count = 5;
inline void ChatHistoryResponse::clear_total_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_count_ = 0;
}
inline ::int32_t ChatHistoryResponse::total_count() const {
  // @@protoc_insertion_point(field_get:blokus.ChatHistoryResponse.total_count)
  return _internal_total_count();
}
inline void ChatHistoryResponse::set_total_count(::int32_t value) {
  _internal_set_total_count(value);
  // @@protoc_insertion_point(field_set:blokus.ChatHistoryResponse.total_count)
}
inline ::int32_t ChatHistoryResponse::_internal_total_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_count_;
}
inline void ChatHistoryResponse::_internal_set_total_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_count_ = value;
}

// .google.protobuf.Timestamp oldest_message = 6;
inline bool ChatHistoryResponse::has_oldest_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.oldest_message_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& ChatHistoryResponse::_internal_oldest_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.oldest_message_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& ChatHistoryResponse::oldest_message() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ChatHistoryResponse.oldest_message)
  return _internal_oldest_message();
}
inline void ChatHistoryResponse::unsafe_arena_set_allocated_oldest_message(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.oldest_message_);
  }
  _impl_.oldest_message_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.ChatHistoryResponse.oldest_message)
}
inline ::google::protobuf::Timestamp* ChatHistoryResponse::release_oldest_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.oldest_message_;
  _impl_.oldest_message_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* ChatHistoryResponse::unsafe_arena_release_oldest_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ChatHistoryResponse.oldest_message)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.oldest_message_;
  _impl_.oldest_message_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* ChatHistoryResponse::_internal_mutable_oldest_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.oldest_message_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.oldest_message_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.oldest_message_;
}
inline ::google::protobuf::Timestamp* ChatHistoryResponse::mutable_oldest_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_oldest_message();
  // @@protoc_insertion_point(field_mutable:blokus.ChatHistoryResponse.oldest_message)
  return _msg;
}
inline void ChatHistoryResponse::set_allocated_oldest_message(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.oldest_message_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.oldest_message_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.ChatHistoryResponse.oldest_message)
}

// .google.protobuf.Timestamp newest_message = 7;
inline bool ChatHistoryResponse::has_newest_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.newest_message_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& ChatHistoryResponse::_internal_newest_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.newest_message_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& ChatHistoryResponse::newest_message() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ChatHistoryResponse.newest_message)
  return _internal_newest_message();
}
inline void ChatHistoryResponse::unsafe_arena_set_allocated_newest_message(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.newest_message_);
  }
  _impl_.newest_message_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.ChatHistoryResponse.newest_message)
}
inline ::google::protobuf::Timestamp* ChatHistoryResponse::release_newest_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Timestamp* released = _impl_.newest_message_;
  _impl_.newest_message_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* ChatHistoryResponse::unsafe_arena_release_newest_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ChatHistoryResponse.newest_message)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Timestamp* temp = _impl_.newest_message_;
  _impl_.newest_message_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* ChatHistoryResponse::_internal_mutable_newest_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.newest_message_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.newest_message_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.newest_message_;
}
inline ::google::protobuf::Timestamp* ChatHistoryResponse::mutable_newest_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_newest_message();
  // @@protoc_insertion_point(field_mutable:blokus.ChatHistoryResponse.newest_message)
  return _msg;
}
inline void ChatHistoryResponse::set_allocated_newest_message(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.newest_message_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.newest_message_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.ChatHistoryResponse.newest_message)
}

// -------------------------------------------------------------------

// WhisperMessage

// string target_username = 1;
inline void WhisperMessage::clear_target_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_username_.ClearToEmpty();
}
inline const std::string& WhisperMessage::target_username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.WhisperMessage.target_username)
  return _internal_target_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WhisperMessage::set_target_username(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.WhisperMessage.target_username)
}
inline std::string* WhisperMessage::mutable_target_username() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_target_username();
  // @@protoc_insertion_point(field_mutable:blokus.WhisperMessage.target_username)
  return _s;
}
inline const std::string& WhisperMessage::_internal_target_username() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.target_username_.Get();
}
inline void WhisperMessage::_internal_set_target_username(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_username_.Set(value, GetArena());
}
inline std::string* WhisperMessage::_internal_mutable_target_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.target_username_.Mutable( GetArena());
}
inline std::string* WhisperMessage::release_target_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.WhisperMessage.target_username)
  return _impl_.target_username_.Release();
}
inline void WhisperMessage::set_allocated_target_username(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_username_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.target_username_.IsDefault()) {
    _impl_.target_username_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.WhisperMessage.target_username)
}

// string content = 2;
inline void WhisperMessage::clear_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.ClearToEmpty();
}
inline const std::string& WhisperMessage::content() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.WhisperMessage.content)
  return _internal_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WhisperMessage::set_content(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.WhisperMessage.content)
}
inline std::string* WhisperMessage::mutable_content() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:blokus.WhisperMessage.content)
  return _s;
}
inline const std::string& WhisperMessage::_internal_content() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.content_.Get();
}
inline void WhisperMessage::_internal_set_content(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.Set(value, GetArena());
}
inline std::string* WhisperMessage::_internal_mutable_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.content_.Mutable( GetArena());
}
inline std::string* WhisperMessage::release_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.WhisperMessage.content)
  return _impl_.content_.Release();
}
inline void WhisperMessage::set_allocated_content(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.WhisperMessage.content)
}

// bool request_read_receipt = 3;
inline void WhisperMessage::clear_request_read_receipt() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_read_receipt_ = false;
}
inline bool WhisperMessage::request_read_receipt() const {
  // @@protoc_insertion_point(field_get:blokus.WhisperMessage.request_read_receipt)
  return _internal_request_read_receipt();
}
inline void WhisperMessage::set_request_read_receipt(bool value) {
  _internal_set_request_read_receipt(value);
  // @@protoc_insertion_point(field_set:blokus.WhisperMessage.request_read_receipt)
}
inline bool WhisperMessage::_internal_request_read_receipt() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.request_read_receipt_;
}
inline void WhisperMessage::_internal_set_request_read_receipt(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_read_receipt_ = value;
}

// -------------------------------------------------------------------

// WhisperNotification

// .blokus.ChatMessage whisper = 1;
inline bool WhisperNotification::has_whisper() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.whisper_ != nullptr);
  return value;
}
inline void WhisperNotification::clear_whisper() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.whisper_ != nullptr) _impl_.whisper_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::blokus::ChatMessage& WhisperNotification::_internal_whisper() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::ChatMessage* p = _impl_.whisper_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::ChatMessage&>(::blokus::_ChatMessage_default_instance_);
}
inline const ::blokus::ChatMessage& WhisperNotification::whisper() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.WhisperNotification.whisper)
  return _internal_whisper();
}
inline void WhisperNotification::unsafe_arena_set_allocated_whisper(::blokus::ChatMessage* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.whisper_);
  }
  _impl_.whisper_ = reinterpret_cast<::blokus::ChatMessage*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.WhisperNotification.whisper)
}
inline ::blokus::ChatMessage* WhisperNotification::release_whisper() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::ChatMessage* released = _impl_.whisper_;
  _impl_.whisper_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::ChatMessage* WhisperNotification::unsafe_arena_release_whisper() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.WhisperNotification.whisper)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::ChatMessage* temp = _impl_.whisper_;
  _impl_.whisper_ = nullptr;
  return temp;
}
inline ::blokus::ChatMessage* WhisperNotification::_internal_mutable_whisper() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.whisper_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::ChatMessage>(GetArena());
    _impl_.whisper_ = reinterpret_cast<::blokus::ChatMessage*>(p);
  }
  return _impl_.whisper_;
}
inline ::blokus::ChatMessage* WhisperNotification::mutable_whisper() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::blokus::ChatMessage* _msg = _internal_mutable_whisper();
  // @@protoc_insertion_point(field_mutable:blokus.WhisperNotification.whisper)
  return _msg;
}
inline void WhisperNotification::set_allocated_whisper(::blokus::ChatMessage* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.whisper_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.whisper_ = reinterpret_cast<::blokus::ChatMessage*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.WhisperNotification.whisper)
}

// bool sender_online = 2;
inline void WhisperNotification::clear_sender_online() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_online_ = false;
}
inline bool WhisperNotification::sender_online() const {
  // @@protoc_insertion_point(field_get:blokus.WhisperNotification.sender_online)
  return _internal_sender_online();
}
inline void WhisperNotification::set_sender_online(bool value) {
  _internal_set_sender_online(value);
  // @@protoc_insertion_point(field_set:blokus.WhisperNotification.sender_online)
}
inline bool WhisperNotification::_internal_sender_online() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sender_online_;
}
inline void WhisperNotification::_internal_set_sender_online(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_online_ = value;
}

// bool auto_away_reply = 3;
inline void WhisperNotification::clear_auto_away_reply() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auto_away_reply_ = false;
}
inline bool WhisperNotification::auto_away_reply() const {
  // @@protoc_insertion_point(field_get:blokus.WhisperNotification.auto_away_reply)
  return _internal_auto_away_reply();
}
inline void WhisperNotification::set_auto_away_reply(bool value) {
  _internal_set_auto_away_reply(value);
  // @@protoc_insertion_point(field_set:blokus.WhisperNotification.auto_away_reply)
}
inline bool WhisperNotification::_internal_auto_away_reply() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.auto_away_reply_;
}
inline void WhisperNotification::_internal_set_auto_away_reply(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auto_away_reply_ = value;
}

// -------------------------------------------------------------------

// ReadReceiptNotification

// string message_id = 1;
inline void ReadReceiptNotification::clear_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_id_.ClearToEmpty();
}
inline const std::string& ReadReceiptNotification::message_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ReadReceiptNotification.message_id)
  return _internal_message_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReadReceiptNotification::set_message_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.ReadReceiptNotification.message_id)
}
inline std::string* ReadReceiptNotification::mutable_message_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message_id();
  // @@protoc_insertion_point(field_mutable:blokus.ReadReceiptNotification.message_id)
  return _s;
}
inline const std::string& ReadReceiptNotification::_internal_message_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_id_.Get();
}
inline void ReadReceiptNotification::_internal_set_message_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_id_.Set(value, GetArena());
}
inline std::string* ReadReceiptNotification::_internal_mutable_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_id_.Mutable( GetArena());
}
inline std::string* ReadReceiptNotification::release_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ReadReceiptNotification.message_id)
  return _impl_.message_id_.Release();
}
inline void ReadReceiptNotification::set_allocated_message_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_id_.IsDefault()) {
    _impl_.message_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.ReadReceiptNotification.message_id)
}

// string reader_username = 2;
inline void ReadReceiptNotification::clear_reader_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reader_username_.ClearToEmpty();
}
inline const std::string& ReadReceiptNotification::reader_username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ReadReceiptNotification.reader_username)
  return _internal_reader_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReadReceiptNotification::set_reader_username(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reader_username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.ReadReceiptNotification.reader_username)
}
inline std::string* ReadReceiptNotification::mutable_reader_username() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reader_username();
  // @@protoc_insertion_point(field_mutable:blokus.ReadReceiptNotification.reader_username)
  return _s;
}
inline const std::string& ReadReceiptNotification::_internal_reader_username() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reader_username_.Get();
}
inline void ReadReceiptNotification::_internal_set_reader_username(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reader_username_.Set(value, GetArena());
}
inline std::string* ReadReceiptNotification::_internal_mutable_reader_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.reader_username_.Mutable( GetArena());
}
inline std::string* ReadReceiptNotification::release_reader_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ReadReceiptNotification.reader_username)
  return _impl_.reader_username_.Release();
}
inline void ReadReceiptNotification::set_allocated_reader_username(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reader_username_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.reader_username_.IsDefault()) {
    _impl_.reader_username_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.ReadReceiptNotification.reader_username)
}

// .google.protobuf.Timestamp read_at = 3;
inline bool ReadReceiptNotification::has_read_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.read_at_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& ReadReceiptNotification::_internal_read_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.read_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& ReadReceiptNotification::read_at() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ReadReceiptNotification.read_at)
  return _internal_read_at();
}
inline void ReadReceiptNotification::unsafe_arena_set_allocated_read_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.read_at_);
  }
  _impl_.read_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.ReadReceiptNotification.read_at)
}
inline ::google::protobuf::Timestamp* ReadReceiptNotification::release_read_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.read_at_;
  _impl_.read_at_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* ReadReceiptNotification::unsafe_arena_release_read_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ReadReceiptNotification.read_at)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.read_at_;
  _impl_.read_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* ReadReceiptNotification::_internal_mutable_read_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.read_at_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.read_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.read_at_;
}
inline ::google::protobuf::Timestamp* ReadReceiptNotification::mutable_read_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_read_at();
  // @@protoc_insertion_point(field_mutable:blokus.ReadReceiptNotification.read_at)
  return _msg;
}
inline void ReadReceiptNotification::set_allocated_read_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.read_at_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.read_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.ReadReceiptNotification.read_at)
}

// -------------------------------------------------------------------

// ModerateChatRequest

// string message_id = 1;
inline void ModerateChatRequest::clear_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_id_.ClearToEmpty();
}
inline const std::string& ModerateChatRequest::message_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ModerateChatRequest.message_id)
  return _internal_message_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ModerateChatRequest::set_message_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.ModerateChatRequest.message_id)
}
inline std::string* ModerateChatRequest::mutable_message_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message_id();
  // @@protoc_insertion_point(field_mutable:blokus.ModerateChatRequest.message_id)
  return _s;
}
inline const std::string& ModerateChatRequest::_internal_message_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_id_.Get();
}
inline void ModerateChatRequest::_internal_set_message_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_id_.Set(value, GetArena());
}
inline std::string* ModerateChatRequest::_internal_mutable_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_id_.Mutable( GetArena());
}
inline std::string* ModerateChatRequest::release_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ModerateChatRequest.message_id)
  return _impl_.message_id_.Release();
}
inline void ModerateChatRequest::set_allocated_message_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_id_.IsDefault()) {
    _impl_.message_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.ModerateChatRequest.message_id)
}

// .blokus.ModerateChatRequest.ModerationAction action = 2;
inline void ModerateChatRequest::clear_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_ = 0;
}
inline ::blokus::ModerateChatRequest_ModerationAction ModerateChatRequest::action() const {
  // @@protoc_insertion_point(field_get:blokus.ModerateChatRequest.action)
  return _internal_action();
}
inline void ModerateChatRequest::set_action(::blokus::ModerateChatRequest_ModerationAction value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:blokus.ModerateChatRequest.action)
}
inline ::blokus::ModerateChatRequest_ModerationAction ModerateChatRequest::_internal_action() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::blokus::ModerateChatRequest_ModerationAction>(_impl_.action_);
}
inline void ModerateChatRequest::_internal_set_action(::blokus::ModerateChatRequest_ModerationAction value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_ = value;
}

// string reason = 3;
inline void ModerateChatRequest::clear_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.ClearToEmpty();
}
inline const std::string& ModerateChatRequest::reason() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ModerateChatRequest.reason)
  return _internal_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ModerateChatRequest::set_reason(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.ModerateChatRequest.reason)
}
inline std::string* ModerateChatRequest::mutable_reason() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:blokus.ModerateChatRequest.reason)
  return _s;
}
inline const std::string& ModerateChatRequest::_internal_reason() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reason_.Get();
}
inline void ModerateChatRequest::_internal_set_reason(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.Set(value, GetArena());
}
inline std::string* ModerateChatRequest::_internal_mutable_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.reason_.Mutable( GetArena());
}
inline std::string* ModerateChatRequest::release_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ModerateChatRequest.reason)
  return _impl_.reason_.Release();
}
inline void ModerateChatRequest::set_allocated_reason(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.reason_.IsDefault()) {
    _impl_.reason_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.ModerateChatRequest.reason)
}

// int32 duration_minutes = 4;
inline void ModerateChatRequest::clear_duration_minutes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.duration_minutes_ = 0;
}
inline ::int32_t ModerateChatRequest::duration_minutes() const {
  // @@protoc_insertion_point(field_get:blokus.ModerateChatRequest.duration_minutes)
  return _internal_duration_minutes();
}
inline void ModerateChatRequest::set_duration_minutes(::int32_t value) {
  _internal_set_duration_minutes(value);
  // @@protoc_insertion_point(field_set:blokus.ModerateChatRequest.duration_minutes)
}
inline ::int32_t ModerateChatRequest::_internal_duration_minutes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.duration_minutes_;
}
inline void ModerateChatRequest::_internal_set_duration_minutes(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.duration_minutes_ = value;
}

// string new_content = 5;
inline void ModerateChatRequest::clear_new_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_content_.ClearToEmpty();
}
inline const std::string& ModerateChatRequest::new_content() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ModerateChatRequest.new_content)
  return _internal_new_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ModerateChatRequest::set_new_content(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_content_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.ModerateChatRequest.new_content)
}
inline std::string* ModerateChatRequest::mutable_new_content() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_new_content();
  // @@protoc_insertion_point(field_mutable:blokus.ModerateChatRequest.new_content)
  return _s;
}
inline const std::string& ModerateChatRequest::_internal_new_content() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.new_content_.Get();
}
inline void ModerateChatRequest::_internal_set_new_content(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_content_.Set(value, GetArena());
}
inline std::string* ModerateChatRequest::_internal_mutable_new_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.new_content_.Mutable( GetArena());
}
inline std::string* ModerateChatRequest::release_new_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ModerateChatRequest.new_content)
  return _impl_.new_content_.Release();
}
inline void ModerateChatRequest::set_allocated_new_content(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_content_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.new_content_.IsDefault()) {
    _impl_.new_content_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.ModerateChatRequest.new_content)
}

// -------------------------------------------------------------------

// ModerateChatResponse

// .blokus.Result result = 1;
inline bool ModerateChatResponse::has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.result_ != nullptr);
  return value;
}
inline const ::blokus::Result& ModerateChatResponse::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::Result* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::Result&>(::blokus::_Result_default_instance_);
}
inline const ::blokus::Result& ModerateChatResponse::result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ModerateChatResponse.result)
  return _internal_result();
}
inline void ModerateChatResponse::unsafe_arena_set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.ModerateChatResponse.result)
}
inline ::blokus::Result* ModerateChatResponse::release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* released = _impl_.result_;
  _impl_.result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::Result* ModerateChatResponse::unsafe_arena_release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ModerateChatResponse.result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::blokus::Result* ModerateChatResponse::_internal_mutable_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::Result>(GetArena());
    _impl_.result_ = reinterpret_cast<::blokus::Result*>(p);
  }
  return _impl_.result_;
}
inline ::blokus::Result* ModerateChatResponse::mutable_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::blokus::Result* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:blokus.ModerateChatResponse.result)
  return _msg;
}
inline void ModerateChatResponse::set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.ModerateChatResponse.result)
}

// string message = 2;
inline void ModerateChatResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& ModerateChatResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ModerateChatResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ModerateChatResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.ModerateChatResponse.message)
}
inline std::string* ModerateChatResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:blokus.ModerateChatResponse.message)
  return _s;
}
inline const std::string& ModerateChatResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void ModerateChatResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* ModerateChatResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* ModerateChatResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ModerateChatResponse.message)
  return _impl_.message_.Release();
}
inline void ModerateChatResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.ModerateChatResponse.message)
}

// bool user_notified = 3;
inline void ModerateChatResponse::clear_user_notified() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_notified_ = false;
}
inline bool ModerateChatResponse::user_notified() const {
  // @@protoc_insertion_point(field_get:blokus.ModerateChatResponse.user_notified)
  return _internal_user_notified();
}
inline void ModerateChatResponse::set_user_notified(bool value) {
  _internal_set_user_notified(value);
  // @@protoc_insertion_point(field_set:blokus.ModerateChatResponse.user_notified)
}
inline bool ModerateChatResponse::_internal_user_notified() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_notified_;
}
inline void ModerateChatResponse::_internal_set_user_notified(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_notified_ = value;
}

// -------------------------------------------------------------------

// ChatModerationNotification

// string message_id = 1;
inline void ChatModerationNotification::clear_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_id_.ClearToEmpty();
}
inline const std::string& ChatModerationNotification::message_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ChatModerationNotification.message_id)
  return _internal_message_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChatModerationNotification::set_message_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.ChatModerationNotification.message_id)
}
inline std::string* ChatModerationNotification::mutable_message_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message_id();
  // @@protoc_insertion_point(field_mutable:blokus.ChatModerationNotification.message_id)
  return _s;
}
inline const std::string& ChatModerationNotification::_internal_message_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_id_.Get();
}
inline void ChatModerationNotification::_internal_set_message_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_id_.Set(value, GetArena());
}
inline std::string* ChatModerationNotification::_internal_mutable_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_id_.Mutable( GetArena());
}
inline std::string* ChatModerationNotification::release_message_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ChatModerationNotification.message_id)
  return _impl_.message_id_.Release();
}
inline void ChatModerationNotification::set_allocated_message_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_id_.IsDefault()) {
    _impl_.message_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.ChatModerationNotification.message_id)
}

// string moderated_username = 2;
inline void ChatModerationNotification::clear_moderated_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.moderated_username_.ClearToEmpty();
}
inline const std::string& ChatModerationNotification::moderated_username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ChatModerationNotification.moderated_username)
  return _internal_moderated_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChatModerationNotification::set_moderated_username(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.moderated_username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.ChatModerationNotification.moderated_username)
}
inline std::string* ChatModerationNotification::mutable_moderated_username() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_moderated_username();
  // @@protoc_insertion_point(field_mutable:blokus.ChatModerationNotification.moderated_username)
  return _s;
}
inline const std::string& ChatModerationNotification::_internal_moderated_username() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.moderated_username_.Get();
}
inline void ChatModerationNotification::_internal_set_moderated_username(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.moderated_username_.Set(value, GetArena());
}
inline std::string* ChatModerationNotification::_internal_mutable_moderated_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.moderated_username_.Mutable( GetArena());
}
inline std::string* ChatModerationNotification::release_moderated_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ChatModerationNotification.moderated_username)
  return _impl_.moderated_username_.Release();
}
inline void ChatModerationNotification::set_allocated_moderated_username(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.moderated_username_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.moderated_username_.IsDefault()) {
    _impl_.moderated_username_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.ChatModerationNotification.moderated_username)
}

// string moderator_username = 3;
inline void ChatModerationNotification::clear_moderator_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.moderator_username_.ClearToEmpty();
}
inline const std::string& ChatModerationNotification::moderator_username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ChatModerationNotification.moderator_username)
  return _internal_moderator_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChatModerationNotification::set_moderator_username(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.moderator_username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.ChatModerationNotification.moderator_username)
}
inline std::string* ChatModerationNotification::mutable_moderator_username() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_moderator_username();
  // @@protoc_insertion_point(field_mutable:blokus.ChatModerationNotification.moderator_username)
  return _s;
}
inline const std::string& ChatModerationNotification::_internal_moderator_username() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.moderator_username_.Get();
}
inline void ChatModerationNotification::_internal_set_moderator_username(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.moderator_username_.Set(value, GetArena());
}
inline std::string* ChatModerationNotification::_internal_mutable_moderator_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.moderator_username_.Mutable( GetArena());
}
inline std::string* ChatModerationNotification::release_moderator_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ChatModerationNotification.moderator_username)
  return _impl_.moderator_username_.Release();
}
inline void ChatModerationNotification::set_allocated_moderator_username(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.moderator_username_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.moderator_username_.IsDefault()) {
    _impl_.moderator_username_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.ChatModerationNotification.moderator_username)
}

// string action = 4;
inline void ChatModerationNotification::clear_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_.ClearToEmpty();
}
inline const std::string& ChatModerationNotification::action() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ChatModerationNotification.action)
  return _internal_action();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChatModerationNotification::set_action(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.ChatModerationNotification.action)
}
inline std::string* ChatModerationNotification::mutable_action() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:blokus.ChatModerationNotification.action)
  return _s;
}
inline const std::string& ChatModerationNotification::_internal_action() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.action_.Get();
}
inline void ChatModerationNotification::_internal_set_action(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_.Set(value, GetArena());
}
inline std::string* ChatModerationNotification::_internal_mutable_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.action_.Mutable( GetArena());
}
inline std::string* ChatModerationNotification::release_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ChatModerationNotification.action)
  return _impl_.action_.Release();
}
inline void ChatModerationNotification::set_allocated_action(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.ChatModerationNotification.action)
}

// string reason = 5;
inline void ChatModerationNotification::clear_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.ClearToEmpty();
}
inline const std::string& ChatModerationNotification::reason() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ChatModerationNotification.reason)
  return _internal_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChatModerationNotification::set_reason(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.ChatModerationNotification.reason)
}
inline std::string* ChatModerationNotification::mutable_reason() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:blokus.ChatModerationNotification.reason)
  return _s;
}
inline const std::string& ChatModerationNotification::_internal_reason() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reason_.Get();
}
inline void ChatModerationNotification::_internal_set_reason(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.Set(value, GetArena());
}
inline std::string* ChatModerationNotification::_internal_mutable_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.reason_.Mutable( GetArena());
}
inline std::string* ChatModerationNotification::release_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ChatModerationNotification.reason)
  return _impl_.reason_.Release();
}
inline void ChatModerationNotification::set_allocated_reason(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.reason_.IsDefault()) {
    _impl_.reason_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.ChatModerationNotification.reason)
}

// .google.protobuf.Timestamp moderated_at = 6;
inline bool ChatModerationNotification::has_moderated_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.moderated_at_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& ChatModerationNotification::_internal_moderated_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.moderated_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& ChatModerationNotification::moderated_at() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ChatModerationNotification.moderated_at)
  return _internal_moderated_at();
}
inline void ChatModerationNotification::unsafe_arena_set_allocated_moderated_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.moderated_at_);
  }
  _impl_.moderated_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.ChatModerationNotification.moderated_at)
}
inline ::google::protobuf::Timestamp* ChatModerationNotification::release_moderated_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.moderated_at_;
  _impl_.moderated_at_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* ChatModerationNotification::unsafe_arena_release_moderated_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ChatModerationNotification.moderated_at)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.moderated_at_;
  _impl_.moderated_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* ChatModerationNotification::_internal_mutable_moderated_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.moderated_at_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.moderated_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.moderated_at_;
}
inline ::google::protobuf::Timestamp* ChatModerationNotification::mutable_moderated_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_moderated_at();
  // @@protoc_insertion_point(field_mutable:blokus.ChatModerationNotification.moderated_at)
  return _msg;
}
inline void ChatModerationNotification::set_allocated_moderated_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.moderated_at_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.moderated_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.ChatModerationNotification.moderated_at)
}

// -------------------------------------------------------------------

// ChatSettings

// bool global_chat_enabled = 1;
inline void ChatSettings::clear_global_chat_enabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.global_chat_enabled_ = false;
}
inline bool ChatSettings::global_chat_enabled() const {
  // @@protoc_insertion_point(field_get:blokus.ChatSettings.global_chat_enabled)
  return _internal_global_chat_enabled();
}
inline void ChatSettings::set_global_chat_enabled(bool value) {
  _internal_set_global_chat_enabled(value);
  // @@protoc_insertion_point(field_set:blokus.ChatSettings.global_chat_enabled)
}
inline bool ChatSettings::_internal_global_chat_enabled() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.global_chat_enabled_;
}
inline void ChatSettings::_internal_set_global_chat_enabled(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.global_chat_enabled_ = value;
}

// bool whispers_enabled = 2;
inline void ChatSettings::clear_whispers_enabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.whispers_enabled_ = false;
}
inline bool ChatSettings::whispers_enabled() const {
  // @@protoc_insertion_point(field_get:blokus.ChatSettings.whispers_enabled)
  return _internal_whispers_enabled();
}
inline void ChatSettings::set_whispers_enabled(bool value) {
  _internal_set_whispers_enabled(value);
  // @@protoc_insertion_point(field_set:blokus.ChatSettings.whispers_enabled)
}
inline bool ChatSettings::_internal_whispers_enabled() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.whispers_enabled_;
}
inline void ChatSettings::_internal_set_whispers_enabled(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.whispers_enabled_ = value;
}

// bool system_messages_enabled = 3;
inline void ChatSettings::clear_system_messages_enabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.system_messages_enabled_ = false;
}
inline bool ChatSettings::system_messages_enabled() const {
  // @@protoc_insertion_point(field_get:blokus.ChatSettings.system_messages_enabled)
  return _internal_system_messages_enabled();
}
inline void ChatSettings::set_system_messages_enabled(bool value) {
  _internal_set_system_messages_enabled(value);
  // @@protoc_insertion_point(field_set:blokus.ChatSettings.system_messages_enabled)
}
inline bool ChatSettings::_internal_system_messages_enabled() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.system_messages_enabled_;
}
inline void ChatSettings::_internal_set_system_messages_enabled(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.system_messages_enabled_ = value;
}

// bool emotes_enabled = 4;
inline void ChatSettings::clear_emotes_enabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.emotes_enabled_ = false;
}
inline bool ChatSettings::emotes_enabled() const {
  // @@protoc_insertion_point(field_get:blokus.ChatSettings.emotes_enabled)
  return _internal_emotes_enabled();
}
inline void ChatSettings::set_emotes_enabled(bool value) {
  _internal_set_emotes_enabled(value);
  // @@protoc_insertion_point(field_set:blokus.ChatSettings.emotes_enabled)
}
inline bool ChatSettings::_internal_emotes_enabled() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.emotes_enabled_;
}
inline void ChatSettings::_internal_set_emotes_enabled(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.emotes_enabled_ = value;
}

// bool mentions_enabled = 5;
inline void ChatSettings::clear_mentions_enabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mentions_enabled_ = false;
}
inline bool ChatSettings::mentions_enabled() const {
  // @@protoc_insertion_point(field_get:blokus.ChatSettings.mentions_enabled)
  return _internal_mentions_enabled();
}
inline void ChatSettings::set_mentions_enabled(bool value) {
  _internal_set_mentions_enabled(value);
  // @@protoc_insertion_point(field_set:blokus.ChatSettings.mentions_enabled)
}
inline bool ChatSettings::_internal_mentions_enabled() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mentions_enabled_;
}
inline void ChatSettings::_internal_set_mentions_enabled(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mentions_enabled_ = value;
}

// bool profanity_filter = 6;
inline void ChatSettings::clear_profanity_filter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.profanity_filter_ = false;
}
inline bool ChatSettings::profanity_filter() const {
  // @@protoc_insertion_point(field_get:blokus.ChatSettings.profanity_filter)
  return _internal_profanity_filter();
}
inline void ChatSettings::set_profanity_filter(bool value) {
  _internal_set_profanity_filter(value);
  // @@protoc_insertion_point(field_set:blokus.ChatSettings.profanity_filter)
}
inline bool ChatSettings::_internal_profanity_filter() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.profanity_filter_;
}
inline void ChatSettings::_internal_set_profanity_filter(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.profanity_filter_ = value;
}

// bool spam_filter = 7;
inline void ChatSettings::clear_spam_filter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.spam_filter_ = false;
}
inline bool ChatSettings::spam_filter() const {
  // @@protoc_insertion_point(field_get:blokus.ChatSettings.spam_filter)
  return _internal_spam_filter();
}
inline void ChatSettings::set_spam_filter(bool value) {
  _internal_set_spam_filter(value);
  // @@protoc_insertion_point(field_set:blokus.ChatSettings.spam_filter)
}
inline bool ChatSettings::_internal_spam_filter() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.spam_filter_;
}
inline void ChatSettings::_internal_set_spam_filter(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.spam_filter_ = value;
}

// repeated string blocked_users = 8;
inline int ChatSettings::_internal_blocked_users_size() const {
  return _internal_blocked_users().size();
}
inline int ChatSettings::blocked_users_size() const {
  return _internal_blocked_users_size();
}
inline void ChatSettings::clear_blocked_users() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.blocked_users_.Clear();
}
inline std::string* ChatSettings::add_blocked_users() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_blocked_users()->Add();
  // @@protoc_insertion_point(field_add_mutable:blokus.ChatSettings.blocked_users)
  return _s;
}
inline const std::string& ChatSettings::blocked_users(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ChatSettings.blocked_users)
  return _internal_blocked_users().Get(index);
}
inline std::string* ChatSettings::mutable_blocked_users(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.ChatSettings.blocked_users)
  return _internal_mutable_blocked_users()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void ChatSettings::set_blocked_users(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_blocked_users()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:blokus.ChatSettings.blocked_users)
}
template <typename Arg_, typename... Args_>
inline void ChatSettings::add_blocked_users(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_blocked_users(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:blokus.ChatSettings.blocked_users)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ChatSettings::blocked_users() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.ChatSettings.blocked_users)
  return _internal_blocked_users();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ChatSettings::mutable_blocked_users() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.ChatSettings.blocked_users)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_blocked_users();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ChatSettings::_internal_blocked_users() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.blocked_users_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ChatSettings::_internal_mutable_blocked_users() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.blocked_users_;
}

// repeated string muted_rooms = 9;
inline int ChatSettings::_internal_muted_rooms_size() const {
  return _internal_muted_rooms().size();
}
inline int ChatSettings::muted_rooms_size() const {
  return _internal_muted_rooms_size();
}
inline void ChatSettings::clear_muted_rooms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.muted_rooms_.Clear();
}
inline std::string* ChatSettings::add_muted_rooms() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_muted_rooms()->Add();
  // @@protoc_insertion_point(field_add_mutable:blokus.ChatSettings.muted_rooms)
  return _s;
}
inline const std::string& ChatSettings::muted_rooms(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ChatSettings.muted_rooms)
  return _internal_muted_rooms().Get(index);
}
inline std::string* ChatSettings::mutable_muted_rooms(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.ChatSettings.muted_rooms)
  return _internal_mutable_muted_rooms()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void ChatSettings::set_muted_rooms(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_muted_rooms()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:blokus.ChatSettings.muted_rooms)
}
template <typename Arg_, typename... Args_>
inline void ChatSettings::add_muted_rooms(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_muted_rooms(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:blokus.ChatSettings.muted_rooms)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ChatSettings::muted_rooms() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.ChatSettings.muted_rooms)
  return _internal_muted_rooms();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ChatSettings::mutable_muted_rooms() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.ChatSettings.muted_rooms)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_muted_rooms();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ChatSettings::_internal_muted_rooms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.muted_rooms_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ChatSettings::_internal_mutable_muted_rooms() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.muted_rooms_;
}

// bool desktop_notifications = 10;
inline void ChatSettings::clear_desktop_notifications() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.desktop_notifications_ = false;
}
inline bool ChatSettings::desktop_notifications() const {
  // @@protoc_insertion_point(field_get:blokus.ChatSettings.desktop_notifications)
  return _internal_desktop_notifications();
}
inline void ChatSettings::set_desktop_notifications(bool value) {
  _internal_set_desktop_notifications(value);
  // @@protoc_insertion_point(field_set:blokus.ChatSettings.desktop_notifications)
}
inline bool ChatSettings::_internal_desktop_notifications() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.desktop_notifications_;
}
inline void ChatSettings::_internal_set_desktop_notifications(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.desktop_notifications_ = value;
}

// bool sound_notifications = 11;
inline void ChatSettings::clear_sound_notifications() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sound_notifications_ = false;
}
inline bool ChatSettings::sound_notifications() const {
  // @@protoc_insertion_point(field_get:blokus.ChatSettings.sound_notifications)
  return _internal_sound_notifications();
}
inline void ChatSettings::set_sound_notifications(bool value) {
  _internal_set_sound_notifications(value);
  // @@protoc_insertion_point(field_set:blokus.ChatSettings.sound_notifications)
}
inline bool ChatSettings::_internal_sound_notifications() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sound_notifications_;
}
inline void ChatSettings::_internal_set_sound_notifications(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sound_notifications_ = value;
}

// bool mention_notifications = 12;
inline void ChatSettings::clear_mention_notifications() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mention_notifications_ = false;
}
inline bool ChatSettings::mention_notifications() const {
  // @@protoc_insertion_point(field_get:blokus.ChatSettings.mention_notifications)
  return _internal_mention_notifications();
}
inline void ChatSettings::set_mention_notifications(bool value) {
  _internal_set_mention_notifications(value);
  // @@protoc_insertion_point(field_set:blokus.ChatSettings.mention_notifications)
}
inline bool ChatSettings::_internal_mention_notifications() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mention_notifications_;
}
inline void ChatSettings::_internal_set_mention_notifications(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mention_notifications_ = value;
}

// bool show_timestamps = 13;
inline void ChatSettings::clear_show_timestamps() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.show_timestamps_ = false;
}
inline bool ChatSettings::show_timestamps() const {
  // @@protoc_insertion_point(field_get:blokus.ChatSettings.show_timestamps)
  return _internal_show_timestamps();
}
inline void ChatSettings::set_show_timestamps(bool value) {
  _internal_set_show_timestamps(value);
  // @@protoc_insertion_point(field_set:blokus.ChatSettings.show_timestamps)
}
inline bool ChatSettings::_internal_show_timestamps() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.show_timestamps_;
}
inline void ChatSettings::_internal_set_show_timestamps(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.show_timestamps_ = value;
}

// bool show_user_colors = 14;
inline void ChatSettings::clear_show_user_colors() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.show_user_colors_ = false;
}
inline bool ChatSettings::show_user_colors() const {
  // @@protoc_insertion_point(field_get:blokus.ChatSettings.show_user_colors)
  return _internal_show_user_colors();
}
inline void ChatSettings::set_show_user_colors(bool value) {
  _internal_set_show_user_colors(value);
  // @@protoc_insertion_point(field_set:blokus.ChatSettings.show_user_colors)
}
inline bool ChatSettings::_internal_show_user_colors() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.show_user_colors_;
}
inline void ChatSettings::_internal_set_show_user_colors(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.show_user_colors_ = value;
}

// int32 max_message_length = 15;
inline void ChatSettings::clear_max_message_length() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_message_length_ = 0;
}
inline ::int32_t ChatSettings::max_message_length() const {
  // @@protoc_insertion_point(field_get:blokus.ChatSettings.max_message_length)
  return _internal_max_message_length();
}
inline void ChatSettings::set_max_message_length(::int32_t value) {
  _internal_set_max_message_length(value);
  // @@protoc_insertion_point(field_set:blokus.ChatSettings.max_message_length)
}
inline ::int32_t ChatSettings::_internal_max_message_length() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_message_length_;
}
inline void ChatSettings::_internal_set_max_message_length(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_message_length_ = value;
}

// string chat_font_size = 16;
inline void ChatSettings::clear_chat_font_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chat_font_size_.ClearToEmpty();
}
inline const std::string& ChatSettings::chat_font_size() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ChatSettings.chat_font_size)
  return _internal_chat_font_size();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChatSettings::set_chat_font_size(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chat_font_size_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.ChatSettings.chat_font_size)
}
inline std::string* ChatSettings::mutable_chat_font_size() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_chat_font_size();
  // @@protoc_insertion_point(field_mutable:blokus.ChatSettings.chat_font_size)
  return _s;
}
inline const std::string& ChatSettings::_internal_chat_font_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.chat_font_size_.Get();
}
inline void ChatSettings::_internal_set_chat_font_size(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chat_font_size_.Set(value, GetArena());
}
inline std::string* ChatSettings::_internal_mutable_chat_font_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.chat_font_size_.Mutable( GetArena());
}
inline std::string* ChatSettings::release_chat_font_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ChatSettings.chat_font_size)
  return _impl_.chat_font_size_.Release();
}
inline void ChatSettings::set_allocated_chat_font_size(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chat_font_size_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.chat_font_size_.IsDefault()) {
    _impl_.chat_font_size_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.ChatSettings.chat_font_size)
}

// -------------------------------------------------------------------

// UpdateChatSettingsRequest

// .blokus.ChatSettings settings = 1;
inline bool UpdateChatSettingsRequest::has_settings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.settings_ != nullptr);
  return value;
}
inline void UpdateChatSettingsRequest::clear_settings() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.settings_ != nullptr) _impl_.settings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::blokus::ChatSettings& UpdateChatSettingsRequest::_internal_settings() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::ChatSettings* p = _impl_.settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::ChatSettings&>(::blokus::_ChatSettings_default_instance_);
}
inline const ::blokus::ChatSettings& UpdateChatSettingsRequest::settings() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.UpdateChatSettingsRequest.settings)
  return _internal_settings();
}
inline void UpdateChatSettingsRequest::unsafe_arena_set_allocated_settings(::blokus::ChatSettings* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.settings_);
  }
  _impl_.settings_ = reinterpret_cast<::blokus::ChatSettings*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.UpdateChatSettingsRequest.settings)
}
inline ::blokus::ChatSettings* UpdateChatSettingsRequest::release_settings() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::ChatSettings* released = _impl_.settings_;
  _impl_.settings_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::ChatSettings* UpdateChatSettingsRequest::unsafe_arena_release_settings() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.UpdateChatSettingsRequest.settings)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::ChatSettings* temp = _impl_.settings_;
  _impl_.settings_ = nullptr;
  return temp;
}
inline ::blokus::ChatSettings* UpdateChatSettingsRequest::_internal_mutable_settings() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.settings_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::ChatSettings>(GetArena());
    _impl_.settings_ = reinterpret_cast<::blokus::ChatSettings*>(p);
  }
  return _impl_.settings_;
}
inline ::blokus::ChatSettings* UpdateChatSettingsRequest::mutable_settings() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::blokus::ChatSettings* _msg = _internal_mutable_settings();
  // @@protoc_insertion_point(field_mutable:blokus.UpdateChatSettingsRequest.settings)
  return _msg;
}
inline void UpdateChatSettingsRequest::set_allocated_settings(::blokus::ChatSettings* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.settings_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.settings_ = reinterpret_cast<::blokus::ChatSettings*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.UpdateChatSettingsRequest.settings)
}

// -------------------------------------------------------------------

// UpdateChatSettingsResponse

// .blokus.Result result = 1;
inline bool UpdateChatSettingsResponse::has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.result_ != nullptr);
  return value;
}
inline const ::blokus::Result& UpdateChatSettingsResponse::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::Result* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::Result&>(::blokus::_Result_default_instance_);
}
inline const ::blokus::Result& UpdateChatSettingsResponse::result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.UpdateChatSettingsResponse.result)
  return _internal_result();
}
inline void UpdateChatSettingsResponse::unsafe_arena_set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.UpdateChatSettingsResponse.result)
}
inline ::blokus::Result* UpdateChatSettingsResponse::release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* released = _impl_.result_;
  _impl_.result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::Result* UpdateChatSettingsResponse::unsafe_arena_release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.UpdateChatSettingsResponse.result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::blokus::Result* UpdateChatSettingsResponse::_internal_mutable_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::Result>(GetArena());
    _impl_.result_ = reinterpret_cast<::blokus::Result*>(p);
  }
  return _impl_.result_;
}
inline ::blokus::Result* UpdateChatSettingsResponse::mutable_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::blokus::Result* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:blokus.UpdateChatSettingsResponse.result)
  return _msg;
}
inline void UpdateChatSettingsResponse::set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.UpdateChatSettingsResponse.result)
}

// .blokus.ChatSettings updated_settings = 2;
inline bool UpdateChatSettingsResponse::has_updated_settings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.updated_settings_ != nullptr);
  return value;
}
inline void UpdateChatSettingsResponse::clear_updated_settings() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.updated_settings_ != nullptr) _impl_.updated_settings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::blokus::ChatSettings& UpdateChatSettingsResponse::_internal_updated_settings() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::ChatSettings* p = _impl_.updated_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::ChatSettings&>(::blokus::_ChatSettings_default_instance_);
}
inline const ::blokus::ChatSettings& UpdateChatSettingsResponse::updated_settings() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.UpdateChatSettingsResponse.updated_settings)
  return _internal_updated_settings();
}
inline void UpdateChatSettingsResponse::unsafe_arena_set_allocated_updated_settings(::blokus::ChatSettings* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.updated_settings_);
  }
  _impl_.updated_settings_ = reinterpret_cast<::blokus::ChatSettings*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.UpdateChatSettingsResponse.updated_settings)
}
inline ::blokus::ChatSettings* UpdateChatSettingsResponse::release_updated_settings() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::blokus::ChatSettings* released = _impl_.updated_settings_;
  _impl_.updated_settings_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::ChatSettings* UpdateChatSettingsResponse::unsafe_arena_release_updated_settings() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.UpdateChatSettingsResponse.updated_settings)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::blokus::ChatSettings* temp = _impl_.updated_settings_;
  _impl_.updated_settings_ = nullptr;
  return temp;
}
inline ::blokus::ChatSettings* UpdateChatSettingsResponse::_internal_mutable_updated_settings() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.updated_settings_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::ChatSettings>(GetArena());
    _impl_.updated_settings_ = reinterpret_cast<::blokus::ChatSettings*>(p);
  }
  return _impl_.updated_settings_;
}
inline ::blokus::ChatSettings* UpdateChatSettingsResponse::mutable_updated_settings() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::blokus::ChatSettings* _msg = _internal_mutable_updated_settings();
  // @@protoc_insertion_point(field_mutable:blokus.UpdateChatSettingsResponse.updated_settings)
  return _msg;
}
inline void UpdateChatSettingsResponse::set_allocated_updated_settings(::blokus::ChatSettings* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.updated_settings_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.updated_settings_ = reinterpret_cast<::blokus::ChatSettings*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.UpdateChatSettingsResponse.updated_settings)
}

// -------------------------------------------------------------------

// RoomChatSettings

// int32 room_id = 1;
inline void RoomChatSettings::clear_room_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_id_ = 0;
}
inline ::int32_t RoomChatSettings::room_id() const {
  // @@protoc_insertion_point(field_get:blokus.RoomChatSettings.room_id)
  return _internal_room_id();
}
inline void RoomChatSettings::set_room_id(::int32_t value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:blokus.RoomChatSettings.room_id)
}
inline ::int32_t RoomChatSettings::_internal_room_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.room_id_;
}
inline void RoomChatSettings::_internal_set_room_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_id_ = value;
}

// bool chat_enabled = 2;
inline void RoomChatSettings::clear_chat_enabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chat_enabled_ = false;
}
inline bool RoomChatSettings::chat_enabled() const {
  // @@protoc_insertion_point(field_get:blokus.RoomChatSettings.chat_enabled)
  return _internal_chat_enabled();
}
inline void RoomChatSettings::set_chat_enabled(bool value) {
  _internal_set_chat_enabled(value);
  // @@protoc_insertion_point(field_set:blokus.RoomChatSettings.chat_enabled)
}
inline bool RoomChatSettings::_internal_chat_enabled() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.chat_enabled_;
}
inline void RoomChatSettings::_internal_set_chat_enabled(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chat_enabled_ = value;
}

// bool spectator_chat_enabled = 3;
inline void RoomChatSettings::clear_spectator_chat_enabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.spectator_chat_enabled_ = false;
}
inline bool RoomChatSettings::spectator_chat_enabled() const {
  // @@protoc_insertion_point(field_get:blokus.RoomChatSettings.spectator_chat_enabled)
  return _internal_spectator_chat_enabled();
}
inline void RoomChatSettings::set_spectator_chat_enabled(bool value) {
  _internal_set_spectator_chat_enabled(value);
  // @@protoc_insertion_point(field_set:blokus.RoomChatSettings.spectator_chat_enabled)
}
inline bool RoomChatSettings::_internal_spectator_chat_enabled() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.spectator_chat_enabled_;
}
inline void RoomChatSettings::_internal_set_spectator_chat_enabled(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.spectator_chat_enabled_ = value;
}

// bool team_chat_enabled = 4;
inline void RoomChatSettings::clear_team_chat_enabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.team_chat_enabled_ = false;
}
inline bool RoomChatSettings::team_chat_enabled() const {
  // @@protoc_insertion_point(field_get:blokus.RoomChatSettings.team_chat_enabled)
  return _internal_team_chat_enabled();
}
inline void RoomChatSettings::set_team_chat_enabled(bool value) {
  _internal_set_team_chat_enabled(value);
  // @@protoc_insertion_point(field_set:blokus.RoomChatSettings.team_chat_enabled)
}
inline bool RoomChatSettings::_internal_team_chat_enabled() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.team_chat_enabled_;
}
inline void RoomChatSettings::_internal_set_team_chat_enabled(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.team_chat_enabled_ = value;
}

// int32 message_rate_limit = 5;
inline void RoomChatSettings::clear_message_rate_limit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_rate_limit_ = 0;
}
inline ::int32_t RoomChatSettings::message_rate_limit() const {
  // @@protoc_insertion_point(field_get:blokus.RoomChatSettings.message_rate_limit)
  return _internal_message_rate_limit();
}
inline void RoomChatSettings::set_message_rate_limit(::int32_t value) {
  _internal_set_message_rate_limit(value);
  // @@protoc_insertion_point(field_set:blokus.RoomChatSettings.message_rate_limit)
}
inline ::int32_t RoomChatSettings::_internal_message_rate_limit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_rate_limit_;
}
inline void RoomChatSettings::_internal_set_message_rate_limit(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_rate_limit_ = value;
}

// int32 max_message_length = 6;
inline void RoomChatSettings::clear_max_message_length() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_message_length_ = 0;
}
inline ::int32_t RoomChatSettings::max_message_length() const {
  // @@protoc_insertion_point(field_get:blokus.RoomChatSettings.max_message_length)
  return _internal_max_message_length();
}
inline void RoomChatSettings::set_max_message_length(::int32_t value) {
  _internal_set_max_message_length(value);
  // @@protoc_insertion_point(field_set:blokus.RoomChatSettings.max_message_length)
}
inline ::int32_t RoomChatSettings::_internal_max_message_length() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_message_length_;
}
inline void RoomChatSettings::_internal_set_max_message_length(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_message_length_ = value;
}

// bool links_allowed = 7;
inline void RoomChatSettings::clear_links_allowed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.links_allowed_ = false;
}
inline bool RoomChatSettings::links_allowed() const {
  // @@protoc_insertion_point(field_get:blokus.RoomChatSettings.links_allowed)
  return _internal_links_allowed();
}
inline void RoomChatSettings::set_links_allowed(bool value) {
  _internal_set_links_allowed(value);
  // @@protoc_insertion_point(field_set:blokus.RoomChatSettings.links_allowed)
}
inline bool RoomChatSettings::_internal_links_allowed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.links_allowed_;
}
inline void RoomChatSettings::_internal_set_links_allowed(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.links_allowed_ = value;
}

// bool emotes_allowed = 8;
inline void RoomChatSettings::clear_emotes_allowed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.emotes_allowed_ = false;
}
inline bool RoomChatSettings::emotes_allowed() const {
  // @@protoc_insertion_point(field_get:blokus.RoomChatSettings.emotes_allowed)
  return _internal_emotes_allowed();
}
inline void RoomChatSettings::set_emotes_allowed(bool value) {
  _internal_set_emotes_allowed(value);
  // @@protoc_insertion_point(field_set:blokus.RoomChatSettings.emotes_allowed)
}
inline bool RoomChatSettings::_internal_emotes_allowed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.emotes_allowed_;
}
inline void RoomChatSettings::_internal_set_emotes_allowed(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.emotes_allowed_ = value;
}

// repeated string chat_moderators = 9;
inline int RoomChatSettings::_internal_chat_moderators_size() const {
  return _internal_chat_moderators().size();
}
inline int RoomChatSettings::chat_moderators_size() const {
  return _internal_chat_moderators_size();
}
inline void RoomChatSettings::clear_chat_moderators() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chat_moderators_.Clear();
}
inline std::string* RoomChatSettings::add_chat_moderators() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_chat_moderators()->Add();
  // @@protoc_insertion_point(field_add_mutable:blokus.RoomChatSettings.chat_moderators)
  return _s;
}
inline const std::string& RoomChatSettings::chat_moderators(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.RoomChatSettings.chat_moderators)
  return _internal_chat_moderators().Get(index);
}
inline std::string* RoomChatSettings::mutable_chat_moderators(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.RoomChatSettings.chat_moderators)
  return _internal_mutable_chat_moderators()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void RoomChatSettings::set_chat_moderators(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_chat_moderators()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:blokus.RoomChatSettings.chat_moderators)
}
template <typename Arg_, typename... Args_>
inline void RoomChatSettings::add_chat_moderators(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_chat_moderators(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:blokus.RoomChatSettings.chat_moderators)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RoomChatSettings::chat_moderators() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.RoomChatSettings.chat_moderators)
  return _internal_chat_moderators();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
RoomChatSettings::mutable_chat_moderators() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.RoomChatSettings.chat_moderators)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_chat_moderators();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RoomChatSettings::_internal_chat_moderators() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.chat_moderators_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
RoomChatSettings::_internal_mutable_chat_moderators() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.chat_moderators_;
}

// repeated string banned_users = 10;
inline int RoomChatSettings::_internal_banned_users_size() const {
  return _internal_banned_users().size();
}
inline int RoomChatSettings::banned_users_size() const {
  return _internal_banned_users_size();
}
inline void RoomChatSettings::clear_banned_users() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.banned_users_.Clear();
}
inline std::string* RoomChatSettings::add_banned_users() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_banned_users()->Add();
  // @@protoc_insertion_point(field_add_mutable:blokus.RoomChatSettings.banned_users)
  return _s;
}
inline const std::string& RoomChatSettings::banned_users(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.RoomChatSettings.banned_users)
  return _internal_banned_users().Get(index);
}
inline std::string* RoomChatSettings::mutable_banned_users(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.RoomChatSettings.banned_users)
  return _internal_mutable_banned_users()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void RoomChatSettings::set_banned_users(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_banned_users()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:blokus.RoomChatSettings.banned_users)
}
template <typename Arg_, typename... Args_>
inline void RoomChatSettings::add_banned_users(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_banned_users(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:blokus.RoomChatSettings.banned_users)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RoomChatSettings::banned_users() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.RoomChatSettings.banned_users)
  return _internal_banned_users();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
RoomChatSettings::mutable_banned_users() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.RoomChatSettings.banned_users)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_banned_users();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RoomChatSettings::_internal_banned_users() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.banned_users_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
RoomChatSettings::_internal_mutable_banned_users() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.banned_users_;
}

// string welcome_message = 11;
inline void RoomChatSettings::clear_welcome_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.welcome_message_.ClearToEmpty();
}
inline const std::string& RoomChatSettings::welcome_message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.RoomChatSettings.welcome_message)
  return _internal_welcome_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RoomChatSettings::set_welcome_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.welcome_message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.RoomChatSettings.welcome_message)
}
inline std::string* RoomChatSettings::mutable_welcome_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_welcome_message();
  // @@protoc_insertion_point(field_mutable:blokus.RoomChatSettings.welcome_message)
  return _s;
}
inline const std::string& RoomChatSettings::_internal_welcome_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.welcome_message_.Get();
}
inline void RoomChatSettings::_internal_set_welcome_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.welcome_message_.Set(value, GetArena());
}
inline std::string* RoomChatSettings::_internal_mutable_welcome_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.welcome_message_.Mutable( GetArena());
}
inline std::string* RoomChatSettings::release_welcome_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.RoomChatSettings.welcome_message)
  return _impl_.welcome_message_.Release();
}
inline void RoomChatSettings::set_allocated_welcome_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.welcome_message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.welcome_message_.IsDefault()) {
    _impl_.welcome_message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.RoomChatSettings.welcome_message)
}

// -------------------------------------------------------------------

// EmotePackInfo

// string pack_id = 1;
inline void EmotePackInfo::clear_pack_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pack_id_.ClearToEmpty();
}
inline const std::string& EmotePackInfo::pack_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.EmotePackInfo.pack_id)
  return _internal_pack_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EmotePackInfo::set_pack_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pack_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.EmotePackInfo.pack_id)
}
inline std::string* EmotePackInfo::mutable_pack_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_pack_id();
  // @@protoc_insertion_point(field_mutable:blokus.EmotePackInfo.pack_id)
  return _s;
}
inline const std::string& EmotePackInfo::_internal_pack_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pack_id_.Get();
}
inline void EmotePackInfo::_internal_set_pack_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pack_id_.Set(value, GetArena());
}
inline std::string* EmotePackInfo::_internal_mutable_pack_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.pack_id_.Mutable( GetArena());
}
inline std::string* EmotePackInfo::release_pack_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.EmotePackInfo.pack_id)
  return _impl_.pack_id_.Release();
}
inline void EmotePackInfo::set_allocated_pack_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pack_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.pack_id_.IsDefault()) {
    _impl_.pack_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.EmotePackInfo.pack_id)
}

// string pack_name = 2;
inline void EmotePackInfo::clear_pack_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pack_name_.ClearToEmpty();
}
inline const std::string& EmotePackInfo::pack_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.EmotePackInfo.pack_name)
  return _internal_pack_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EmotePackInfo::set_pack_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pack_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.EmotePackInfo.pack_name)
}
inline std::string* EmotePackInfo::mutable_pack_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_pack_name();
  // @@protoc_insertion_point(field_mutable:blokus.EmotePackInfo.pack_name)
  return _s;
}
inline const std::string& EmotePackInfo::_internal_pack_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pack_name_.Get();
}
inline void EmotePackInfo::_internal_set_pack_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pack_name_.Set(value, GetArena());
}
inline std::string* EmotePackInfo::_internal_mutable_pack_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.pack_name_.Mutable( GetArena());
}
inline std::string* EmotePackInfo::release_pack_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.EmotePackInfo.pack_name)
  return _impl_.pack_name_.Release();
}
inline void EmotePackInfo::set_allocated_pack_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pack_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.pack_name_.IsDefault()) {
    _impl_.pack_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.EmotePackInfo.pack_name)
}

// string description = 3;
inline void EmotePackInfo::clear_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.ClearToEmpty();
}
inline const std::string& EmotePackInfo::description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.EmotePackInfo.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EmotePackInfo::set_description(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.EmotePackInfo.description)
}
inline std::string* EmotePackInfo::mutable_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:blokus.EmotePackInfo.description)
  return _s;
}
inline const std::string& EmotePackInfo::_internal_description() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.description_.Get();
}
inline void EmotePackInfo::_internal_set_description(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.Set(value, GetArena());
}
inline std::string* EmotePackInfo::_internal_mutable_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.description_.Mutable( GetArena());
}
inline std::string* EmotePackInfo::release_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.EmotePackInfo.description)
  return _impl_.description_.Release();
}
inline void EmotePackInfo::set_allocated_description(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.EmotePackInfo.description)
}

// repeated .blokus.EmoteInfo emotes = 4;
inline int EmotePackInfo::_internal_emotes_size() const {
  return _internal_emotes().size();
}
inline int EmotePackInfo::emotes_size() const {
  return _internal_emotes_size();
}
inline void EmotePackInfo::clear_emotes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.emotes_.Clear();
}
inline ::blokus::EmoteInfo* EmotePackInfo::mutable_emotes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.EmotePackInfo.emotes)
  return _internal_mutable_emotes()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::blokus::EmoteInfo>* EmotePackInfo::mutable_emotes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.EmotePackInfo.emotes)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_emotes();
}
inline const ::blokus::EmoteInfo& EmotePackInfo::emotes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.EmotePackInfo.emotes)
  return _internal_emotes().Get(index);
}
inline ::blokus::EmoteInfo* EmotePackInfo::add_emotes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::blokus::EmoteInfo* _add = _internal_mutable_emotes()->Add();
  // @@protoc_insertion_point(field_add:blokus.EmotePackInfo.emotes)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::blokus::EmoteInfo>& EmotePackInfo::emotes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.EmotePackInfo.emotes)
  return _internal_emotes();
}
inline const ::google::protobuf::RepeatedPtrField<::blokus::EmoteInfo>&
EmotePackInfo::_internal_emotes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.emotes_;
}
inline ::google::protobuf::RepeatedPtrField<::blokus::EmoteInfo>*
EmotePackInfo::_internal_mutable_emotes() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.emotes_;
}

// bool is_premium = 5;
inline void EmotePackInfo::clear_is_premium() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_premium_ = false;
}
inline bool EmotePackInfo::is_premium() const {
  // @@protoc_insertion_point(field_get:blokus.EmotePackInfo.is_premium)
  return _internal_is_premium();
}
inline void EmotePackInfo::set_is_premium(bool value) {
  _internal_set_is_premium(value);
  // @@protoc_insertion_point(field_set:blokus.EmotePackInfo.is_premium)
}
inline bool EmotePackInfo::_internal_is_premium() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_premium_;
}
inline void EmotePackInfo::_internal_set_is_premium(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_premium_ = value;
}

// bool is_unlocked = 6;
inline void EmotePackInfo::clear_is_unlocked() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_unlocked_ = false;
}
inline bool EmotePackInfo::is_unlocked() const {
  // @@protoc_insertion_point(field_get:blokus.EmotePackInfo.is_unlocked)
  return _internal_is_unlocked();
}
inline void EmotePackInfo::set_is_unlocked(bool value) {
  _internal_set_is_unlocked(value);
  // @@protoc_insertion_point(field_set:blokus.EmotePackInfo.is_unlocked)
}
inline bool EmotePackInfo::_internal_is_unlocked() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_unlocked_;
}
inline void EmotePackInfo::_internal_set_is_unlocked(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_unlocked_ = value;
}

// -------------------------------------------------------------------

// EmoteInfo

// string emote_id = 1;
inline void EmoteInfo::clear_emote_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.emote_id_.ClearToEmpty();
}
inline const std::string& EmoteInfo::emote_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.EmoteInfo.emote_id)
  return _internal_emote_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EmoteInfo::set_emote_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.emote_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.EmoteInfo.emote_id)
}
inline std::string* EmoteInfo::mutable_emote_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_emote_id();
  // @@protoc_insertion_point(field_mutable:blokus.EmoteInfo.emote_id)
  return _s;
}
inline const std::string& EmoteInfo::_internal_emote_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.emote_id_.Get();
}
inline void EmoteInfo::_internal_set_emote_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.emote_id_.Set(value, GetArena());
}
inline std::string* EmoteInfo::_internal_mutable_emote_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.emote_id_.Mutable( GetArena());
}
inline std::string* EmoteInfo::release_emote_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.EmoteInfo.emote_id)
  return _impl_.emote_id_.Release();
}
inline void EmoteInfo::set_allocated_emote_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.emote_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.emote_id_.IsDefault()) {
    _impl_.emote_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.EmoteInfo.emote_id)
}

// string emote_name = 2;
inline void EmoteInfo::clear_emote_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.emote_name_.ClearToEmpty();
}
inline const std::string& EmoteInfo::emote_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.EmoteInfo.emote_name)
  return _internal_emote_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EmoteInfo::set_emote_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.emote_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.EmoteInfo.emote_name)
}
inline std::string* EmoteInfo::mutable_emote_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_emote_name();
  // @@protoc_insertion_point(field_mutable:blokus.EmoteInfo.emote_name)
  return _s;
}
inline const std::string& EmoteInfo::_internal_emote_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.emote_name_.Get();
}
inline void EmoteInfo::_internal_set_emote_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.emote_name_.Set(value, GetArena());
}
inline std::string* EmoteInfo::_internal_mutable_emote_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.emote_name_.Mutable( GetArena());
}
inline std::string* EmoteInfo::release_emote_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.EmoteInfo.emote_name)
  return _impl_.emote_name_.Release();
}
inline void EmoteInfo::set_allocated_emote_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.emote_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.emote_name_.IsDefault()) {
    _impl_.emote_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.EmoteInfo.emote_name)
}

// string emote_url = 3;
inline void EmoteInfo::clear_emote_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.emote_url_.ClearToEmpty();
}
inline const std::string& EmoteInfo::emote_url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.EmoteInfo.emote_url)
  return _internal_emote_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EmoteInfo::set_emote_url(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.emote_url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.EmoteInfo.emote_url)
}
inline std::string* EmoteInfo::mutable_emote_url() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_emote_url();
  // @@protoc_insertion_point(field_mutable:blokus.EmoteInfo.emote_url)
  return _s;
}
inline const std::string& EmoteInfo::_internal_emote_url() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.emote_url_.Get();
}
inline void EmoteInfo::_internal_set_emote_url(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.emote_url_.Set(value, GetArena());
}
inline std::string* EmoteInfo::_internal_mutable_emote_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.emote_url_.Mutable( GetArena());
}
inline std::string* EmoteInfo::release_emote_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.EmoteInfo.emote_url)
  return _impl_.emote_url_.Release();
}
inline void EmoteInfo::set_allocated_emote_url(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.emote_url_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.emote_url_.IsDefault()) {
    _impl_.emote_url_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.EmoteInfo.emote_url)
}

// repeated string tags = 4;
inline int EmoteInfo::_internal_tags_size() const {
  return _internal_tags().size();
}
inline int EmoteInfo::tags_size() const {
  return _internal_tags_size();
}
inline void EmoteInfo::clear_tags() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tags_.Clear();
}
inline std::string* EmoteInfo::add_tags() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_tags()->Add();
  // @@protoc_insertion_point(field_add_mutable:blokus.EmoteInfo.tags)
  return _s;
}
inline const std::string& EmoteInfo::tags(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.EmoteInfo.tags)
  return _internal_tags().Get(index);
}
inline std::string* EmoteInfo::mutable_tags(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.EmoteInfo.tags)
  return _internal_mutable_tags()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void EmoteInfo::set_tags(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_tags()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:blokus.EmoteInfo.tags)
}
template <typename Arg_, typename... Args_>
inline void EmoteInfo::add_tags(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_tags(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:blokus.EmoteInfo.tags)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
EmoteInfo::tags() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.EmoteInfo.tags)
  return _internal_tags();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
EmoteInfo::mutable_tags() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.EmoteInfo.tags)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_tags();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
EmoteInfo::_internal_tags() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tags_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
EmoteInfo::_internal_mutable_tags() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.tags_;
}

// bool is_animated = 5;
inline void EmoteInfo::clear_is_animated() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_animated_ = false;
}
inline bool EmoteInfo::is_animated() const {
  // @@protoc_insertion_point(field_get:blokus.EmoteInfo.is_animated)
  return _internal_is_animated();
}
inline void EmoteInfo::set_is_animated(bool value) {
  _internal_set_is_animated(value);
  // @@protoc_insertion_point(field_set:blokus.EmoteInfo.is_animated)
}
inline bool EmoteInfo::_internal_is_animated() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_animated_;
}
inline void EmoteInfo::_internal_set_is_animated(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_animated_ = value;
}

// -------------------------------------------------------------------

// GetEmotePacksRequest

// bool include_locked = 1;
inline void GetEmotePacksRequest::clear_include_locked() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.include_locked_ = false;
}
inline bool GetEmotePacksRequest::include_locked() const {
  // @@protoc_insertion_point(field_get:blokus.GetEmotePacksRequest.include_locked)
  return _internal_include_locked();
}
inline void GetEmotePacksRequest::set_include_locked(bool value) {
  _internal_set_include_locked(value);
  // @@protoc_insertion_point(field_set:blokus.GetEmotePacksRequest.include_locked)
}
inline bool GetEmotePacksRequest::_internal_include_locked() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.include_locked_;
}
inline void GetEmotePacksRequest::_internal_set_include_locked(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.include_locked_ = value;
}

// -------------------------------------------------------------------

// GetEmotePacksResponse

// .blokus.Result result = 1;
inline bool GetEmotePacksResponse::has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.result_ != nullptr);
  return value;
}
inline const ::blokus::Result& GetEmotePacksResponse::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::Result* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::Result&>(::blokus::_Result_default_instance_);
}
inline const ::blokus::Result& GetEmotePacksResponse::result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.GetEmotePacksResponse.result)
  return _internal_result();
}
inline void GetEmotePacksResponse::unsafe_arena_set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.GetEmotePacksResponse.result)
}
inline ::blokus::Result* GetEmotePacksResponse::release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* released = _impl_.result_;
  _impl_.result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::Result* GetEmotePacksResponse::unsafe_arena_release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.GetEmotePacksResponse.result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::blokus::Result* GetEmotePacksResponse::_internal_mutable_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::Result>(GetArena());
    _impl_.result_ = reinterpret_cast<::blokus::Result*>(p);
  }
  return _impl_.result_;
}
inline ::blokus::Result* GetEmotePacksResponse::mutable_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::blokus::Result* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:blokus.GetEmotePacksResponse.result)
  return _msg;
}
inline void GetEmotePacksResponse::set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.GetEmotePacksResponse.result)
}

// repeated .blokus.EmotePackInfo emote_packs = 2;
inline int GetEmotePacksResponse::_internal_emote_packs_size() const {
  return _internal_emote_packs().size();
}
inline int GetEmotePacksResponse::emote_packs_size() const {
  return _internal_emote_packs_size();
}
inline void GetEmotePacksResponse::clear_emote_packs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.emote_packs_.Clear();
}
inline ::blokus::EmotePackInfo* GetEmotePacksResponse::mutable_emote_packs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.GetEmotePacksResponse.emote_packs)
  return _internal_mutable_emote_packs()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::blokus::EmotePackInfo>* GetEmotePacksResponse::mutable_emote_packs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.GetEmotePacksResponse.emote_packs)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_emote_packs();
}
inline const ::blokus::EmotePackInfo& GetEmotePacksResponse::emote_packs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.GetEmotePacksResponse.emote_packs)
  return _internal_emote_packs().Get(index);
}
inline ::blokus::EmotePackInfo* GetEmotePacksResponse::add_emote_packs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::blokus::EmotePackInfo* _add = _internal_mutable_emote_packs()->Add();
  // @@protoc_insertion_point(field_add:blokus.GetEmotePacksResponse.emote_packs)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::blokus::EmotePackInfo>& GetEmotePacksResponse::emote_packs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.GetEmotePacksResponse.emote_packs)
  return _internal_emote_packs();
}
inline const ::google::protobuf::RepeatedPtrField<::blokus::EmotePackInfo>&
GetEmotePacksResponse::_internal_emote_packs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.emote_packs_;
}
inline ::google::protobuf::RepeatedPtrField<::blokus::EmotePackInfo>*
GetEmotePacksResponse::_internal_mutable_emote_packs() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.emote_packs_;
}

// repeated string unlocked_pack_ids = 3;
inline int GetEmotePacksResponse::_internal_unlocked_pack_ids_size() const {
  return _internal_unlocked_pack_ids().size();
}
inline int GetEmotePacksResponse::unlocked_pack_ids_size() const {
  return _internal_unlocked_pack_ids_size();
}
inline void GetEmotePacksResponse::clear_unlocked_pack_ids() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.unlocked_pack_ids_.Clear();
}
inline std::string* GetEmotePacksResponse::add_unlocked_pack_ids() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_unlocked_pack_ids()->Add();
  // @@protoc_insertion_point(field_add_mutable:blokus.GetEmotePacksResponse.unlocked_pack_ids)
  return _s;
}
inline const std::string& GetEmotePacksResponse::unlocked_pack_ids(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.GetEmotePacksResponse.unlocked_pack_ids)
  return _internal_unlocked_pack_ids().Get(index);
}
inline std::string* GetEmotePacksResponse::mutable_unlocked_pack_ids(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.GetEmotePacksResponse.unlocked_pack_ids)
  return _internal_mutable_unlocked_pack_ids()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void GetEmotePacksResponse::set_unlocked_pack_ids(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_unlocked_pack_ids()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:blokus.GetEmotePacksResponse.unlocked_pack_ids)
}
template <typename Arg_, typename... Args_>
inline void GetEmotePacksResponse::add_unlocked_pack_ids(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_unlocked_pack_ids(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:blokus.GetEmotePacksResponse.unlocked_pack_ids)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
GetEmotePacksResponse::unlocked_pack_ids() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.GetEmotePacksResponse.unlocked_pack_ids)
  return _internal_unlocked_pack_ids();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
GetEmotePacksResponse::mutable_unlocked_pack_ids() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.GetEmotePacksResponse.unlocked_pack_ids)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_unlocked_pack_ids();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
GetEmotePacksResponse::_internal_unlocked_pack_ids() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.unlocked_pack_ids_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
GetEmotePacksResponse::_internal_mutable_unlocked_pack_ids() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.unlocked_pack_ids_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace blokus


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::blokus::SystemMessage_SystemMessageType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::blokus::SystemMessage_SystemMessageType>() {
  return ::blokus::SystemMessage_SystemMessageType_descriptor();
}
template <>
struct is_proto_enum<::blokus::ModerateChatRequest_ModerationAction> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::blokus::ModerateChatRequest_ModerationAction>() {
  return ::blokus::ModerateChatRequest_ModerationAction_descriptor();
}
template <>
struct is_proto_enum<::blokus::ChatType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::blokus::ChatType>() {
  return ::blokus::ChatType_descriptor();
}
template <>
struct is_proto_enum<::blokus::ChatScope> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::blokus::ChatScope>() {
  return ::blokus::ChatScope_descriptor();
}
template <>
struct is_proto_enum<::blokus::MessageStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::blokus::MessageStatus>() {
  return ::blokus::MessageStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // chat_2eproto_2epb_2eh
