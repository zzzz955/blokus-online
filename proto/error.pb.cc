// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: error.proto
// Protobuf C++ Version: 5.29.3

#include "error.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace blokus {
              template <typename>
PROTOBUF_CONSTEXPR RateLimitExceeded_RateLimitInfoEntry_DoNotUse::RateLimitExceeded_RateLimitInfoEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : RateLimitExceeded_RateLimitInfoEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : RateLimitExceeded_RateLimitInfoEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct RateLimitExceeded_RateLimitInfoEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RateLimitExceeded_RateLimitInfoEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RateLimitExceeded_RateLimitInfoEntry_DoNotUseDefaultTypeInternal() {}
  union {
    RateLimitExceeded_RateLimitInfoEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RateLimitExceeded_RateLimitInfoEntry_DoNotUseDefaultTypeInternal _RateLimitExceeded_RateLimitInfoEntry_DoNotUse_default_instance_;

inline constexpr FieldError::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : valid_values_{},
        field_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        error_code_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        current_value_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        validation_rule_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR FieldError::FieldError(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct FieldErrorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FieldErrorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FieldErrorDefaultTypeInternal() {}
  union {
    FieldError _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FieldErrorDefaultTypeInternal _FieldError_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR ErrorResponse_DetailsEntry_DoNotUse::ErrorResponse_DetailsEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ErrorResponse_DetailsEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ErrorResponse_DetailsEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct ErrorResponse_DetailsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ErrorResponse_DetailsEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ErrorResponse_DetailsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ErrorResponse_DetailsEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ErrorResponse_DetailsEntry_DoNotUseDefaultTypeInternal _ErrorResponse_DetailsEntry_DoNotUse_default_instance_;

inline constexpr ErrorAction::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : action_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        label_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        action_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        action_data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        is_primary_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ErrorAction::ErrorAction(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ErrorActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ErrorActionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ErrorActionDefaultTypeInternal() {}
  union {
    ErrorAction _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ErrorActionDefaultTypeInternal _ErrorAction_default_instance_;

inline constexpr ClientError::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : missing_parameters_{},
        invalid_parameters_{},
        client_version_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        required_version_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        update_url_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        configuration_help_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        error_type_{static_cast< ::blokus::ClientError_ClientErrorType >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ClientError::ClientError(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ClientErrorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientErrorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientErrorDefaultTypeInternal() {}
  union {
    ClientError _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientErrorDefaultTypeInternal _ClientError_default_instance_;

inline constexpr UserFriendlyError::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : actions_{},
        title_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        description_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        icon_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        show_technical_details_{false},
        dismissible_{false},
        auto_dismiss_seconds_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR UserFriendlyError::UserFriendlyError(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct UserFriendlyErrorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserFriendlyErrorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserFriendlyErrorDefaultTypeInternal() {}
  union {
    UserFriendlyError _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserFriendlyErrorDefaultTypeInternal _UserFriendlyError_default_instance_;

inline constexpr ServerError::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        affected_features_{},
        workarounds_{},
        service_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        error_message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        maintenance_url_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        estimated_recovery_{nullptr},
        error_type_{static_cast< ::blokus::ServerError_ServerErrorType >(0)},
        partial_service_{false} {}

template <typename>
PROTOBUF_CONSTEXPR ServerError::ServerError(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ServerErrorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerErrorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerErrorDefaultTypeInternal() {}
  union {
    ServerError _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerErrorDefaultTypeInternal _ServerError_default_instance_;

inline constexpr RateLimitExceeded::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        rate_limit_info_{},
        limit_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        client_ip_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        rate_limit_key_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        reset_time_{nullptr},
        current_count_{0},
        limit_count_{0},
        reset_after_seconds_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RateLimitExceeded::RateLimitExceeded(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RateLimitExceededDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RateLimitExceededDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RateLimitExceededDefaultTypeInternal() {}
  union {
    RateLimitExceeded _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RateLimitExceededDefaultTypeInternal _RateLimitExceeded_default_instance_;

inline constexpr ErrorResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        field_errors_{},
        details_{},
        suggested_actions_{},
        error_code_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        technical_message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        help_url_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        contact_support_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        trace_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        server_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        timestamp_{nullptr},
        result_code_{static_cast< ::blokus::ResultCode >(0)},
        category_{static_cast< ::blokus::ErrorCategory >(0)},
        severity_{static_cast< ::blokus::ErrorSeverity >(0)},
        retryable_{false},
        retry_after_seconds_{0},
        max_retries_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ErrorResponse::ErrorResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ErrorResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ErrorResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ErrorResponseDefaultTypeInternal() {}
  union {
    ErrorResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ErrorResponseDefaultTypeInternal _ErrorResponse_default_instance_;

inline constexpr ConnectionError::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        alternate_servers_{},
        reason_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        disconnected_at_{nullptr},
        error_type_{static_cast< ::blokus::ConnectionError_ConnectionErrorType >(0)},
        auto_reconnect_enabled_{false},
        reconnect_delay_seconds_{0},
        max_reconnect_attempts_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ConnectionError::ConnectionError(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ConnectionErrorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConnectionErrorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConnectionErrorDefaultTypeInternal() {}
  union {
    ConnectionError _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConnectionErrorDefaultTypeInternal _ConnectionError_default_instance_;

inline constexpr GameErrorDetails::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        valid_positions_{},
        blocking_positions_{},
        rule_violated_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        rule_description_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        suggestion_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        attempted_placement_{nullptr},
        game_error_{static_cast< ::blokus::GameLogicError >(0)},
        current_player_{static_cast< ::blokus::PlayerColor >(0)},
        game_state_{static_cast< ::blokus::GameState >(0)},
        turn_number_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GameErrorDetails::GameErrorDetails(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GameErrorDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameErrorDetailsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameErrorDetailsDefaultTypeInternal() {}
  union {
    GameErrorDetails _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameErrorDetailsDefaultTypeInternal _GameErrorDetails_default_instance_;

inline constexpr ErrorReport::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        breadcrumbs_{},
        client_version_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        platform_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        user_agent_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        device_info_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        current_screen_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        last_action_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        user_id_hash_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        network_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        error_{nullptr},
        reported_at_{nullptr},
        user_level_{0},
        session_duration_{0},
        network_latency_{0},
        auto_submitted_{false} {}

template <typename>
PROTOBUF_CONSTEXPR ErrorReport::ErrorReport(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ErrorReportDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ErrorReportDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ErrorReportDefaultTypeInternal() {}
  union {
    ErrorReport _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ErrorReportDefaultTypeInternal _ErrorReport_default_instance_;
}  // namespace blokus
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_error_2eproto[9];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_error_2eproto = nullptr;
const ::uint32_t
    TableStruct_error_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::blokus::ErrorResponse_DetailsEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::ErrorResponse_DetailsEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::ErrorResponse_DetailsEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::blokus::ErrorResponse_DetailsEntry_DoNotUse, _impl_.value_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::blokus::ErrorResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::ErrorResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::ErrorResponse, _impl_.result_code_),
        PROTOBUF_FIELD_OFFSET(::blokus::ErrorResponse, _impl_.category_),
        PROTOBUF_FIELD_OFFSET(::blokus::ErrorResponse, _impl_.severity_),
        PROTOBUF_FIELD_OFFSET(::blokus::ErrorResponse, _impl_.error_code_),
        PROTOBUF_FIELD_OFFSET(::blokus::ErrorResponse, _impl_.message_),
        PROTOBUF_FIELD_OFFSET(::blokus::ErrorResponse, _impl_.technical_message_),
        PROTOBUF_FIELD_OFFSET(::blokus::ErrorResponse, _impl_.field_errors_),
        PROTOBUF_FIELD_OFFSET(::blokus::ErrorResponse, _impl_.details_),
        PROTOBUF_FIELD_OFFSET(::blokus::ErrorResponse, _impl_.suggested_actions_),
        PROTOBUF_FIELD_OFFSET(::blokus::ErrorResponse, _impl_.help_url_),
        PROTOBUF_FIELD_OFFSET(::blokus::ErrorResponse, _impl_.contact_support_),
        PROTOBUF_FIELD_OFFSET(::blokus::ErrorResponse, _impl_.timestamp_),
        PROTOBUF_FIELD_OFFSET(::blokus::ErrorResponse, _impl_.trace_id_),
        PROTOBUF_FIELD_OFFSET(::blokus::ErrorResponse, _impl_.server_id_),
        PROTOBUF_FIELD_OFFSET(::blokus::ErrorResponse, _impl_.retryable_),
        PROTOBUF_FIELD_OFFSET(::blokus::ErrorResponse, _impl_.retry_after_seconds_),
        PROTOBUF_FIELD_OFFSET(::blokus::ErrorResponse, _impl_.max_retries_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::blokus::FieldError, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::FieldError, _impl_.field_name_),
        PROTOBUF_FIELD_OFFSET(::blokus::FieldError, _impl_.error_code_),
        PROTOBUF_FIELD_OFFSET(::blokus::FieldError, _impl_.message_),
        PROTOBUF_FIELD_OFFSET(::blokus::FieldError, _impl_.current_value_),
        PROTOBUF_FIELD_OFFSET(::blokus::FieldError, _impl_.valid_values_),
        PROTOBUF_FIELD_OFFSET(::blokus::FieldError, _impl_.validation_rule_),
        PROTOBUF_FIELD_OFFSET(::blokus::RateLimitExceeded_RateLimitInfoEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::RateLimitExceeded_RateLimitInfoEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::RateLimitExceeded_RateLimitInfoEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::blokus::RateLimitExceeded_RateLimitInfoEntry_DoNotUse, _impl_.value_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::blokus::RateLimitExceeded, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::RateLimitExceeded, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::RateLimitExceeded, _impl_.limit_type_),
        PROTOBUF_FIELD_OFFSET(::blokus::RateLimitExceeded, _impl_.current_count_),
        PROTOBUF_FIELD_OFFSET(::blokus::RateLimitExceeded, _impl_.limit_count_),
        PROTOBUF_FIELD_OFFSET(::blokus::RateLimitExceeded, _impl_.reset_after_seconds_),
        PROTOBUF_FIELD_OFFSET(::blokus::RateLimitExceeded, _impl_.reset_time_),
        PROTOBUF_FIELD_OFFSET(::blokus::RateLimitExceeded, _impl_.client_ip_),
        PROTOBUF_FIELD_OFFSET(::blokus::RateLimitExceeded, _impl_.rate_limit_key_),
        PROTOBUF_FIELD_OFFSET(::blokus::RateLimitExceeded, _impl_.rate_limit_info_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::blokus::ServerError, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::ServerError, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::ServerError, _impl_.error_type_),
        PROTOBUF_FIELD_OFFSET(::blokus::ServerError, _impl_.service_name_),
        PROTOBUF_FIELD_OFFSET(::blokus::ServerError, _impl_.error_message_),
        PROTOBUF_FIELD_OFFSET(::blokus::ServerError, _impl_.estimated_recovery_),
        PROTOBUF_FIELD_OFFSET(::blokus::ServerError, _impl_.maintenance_url_),
        PROTOBUF_FIELD_OFFSET(::blokus::ServerError, _impl_.affected_features_),
        PROTOBUF_FIELD_OFFSET(::blokus::ServerError, _impl_.workarounds_),
        PROTOBUF_FIELD_OFFSET(::blokus::ServerError, _impl_.partial_service_),
        ~0u,
        ~0u,
        ~0u,
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::blokus::ClientError, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::ClientError, _impl_.error_type_),
        PROTOBUF_FIELD_OFFSET(::blokus::ClientError, _impl_.client_version_),
        PROTOBUF_FIELD_OFFSET(::blokus::ClientError, _impl_.required_version_),
        PROTOBUF_FIELD_OFFSET(::blokus::ClientError, _impl_.update_url_),
        PROTOBUF_FIELD_OFFSET(::blokus::ClientError, _impl_.missing_parameters_),
        PROTOBUF_FIELD_OFFSET(::blokus::ClientError, _impl_.invalid_parameters_),
        PROTOBUF_FIELD_OFFSET(::blokus::ClientError, _impl_.configuration_help_),
        PROTOBUF_FIELD_OFFSET(::blokus::ConnectionError, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::ConnectionError, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::ConnectionError, _impl_.error_type_),
        PROTOBUF_FIELD_OFFSET(::blokus::ConnectionError, _impl_.reason_),
        PROTOBUF_FIELD_OFFSET(::blokus::ConnectionError, _impl_.disconnected_at_),
        PROTOBUF_FIELD_OFFSET(::blokus::ConnectionError, _impl_.auto_reconnect_enabled_),
        PROTOBUF_FIELD_OFFSET(::blokus::ConnectionError, _impl_.reconnect_delay_seconds_),
        PROTOBUF_FIELD_OFFSET(::blokus::ConnectionError, _impl_.max_reconnect_attempts_),
        PROTOBUF_FIELD_OFFSET(::blokus::ConnectionError, _impl_.alternate_servers_),
        ~0u,
        ~0u,
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::blokus::GameErrorDetails, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameErrorDetails, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::GameErrorDetails, _impl_.game_error_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameErrorDetails, _impl_.attempted_placement_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameErrorDetails, _impl_.valid_positions_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameErrorDetails, _impl_.blocking_positions_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameErrorDetails, _impl_.current_player_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameErrorDetails, _impl_.game_state_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameErrorDetails, _impl_.turn_number_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameErrorDetails, _impl_.rule_violated_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameErrorDetails, _impl_.rule_description_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameErrorDetails, _impl_.suggestion_),
        ~0u,
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::blokus::UserFriendlyError, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::UserFriendlyError, _impl_.title_),
        PROTOBUF_FIELD_OFFSET(::blokus::UserFriendlyError, _impl_.description_),
        PROTOBUF_FIELD_OFFSET(::blokus::UserFriendlyError, _impl_.icon_),
        PROTOBUF_FIELD_OFFSET(::blokus::UserFriendlyError, _impl_.actions_),
        PROTOBUF_FIELD_OFFSET(::blokus::UserFriendlyError, _impl_.show_technical_details_),
        PROTOBUF_FIELD_OFFSET(::blokus::UserFriendlyError, _impl_.dismissible_),
        PROTOBUF_FIELD_OFFSET(::blokus::UserFriendlyError, _impl_.auto_dismiss_seconds_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::blokus::ErrorAction, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::ErrorAction, _impl_.action_id_),
        PROTOBUF_FIELD_OFFSET(::blokus::ErrorAction, _impl_.label_),
        PROTOBUF_FIELD_OFFSET(::blokus::ErrorAction, _impl_.action_type_),
        PROTOBUF_FIELD_OFFSET(::blokus::ErrorAction, _impl_.action_data_),
        PROTOBUF_FIELD_OFFSET(::blokus::ErrorAction, _impl_.is_primary_),
        PROTOBUF_FIELD_OFFSET(::blokus::ErrorReport, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::ErrorReport, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::ErrorReport, _impl_.error_),
        PROTOBUF_FIELD_OFFSET(::blokus::ErrorReport, _impl_.client_version_),
        PROTOBUF_FIELD_OFFSET(::blokus::ErrorReport, _impl_.platform_),
        PROTOBUF_FIELD_OFFSET(::blokus::ErrorReport, _impl_.user_agent_),
        PROTOBUF_FIELD_OFFSET(::blokus::ErrorReport, _impl_.device_info_),
        PROTOBUF_FIELD_OFFSET(::blokus::ErrorReport, _impl_.current_screen_),
        PROTOBUF_FIELD_OFFSET(::blokus::ErrorReport, _impl_.last_action_),
        PROTOBUF_FIELD_OFFSET(::blokus::ErrorReport, _impl_.breadcrumbs_),
        PROTOBUF_FIELD_OFFSET(::blokus::ErrorReport, _impl_.user_id_hash_),
        PROTOBUF_FIELD_OFFSET(::blokus::ErrorReport, _impl_.user_level_),
        PROTOBUF_FIELD_OFFSET(::blokus::ErrorReport, _impl_.session_duration_),
        PROTOBUF_FIELD_OFFSET(::blokus::ErrorReport, _impl_.network_type_),
        PROTOBUF_FIELD_OFFSET(::blokus::ErrorReport, _impl_.network_latency_),
        PROTOBUF_FIELD_OFFSET(::blokus::ErrorReport, _impl_.auto_submitted_),
        PROTOBUF_FIELD_OFFSET(::blokus::ErrorReport, _impl_.reported_at_),
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        1,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 10, -1, sizeof(::blokus::ErrorResponse_DetailsEntry_DoNotUse)},
        {12, 37, -1, sizeof(::blokus::ErrorResponse)},
        {54, -1, -1, sizeof(::blokus::FieldError)},
        {68, 78, -1, sizeof(::blokus::RateLimitExceeded_RateLimitInfoEntry_DoNotUse)},
        {80, 96, -1, sizeof(::blokus::RateLimitExceeded)},
        {104, 120, -1, sizeof(::blokus::ServerError)},
        {128, -1, -1, sizeof(::blokus::ClientError)},
        {143, 158, -1, sizeof(::blokus::ConnectionError)},
        {165, 183, -1, sizeof(::blokus::GameErrorDetails)},
        {193, -1, -1, sizeof(::blokus::UserFriendlyError)},
        {208, -1, -1, sizeof(::blokus::ErrorAction)},
        {221, 244, -1, sizeof(::blokus::ErrorReport)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::blokus::_ErrorResponse_DetailsEntry_DoNotUse_default_instance_._instance,
    &::blokus::_ErrorResponse_default_instance_._instance,
    &::blokus::_FieldError_default_instance_._instance,
    &::blokus::_RateLimitExceeded_RateLimitInfoEntry_DoNotUse_default_instance_._instance,
    &::blokus::_RateLimitExceeded_default_instance_._instance,
    &::blokus::_ServerError_default_instance_._instance,
    &::blokus::_ClientError_default_instance_._instance,
    &::blokus::_ConnectionError_default_instance_._instance,
    &::blokus::_GameErrorDetails_default_instance_._instance,
    &::blokus::_UserFriendlyError_default_instance_._instance,
    &::blokus::_ErrorAction_default_instance_._instance,
    &::blokus::_ErrorReport_default_instance_._instance,
};
const char descriptor_table_protodef_error_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\013error.proto\022\006blokus\032\037google/protobuf/t"
    "imestamp.proto\032\014common.proto\"\270\004\n\rErrorRe"
    "sponse\022\'\n\013result_code\030\001 \001(\0162\022.blokus.Res"
    "ultCode\022\'\n\010category\030\002 \001(\0162\025.blokus.Error"
    "Category\022\'\n\010severity\030\003 \001(\0162\025.blokus.Erro"
    "rSeverity\022\022\n\nerror_code\030\004 \001(\t\022\017\n\007message"
    "\030\005 \001(\t\022\031\n\021technical_message\030\006 \001(\t\022(\n\014fie"
    "ld_errors\030\007 \003(\0132\022.blokus.FieldError\0223\n\007d"
    "etails\030\010 \003(\0132\".blokus.ErrorResponse.Deta"
    "ilsEntry\022\031\n\021suggested_actions\030\t \003(\t\022\020\n\010h"
    "elp_url\030\n \001(\t\022\027\n\017contact_support\030\013 \001(\t\022-"
    "\n\ttimestamp\030\014 \001(\0132\032.google.protobuf.Time"
    "stamp\022\020\n\010trace_id\030\r \001(\t\022\021\n\tserver_id\030\016 \001"
    "(\t\022\021\n\tretryable\030\017 \001(\010\022\033\n\023retry_after_sec"
    "onds\030\020 \001(\005\022\023\n\013max_retries\030\021 \001(\005\032.\n\014Detai"
    "lsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\""
    "\213\001\n\nFieldError\022\022\n\nfield_name\030\001 \001(\t\022\022\n\ner"
    "ror_code\030\002 \001(\t\022\017\n\007message\030\003 \001(\t\022\025\n\rcurre"
    "nt_value\030\004 \001(\t\022\024\n\014valid_values\030\005 \003(\t\022\027\n\017"
    "validation_rule\030\006 \001(\t\"\310\002\n\021RateLimitExcee"
    "ded\022\022\n\nlimit_type\030\001 \001(\t\022\025\n\rcurrent_count"
    "\030\002 \001(\005\022\023\n\013limit_count\030\003 \001(\005\022\033\n\023reset_aft"
    "er_seconds\030\004 \001(\005\022.\n\nreset_time\030\005 \001(\0132\032.g"
    "oogle.protobuf.Timestamp\022\021\n\tclient_ip\030\006 "
    "\001(\t\022\026\n\016rate_limit_key\030\007 \001(\t\022E\n\017rate_limi"
    "t_info\030\010 \003(\0132,.blokus.RateLimitExceeded."
    "RateLimitInfoEntry\0324\n\022RateLimitInfoEntry"
    "\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\005:\0028\001\"\271\003\n\013Ser"
    "verError\0227\n\nerror_type\030\001 \001(\0162#.blokus.Se"
    "rverError.ServerErrorType\022\024\n\014service_nam"
    "e\030\002 \001(\t\022\025\n\rerror_message\030\003 \001(\t\0226\n\022estima"
    "ted_recovery\030\004 \001(\0132\032.google.protobuf.Tim"
    "estamp\022\027\n\017maintenance_url\030\005 \001(\t\022\031\n\021affec"
    "ted_features\030\006 \003(\t\022\023\n\013workarounds\030\007 \003(\t\022"
    "\027\n\017partial_service\030\010 \001(\010\"\251\001\n\017ServerError"
    "Type\022\022\n\016INTERNAL_ERROR\020\000\022\022\n\016DATABASE_ERR"
    "OR\020\001\022\027\n\023SERVICE_UNAVAILABLE\020\002\022\024\n\020MAINTEN"
    "ANCE_MODE\020\003\022\016\n\nOVERLOADED\020\004\022\027\n\023CONFIGURA"
    "TION_ERROR\020\005\022\026\n\022DEPENDENCY_FAILURE\020\006\"\235\003\n"
    "\013ClientError\0227\n\nerror_type\030\001 \001(\0162#.bloku"
    "s.ClientError.ClientErrorType\022\026\n\016client_"
    "version\030\002 \001(\t\022\030\n\020required_version\030\003 \001(\t\022"
    "\022\n\nupdate_url\030\004 \001(\t\022\032\n\022missing_parameter"
    "s\030\005 \003(\t\022\032\n\022invalid_parameters\030\006 \003(\t\022\032\n\022c"
    "onfiguration_help\030\007 \001(\t\"\272\001\n\017ClientErrorT"
    "ype\022\023\n\017INVALID_REQUEST\020\000\022\027\n\023UNSUPPORTED_"
    "VERSION\020\001\022\025\n\021MALFORMED_MESSAGE\020\002\022\026\n\022MISS"
    "ING_PARAMETERS\020\003\022\026\n\022PROTOCOL_VIOLATION\020\004"
    "\022\022\n\016CLIENT_TOO_OLD\020\005\022\036\n\032CLIENT_CONFIGURA"
    "TION_ERROR\020\006\"\350\003\n\017ConnectionError\022\?\n\nerro"
    "r_type\030\001 \001(\0162+.blokus.ConnectionError.Co"
    "nnectionErrorType\022\016\n\006reason\030\002 \001(\t\0223\n\017dis"
    "connected_at\030\003 \001(\0132\032.google.protobuf.Tim"
    "estamp\022\036\n\026auto_reconnect_enabled\030\004 \001(\010\022\037"
    "\n\027reconnect_delay_seconds\030\005 \001(\005\022\036\n\026max_r"
    "econnect_attempts\030\006 \001(\005\022\031\n\021alternate_ser"
    "vers\030\007 \003(\t\"\322\001\n\023ConnectionErrorType\022\026\n\022CO"
    "NNECTION_REFUSED\020\000\022\026\n\022CONNECTION_TIMEOUT"
    "\020\001\022\024\n\020CONNECTION_RESET\020\002\022\024\n\020HANDSHAKE_FA"
    "ILED\020\003\022\025\n\021PROTOCOL_MISMATCH\020\004\022\031\n\025AUTHENT"
    "ICATION_FAILED\020\005\022\026\n\022SESSION_TERMINATED\020\006"
    "\022\025\n\021KEEPALIVE_TIMEOUT\020\007\"\372\002\n\020GameErrorDet"
    "ails\022*\n\ngame_error\030\001 \001(\0162\026.blokus.GameLo"
    "gicError\0223\n\023attempted_placement\030\002 \001(\0132\026."
    "blokus.BlockPlacement\022)\n\017valid_positions"
    "\030\003 \003(\0132\020.blokus.Position\022,\n\022blocking_pos"
    "itions\030\004 \003(\0132\020.blokus.Position\022+\n\016curren"
    "t_player\030\005 \001(\0162\023.blokus.PlayerColor\022%\n\ng"
    "ame_state\030\006 \001(\0162\021.blokus.GameState\022\023\n\013tu"
    "rn_number\030\007 \001(\005\022\025\n\rrule_violated\030\010 \001(\t\022\030"
    "\n\020rule_description\030\t \001(\t\022\022\n\nsuggestion\030\n"
    " \001(\t\"\276\001\n\021UserFriendlyError\022\r\n\005title\030\001 \001("
    "\t\022\023\n\013description\030\002 \001(\t\022\014\n\004icon\030\003 \001(\t\022$\n\007"
    "actions\030\004 \003(\0132\023.blokus.ErrorAction\022\036\n\026sh"
    "ow_technical_details\030\005 \001(\010\022\023\n\013dismissibl"
    "e\030\006 \001(\010\022\034\n\024auto_dismiss_seconds\030\007 \001(\005\"m\n"
    "\013ErrorAction\022\021\n\taction_id\030\001 \001(\t\022\r\n\005label"
    "\030\002 \001(\t\022\023\n\013action_type\030\003 \001(\t\022\023\n\013action_da"
    "ta\030\004 \001(\t\022\022\n\nis_primary\030\005 \001(\010\"\204\003\n\013ErrorRe"
    "port\022$\n\005error\030\001 \001(\0132\025.blokus.ErrorRespon"
    "se\022\026\n\016client_version\030\002 \001(\t\022\020\n\010platform\030\003"
    " \001(\t\022\022\n\nuser_agent\030\004 \001(\t\022\023\n\013device_info\030"
    "\005 \001(\t\022\026\n\016current_screen\030\006 \001(\t\022\023\n\013last_ac"
    "tion\030\007 \001(\t\022\023\n\013breadcrumbs\030\010 \003(\t\022\024\n\014user_"
    "id_hash\030\t \001(\t\022\022\n\nuser_level\030\n \001(\005\022\030\n\020ses"
    "sion_duration\030\013 \001(\005\022\024\n\014network_type\030\014 \001("
    "\t\022\027\n\017network_latency\030\r \001(\002\022\026\n\016auto_submi"
    "tted\030\016 \001(\010\022/\n\013reported_at\030\017 \001(\0132\032.google"
    ".protobuf.Timestamp*\353\002\n\rErrorCategory\022\032\n"
    "\026ERROR_CATEGORY_UNKNOWN\020\000\022!\n\035ERROR_CATEG"
    "ORY_AUTHENTICATION\020\001\022 \n\034ERROR_CATEGORY_A"
    "UTHORIZATION\020\002\022\035\n\031ERROR_CATEGORY_VALIDAT"
    "ION\020\003\022!\n\035ERROR_CATEGORY_BUSINESS_LOGIC\020\004"
    "\022\032\n\026ERROR_CATEGORY_NETWORK\020\005\022\033\n\027ERROR_CA"
    "TEGORY_DATABASE\020\006\022\035\n\031ERROR_CATEGORY_GAME"
    "_LOGIC\020\007\022\035\n\031ERROR_CATEGORY_RATE_LIMIT\020\010\022"
    "\037\n\033ERROR_CATEGORY_SERVER_ERROR\020\t\022\037\n\033ERRO"
    "R_CATEGORY_CLIENT_ERROR\020\n*\225\001\n\rErrorSever"
    "ity\022\027\n\023ERROR_SEVERITY_INFO\020\000\022\032\n\026ERROR_SE"
    "VERITY_WARNING\020\001\022\030\n\024ERROR_SEVERITY_ERROR"
    "\020\002\022\033\n\027ERROR_SEVERITY_CRITICAL\020\003\022\030\n\024ERROR"
    "_SEVERITY_FATAL\020\004*\202\003\n\023AuthenticationErro"
    "r\022\"\n\036AUTH_ERROR_INVALID_CREDENTIALS\020\000\022\035\n"
    "\031AUTH_ERROR_USER_NOT_FOUND\020\001\022!\n\035AUTH_ERR"
    "OR_PASSWORD_INCORRECT\020\002\022 \n\034AUTH_ERROR_AC"
    "COUNT_SUSPENDED\020\003\022\035\n\031AUTH_ERROR_ACCOUNT_"
    "BANNED\020\004\022!\n\035AUTH_ERROR_EMAIL_NOT_VERIFIE"
    "D\020\005\022\036\n\032AUTH_ERROR_SESSION_EXPIRED\020\006\022\036\n\032A"
    "UTH_ERROR_SESSION_INVALID\020\007\022 \n\034AUTH_ERRO"
    "R_TOO_MANY_ATTEMPTS\020\010\022\037\n\033AUTH_ERROR_CAPT"
    "CHA_REQUIRED\020\t\022\036\n\032AUTH_ERROR_CAPTCHA_INV"
    "ALID\020\n*\373\002\n\017ValidationError\022#\n\037VALIDATION"
    "_ERROR_REQUIRED_FIELD\020\000\022#\n\037VALIDATION_ER"
    "ROR_INVALID_FORMAT\020\001\022\036\n\032VALIDATION_ERROR"
    "_TOO_SHORT\020\002\022\035\n\031VALIDATION_ERROR_TOO_LON"
    "G\020\003\022\'\n#VALIDATION_ERROR_INVALID_CHARACTE"
    "RS\020\004\022$\n VALIDATION_ERROR_DUPLICATE_VALUE"
    "\020\005\022!\n\035VALIDATION_ERROR_OUT_OF_RANGE\020\006\022\"\n"
    "\036VALIDATION_ERROR_INVALID_EMAIL\020\007\022\"\n\036VAL"
    "IDATION_ERROR_WEAK_PASSWORD\020\010\022%\n!VALIDAT"
    "ION_ERROR_INVALID_USERNAME\020\t*\366\003\n\016GameLog"
    "icError\022\033\n\027GAME_ERROR_INVALID_MOVE\020\000\022\034\n\030"
    "GAME_ERROR_NOT_YOUR_TURN\020\001\022\037\n\033GAME_ERROR"
    "_GAME_NOT_STARTED\020\002\022!\n\035GAME_ERROR_GAME_A"
    "LREADY_ENDED\020\003\022\036\n\032GAME_ERROR_BLOCK_COLLI"
    "SION\020\004\022\037\n\033GAME_ERROR_INVALID_POSITION\020\005\022"
    "!\n\035GAME_ERROR_BLOCK_ALREADY_USED\020\006\022#\n\037GA"
    "ME_ERROR_NO_CORNER_CONNECTION\020\007\022!\n\035GAME_"
    "ERROR_INVALID_FIRST_MOVE\020\010\022\035\n\031GAME_ERROR"
    "_EDGE_COLLISION\020\t\022\030\n\024GAME_ERROR_ROOM_FUL"
    "L\020\n\022\036\n\032GAME_ERROR_ALREADY_IN_ROOM\020\013\022\032\n\026G"
    "AME_ERROR_NOT_IN_ROOM\020\014\022#\n\037GAME_ERROR_IN"
    "SUFFICIENT_PLAYERS\020\r\022\037\n\033GAME_ERROR_GAME_"
    "IN_PROGRESS\020\016*\243\002\n\014NetworkError\022!\n\035NETWOR"
    "K_ERROR_CONNECTION_LOST\020\000\022\031\n\025NETWORK_ERR"
    "OR_TIMEOUT\020\001\022 \n\034NETWORK_ERROR_PROTOCOL_E"
    "RROR\020\002\022#\n\037NETWORK_ERROR_MESSAGE_TOO_LARG"
    "E\020\003\022!\n\035NETWORK_ERROR_INVALID_MESSAGE\020\004\022#"
    "\n\037NETWORK_ERROR_COMPRESSION_ERROR\020\005\022\"\n\036N"
    "ETWORK_ERROR_ENCRYPTION_ERROR\020\006\022\"\n\036NETWO"
    "RK_ERROR_HANDSHAKE_FAILED\020\007b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_error_2eproto_deps[2] =
    {
        &::descriptor_table_common_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_error_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_error_2eproto = {
    false,
    false,
    5635,
    descriptor_table_protodef_error_2eproto,
    "error.proto",
    &descriptor_table_error_2eproto_once,
    descriptor_table_error_2eproto_deps,
    2,
    12,
    schemas,
    file_default_instances,
    TableStruct_error_2eproto::offsets,
    file_level_enum_descriptors_error_2eproto,
    file_level_service_descriptors_error_2eproto,
};
namespace blokus {
const ::google::protobuf::EnumDescriptor* ServerError_ServerErrorType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_error_2eproto);
  return file_level_enum_descriptors_error_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t ServerError_ServerErrorType_internal_data_[] = {
    458752u, 0u, };
bool ServerError_ServerErrorType_IsValid(int value) {
  return 0 <= value && value <= 6;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr ServerError_ServerErrorType ServerError::INTERNAL_ERROR;
constexpr ServerError_ServerErrorType ServerError::DATABASE_ERROR;
constexpr ServerError_ServerErrorType ServerError::SERVICE_UNAVAILABLE;
constexpr ServerError_ServerErrorType ServerError::MAINTENANCE_MODE;
constexpr ServerError_ServerErrorType ServerError::OVERLOADED;
constexpr ServerError_ServerErrorType ServerError::CONFIGURATION_ERROR;
constexpr ServerError_ServerErrorType ServerError::DEPENDENCY_FAILURE;
constexpr ServerError_ServerErrorType ServerError::ServerErrorType_MIN;
constexpr ServerError_ServerErrorType ServerError::ServerErrorType_MAX;
constexpr int ServerError::ServerErrorType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* ClientError_ClientErrorType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_error_2eproto);
  return file_level_enum_descriptors_error_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t ClientError_ClientErrorType_internal_data_[] = {
    458752u, 0u, };
bool ClientError_ClientErrorType_IsValid(int value) {
  return 0 <= value && value <= 6;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr ClientError_ClientErrorType ClientError::INVALID_REQUEST;
constexpr ClientError_ClientErrorType ClientError::UNSUPPORTED_VERSION;
constexpr ClientError_ClientErrorType ClientError::MALFORMED_MESSAGE;
constexpr ClientError_ClientErrorType ClientError::MISSING_PARAMETERS;
constexpr ClientError_ClientErrorType ClientError::PROTOCOL_VIOLATION;
constexpr ClientError_ClientErrorType ClientError::CLIENT_TOO_OLD;
constexpr ClientError_ClientErrorType ClientError::CLIENT_CONFIGURATION_ERROR;
constexpr ClientError_ClientErrorType ClientError::ClientErrorType_MIN;
constexpr ClientError_ClientErrorType ClientError::ClientErrorType_MAX;
constexpr int ClientError::ClientErrorType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* ConnectionError_ConnectionErrorType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_error_2eproto);
  return file_level_enum_descriptors_error_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t ConnectionError_ConnectionErrorType_internal_data_[] = {
    524288u, 0u, };
bool ConnectionError_ConnectionErrorType_IsValid(int value) {
  return 0 <= value && value <= 7;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr ConnectionError_ConnectionErrorType ConnectionError::CONNECTION_REFUSED;
constexpr ConnectionError_ConnectionErrorType ConnectionError::CONNECTION_TIMEOUT;
constexpr ConnectionError_ConnectionErrorType ConnectionError::CONNECTION_RESET;
constexpr ConnectionError_ConnectionErrorType ConnectionError::HANDSHAKE_FAILED;
constexpr ConnectionError_ConnectionErrorType ConnectionError::PROTOCOL_MISMATCH;
constexpr ConnectionError_ConnectionErrorType ConnectionError::AUTHENTICATION_FAILED;
constexpr ConnectionError_ConnectionErrorType ConnectionError::SESSION_TERMINATED;
constexpr ConnectionError_ConnectionErrorType ConnectionError::KEEPALIVE_TIMEOUT;
constexpr ConnectionError_ConnectionErrorType ConnectionError::ConnectionErrorType_MIN;
constexpr ConnectionError_ConnectionErrorType ConnectionError::ConnectionErrorType_MAX;
constexpr int ConnectionError::ConnectionErrorType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* ErrorCategory_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_error_2eproto);
  return file_level_enum_descriptors_error_2eproto[3];
}
PROTOBUF_CONSTINIT const uint32_t ErrorCategory_internal_data_[] = {
    720896u, 0u, };
bool ErrorCategory_IsValid(int value) {
  return 0 <= value && value <= 10;
}
const ::google::protobuf::EnumDescriptor* ErrorSeverity_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_error_2eproto);
  return file_level_enum_descriptors_error_2eproto[4];
}
PROTOBUF_CONSTINIT const uint32_t ErrorSeverity_internal_data_[] = {
    327680u, 0u, };
bool ErrorSeverity_IsValid(int value) {
  return 0 <= value && value <= 4;
}
const ::google::protobuf::EnumDescriptor* AuthenticationError_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_error_2eproto);
  return file_level_enum_descriptors_error_2eproto[5];
}
PROTOBUF_CONSTINIT const uint32_t AuthenticationError_internal_data_[] = {
    720896u, 0u, };
bool AuthenticationError_IsValid(int value) {
  return 0 <= value && value <= 10;
}
const ::google::protobuf::EnumDescriptor* ValidationError_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_error_2eproto);
  return file_level_enum_descriptors_error_2eproto[6];
}
PROTOBUF_CONSTINIT const uint32_t ValidationError_internal_data_[] = {
    655360u, 0u, };
bool ValidationError_IsValid(int value) {
  return 0 <= value && value <= 9;
}
const ::google::protobuf::EnumDescriptor* GameLogicError_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_error_2eproto);
  return file_level_enum_descriptors_error_2eproto[7];
}
PROTOBUF_CONSTINIT const uint32_t GameLogicError_internal_data_[] = {
    983040u, 0u, };
bool GameLogicError_IsValid(int value) {
  return 0 <= value && value <= 14;
}
const ::google::protobuf::EnumDescriptor* NetworkError_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_error_2eproto);
  return file_level_enum_descriptors_error_2eproto[8];
}
PROTOBUF_CONSTINIT const uint32_t NetworkError_internal_data_[] = {
    524288u, 0u, };
bool NetworkError_IsValid(int value) {
  return 0 <= value && value <= 7;
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              ErrorResponse_DetailsEntry_DoNotUse::ErrorResponse_DetailsEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              ErrorResponse_DetailsEntry_DoNotUse::ErrorResponse_DetailsEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              ErrorResponse_DetailsEntry_DoNotUse::ErrorResponse_DetailsEntry_DoNotUse() : SuperType() {}
              ErrorResponse_DetailsEntry_DoNotUse::ErrorResponse_DetailsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* ErrorResponse_DetailsEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) ErrorResponse_DetailsEntry_DoNotUse(arena);
              }
              constexpr auto ErrorResponse_DetailsEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ErrorResponse_DetailsEntry_DoNotUse),
                                                          alignof(ErrorResponse_DetailsEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull ErrorResponse_DetailsEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_ErrorResponse_DetailsEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &ErrorResponse_DetailsEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<ErrorResponse_DetailsEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &ErrorResponse_DetailsEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &ErrorResponse_DetailsEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(ErrorResponse_DetailsEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &ErrorResponse_DetailsEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_error_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* ErrorResponse_DetailsEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 50, 2> ErrorResponse_DetailsEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ErrorResponse_DetailsEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::ErrorResponse_DetailsEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ErrorResponse_DetailsEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ErrorResponse_DetailsEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(ErrorResponse_DetailsEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2;
    {PROTOBUF_FIELD_OFFSET(ErrorResponse_DetailsEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\41\3\5\0\0\0\0\0"
    "blokus.ErrorResponse.DetailsEntry"
    "key"
    "value"
  }},
};

// ===================================================================

class ErrorResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ErrorResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ErrorResponse, _impl_._has_bits_);
};

void ErrorResponse::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ErrorResponse::ErrorResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.ErrorResponse)
}
inline PROTOBUF_NDEBUG_INLINE ErrorResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::ErrorResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        field_errors_{visibility, arena, from.field_errors_},
        details_{visibility, arena, from.details_},
        suggested_actions_{visibility, arena, from.suggested_actions_},
        error_code_(arena, from.error_code_),
        message_(arena, from.message_),
        technical_message_(arena, from.technical_message_),
        help_url_(arena, from.help_url_),
        contact_support_(arena, from.contact_support_),
        trace_id_(arena, from.trace_id_),
        server_id_(arena, from.server_id_) {}

ErrorResponse::ErrorResponse(
    ::google::protobuf::Arena* arena,
    const ErrorResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ErrorResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.timestamp_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.timestamp_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, result_code_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, result_code_),
           offsetof(Impl_, max_retries_) -
               offsetof(Impl_, result_code_) +
               sizeof(Impl_::max_retries_));

  // @@protoc_insertion_point(copy_constructor:blokus.ErrorResponse)
}
inline PROTOBUF_NDEBUG_INLINE ErrorResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        field_errors_{visibility, arena},
        details_{visibility, arena},
        suggested_actions_{visibility, arena},
        error_code_(arena),
        message_(arena),
        technical_message_(arena),
        help_url_(arena),
        contact_support_(arena),
        trace_id_(arena),
        server_id_(arena) {}

inline void ErrorResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_),
           0,
           offsetof(Impl_, max_retries_) -
               offsetof(Impl_, timestamp_) +
               sizeof(Impl_::max_retries_));
}
ErrorResponse::~ErrorResponse() {
  // @@protoc_insertion_point(destructor:blokus.ErrorResponse)
  SharedDtor(*this);
}
inline void ErrorResponse::SharedDtor(MessageLite& self) {
  ErrorResponse& this_ = static_cast<ErrorResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.error_code_.Destroy();
  this_._impl_.message_.Destroy();
  this_._impl_.technical_message_.Destroy();
  this_._impl_.help_url_.Destroy();
  this_._impl_.contact_support_.Destroy();
  this_._impl_.trace_id_.Destroy();
  this_._impl_.server_id_.Destroy();
  delete this_._impl_.timestamp_;
  this_._impl_.~Impl_();
}

inline void* ErrorResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ErrorResponse(arena);
}
constexpr auto ErrorResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ErrorResponse, _impl_.field_errors_) +
          decltype(ErrorResponse::_impl_.field_errors_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(ErrorResponse, _impl_.details_) +
          decltype(ErrorResponse::_impl_.details_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(ErrorResponse, _impl_.details_) +
          decltype(ErrorResponse::_impl_.details_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(ErrorResponse, _impl_.suggested_actions_) +
          decltype(ErrorResponse::_impl_.suggested_actions_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(ErrorResponse), alignof(ErrorResponse), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ErrorResponse::PlacementNew_,
                                 sizeof(ErrorResponse),
                                 alignof(ErrorResponse));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ErrorResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ErrorResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ErrorResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ErrorResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ErrorResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ErrorResponse>(), &ErrorResponse::ByteSizeLong,
            &ErrorResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ErrorResponse, _impl_._cached_size_),
        false,
    },
    &ErrorResponse::kDescriptorMethods,
    &descriptor_table_error_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ErrorResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 17, 3, 143, 2> ErrorResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ErrorResponse, _impl_._has_bits_),
    0, // no _extensions_
    17, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294836224,  // skipmap
    offsetof(decltype(_table_), field_entries),
    17,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::ErrorResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .blokus.ResultCode result_code = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ErrorResponse, _impl_.result_code_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ErrorResponse, _impl_.result_code_)}},
    // .blokus.ErrorCategory category = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ErrorResponse, _impl_.category_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ErrorResponse, _impl_.category_)}},
    // .blokus.ErrorSeverity severity = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ErrorResponse, _impl_.severity_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(ErrorResponse, _impl_.severity_)}},
    // string error_code = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(ErrorResponse, _impl_.error_code_)}},
    // string message = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(ErrorResponse, _impl_.message_)}},
    // string technical_message = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(ErrorResponse, _impl_.technical_message_)}},
    // repeated .blokus.FieldError field_errors = 7;
    {::_pbi::TcParser::FastMtR1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(ErrorResponse, _impl_.field_errors_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated string suggested_actions = 9;
    {::_pbi::TcParser::FastUR1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(ErrorResponse, _impl_.suggested_actions_)}},
    // string help_url = 10;
    {::_pbi::TcParser::FastUS1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(ErrorResponse, _impl_.help_url_)}},
    // string contact_support = 11;
    {::_pbi::TcParser::FastUS1,
     {90, 63, 0, PROTOBUF_FIELD_OFFSET(ErrorResponse, _impl_.contact_support_)}},
    // .google.protobuf.Timestamp timestamp = 12;
    {::_pbi::TcParser::FastMtS1,
     {98, 0, 1, PROTOBUF_FIELD_OFFSET(ErrorResponse, _impl_.timestamp_)}},
    // string trace_id = 13;
    {::_pbi::TcParser::FastUS1,
     {106, 63, 0, PROTOBUF_FIELD_OFFSET(ErrorResponse, _impl_.trace_id_)}},
    // string server_id = 14;
    {::_pbi::TcParser::FastUS1,
     {114, 63, 0, PROTOBUF_FIELD_OFFSET(ErrorResponse, _impl_.server_id_)}},
    // bool retryable = 15;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ErrorResponse, _impl_.retryable_), 63>(),
     {120, 63, 0, PROTOBUF_FIELD_OFFSET(ErrorResponse, _impl_.retryable_)}},
    // int32 retry_after_seconds = 16;
    {::_pbi::TcParser::FastV32S2,
     {384, 63, 0, PROTOBUF_FIELD_OFFSET(ErrorResponse, _impl_.retry_after_seconds_)}},
    // int32 max_retries = 17;
    {::_pbi::TcParser::FastV32S2,
     {392, 63, 0, PROTOBUF_FIELD_OFFSET(ErrorResponse, _impl_.max_retries_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .blokus.ResultCode result_code = 1;
    {PROTOBUF_FIELD_OFFSET(ErrorResponse, _impl_.result_code_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .blokus.ErrorCategory category = 2;
    {PROTOBUF_FIELD_OFFSET(ErrorResponse, _impl_.category_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .blokus.ErrorSeverity severity = 3;
    {PROTOBUF_FIELD_OFFSET(ErrorResponse, _impl_.severity_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string error_code = 4;
    {PROTOBUF_FIELD_OFFSET(ErrorResponse, _impl_.error_code_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string message = 5;
    {PROTOBUF_FIELD_OFFSET(ErrorResponse, _impl_.message_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string technical_message = 6;
    {PROTOBUF_FIELD_OFFSET(ErrorResponse, _impl_.technical_message_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .blokus.FieldError field_errors = 7;
    {PROTOBUF_FIELD_OFFSET(ErrorResponse, _impl_.field_errors_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // map<string, string> details = 8;
    {PROTOBUF_FIELD_OFFSET(ErrorResponse, _impl_.details_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // repeated string suggested_actions = 9;
    {PROTOBUF_FIELD_OFFSET(ErrorResponse, _impl_.suggested_actions_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // string help_url = 10;
    {PROTOBUF_FIELD_OFFSET(ErrorResponse, _impl_.help_url_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string contact_support = 11;
    {PROTOBUF_FIELD_OFFSET(ErrorResponse, _impl_.contact_support_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp timestamp = 12;
    {PROTOBUF_FIELD_OFFSET(ErrorResponse, _impl_.timestamp_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string trace_id = 13;
    {PROTOBUF_FIELD_OFFSET(ErrorResponse, _impl_.trace_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string server_id = 14;
    {PROTOBUF_FIELD_OFFSET(ErrorResponse, _impl_.server_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool retryable = 15;
    {PROTOBUF_FIELD_OFFSET(ErrorResponse, _impl_.retryable_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 retry_after_seconds = 16;
    {PROTOBUF_FIELD_OFFSET(ErrorResponse, _impl_.retry_after_seconds_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 max_retries = 17;
    {PROTOBUF_FIELD_OFFSET(ErrorResponse, _impl_.max_retries_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::blokus::FieldError>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(ErrorResponse()._impl_.details_)>(
        1, 0, 0, 9,
        9)},
  }}, {{
    "\24\0\0\0\12\7\21\0\7\21\10\17\0\10\11\0\0\0\0\0\0\0\0\0"
    "blokus.ErrorResponse"
    "error_code"
    "message"
    "technical_message"
    "details"
    "suggested_actions"
    "help_url"
    "contact_support"
    "trace_id"
    "server_id"
  }},
};

PROTOBUF_NOINLINE void ErrorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.ErrorResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.field_errors_.Clear();
  _impl_.details_.Clear();
  _impl_.suggested_actions_.Clear();
  _impl_.error_code_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  _impl_.technical_message_.ClearToEmpty();
  _impl_.help_url_.ClearToEmpty();
  _impl_.contact_support_.ClearToEmpty();
  _impl_.trace_id_.ClearToEmpty();
  _impl_.server_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.timestamp_ != nullptr);
    _impl_.timestamp_->Clear();
  }
  ::memset(&_impl_.result_code_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.max_retries_) -
      reinterpret_cast<char*>(&_impl_.result_code_)) + sizeof(_impl_.max_retries_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ErrorResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ErrorResponse& this_ = static_cast<const ErrorResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ErrorResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ErrorResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.ErrorResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .blokus.ResultCode result_code = 1;
          if (this_._internal_result_code() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_result_code(), target);
          }

          // .blokus.ErrorCategory category = 2;
          if (this_._internal_category() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                2, this_._internal_category(), target);
          }

          // .blokus.ErrorSeverity severity = 3;
          if (this_._internal_severity() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                3, this_._internal_severity(), target);
          }

          // string error_code = 4;
          if (!this_._internal_error_code().empty()) {
            const std::string& _s = this_._internal_error_code();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ErrorResponse.error_code");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // string message = 5;
          if (!this_._internal_message().empty()) {
            const std::string& _s = this_._internal_message();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ErrorResponse.message");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // string technical_message = 6;
          if (!this_._internal_technical_message().empty()) {
            const std::string& _s = this_._internal_technical_message();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ErrorResponse.technical_message");
            target = stream->WriteStringMaybeAliased(6, _s, target);
          }

          // repeated .blokus.FieldError field_errors = 7;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_field_errors_size());
               i < n; i++) {
            const auto& repfield = this_._internal_field_errors().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    7, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // map<string, string> details = 8;
          if (!this_._internal_details().empty()) {
            using MapType = ::google::protobuf::Map<std::string, std::string>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_STRING>;
            const auto& field = this_._internal_details();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    8, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ErrorResponse.details");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ErrorResponse.details");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    8, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ErrorResponse.details");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ErrorResponse.details");
              }
            }
          }

          // repeated string suggested_actions = 9;
          for (int i = 0, n = this_._internal_suggested_actions_size(); i < n; ++i) {
            const auto& s = this_._internal_suggested_actions().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ErrorResponse.suggested_actions");
            target = stream->WriteString(9, s, target);
          }

          // string help_url = 10;
          if (!this_._internal_help_url().empty()) {
            const std::string& _s = this_._internal_help_url();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ErrorResponse.help_url");
            target = stream->WriteStringMaybeAliased(10, _s, target);
          }

          // string contact_support = 11;
          if (!this_._internal_contact_support().empty()) {
            const std::string& _s = this_._internal_contact_support();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ErrorResponse.contact_support");
            target = stream->WriteStringMaybeAliased(11, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp timestamp = 12;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                12, *this_._impl_.timestamp_, this_._impl_.timestamp_->GetCachedSize(), target,
                stream);
          }

          // string trace_id = 13;
          if (!this_._internal_trace_id().empty()) {
            const std::string& _s = this_._internal_trace_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ErrorResponse.trace_id");
            target = stream->WriteStringMaybeAliased(13, _s, target);
          }

          // string server_id = 14;
          if (!this_._internal_server_id().empty()) {
            const std::string& _s = this_._internal_server_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ErrorResponse.server_id");
            target = stream->WriteStringMaybeAliased(14, _s, target);
          }

          // bool retryable = 15;
          if (this_._internal_retryable() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                15, this_._internal_retryable(), target);
          }

          // int32 retry_after_seconds = 16;
          if (this_._internal_retry_after_seconds() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                16, this_._internal_retry_after_seconds(), target);
          }

          // int32 max_retries = 17;
          if (this_._internal_max_retries() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                17, this_._internal_max_retries(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.ErrorResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ErrorResponse::ByteSizeLong(const MessageLite& base) {
          const ErrorResponse& this_ = static_cast<const ErrorResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ErrorResponse::ByteSizeLong() const {
          const ErrorResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.ErrorResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .blokus.FieldError field_errors = 7;
            {
              total_size += 1UL * this_._internal_field_errors_size();
              for (const auto& msg : this_._internal_field_errors()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // map<string, string> details = 8;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_details_size());
              for (const auto& entry : this_._internal_details()) {
                total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // repeated string suggested_actions = 9;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_suggested_actions().size());
              for (int i = 0, n = this_._internal_suggested_actions().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_suggested_actions().Get(i));
              }
            }
          }
           {
            // string error_code = 4;
            if (!this_._internal_error_code().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_error_code());
            }
            // string message = 5;
            if (!this_._internal_message().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_message());
            }
            // string technical_message = 6;
            if (!this_._internal_technical_message().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_technical_message());
            }
            // string help_url = 10;
            if (!this_._internal_help_url().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_help_url());
            }
            // string contact_support = 11;
            if (!this_._internal_contact_support().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_contact_support());
            }
            // string trace_id = 13;
            if (!this_._internal_trace_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_trace_id());
            }
            // string server_id = 14;
            if (!this_._internal_server_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_server_id());
            }
          }
           {
            // .google.protobuf.Timestamp timestamp = 12;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.timestamp_);
            }
          }
           {
            // .blokus.ResultCode result_code = 1;
            if (this_._internal_result_code() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_result_code());
            }
            // .blokus.ErrorCategory category = 2;
            if (this_._internal_category() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_category());
            }
            // .blokus.ErrorSeverity severity = 3;
            if (this_._internal_severity() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_severity());
            }
            // bool retryable = 15;
            if (this_._internal_retryable() != 0) {
              total_size += 2;
            }
            // int32 retry_after_seconds = 16;
            if (this_._internal_retry_after_seconds() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_retry_after_seconds());
            }
            // int32 max_retries = 17;
            if (this_._internal_max_retries() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_max_retries());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ErrorResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ErrorResponse*>(&to_msg);
  auto& from = static_cast<const ErrorResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.ErrorResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_field_errors()->MergeFrom(
      from._internal_field_errors());
  _this->_impl_.details_.MergeFrom(from._impl_.details_);
  _this->_internal_mutable_suggested_actions()->MergeFrom(from._internal_suggested_actions());
  if (!from._internal_error_code().empty()) {
    _this->_internal_set_error_code(from._internal_error_code());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (!from._internal_technical_message().empty()) {
    _this->_internal_set_technical_message(from._internal_technical_message());
  }
  if (!from._internal_help_url().empty()) {
    _this->_internal_set_help_url(from._internal_help_url());
  }
  if (!from._internal_contact_support().empty()) {
    _this->_internal_set_contact_support(from._internal_contact_support());
  }
  if (!from._internal_trace_id().empty()) {
    _this->_internal_set_trace_id(from._internal_trace_id());
  }
  if (!from._internal_server_id().empty()) {
    _this->_internal_set_server_id(from._internal_server_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.timestamp_ != nullptr);
    if (_this->_impl_.timestamp_ == nullptr) {
      _this->_impl_.timestamp_ =
          ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.timestamp_);
    } else {
      _this->_impl_.timestamp_->MergeFrom(*from._impl_.timestamp_);
    }
  }
  if (from._internal_result_code() != 0) {
    _this->_impl_.result_code_ = from._impl_.result_code_;
  }
  if (from._internal_category() != 0) {
    _this->_impl_.category_ = from._impl_.category_;
  }
  if (from._internal_severity() != 0) {
    _this->_impl_.severity_ = from._impl_.severity_;
  }
  if (from._internal_retryable() != 0) {
    _this->_impl_.retryable_ = from._impl_.retryable_;
  }
  if (from._internal_retry_after_seconds() != 0) {
    _this->_impl_.retry_after_seconds_ = from._impl_.retry_after_seconds_;
  }
  if (from._internal_max_retries() != 0) {
    _this->_impl_.max_retries_ = from._impl_.max_retries_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ErrorResponse::CopyFrom(const ErrorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.ErrorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ErrorResponse::InternalSwap(ErrorResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.field_errors_.InternalSwap(&other->_impl_.field_errors_);
  _impl_.details_.InternalSwap(&other->_impl_.details_);
  _impl_.suggested_actions_.InternalSwap(&other->_impl_.suggested_actions_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_code_, &other->_impl_.error_code_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.technical_message_, &other->_impl_.technical_message_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.help_url_, &other->_impl_.help_url_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.contact_support_, &other->_impl_.contact_support_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.trace_id_, &other->_impl_.trace_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.server_id_, &other->_impl_.server_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ErrorResponse, _impl_.max_retries_)
      + sizeof(ErrorResponse::_impl_.max_retries_)
      - PROTOBUF_FIELD_OFFSET(ErrorResponse, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::google::protobuf::Metadata ErrorResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class FieldError::_Internal {
 public:
};

FieldError::FieldError(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.FieldError)
}
inline PROTOBUF_NDEBUG_INLINE FieldError::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::FieldError& from_msg)
      : valid_values_{visibility, arena, from.valid_values_},
        field_name_(arena, from.field_name_),
        error_code_(arena, from.error_code_),
        message_(arena, from.message_),
        current_value_(arena, from.current_value_),
        validation_rule_(arena, from.validation_rule_),
        _cached_size_{0} {}

FieldError::FieldError(
    ::google::protobuf::Arena* arena,
    const FieldError& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  FieldError* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:blokus.FieldError)
}
inline PROTOBUF_NDEBUG_INLINE FieldError::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : valid_values_{visibility, arena},
        field_name_(arena),
        error_code_(arena),
        message_(arena),
        current_value_(arena),
        validation_rule_(arena),
        _cached_size_{0} {}

inline void FieldError::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
FieldError::~FieldError() {
  // @@protoc_insertion_point(destructor:blokus.FieldError)
  SharedDtor(*this);
}
inline void FieldError::SharedDtor(MessageLite& self) {
  FieldError& this_ = static_cast<FieldError&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.field_name_.Destroy();
  this_._impl_.error_code_.Destroy();
  this_._impl_.message_.Destroy();
  this_._impl_.current_value_.Destroy();
  this_._impl_.validation_rule_.Destroy();
  this_._impl_.~Impl_();
}

inline void* FieldError::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) FieldError(arena);
}
constexpr auto FieldError::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(FieldError, _impl_.valid_values_) +
          decltype(FieldError::_impl_.valid_values_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(FieldError), alignof(FieldError), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&FieldError::PlacementNew_,
                                 sizeof(FieldError),
                                 alignof(FieldError));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull FieldError::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_FieldError_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &FieldError::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<FieldError>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &FieldError::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<FieldError>(), &FieldError::ByteSizeLong,
            &FieldError::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(FieldError, _impl_._cached_size_),
        false,
    },
    &FieldError::kDescriptorMethods,
    &descriptor_table_error_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* FieldError::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 93, 2> FieldError::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::FieldError>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string field_name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(FieldError, _impl_.field_name_)}},
    // string error_code = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(FieldError, _impl_.error_code_)}},
    // string message = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(FieldError, _impl_.message_)}},
    // string current_value = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(FieldError, _impl_.current_value_)}},
    // repeated string valid_values = 5;
    {::_pbi::TcParser::FastUR1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(FieldError, _impl_.valid_values_)}},
    // string validation_rule = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(FieldError, _impl_.validation_rule_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string field_name = 1;
    {PROTOBUF_FIELD_OFFSET(FieldError, _impl_.field_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string error_code = 2;
    {PROTOBUF_FIELD_OFFSET(FieldError, _impl_.error_code_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string message = 3;
    {PROTOBUF_FIELD_OFFSET(FieldError, _impl_.message_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string current_value = 4;
    {PROTOBUF_FIELD_OFFSET(FieldError, _impl_.current_value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated string valid_values = 5;
    {PROTOBUF_FIELD_OFFSET(FieldError, _impl_.valid_values_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // string validation_rule = 6;
    {PROTOBUF_FIELD_OFFSET(FieldError, _impl_.validation_rule_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\21\12\12\7\15\14\17\0"
    "blokus.FieldError"
    "field_name"
    "error_code"
    "message"
    "current_value"
    "valid_values"
    "validation_rule"
  }},
};

PROTOBUF_NOINLINE void FieldError::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.FieldError)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.valid_values_.Clear();
  _impl_.field_name_.ClearToEmpty();
  _impl_.error_code_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  _impl_.current_value_.ClearToEmpty();
  _impl_.validation_rule_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* FieldError::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const FieldError& this_ = static_cast<const FieldError&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* FieldError::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const FieldError& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.FieldError)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string field_name = 1;
          if (!this_._internal_field_name().empty()) {
            const std::string& _s = this_._internal_field_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.FieldError.field_name");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string error_code = 2;
          if (!this_._internal_error_code().empty()) {
            const std::string& _s = this_._internal_error_code();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.FieldError.error_code");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string message = 3;
          if (!this_._internal_message().empty()) {
            const std::string& _s = this_._internal_message();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.FieldError.message");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // string current_value = 4;
          if (!this_._internal_current_value().empty()) {
            const std::string& _s = this_._internal_current_value();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.FieldError.current_value");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // repeated string valid_values = 5;
          for (int i = 0, n = this_._internal_valid_values_size(); i < n; ++i) {
            const auto& s = this_._internal_valid_values().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.FieldError.valid_values");
            target = stream->WriteString(5, s, target);
          }

          // string validation_rule = 6;
          if (!this_._internal_validation_rule().empty()) {
            const std::string& _s = this_._internal_validation_rule();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.FieldError.validation_rule");
            target = stream->WriteStringMaybeAliased(6, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.FieldError)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t FieldError::ByteSizeLong(const MessageLite& base) {
          const FieldError& this_ = static_cast<const FieldError&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t FieldError::ByteSizeLong() const {
          const FieldError& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.FieldError)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string valid_values = 5;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_valid_values().size());
              for (int i = 0, n = this_._internal_valid_values().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_valid_values().Get(i));
              }
            }
          }
           {
            // string field_name = 1;
            if (!this_._internal_field_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_field_name());
            }
            // string error_code = 2;
            if (!this_._internal_error_code().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_error_code());
            }
            // string message = 3;
            if (!this_._internal_message().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_message());
            }
            // string current_value = 4;
            if (!this_._internal_current_value().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_current_value());
            }
            // string validation_rule = 6;
            if (!this_._internal_validation_rule().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_validation_rule());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void FieldError::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<FieldError*>(&to_msg);
  auto& from = static_cast<const FieldError&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.FieldError)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_valid_values()->MergeFrom(from._internal_valid_values());
  if (!from._internal_field_name().empty()) {
    _this->_internal_set_field_name(from._internal_field_name());
  }
  if (!from._internal_error_code().empty()) {
    _this->_internal_set_error_code(from._internal_error_code());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (!from._internal_current_value().empty()) {
    _this->_internal_set_current_value(from._internal_current_value());
  }
  if (!from._internal_validation_rule().empty()) {
    _this->_internal_set_validation_rule(from._internal_validation_rule());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FieldError::CopyFrom(const FieldError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.FieldError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void FieldError::InternalSwap(FieldError* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.valid_values_.InternalSwap(&other->_impl_.valid_values_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.field_name_, &other->_impl_.field_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_code_, &other->_impl_.error_code_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.current_value_, &other->_impl_.current_value_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.validation_rule_, &other->_impl_.validation_rule_, arena);
}

::google::protobuf::Metadata FieldError::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              RateLimitExceeded_RateLimitInfoEntry_DoNotUse::RateLimitExceeded_RateLimitInfoEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              RateLimitExceeded_RateLimitInfoEntry_DoNotUse::RateLimitExceeded_RateLimitInfoEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              RateLimitExceeded_RateLimitInfoEntry_DoNotUse::RateLimitExceeded_RateLimitInfoEntry_DoNotUse() : SuperType() {}
              RateLimitExceeded_RateLimitInfoEntry_DoNotUse::RateLimitExceeded_RateLimitInfoEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* RateLimitExceeded_RateLimitInfoEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) RateLimitExceeded_RateLimitInfoEntry_DoNotUse(arena);
              }
              constexpr auto RateLimitExceeded_RateLimitInfoEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(RateLimitExceeded_RateLimitInfoEntry_DoNotUse),
                                                          alignof(RateLimitExceeded_RateLimitInfoEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull RateLimitExceeded_RateLimitInfoEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_RateLimitExceeded_RateLimitInfoEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &RateLimitExceeded_RateLimitInfoEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<RateLimitExceeded_RateLimitInfoEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &RateLimitExceeded_RateLimitInfoEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &RateLimitExceeded_RateLimitInfoEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(RateLimitExceeded_RateLimitInfoEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &RateLimitExceeded_RateLimitInfoEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_error_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* RateLimitExceeded_RateLimitInfoEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 55, 2> RateLimitExceeded_RateLimitInfoEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RateLimitExceeded_RateLimitInfoEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::RateLimitExceeded_RateLimitInfoEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 value = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RateLimitExceeded_RateLimitInfoEntry_DoNotUse, _impl_.value_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(RateLimitExceeded_RateLimitInfoEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(RateLimitExceeded_RateLimitInfoEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(RateLimitExceeded_RateLimitInfoEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 value = 2;
    {PROTOBUF_FIELD_OFFSET(RateLimitExceeded_RateLimitInfoEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\53\3\0\0\0\0\0\0"
    "blokus.RateLimitExceeded.RateLimitInfoEntry"
    "key"
  }},
};

// ===================================================================

class RateLimitExceeded::_Internal {
 public:
  using HasBits =
      decltype(std::declval<RateLimitExceeded>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(RateLimitExceeded, _impl_._has_bits_);
};

void RateLimitExceeded::clear_reset_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.reset_time_ != nullptr) _impl_.reset_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
RateLimitExceeded::RateLimitExceeded(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.RateLimitExceeded)
}
inline PROTOBUF_NDEBUG_INLINE RateLimitExceeded::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::RateLimitExceeded& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        rate_limit_info_{visibility, arena, from.rate_limit_info_},
        limit_type_(arena, from.limit_type_),
        client_ip_(arena, from.client_ip_),
        rate_limit_key_(arena, from.rate_limit_key_) {}

RateLimitExceeded::RateLimitExceeded(
    ::google::protobuf::Arena* arena,
    const RateLimitExceeded& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RateLimitExceeded* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.reset_time_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.reset_time_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, current_count_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, current_count_),
           offsetof(Impl_, reset_after_seconds_) -
               offsetof(Impl_, current_count_) +
               sizeof(Impl_::reset_after_seconds_));

  // @@protoc_insertion_point(copy_constructor:blokus.RateLimitExceeded)
}
inline PROTOBUF_NDEBUG_INLINE RateLimitExceeded::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        rate_limit_info_{visibility, arena},
        limit_type_(arena),
        client_ip_(arena),
        rate_limit_key_(arena) {}

inline void RateLimitExceeded::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, reset_time_),
           0,
           offsetof(Impl_, reset_after_seconds_) -
               offsetof(Impl_, reset_time_) +
               sizeof(Impl_::reset_after_seconds_));
}
RateLimitExceeded::~RateLimitExceeded() {
  // @@protoc_insertion_point(destructor:blokus.RateLimitExceeded)
  SharedDtor(*this);
}
inline void RateLimitExceeded::SharedDtor(MessageLite& self) {
  RateLimitExceeded& this_ = static_cast<RateLimitExceeded&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.limit_type_.Destroy();
  this_._impl_.client_ip_.Destroy();
  this_._impl_.rate_limit_key_.Destroy();
  delete this_._impl_.reset_time_;
  this_._impl_.~Impl_();
}

inline void* RateLimitExceeded::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) RateLimitExceeded(arena);
}
constexpr auto RateLimitExceeded::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(RateLimitExceeded, _impl_.rate_limit_info_) +
          decltype(RateLimitExceeded::_impl_.rate_limit_info_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(RateLimitExceeded, _impl_.rate_limit_info_) +
          decltype(RateLimitExceeded::_impl_.rate_limit_info_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(RateLimitExceeded), alignof(RateLimitExceeded), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&RateLimitExceeded::PlacementNew_,
                                 sizeof(RateLimitExceeded),
                                 alignof(RateLimitExceeded));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull RateLimitExceeded::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_RateLimitExceeded_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &RateLimitExceeded::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<RateLimitExceeded>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &RateLimitExceeded::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<RateLimitExceeded>(), &RateLimitExceeded::ByteSizeLong,
            &RateLimitExceeded::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(RateLimitExceeded, _impl_._cached_size_),
        false,
    },
    &RateLimitExceeded::kDescriptorMethods,
    &descriptor_table_error_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* RateLimitExceeded::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 2, 89, 2> RateLimitExceeded::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RateLimitExceeded, _impl_._has_bits_),
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::RateLimitExceeded>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string limit_type = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(RateLimitExceeded, _impl_.limit_type_)}},
    // int32 current_count = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RateLimitExceeded, _impl_.current_count_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(RateLimitExceeded, _impl_.current_count_)}},
    // int32 limit_count = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RateLimitExceeded, _impl_.limit_count_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(RateLimitExceeded, _impl_.limit_count_)}},
    // int32 reset_after_seconds = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RateLimitExceeded, _impl_.reset_after_seconds_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(RateLimitExceeded, _impl_.reset_after_seconds_)}},
    // .google.protobuf.Timestamp reset_time = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 0, 0, PROTOBUF_FIELD_OFFSET(RateLimitExceeded, _impl_.reset_time_)}},
    // string client_ip = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(RateLimitExceeded, _impl_.client_ip_)}},
    // string rate_limit_key = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(RateLimitExceeded, _impl_.rate_limit_key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string limit_type = 1;
    {PROTOBUF_FIELD_OFFSET(RateLimitExceeded, _impl_.limit_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 current_count = 2;
    {PROTOBUF_FIELD_OFFSET(RateLimitExceeded, _impl_.current_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 limit_count = 3;
    {PROTOBUF_FIELD_OFFSET(RateLimitExceeded, _impl_.limit_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 reset_after_seconds = 4;
    {PROTOBUF_FIELD_OFFSET(RateLimitExceeded, _impl_.reset_after_seconds_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .google.protobuf.Timestamp reset_time = 5;
    {PROTOBUF_FIELD_OFFSET(RateLimitExceeded, _impl_.reset_time_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string client_ip = 6;
    {PROTOBUF_FIELD_OFFSET(RateLimitExceeded, _impl_.client_ip_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string rate_limit_key = 7;
    {PROTOBUF_FIELD_OFFSET(RateLimitExceeded, _impl_.rate_limit_key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // map<string, int32> rate_limit_info = 8;
    {PROTOBUF_FIELD_OFFSET(RateLimitExceeded, _impl_.rate_limit_info_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(RateLimitExceeded()._impl_.rate_limit_info_)>(
        1, 0, 0, 9,
        5)},
  }}, {{
    "\30\12\0\0\0\0\11\16\17\0\0\0\0\0\0\0"
    "blokus.RateLimitExceeded"
    "limit_type"
    "client_ip"
    "rate_limit_key"
    "rate_limit_info"
  }},
};

PROTOBUF_NOINLINE void RateLimitExceeded::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.RateLimitExceeded)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rate_limit_info_.Clear();
  _impl_.limit_type_.ClearToEmpty();
  _impl_.client_ip_.ClearToEmpty();
  _impl_.rate_limit_key_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.reset_time_ != nullptr);
    _impl_.reset_time_->Clear();
  }
  ::memset(&_impl_.current_count_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.reset_after_seconds_) -
      reinterpret_cast<char*>(&_impl_.current_count_)) + sizeof(_impl_.reset_after_seconds_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* RateLimitExceeded::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const RateLimitExceeded& this_ = static_cast<const RateLimitExceeded&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* RateLimitExceeded::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const RateLimitExceeded& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.RateLimitExceeded)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string limit_type = 1;
          if (!this_._internal_limit_type().empty()) {
            const std::string& _s = this_._internal_limit_type();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.RateLimitExceeded.limit_type");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // int32 current_count = 2;
          if (this_._internal_current_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_current_count(), target);
          }

          // int32 limit_count = 3;
          if (this_._internal_limit_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_limit_count(), target);
          }

          // int32 reset_after_seconds = 4;
          if (this_._internal_reset_after_seconds() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_reset_after_seconds(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp reset_time = 5;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                5, *this_._impl_.reset_time_, this_._impl_.reset_time_->GetCachedSize(), target,
                stream);
          }

          // string client_ip = 6;
          if (!this_._internal_client_ip().empty()) {
            const std::string& _s = this_._internal_client_ip();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.RateLimitExceeded.client_ip");
            target = stream->WriteStringMaybeAliased(6, _s, target);
          }

          // string rate_limit_key = 7;
          if (!this_._internal_rate_limit_key().empty()) {
            const std::string& _s = this_._internal_rate_limit_key();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.RateLimitExceeded.rate_limit_key");
            target = stream->WriteStringMaybeAliased(7, _s, target);
          }

          // map<string, int32> rate_limit_info = 8;
          if (!this_._internal_rate_limit_info().empty()) {
            using MapType = ::google::protobuf::Map<std::string, ::int32_t>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, ::int32_t,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_INT32>;
            const auto& field = this_._internal_rate_limit_info();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    8, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.RateLimitExceeded.rate_limit_info");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    8, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.RateLimitExceeded.rate_limit_info");
              }
            }
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.RateLimitExceeded)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t RateLimitExceeded::ByteSizeLong(const MessageLite& base) {
          const RateLimitExceeded& this_ = static_cast<const RateLimitExceeded&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t RateLimitExceeded::ByteSizeLong() const {
          const RateLimitExceeded& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.RateLimitExceeded)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // map<string, int32> rate_limit_info = 8;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_rate_limit_info_size());
              for (const auto& entry : this_._internal_rate_limit_info()) {
                total_size += _pbi::MapEntryFuncs<std::string, ::int32_t,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_INT32>::ByteSizeLong(entry.first, entry.second);
              }
            }
          }
           {
            // string limit_type = 1;
            if (!this_._internal_limit_type().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_limit_type());
            }
            // string client_ip = 6;
            if (!this_._internal_client_ip().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_client_ip());
            }
            // string rate_limit_key = 7;
            if (!this_._internal_rate_limit_key().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_rate_limit_key());
            }
          }
           {
            // .google.protobuf.Timestamp reset_time = 5;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.reset_time_);
            }
          }
           {
            // int32 current_count = 2;
            if (this_._internal_current_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_current_count());
            }
            // int32 limit_count = 3;
            if (this_._internal_limit_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_limit_count());
            }
            // int32 reset_after_seconds = 4;
            if (this_._internal_reset_after_seconds() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_reset_after_seconds());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void RateLimitExceeded::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RateLimitExceeded*>(&to_msg);
  auto& from = static_cast<const RateLimitExceeded&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.RateLimitExceeded)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rate_limit_info_.MergeFrom(from._impl_.rate_limit_info_);
  if (!from._internal_limit_type().empty()) {
    _this->_internal_set_limit_type(from._internal_limit_type());
  }
  if (!from._internal_client_ip().empty()) {
    _this->_internal_set_client_ip(from._internal_client_ip());
  }
  if (!from._internal_rate_limit_key().empty()) {
    _this->_internal_set_rate_limit_key(from._internal_rate_limit_key());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.reset_time_ != nullptr);
    if (_this->_impl_.reset_time_ == nullptr) {
      _this->_impl_.reset_time_ =
          ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.reset_time_);
    } else {
      _this->_impl_.reset_time_->MergeFrom(*from._impl_.reset_time_);
    }
  }
  if (from._internal_current_count() != 0) {
    _this->_impl_.current_count_ = from._impl_.current_count_;
  }
  if (from._internal_limit_count() != 0) {
    _this->_impl_.limit_count_ = from._impl_.limit_count_;
  }
  if (from._internal_reset_after_seconds() != 0) {
    _this->_impl_.reset_after_seconds_ = from._impl_.reset_after_seconds_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RateLimitExceeded::CopyFrom(const RateLimitExceeded& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.RateLimitExceeded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RateLimitExceeded::InternalSwap(RateLimitExceeded* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.rate_limit_info_.InternalSwap(&other->_impl_.rate_limit_info_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.limit_type_, &other->_impl_.limit_type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.client_ip_, &other->_impl_.client_ip_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.rate_limit_key_, &other->_impl_.rate_limit_key_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RateLimitExceeded, _impl_.reset_after_seconds_)
      + sizeof(RateLimitExceeded::_impl_.reset_after_seconds_)
      - PROTOBUF_FIELD_OFFSET(RateLimitExceeded, _impl_.reset_time_)>(
          reinterpret_cast<char*>(&_impl_.reset_time_),
          reinterpret_cast<char*>(&other->_impl_.reset_time_));
}

::google::protobuf::Metadata RateLimitExceeded::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ServerError::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ServerError>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ServerError, _impl_._has_bits_);
};

void ServerError::clear_estimated_recovery() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.estimated_recovery_ != nullptr) _impl_.estimated_recovery_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ServerError::ServerError(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.ServerError)
}
inline PROTOBUF_NDEBUG_INLINE ServerError::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::ServerError& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        affected_features_{visibility, arena, from.affected_features_},
        workarounds_{visibility, arena, from.workarounds_},
        service_name_(arena, from.service_name_),
        error_message_(arena, from.error_message_),
        maintenance_url_(arena, from.maintenance_url_) {}

ServerError::ServerError(
    ::google::protobuf::Arena* arena,
    const ServerError& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ServerError* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.estimated_recovery_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.estimated_recovery_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, error_type_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, error_type_),
           offsetof(Impl_, partial_service_) -
               offsetof(Impl_, error_type_) +
               sizeof(Impl_::partial_service_));

  // @@protoc_insertion_point(copy_constructor:blokus.ServerError)
}
inline PROTOBUF_NDEBUG_INLINE ServerError::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        affected_features_{visibility, arena},
        workarounds_{visibility, arena},
        service_name_(arena),
        error_message_(arena),
        maintenance_url_(arena) {}

inline void ServerError::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, estimated_recovery_),
           0,
           offsetof(Impl_, partial_service_) -
               offsetof(Impl_, estimated_recovery_) +
               sizeof(Impl_::partial_service_));
}
ServerError::~ServerError() {
  // @@protoc_insertion_point(destructor:blokus.ServerError)
  SharedDtor(*this);
}
inline void ServerError::SharedDtor(MessageLite& self) {
  ServerError& this_ = static_cast<ServerError&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.service_name_.Destroy();
  this_._impl_.error_message_.Destroy();
  this_._impl_.maintenance_url_.Destroy();
  delete this_._impl_.estimated_recovery_;
  this_._impl_.~Impl_();
}

inline void* ServerError::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ServerError(arena);
}
constexpr auto ServerError::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ServerError, _impl_.affected_features_) +
          decltype(ServerError::_impl_.affected_features_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(ServerError, _impl_.workarounds_) +
          decltype(ServerError::_impl_.workarounds_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(ServerError), alignof(ServerError), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ServerError::PlacementNew_,
                                 sizeof(ServerError),
                                 alignof(ServerError));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ServerError::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ServerError_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ServerError::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ServerError>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ServerError::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ServerError>(), &ServerError::ByteSizeLong,
            &ServerError::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ServerError, _impl_._cached_size_),
        false,
    },
    &ServerError::kDescriptorMethods,
    &descriptor_table_error_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ServerError::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 1, 103, 2> ServerError::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ServerError, _impl_._has_bits_),
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::ServerError>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bool partial_service = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ServerError, _impl_.partial_service_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(ServerError, _impl_.partial_service_)}},
    // .blokus.ServerError.ServerErrorType error_type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ServerError, _impl_.error_type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ServerError, _impl_.error_type_)}},
    // string service_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ServerError, _impl_.service_name_)}},
    // string error_message = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ServerError, _impl_.error_message_)}},
    // .google.protobuf.Timestamp estimated_recovery = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(ServerError, _impl_.estimated_recovery_)}},
    // string maintenance_url = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(ServerError, _impl_.maintenance_url_)}},
    // repeated string affected_features = 6;
    {::_pbi::TcParser::FastUR1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(ServerError, _impl_.affected_features_)}},
    // repeated string workarounds = 7;
    {::_pbi::TcParser::FastUR1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(ServerError, _impl_.workarounds_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .blokus.ServerError.ServerErrorType error_type = 1;
    {PROTOBUF_FIELD_OFFSET(ServerError, _impl_.error_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string service_name = 2;
    {PROTOBUF_FIELD_OFFSET(ServerError, _impl_.service_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string error_message = 3;
    {PROTOBUF_FIELD_OFFSET(ServerError, _impl_.error_message_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp estimated_recovery = 4;
    {PROTOBUF_FIELD_OFFSET(ServerError, _impl_.estimated_recovery_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string maintenance_url = 5;
    {PROTOBUF_FIELD_OFFSET(ServerError, _impl_.maintenance_url_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated string affected_features = 6;
    {PROTOBUF_FIELD_OFFSET(ServerError, _impl_.affected_features_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // repeated string workarounds = 7;
    {PROTOBUF_FIELD_OFFSET(ServerError, _impl_.workarounds_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // bool partial_service = 8;
    {PROTOBUF_FIELD_OFFSET(ServerError, _impl_.partial_service_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\22\0\14\15\0\17\21\13\0\0\0\0\0\0\0\0"
    "blokus.ServerError"
    "service_name"
    "error_message"
    "maintenance_url"
    "affected_features"
    "workarounds"
  }},
};

PROTOBUF_NOINLINE void ServerError::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.ServerError)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.affected_features_.Clear();
  _impl_.workarounds_.Clear();
  _impl_.service_name_.ClearToEmpty();
  _impl_.error_message_.ClearToEmpty();
  _impl_.maintenance_url_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.estimated_recovery_ != nullptr);
    _impl_.estimated_recovery_->Clear();
  }
  ::memset(&_impl_.error_type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.partial_service_) -
      reinterpret_cast<char*>(&_impl_.error_type_)) + sizeof(_impl_.partial_service_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ServerError::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ServerError& this_ = static_cast<const ServerError&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ServerError::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ServerError& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.ServerError)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .blokus.ServerError.ServerErrorType error_type = 1;
          if (this_._internal_error_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_error_type(), target);
          }

          // string service_name = 2;
          if (!this_._internal_service_name().empty()) {
            const std::string& _s = this_._internal_service_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ServerError.service_name");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string error_message = 3;
          if (!this_._internal_error_message().empty()) {
            const std::string& _s = this_._internal_error_message();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ServerError.error_message");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp estimated_recovery = 4;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.estimated_recovery_, this_._impl_.estimated_recovery_->GetCachedSize(), target,
                stream);
          }

          // string maintenance_url = 5;
          if (!this_._internal_maintenance_url().empty()) {
            const std::string& _s = this_._internal_maintenance_url();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ServerError.maintenance_url");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // repeated string affected_features = 6;
          for (int i = 0, n = this_._internal_affected_features_size(); i < n; ++i) {
            const auto& s = this_._internal_affected_features().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ServerError.affected_features");
            target = stream->WriteString(6, s, target);
          }

          // repeated string workarounds = 7;
          for (int i = 0, n = this_._internal_workarounds_size(); i < n; ++i) {
            const auto& s = this_._internal_workarounds().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ServerError.workarounds");
            target = stream->WriteString(7, s, target);
          }

          // bool partial_service = 8;
          if (this_._internal_partial_service() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                8, this_._internal_partial_service(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.ServerError)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ServerError::ByteSizeLong(const MessageLite& base) {
          const ServerError& this_ = static_cast<const ServerError&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ServerError::ByteSizeLong() const {
          const ServerError& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.ServerError)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string affected_features = 6;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_affected_features().size());
              for (int i = 0, n = this_._internal_affected_features().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_affected_features().Get(i));
              }
            }
            // repeated string workarounds = 7;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_workarounds().size());
              for (int i = 0, n = this_._internal_workarounds().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_workarounds().Get(i));
              }
            }
          }
           {
            // string service_name = 2;
            if (!this_._internal_service_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_service_name());
            }
            // string error_message = 3;
            if (!this_._internal_error_message().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_error_message());
            }
            // string maintenance_url = 5;
            if (!this_._internal_maintenance_url().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_maintenance_url());
            }
          }
           {
            // .google.protobuf.Timestamp estimated_recovery = 4;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.estimated_recovery_);
            }
          }
           {
            // .blokus.ServerError.ServerErrorType error_type = 1;
            if (this_._internal_error_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_error_type());
            }
            // bool partial_service = 8;
            if (this_._internal_partial_service() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ServerError::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ServerError*>(&to_msg);
  auto& from = static_cast<const ServerError&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.ServerError)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_affected_features()->MergeFrom(from._internal_affected_features());
  _this->_internal_mutable_workarounds()->MergeFrom(from._internal_workarounds());
  if (!from._internal_service_name().empty()) {
    _this->_internal_set_service_name(from._internal_service_name());
  }
  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (!from._internal_maintenance_url().empty()) {
    _this->_internal_set_maintenance_url(from._internal_maintenance_url());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.estimated_recovery_ != nullptr);
    if (_this->_impl_.estimated_recovery_ == nullptr) {
      _this->_impl_.estimated_recovery_ =
          ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.estimated_recovery_);
    } else {
      _this->_impl_.estimated_recovery_->MergeFrom(*from._impl_.estimated_recovery_);
    }
  }
  if (from._internal_error_type() != 0) {
    _this->_impl_.error_type_ = from._impl_.error_type_;
  }
  if (from._internal_partial_service() != 0) {
    _this->_impl_.partial_service_ = from._impl_.partial_service_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ServerError::CopyFrom(const ServerError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.ServerError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ServerError::InternalSwap(ServerError* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.affected_features_.InternalSwap(&other->_impl_.affected_features_);
  _impl_.workarounds_.InternalSwap(&other->_impl_.workarounds_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.service_name_, &other->_impl_.service_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_message_, &other->_impl_.error_message_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.maintenance_url_, &other->_impl_.maintenance_url_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerError, _impl_.partial_service_)
      + sizeof(ServerError::_impl_.partial_service_)
      - PROTOBUF_FIELD_OFFSET(ServerError, _impl_.estimated_recovery_)>(
          reinterpret_cast<char*>(&_impl_.estimated_recovery_),
          reinterpret_cast<char*>(&other->_impl_.estimated_recovery_));
}

::google::protobuf::Metadata ServerError::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ClientError::_Internal {
 public:
};

ClientError::ClientError(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.ClientError)
}
inline PROTOBUF_NDEBUG_INLINE ClientError::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::ClientError& from_msg)
      : missing_parameters_{visibility, arena, from.missing_parameters_},
        invalid_parameters_{visibility, arena, from.invalid_parameters_},
        client_version_(arena, from.client_version_),
        required_version_(arena, from.required_version_),
        update_url_(arena, from.update_url_),
        configuration_help_(arena, from.configuration_help_),
        _cached_size_{0} {}

ClientError::ClientError(
    ::google::protobuf::Arena* arena,
    const ClientError& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ClientError* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.error_type_ = from._impl_.error_type_;

  // @@protoc_insertion_point(copy_constructor:blokus.ClientError)
}
inline PROTOBUF_NDEBUG_INLINE ClientError::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : missing_parameters_{visibility, arena},
        invalid_parameters_{visibility, arena},
        client_version_(arena),
        required_version_(arena),
        update_url_(arena),
        configuration_help_(arena),
        _cached_size_{0} {}

inline void ClientError::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.error_type_ = {};
}
ClientError::~ClientError() {
  // @@protoc_insertion_point(destructor:blokus.ClientError)
  SharedDtor(*this);
}
inline void ClientError::SharedDtor(MessageLite& self) {
  ClientError& this_ = static_cast<ClientError&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.client_version_.Destroy();
  this_._impl_.required_version_.Destroy();
  this_._impl_.update_url_.Destroy();
  this_._impl_.configuration_help_.Destroy();
  this_._impl_.~Impl_();
}

inline void* ClientError::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ClientError(arena);
}
constexpr auto ClientError::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ClientError, _impl_.missing_parameters_) +
          decltype(ClientError::_impl_.missing_parameters_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(ClientError, _impl_.invalid_parameters_) +
          decltype(ClientError::_impl_.invalid_parameters_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(ClientError), alignof(ClientError), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ClientError::PlacementNew_,
                                 sizeof(ClientError),
                                 alignof(ClientError));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ClientError::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ClientError_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ClientError::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ClientError>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ClientError::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ClientError>(), &ClientError::ByteSizeLong,
            &ClientError::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ClientError, _impl_._cached_size_),
        false,
    },
    &ClientError::kDescriptorMethods,
    &descriptor_table_error_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ClientError::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 121, 2> ClientError::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::ClientError>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .blokus.ClientError.ClientErrorType error_type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ClientError, _impl_.error_type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ClientError, _impl_.error_type_)}},
    // string client_version = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ClientError, _impl_.client_version_)}},
    // string required_version = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ClientError, _impl_.required_version_)}},
    // string update_url = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(ClientError, _impl_.update_url_)}},
    // repeated string missing_parameters = 5;
    {::_pbi::TcParser::FastUR1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(ClientError, _impl_.missing_parameters_)}},
    // repeated string invalid_parameters = 6;
    {::_pbi::TcParser::FastUR1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(ClientError, _impl_.invalid_parameters_)}},
    // string configuration_help = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(ClientError, _impl_.configuration_help_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .blokus.ClientError.ClientErrorType error_type = 1;
    {PROTOBUF_FIELD_OFFSET(ClientError, _impl_.error_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string client_version = 2;
    {PROTOBUF_FIELD_OFFSET(ClientError, _impl_.client_version_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string required_version = 3;
    {PROTOBUF_FIELD_OFFSET(ClientError, _impl_.required_version_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string update_url = 4;
    {PROTOBUF_FIELD_OFFSET(ClientError, _impl_.update_url_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated string missing_parameters = 5;
    {PROTOBUF_FIELD_OFFSET(ClientError, _impl_.missing_parameters_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // repeated string invalid_parameters = 6;
    {PROTOBUF_FIELD_OFFSET(ClientError, _impl_.invalid_parameters_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // string configuration_help = 7;
    {PROTOBUF_FIELD_OFFSET(ClientError, _impl_.configuration_help_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\22\0\16\20\12\22\22\22"
    "blokus.ClientError"
    "client_version"
    "required_version"
    "update_url"
    "missing_parameters"
    "invalid_parameters"
    "configuration_help"
  }},
};

PROTOBUF_NOINLINE void ClientError::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.ClientError)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.missing_parameters_.Clear();
  _impl_.invalid_parameters_.Clear();
  _impl_.client_version_.ClearToEmpty();
  _impl_.required_version_.ClearToEmpty();
  _impl_.update_url_.ClearToEmpty();
  _impl_.configuration_help_.ClearToEmpty();
  _impl_.error_type_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ClientError::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ClientError& this_ = static_cast<const ClientError&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ClientError::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ClientError& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.ClientError)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .blokus.ClientError.ClientErrorType error_type = 1;
          if (this_._internal_error_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_error_type(), target);
          }

          // string client_version = 2;
          if (!this_._internal_client_version().empty()) {
            const std::string& _s = this_._internal_client_version();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ClientError.client_version");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string required_version = 3;
          if (!this_._internal_required_version().empty()) {
            const std::string& _s = this_._internal_required_version();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ClientError.required_version");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // string update_url = 4;
          if (!this_._internal_update_url().empty()) {
            const std::string& _s = this_._internal_update_url();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ClientError.update_url");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // repeated string missing_parameters = 5;
          for (int i = 0, n = this_._internal_missing_parameters_size(); i < n; ++i) {
            const auto& s = this_._internal_missing_parameters().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ClientError.missing_parameters");
            target = stream->WriteString(5, s, target);
          }

          // repeated string invalid_parameters = 6;
          for (int i = 0, n = this_._internal_invalid_parameters_size(); i < n; ++i) {
            const auto& s = this_._internal_invalid_parameters().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ClientError.invalid_parameters");
            target = stream->WriteString(6, s, target);
          }

          // string configuration_help = 7;
          if (!this_._internal_configuration_help().empty()) {
            const std::string& _s = this_._internal_configuration_help();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ClientError.configuration_help");
            target = stream->WriteStringMaybeAliased(7, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.ClientError)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ClientError::ByteSizeLong(const MessageLite& base) {
          const ClientError& this_ = static_cast<const ClientError&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ClientError::ByteSizeLong() const {
          const ClientError& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.ClientError)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string missing_parameters = 5;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_missing_parameters().size());
              for (int i = 0, n = this_._internal_missing_parameters().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_missing_parameters().Get(i));
              }
            }
            // repeated string invalid_parameters = 6;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_invalid_parameters().size());
              for (int i = 0, n = this_._internal_invalid_parameters().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_invalid_parameters().Get(i));
              }
            }
          }
           {
            // string client_version = 2;
            if (!this_._internal_client_version().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_client_version());
            }
            // string required_version = 3;
            if (!this_._internal_required_version().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_required_version());
            }
            // string update_url = 4;
            if (!this_._internal_update_url().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_update_url());
            }
            // string configuration_help = 7;
            if (!this_._internal_configuration_help().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_configuration_help());
            }
            // .blokus.ClientError.ClientErrorType error_type = 1;
            if (this_._internal_error_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_error_type());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ClientError::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ClientError*>(&to_msg);
  auto& from = static_cast<const ClientError&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.ClientError)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_missing_parameters()->MergeFrom(from._internal_missing_parameters());
  _this->_internal_mutable_invalid_parameters()->MergeFrom(from._internal_invalid_parameters());
  if (!from._internal_client_version().empty()) {
    _this->_internal_set_client_version(from._internal_client_version());
  }
  if (!from._internal_required_version().empty()) {
    _this->_internal_set_required_version(from._internal_required_version());
  }
  if (!from._internal_update_url().empty()) {
    _this->_internal_set_update_url(from._internal_update_url());
  }
  if (!from._internal_configuration_help().empty()) {
    _this->_internal_set_configuration_help(from._internal_configuration_help());
  }
  if (from._internal_error_type() != 0) {
    _this->_impl_.error_type_ = from._impl_.error_type_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ClientError::CopyFrom(const ClientError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.ClientError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ClientError::InternalSwap(ClientError* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.missing_parameters_.InternalSwap(&other->_impl_.missing_parameters_);
  _impl_.invalid_parameters_.InternalSwap(&other->_impl_.invalid_parameters_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.client_version_, &other->_impl_.client_version_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.required_version_, &other->_impl_.required_version_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.update_url_, &other->_impl_.update_url_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.configuration_help_, &other->_impl_.configuration_help_, arena);
  swap(_impl_.error_type_, other->_impl_.error_type_);
}

::google::protobuf::Metadata ClientError::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ConnectionError::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ConnectionError>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ConnectionError, _impl_._has_bits_);
};

void ConnectionError::clear_disconnected_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.disconnected_at_ != nullptr) _impl_.disconnected_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ConnectionError::ConnectionError(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.ConnectionError)
}
inline PROTOBUF_NDEBUG_INLINE ConnectionError::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::ConnectionError& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        alternate_servers_{visibility, arena, from.alternate_servers_},
        reason_(arena, from.reason_) {}

ConnectionError::ConnectionError(
    ::google::protobuf::Arena* arena,
    const ConnectionError& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ConnectionError* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.disconnected_at_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.disconnected_at_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, error_type_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, error_type_),
           offsetof(Impl_, max_reconnect_attempts_) -
               offsetof(Impl_, error_type_) +
               sizeof(Impl_::max_reconnect_attempts_));

  // @@protoc_insertion_point(copy_constructor:blokus.ConnectionError)
}
inline PROTOBUF_NDEBUG_INLINE ConnectionError::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        alternate_servers_{visibility, arena},
        reason_(arena) {}

inline void ConnectionError::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, disconnected_at_),
           0,
           offsetof(Impl_, max_reconnect_attempts_) -
               offsetof(Impl_, disconnected_at_) +
               sizeof(Impl_::max_reconnect_attempts_));
}
ConnectionError::~ConnectionError() {
  // @@protoc_insertion_point(destructor:blokus.ConnectionError)
  SharedDtor(*this);
}
inline void ConnectionError::SharedDtor(MessageLite& self) {
  ConnectionError& this_ = static_cast<ConnectionError&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.reason_.Destroy();
  delete this_._impl_.disconnected_at_;
  this_._impl_.~Impl_();
}

inline void* ConnectionError::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ConnectionError(arena);
}
constexpr auto ConnectionError::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ConnectionError, _impl_.alternate_servers_) +
          decltype(ConnectionError::_impl_.alternate_servers_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(ConnectionError), alignof(ConnectionError), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ConnectionError::PlacementNew_,
                                 sizeof(ConnectionError),
                                 alignof(ConnectionError));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ConnectionError::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ConnectionError_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ConnectionError::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ConnectionError>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ConnectionError::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ConnectionError>(), &ConnectionError::ByteSizeLong,
            &ConnectionError::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ConnectionError, _impl_._cached_size_),
        false,
    },
    &ConnectionError::kDescriptorMethods,
    &descriptor_table_error_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ConnectionError::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 1, 54, 2> ConnectionError::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ConnectionError, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::ConnectionError>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .blokus.ConnectionError.ConnectionErrorType error_type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ConnectionError, _impl_.error_type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ConnectionError, _impl_.error_type_)}},
    // string reason = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ConnectionError, _impl_.reason_)}},
    // .google.protobuf.Timestamp disconnected_at = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(ConnectionError, _impl_.disconnected_at_)}},
    // bool auto_reconnect_enabled = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ConnectionError, _impl_.auto_reconnect_enabled_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(ConnectionError, _impl_.auto_reconnect_enabled_)}},
    // int32 reconnect_delay_seconds = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ConnectionError, _impl_.reconnect_delay_seconds_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(ConnectionError, _impl_.reconnect_delay_seconds_)}},
    // int32 max_reconnect_attempts = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ConnectionError, _impl_.max_reconnect_attempts_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(ConnectionError, _impl_.max_reconnect_attempts_)}},
    // repeated string alternate_servers = 7;
    {::_pbi::TcParser::FastUR1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(ConnectionError, _impl_.alternate_servers_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .blokus.ConnectionError.ConnectionErrorType error_type = 1;
    {PROTOBUF_FIELD_OFFSET(ConnectionError, _impl_.error_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string reason = 2;
    {PROTOBUF_FIELD_OFFSET(ConnectionError, _impl_.reason_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp disconnected_at = 3;
    {PROTOBUF_FIELD_OFFSET(ConnectionError, _impl_.disconnected_at_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool auto_reconnect_enabled = 4;
    {PROTOBUF_FIELD_OFFSET(ConnectionError, _impl_.auto_reconnect_enabled_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 reconnect_delay_seconds = 5;
    {PROTOBUF_FIELD_OFFSET(ConnectionError, _impl_.reconnect_delay_seconds_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 max_reconnect_attempts = 6;
    {PROTOBUF_FIELD_OFFSET(ConnectionError, _impl_.max_reconnect_attempts_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated string alternate_servers = 7;
    {PROTOBUF_FIELD_OFFSET(ConnectionError, _impl_.alternate_servers_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\26\0\6\0\0\0\0\21"
    "blokus.ConnectionError"
    "reason"
    "alternate_servers"
  }},
};

PROTOBUF_NOINLINE void ConnectionError::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.ConnectionError)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.alternate_servers_.Clear();
  _impl_.reason_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.disconnected_at_ != nullptr);
    _impl_.disconnected_at_->Clear();
  }
  ::memset(&_impl_.error_type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.max_reconnect_attempts_) -
      reinterpret_cast<char*>(&_impl_.error_type_)) + sizeof(_impl_.max_reconnect_attempts_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ConnectionError::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ConnectionError& this_ = static_cast<const ConnectionError&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ConnectionError::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ConnectionError& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.ConnectionError)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .blokus.ConnectionError.ConnectionErrorType error_type = 1;
          if (this_._internal_error_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_error_type(), target);
          }

          // string reason = 2;
          if (!this_._internal_reason().empty()) {
            const std::string& _s = this_._internal_reason();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ConnectionError.reason");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp disconnected_at = 3;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.disconnected_at_, this_._impl_.disconnected_at_->GetCachedSize(), target,
                stream);
          }

          // bool auto_reconnect_enabled = 4;
          if (this_._internal_auto_reconnect_enabled() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                4, this_._internal_auto_reconnect_enabled(), target);
          }

          // int32 reconnect_delay_seconds = 5;
          if (this_._internal_reconnect_delay_seconds() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<5>(
                    stream, this_._internal_reconnect_delay_seconds(), target);
          }

          // int32 max_reconnect_attempts = 6;
          if (this_._internal_max_reconnect_attempts() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<6>(
                    stream, this_._internal_max_reconnect_attempts(), target);
          }

          // repeated string alternate_servers = 7;
          for (int i = 0, n = this_._internal_alternate_servers_size(); i < n; ++i) {
            const auto& s = this_._internal_alternate_servers().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ConnectionError.alternate_servers");
            target = stream->WriteString(7, s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.ConnectionError)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ConnectionError::ByteSizeLong(const MessageLite& base) {
          const ConnectionError& this_ = static_cast<const ConnectionError&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ConnectionError::ByteSizeLong() const {
          const ConnectionError& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.ConnectionError)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string alternate_servers = 7;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_alternate_servers().size());
              for (int i = 0, n = this_._internal_alternate_servers().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_alternate_servers().Get(i));
              }
            }
          }
           {
            // string reason = 2;
            if (!this_._internal_reason().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_reason());
            }
          }
           {
            // .google.protobuf.Timestamp disconnected_at = 3;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.disconnected_at_);
            }
          }
           {
            // .blokus.ConnectionError.ConnectionErrorType error_type = 1;
            if (this_._internal_error_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_error_type());
            }
            // bool auto_reconnect_enabled = 4;
            if (this_._internal_auto_reconnect_enabled() != 0) {
              total_size += 2;
            }
            // int32 reconnect_delay_seconds = 5;
            if (this_._internal_reconnect_delay_seconds() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_reconnect_delay_seconds());
            }
            // int32 max_reconnect_attempts = 6;
            if (this_._internal_max_reconnect_attempts() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_max_reconnect_attempts());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ConnectionError::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ConnectionError*>(&to_msg);
  auto& from = static_cast<const ConnectionError&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.ConnectionError)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_alternate_servers()->MergeFrom(from._internal_alternate_servers());
  if (!from._internal_reason().empty()) {
    _this->_internal_set_reason(from._internal_reason());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.disconnected_at_ != nullptr);
    if (_this->_impl_.disconnected_at_ == nullptr) {
      _this->_impl_.disconnected_at_ =
          ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.disconnected_at_);
    } else {
      _this->_impl_.disconnected_at_->MergeFrom(*from._impl_.disconnected_at_);
    }
  }
  if (from._internal_error_type() != 0) {
    _this->_impl_.error_type_ = from._impl_.error_type_;
  }
  if (from._internal_auto_reconnect_enabled() != 0) {
    _this->_impl_.auto_reconnect_enabled_ = from._impl_.auto_reconnect_enabled_;
  }
  if (from._internal_reconnect_delay_seconds() != 0) {
    _this->_impl_.reconnect_delay_seconds_ = from._impl_.reconnect_delay_seconds_;
  }
  if (from._internal_max_reconnect_attempts() != 0) {
    _this->_impl_.max_reconnect_attempts_ = from._impl_.max_reconnect_attempts_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ConnectionError::CopyFrom(const ConnectionError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.ConnectionError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ConnectionError::InternalSwap(ConnectionError* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.alternate_servers_.InternalSwap(&other->_impl_.alternate_servers_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.reason_, &other->_impl_.reason_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConnectionError, _impl_.max_reconnect_attempts_)
      + sizeof(ConnectionError::_impl_.max_reconnect_attempts_)
      - PROTOBUF_FIELD_OFFSET(ConnectionError, _impl_.disconnected_at_)>(
          reinterpret_cast<char*>(&_impl_.disconnected_at_),
          reinterpret_cast<char*>(&other->_impl_.disconnected_at_));
}

::google::protobuf::Metadata ConnectionError::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GameErrorDetails::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GameErrorDetails>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GameErrorDetails, _impl_._has_bits_);
};

void GameErrorDetails::clear_attempted_placement() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.attempted_placement_ != nullptr) _impl_.attempted_placement_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GameErrorDetails::clear_valid_positions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.valid_positions_.Clear();
}
void GameErrorDetails::clear_blocking_positions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.blocking_positions_.Clear();
}
GameErrorDetails::GameErrorDetails(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.GameErrorDetails)
}
inline PROTOBUF_NDEBUG_INLINE GameErrorDetails::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::GameErrorDetails& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        valid_positions_{visibility, arena, from.valid_positions_},
        blocking_positions_{visibility, arena, from.blocking_positions_},
        rule_violated_(arena, from.rule_violated_),
        rule_description_(arena, from.rule_description_),
        suggestion_(arena, from.suggestion_) {}

GameErrorDetails::GameErrorDetails(
    ::google::protobuf::Arena* arena,
    const GameErrorDetails& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GameErrorDetails* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.attempted_placement_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::blokus::BlockPlacement>(
                              arena, *from._impl_.attempted_placement_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, game_error_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, game_error_),
           offsetof(Impl_, turn_number_) -
               offsetof(Impl_, game_error_) +
               sizeof(Impl_::turn_number_));

  // @@protoc_insertion_point(copy_constructor:blokus.GameErrorDetails)
}
inline PROTOBUF_NDEBUG_INLINE GameErrorDetails::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        valid_positions_{visibility, arena},
        blocking_positions_{visibility, arena},
        rule_violated_(arena),
        rule_description_(arena),
        suggestion_(arena) {}

inline void GameErrorDetails::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, attempted_placement_),
           0,
           offsetof(Impl_, turn_number_) -
               offsetof(Impl_, attempted_placement_) +
               sizeof(Impl_::turn_number_));
}
GameErrorDetails::~GameErrorDetails() {
  // @@protoc_insertion_point(destructor:blokus.GameErrorDetails)
  SharedDtor(*this);
}
inline void GameErrorDetails::SharedDtor(MessageLite& self) {
  GameErrorDetails& this_ = static_cast<GameErrorDetails&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.rule_violated_.Destroy();
  this_._impl_.rule_description_.Destroy();
  this_._impl_.suggestion_.Destroy();
  delete this_._impl_.attempted_placement_;
  this_._impl_.~Impl_();
}

inline void* GameErrorDetails::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GameErrorDetails(arena);
}
constexpr auto GameErrorDetails::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(GameErrorDetails, _impl_.valid_positions_) +
          decltype(GameErrorDetails::_impl_.valid_positions_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(GameErrorDetails, _impl_.blocking_positions_) +
          decltype(GameErrorDetails::_impl_.blocking_positions_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(GameErrorDetails), alignof(GameErrorDetails), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&GameErrorDetails::PlacementNew_,
                                 sizeof(GameErrorDetails),
                                 alignof(GameErrorDetails));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GameErrorDetails::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GameErrorDetails_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GameErrorDetails::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GameErrorDetails>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GameErrorDetails::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GameErrorDetails>(), &GameErrorDetails::ByteSizeLong,
            &GameErrorDetails::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GameErrorDetails, _impl_._cached_size_),
        false,
    },
    &GameErrorDetails::kDescriptorMethods,
    &descriptor_table_error_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GameErrorDetails::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 3, 79, 2> GameErrorDetails::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameErrorDetails, _impl_._has_bits_),
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::GameErrorDetails>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .blokus.GameLogicError game_error = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameErrorDetails, _impl_.game_error_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(GameErrorDetails, _impl_.game_error_)}},
    // .blokus.BlockPlacement attempted_placement = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(GameErrorDetails, _impl_.attempted_placement_)}},
    // repeated .blokus.Position valid_positions = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 1, PROTOBUF_FIELD_OFFSET(GameErrorDetails, _impl_.valid_positions_)}},
    // repeated .blokus.Position blocking_positions = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 2, PROTOBUF_FIELD_OFFSET(GameErrorDetails, _impl_.blocking_positions_)}},
    // .blokus.PlayerColor current_player = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameErrorDetails, _impl_.current_player_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(GameErrorDetails, _impl_.current_player_)}},
    // .blokus.GameState game_state = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameErrorDetails, _impl_.game_state_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(GameErrorDetails, _impl_.game_state_)}},
    // int32 turn_number = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameErrorDetails, _impl_.turn_number_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(GameErrorDetails, _impl_.turn_number_)}},
    // string rule_violated = 8;
    {::_pbi::TcParser::FastUS1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(GameErrorDetails, _impl_.rule_violated_)}},
    // string rule_description = 9;
    {::_pbi::TcParser::FastUS1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(GameErrorDetails, _impl_.rule_description_)}},
    // string suggestion = 10;
    {::_pbi::TcParser::FastUS1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(GameErrorDetails, _impl_.suggestion_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .blokus.GameLogicError game_error = 1;
    {PROTOBUF_FIELD_OFFSET(GameErrorDetails, _impl_.game_error_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .blokus.BlockPlacement attempted_placement = 2;
    {PROTOBUF_FIELD_OFFSET(GameErrorDetails, _impl_.attempted_placement_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .blokus.Position valid_positions = 3;
    {PROTOBUF_FIELD_OFFSET(GameErrorDetails, _impl_.valid_positions_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .blokus.Position blocking_positions = 4;
    {PROTOBUF_FIELD_OFFSET(GameErrorDetails, _impl_.blocking_positions_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .blokus.PlayerColor current_player = 5;
    {PROTOBUF_FIELD_OFFSET(GameErrorDetails, _impl_.current_player_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .blokus.GameState game_state = 6;
    {PROTOBUF_FIELD_OFFSET(GameErrorDetails, _impl_.game_state_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int32 turn_number = 7;
    {PROTOBUF_FIELD_OFFSET(GameErrorDetails, _impl_.turn_number_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string rule_violated = 8;
    {PROTOBUF_FIELD_OFFSET(GameErrorDetails, _impl_.rule_violated_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string rule_description = 9;
    {PROTOBUF_FIELD_OFFSET(GameErrorDetails, _impl_.rule_description_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string suggestion = 10;
    {PROTOBUF_FIELD_OFFSET(GameErrorDetails, _impl_.suggestion_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::blokus::BlockPlacement>()},
    {::_pbi::TcParser::GetTable<::blokus::Position>()},
    {::_pbi::TcParser::GetTable<::blokus::Position>()},
  }}, {{
    "\27\0\0\0\0\0\0\0\15\20\12\0\0\0\0\0"
    "blokus.GameErrorDetails"
    "rule_violated"
    "rule_description"
    "suggestion"
  }},
};

PROTOBUF_NOINLINE void GameErrorDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.GameErrorDetails)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.valid_positions_.Clear();
  _impl_.blocking_positions_.Clear();
  _impl_.rule_violated_.ClearToEmpty();
  _impl_.rule_description_.ClearToEmpty();
  _impl_.suggestion_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.attempted_placement_ != nullptr);
    _impl_.attempted_placement_->Clear();
  }
  ::memset(&_impl_.game_error_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.turn_number_) -
      reinterpret_cast<char*>(&_impl_.game_error_)) + sizeof(_impl_.turn_number_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GameErrorDetails::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GameErrorDetails& this_ = static_cast<const GameErrorDetails&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GameErrorDetails::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GameErrorDetails& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.GameErrorDetails)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .blokus.GameLogicError game_error = 1;
          if (this_._internal_game_error() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_game_error(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .blokus.BlockPlacement attempted_placement = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.attempted_placement_, this_._impl_.attempted_placement_->GetCachedSize(), target,
                stream);
          }

          // repeated .blokus.Position valid_positions = 3;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_valid_positions_size());
               i < n; i++) {
            const auto& repfield = this_._internal_valid_positions().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    3, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // repeated .blokus.Position blocking_positions = 4;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_blocking_positions_size());
               i < n; i++) {
            const auto& repfield = this_._internal_blocking_positions().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    4, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // .blokus.PlayerColor current_player = 5;
          if (this_._internal_current_player() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                5, this_._internal_current_player(), target);
          }

          // .blokus.GameState game_state = 6;
          if (this_._internal_game_state() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                6, this_._internal_game_state(), target);
          }

          // int32 turn_number = 7;
          if (this_._internal_turn_number() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<7>(
                    stream, this_._internal_turn_number(), target);
          }

          // string rule_violated = 8;
          if (!this_._internal_rule_violated().empty()) {
            const std::string& _s = this_._internal_rule_violated();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.GameErrorDetails.rule_violated");
            target = stream->WriteStringMaybeAliased(8, _s, target);
          }

          // string rule_description = 9;
          if (!this_._internal_rule_description().empty()) {
            const std::string& _s = this_._internal_rule_description();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.GameErrorDetails.rule_description");
            target = stream->WriteStringMaybeAliased(9, _s, target);
          }

          // string suggestion = 10;
          if (!this_._internal_suggestion().empty()) {
            const std::string& _s = this_._internal_suggestion();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.GameErrorDetails.suggestion");
            target = stream->WriteStringMaybeAliased(10, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.GameErrorDetails)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GameErrorDetails::ByteSizeLong(const MessageLite& base) {
          const GameErrorDetails& this_ = static_cast<const GameErrorDetails&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GameErrorDetails::ByteSizeLong() const {
          const GameErrorDetails& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.GameErrorDetails)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .blokus.Position valid_positions = 3;
            {
              total_size += 1UL * this_._internal_valid_positions_size();
              for (const auto& msg : this_._internal_valid_positions()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated .blokus.Position blocking_positions = 4;
            {
              total_size += 1UL * this_._internal_blocking_positions_size();
              for (const auto& msg : this_._internal_blocking_positions()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // string rule_violated = 8;
            if (!this_._internal_rule_violated().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_rule_violated());
            }
            // string rule_description = 9;
            if (!this_._internal_rule_description().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_rule_description());
            }
            // string suggestion = 10;
            if (!this_._internal_suggestion().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_suggestion());
            }
          }
           {
            // .blokus.BlockPlacement attempted_placement = 2;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.attempted_placement_);
            }
          }
           {
            // .blokus.GameLogicError game_error = 1;
            if (this_._internal_game_error() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_game_error());
            }
            // .blokus.PlayerColor current_player = 5;
            if (this_._internal_current_player() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_current_player());
            }
            // .blokus.GameState game_state = 6;
            if (this_._internal_game_state() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_game_state());
            }
            // int32 turn_number = 7;
            if (this_._internal_turn_number() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_turn_number());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GameErrorDetails::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameErrorDetails*>(&to_msg);
  auto& from = static_cast<const GameErrorDetails&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.GameErrorDetails)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_valid_positions()->MergeFrom(
      from._internal_valid_positions());
  _this->_internal_mutable_blocking_positions()->MergeFrom(
      from._internal_blocking_positions());
  if (!from._internal_rule_violated().empty()) {
    _this->_internal_set_rule_violated(from._internal_rule_violated());
  }
  if (!from._internal_rule_description().empty()) {
    _this->_internal_set_rule_description(from._internal_rule_description());
  }
  if (!from._internal_suggestion().empty()) {
    _this->_internal_set_suggestion(from._internal_suggestion());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.attempted_placement_ != nullptr);
    if (_this->_impl_.attempted_placement_ == nullptr) {
      _this->_impl_.attempted_placement_ =
          ::google::protobuf::Message::CopyConstruct<::blokus::BlockPlacement>(arena, *from._impl_.attempted_placement_);
    } else {
      _this->_impl_.attempted_placement_->MergeFrom(*from._impl_.attempted_placement_);
    }
  }
  if (from._internal_game_error() != 0) {
    _this->_impl_.game_error_ = from._impl_.game_error_;
  }
  if (from._internal_current_player() != 0) {
    _this->_impl_.current_player_ = from._impl_.current_player_;
  }
  if (from._internal_game_state() != 0) {
    _this->_impl_.game_state_ = from._impl_.game_state_;
  }
  if (from._internal_turn_number() != 0) {
    _this->_impl_.turn_number_ = from._impl_.turn_number_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameErrorDetails::CopyFrom(const GameErrorDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.GameErrorDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GameErrorDetails::InternalSwap(GameErrorDetails* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.valid_positions_.InternalSwap(&other->_impl_.valid_positions_);
  _impl_.blocking_positions_.InternalSwap(&other->_impl_.blocking_positions_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.rule_violated_, &other->_impl_.rule_violated_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.rule_description_, &other->_impl_.rule_description_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.suggestion_, &other->_impl_.suggestion_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameErrorDetails, _impl_.turn_number_)
      + sizeof(GameErrorDetails::_impl_.turn_number_)
      - PROTOBUF_FIELD_OFFSET(GameErrorDetails, _impl_.attempted_placement_)>(
          reinterpret_cast<char*>(&_impl_.attempted_placement_),
          reinterpret_cast<char*>(&other->_impl_.attempted_placement_));
}

::google::protobuf::Metadata GameErrorDetails::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class UserFriendlyError::_Internal {
 public:
};

UserFriendlyError::UserFriendlyError(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.UserFriendlyError)
}
inline PROTOBUF_NDEBUG_INLINE UserFriendlyError::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::UserFriendlyError& from_msg)
      : actions_{visibility, arena, from.actions_},
        title_(arena, from.title_),
        description_(arena, from.description_),
        icon_(arena, from.icon_),
        _cached_size_{0} {}

UserFriendlyError::UserFriendlyError(
    ::google::protobuf::Arena* arena,
    const UserFriendlyError& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  UserFriendlyError* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, show_technical_details_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, show_technical_details_),
           offsetof(Impl_, auto_dismiss_seconds_) -
               offsetof(Impl_, show_technical_details_) +
               sizeof(Impl_::auto_dismiss_seconds_));

  // @@protoc_insertion_point(copy_constructor:blokus.UserFriendlyError)
}
inline PROTOBUF_NDEBUG_INLINE UserFriendlyError::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : actions_{visibility, arena},
        title_(arena),
        description_(arena),
        icon_(arena),
        _cached_size_{0} {}

inline void UserFriendlyError::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, show_technical_details_),
           0,
           offsetof(Impl_, auto_dismiss_seconds_) -
               offsetof(Impl_, show_technical_details_) +
               sizeof(Impl_::auto_dismiss_seconds_));
}
UserFriendlyError::~UserFriendlyError() {
  // @@protoc_insertion_point(destructor:blokus.UserFriendlyError)
  SharedDtor(*this);
}
inline void UserFriendlyError::SharedDtor(MessageLite& self) {
  UserFriendlyError& this_ = static_cast<UserFriendlyError&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.title_.Destroy();
  this_._impl_.description_.Destroy();
  this_._impl_.icon_.Destroy();
  this_._impl_.~Impl_();
}

inline void* UserFriendlyError::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) UserFriendlyError(arena);
}
constexpr auto UserFriendlyError::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(UserFriendlyError, _impl_.actions_) +
          decltype(UserFriendlyError::_impl_.actions_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(UserFriendlyError), alignof(UserFriendlyError), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&UserFriendlyError::PlacementNew_,
                                 sizeof(UserFriendlyError),
                                 alignof(UserFriendlyError));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull UserFriendlyError::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_UserFriendlyError_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &UserFriendlyError::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<UserFriendlyError>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &UserFriendlyError::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<UserFriendlyError>(), &UserFriendlyError::ByteSizeLong,
            &UserFriendlyError::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(UserFriendlyError, _impl_._cached_size_),
        false,
    },
    &UserFriendlyError::kDescriptorMethods,
    &descriptor_table_error_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* UserFriendlyError::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 1, 53, 2> UserFriendlyError::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::UserFriendlyError>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string title = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(UserFriendlyError, _impl_.title_)}},
    // string description = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(UserFriendlyError, _impl_.description_)}},
    // string icon = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(UserFriendlyError, _impl_.icon_)}},
    // repeated .blokus.ErrorAction actions = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(UserFriendlyError, _impl_.actions_)}},
    // bool show_technical_details = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(UserFriendlyError, _impl_.show_technical_details_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(UserFriendlyError, _impl_.show_technical_details_)}},
    // bool dismissible = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(UserFriendlyError, _impl_.dismissible_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(UserFriendlyError, _impl_.dismissible_)}},
    // int32 auto_dismiss_seconds = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(UserFriendlyError, _impl_.auto_dismiss_seconds_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(UserFriendlyError, _impl_.auto_dismiss_seconds_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string title = 1;
    {PROTOBUF_FIELD_OFFSET(UserFriendlyError, _impl_.title_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string description = 2;
    {PROTOBUF_FIELD_OFFSET(UserFriendlyError, _impl_.description_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string icon = 3;
    {PROTOBUF_FIELD_OFFSET(UserFriendlyError, _impl_.icon_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .blokus.ErrorAction actions = 4;
    {PROTOBUF_FIELD_OFFSET(UserFriendlyError, _impl_.actions_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool show_technical_details = 5;
    {PROTOBUF_FIELD_OFFSET(UserFriendlyError, _impl_.show_technical_details_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool dismissible = 6;
    {PROTOBUF_FIELD_OFFSET(UserFriendlyError, _impl_.dismissible_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 auto_dismiss_seconds = 7;
    {PROTOBUF_FIELD_OFFSET(UserFriendlyError, _impl_.auto_dismiss_seconds_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::blokus::ErrorAction>()},
  }}, {{
    "\30\5\13\4\0\0\0\0"
    "blokus.UserFriendlyError"
    "title"
    "description"
    "icon"
  }},
};

PROTOBUF_NOINLINE void UserFriendlyError::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.UserFriendlyError)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.actions_.Clear();
  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.icon_.ClearToEmpty();
  ::memset(&_impl_.show_technical_details_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.auto_dismiss_seconds_) -
      reinterpret_cast<char*>(&_impl_.show_technical_details_)) + sizeof(_impl_.auto_dismiss_seconds_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* UserFriendlyError::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const UserFriendlyError& this_ = static_cast<const UserFriendlyError&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* UserFriendlyError::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const UserFriendlyError& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.UserFriendlyError)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string title = 1;
          if (!this_._internal_title().empty()) {
            const std::string& _s = this_._internal_title();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.UserFriendlyError.title");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string description = 2;
          if (!this_._internal_description().empty()) {
            const std::string& _s = this_._internal_description();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.UserFriendlyError.description");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string icon = 3;
          if (!this_._internal_icon().empty()) {
            const std::string& _s = this_._internal_icon();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.UserFriendlyError.icon");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // repeated .blokus.ErrorAction actions = 4;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_actions_size());
               i < n; i++) {
            const auto& repfield = this_._internal_actions().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    4, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // bool show_technical_details = 5;
          if (this_._internal_show_technical_details() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                5, this_._internal_show_technical_details(), target);
          }

          // bool dismissible = 6;
          if (this_._internal_dismissible() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                6, this_._internal_dismissible(), target);
          }

          // int32 auto_dismiss_seconds = 7;
          if (this_._internal_auto_dismiss_seconds() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<7>(
                    stream, this_._internal_auto_dismiss_seconds(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.UserFriendlyError)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t UserFriendlyError::ByteSizeLong(const MessageLite& base) {
          const UserFriendlyError& this_ = static_cast<const UserFriendlyError&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t UserFriendlyError::ByteSizeLong() const {
          const UserFriendlyError& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.UserFriendlyError)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .blokus.ErrorAction actions = 4;
            {
              total_size += 1UL * this_._internal_actions_size();
              for (const auto& msg : this_._internal_actions()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // string title = 1;
            if (!this_._internal_title().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_title());
            }
            // string description = 2;
            if (!this_._internal_description().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_description());
            }
            // string icon = 3;
            if (!this_._internal_icon().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_icon());
            }
            // bool show_technical_details = 5;
            if (this_._internal_show_technical_details() != 0) {
              total_size += 2;
            }
            // bool dismissible = 6;
            if (this_._internal_dismissible() != 0) {
              total_size += 2;
            }
            // int32 auto_dismiss_seconds = 7;
            if (this_._internal_auto_dismiss_seconds() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_auto_dismiss_seconds());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void UserFriendlyError::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<UserFriendlyError*>(&to_msg);
  auto& from = static_cast<const UserFriendlyError&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.UserFriendlyError)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_actions()->MergeFrom(
      from._internal_actions());
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_icon().empty()) {
    _this->_internal_set_icon(from._internal_icon());
  }
  if (from._internal_show_technical_details() != 0) {
    _this->_impl_.show_technical_details_ = from._impl_.show_technical_details_;
  }
  if (from._internal_dismissible() != 0) {
    _this->_impl_.dismissible_ = from._impl_.dismissible_;
  }
  if (from._internal_auto_dismiss_seconds() != 0) {
    _this->_impl_.auto_dismiss_seconds_ = from._impl_.auto_dismiss_seconds_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UserFriendlyError::CopyFrom(const UserFriendlyError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.UserFriendlyError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void UserFriendlyError::InternalSwap(UserFriendlyError* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.actions_.InternalSwap(&other->_impl_.actions_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, &other->_impl_.title_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, &other->_impl_.description_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.icon_, &other->_impl_.icon_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserFriendlyError, _impl_.auto_dismiss_seconds_)
      + sizeof(UserFriendlyError::_impl_.auto_dismiss_seconds_)
      - PROTOBUF_FIELD_OFFSET(UserFriendlyError, _impl_.show_technical_details_)>(
          reinterpret_cast<char*>(&_impl_.show_technical_details_),
          reinterpret_cast<char*>(&other->_impl_.show_technical_details_));
}

::google::protobuf::Metadata UserFriendlyError::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ErrorAction::_Internal {
 public:
};

ErrorAction::ErrorAction(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.ErrorAction)
}
inline PROTOBUF_NDEBUG_INLINE ErrorAction::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::ErrorAction& from_msg)
      : action_id_(arena, from.action_id_),
        label_(arena, from.label_),
        action_type_(arena, from.action_type_),
        action_data_(arena, from.action_data_),
        _cached_size_{0} {}

ErrorAction::ErrorAction(
    ::google::protobuf::Arena* arena,
    const ErrorAction& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ErrorAction* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.is_primary_ = from._impl_.is_primary_;

  // @@protoc_insertion_point(copy_constructor:blokus.ErrorAction)
}
inline PROTOBUF_NDEBUG_INLINE ErrorAction::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : action_id_(arena),
        label_(arena),
        action_type_(arena),
        action_data_(arena),
        _cached_size_{0} {}

inline void ErrorAction::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.is_primary_ = {};
}
ErrorAction::~ErrorAction() {
  // @@protoc_insertion_point(destructor:blokus.ErrorAction)
  SharedDtor(*this);
}
inline void ErrorAction::SharedDtor(MessageLite& self) {
  ErrorAction& this_ = static_cast<ErrorAction&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.action_id_.Destroy();
  this_._impl_.label_.Destroy();
  this_._impl_.action_type_.Destroy();
  this_._impl_.action_data_.Destroy();
  this_._impl_.~Impl_();
}

inline void* ErrorAction::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ErrorAction(arena);
}
constexpr auto ErrorAction::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ErrorAction),
                                            alignof(ErrorAction));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ErrorAction::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ErrorAction_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ErrorAction::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ErrorAction>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ErrorAction::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ErrorAction>(), &ErrorAction::ByteSizeLong,
            &ErrorAction::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ErrorAction, _impl_._cached_size_),
        false,
    },
    &ErrorAction::kDescriptorMethods,
    &descriptor_table_error_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ErrorAction::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 63, 2> ErrorAction::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::ErrorAction>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string action_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ErrorAction, _impl_.action_id_)}},
    // string label = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ErrorAction, _impl_.label_)}},
    // string action_type = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ErrorAction, _impl_.action_type_)}},
    // string action_data = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(ErrorAction, _impl_.action_data_)}},
    // bool is_primary = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ErrorAction, _impl_.is_primary_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(ErrorAction, _impl_.is_primary_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string action_id = 1;
    {PROTOBUF_FIELD_OFFSET(ErrorAction, _impl_.action_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string label = 2;
    {PROTOBUF_FIELD_OFFSET(ErrorAction, _impl_.label_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string action_type = 3;
    {PROTOBUF_FIELD_OFFSET(ErrorAction, _impl_.action_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string action_data = 4;
    {PROTOBUF_FIELD_OFFSET(ErrorAction, _impl_.action_data_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool is_primary = 5;
    {PROTOBUF_FIELD_OFFSET(ErrorAction, _impl_.is_primary_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\22\11\5\13\13\0\0\0"
    "blokus.ErrorAction"
    "action_id"
    "label"
    "action_type"
    "action_data"
  }},
};

PROTOBUF_NOINLINE void ErrorAction::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.ErrorAction)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.action_id_.ClearToEmpty();
  _impl_.label_.ClearToEmpty();
  _impl_.action_type_.ClearToEmpty();
  _impl_.action_data_.ClearToEmpty();
  _impl_.is_primary_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ErrorAction::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ErrorAction& this_ = static_cast<const ErrorAction&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ErrorAction::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ErrorAction& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.ErrorAction)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string action_id = 1;
          if (!this_._internal_action_id().empty()) {
            const std::string& _s = this_._internal_action_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ErrorAction.action_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string label = 2;
          if (!this_._internal_label().empty()) {
            const std::string& _s = this_._internal_label();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ErrorAction.label");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string action_type = 3;
          if (!this_._internal_action_type().empty()) {
            const std::string& _s = this_._internal_action_type();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ErrorAction.action_type");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // string action_data = 4;
          if (!this_._internal_action_data().empty()) {
            const std::string& _s = this_._internal_action_data();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ErrorAction.action_data");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // bool is_primary = 5;
          if (this_._internal_is_primary() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                5, this_._internal_is_primary(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.ErrorAction)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ErrorAction::ByteSizeLong(const MessageLite& base) {
          const ErrorAction& this_ = static_cast<const ErrorAction&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ErrorAction::ByteSizeLong() const {
          const ErrorAction& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.ErrorAction)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string action_id = 1;
            if (!this_._internal_action_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_action_id());
            }
            // string label = 2;
            if (!this_._internal_label().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_label());
            }
            // string action_type = 3;
            if (!this_._internal_action_type().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_action_type());
            }
            // string action_data = 4;
            if (!this_._internal_action_data().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_action_data());
            }
            // bool is_primary = 5;
            if (this_._internal_is_primary() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ErrorAction::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ErrorAction*>(&to_msg);
  auto& from = static_cast<const ErrorAction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.ErrorAction)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_action_id().empty()) {
    _this->_internal_set_action_id(from._internal_action_id());
  }
  if (!from._internal_label().empty()) {
    _this->_internal_set_label(from._internal_label());
  }
  if (!from._internal_action_type().empty()) {
    _this->_internal_set_action_type(from._internal_action_type());
  }
  if (!from._internal_action_data().empty()) {
    _this->_internal_set_action_data(from._internal_action_data());
  }
  if (from._internal_is_primary() != 0) {
    _this->_impl_.is_primary_ = from._impl_.is_primary_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ErrorAction::CopyFrom(const ErrorAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.ErrorAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ErrorAction::InternalSwap(ErrorAction* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.action_id_, &other->_impl_.action_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.label_, &other->_impl_.label_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.action_type_, &other->_impl_.action_type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.action_data_, &other->_impl_.action_data_, arena);
        swap(_impl_.is_primary_, other->_impl_.is_primary_);
}

::google::protobuf::Metadata ErrorAction::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ErrorReport::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ErrorReport>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ErrorReport, _impl_._has_bits_);
};

void ErrorReport::clear_reported_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.reported_at_ != nullptr) _impl_.reported_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ErrorReport::ErrorReport(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.ErrorReport)
}
inline PROTOBUF_NDEBUG_INLINE ErrorReport::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::ErrorReport& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        breadcrumbs_{visibility, arena, from.breadcrumbs_},
        client_version_(arena, from.client_version_),
        platform_(arena, from.platform_),
        user_agent_(arena, from.user_agent_),
        device_info_(arena, from.device_info_),
        current_screen_(arena, from.current_screen_),
        last_action_(arena, from.last_action_),
        user_id_hash_(arena, from.user_id_hash_),
        network_type_(arena, from.network_type_) {}

ErrorReport::ErrorReport(
    ::google::protobuf::Arena* arena,
    const ErrorReport& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ErrorReport* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.error_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::blokus::ErrorResponse>(
                              arena, *from._impl_.error_)
                        : nullptr;
  _impl_.reported_at_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.reported_at_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, user_level_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, user_level_),
           offsetof(Impl_, auto_submitted_) -
               offsetof(Impl_, user_level_) +
               sizeof(Impl_::auto_submitted_));

  // @@protoc_insertion_point(copy_constructor:blokus.ErrorReport)
}
inline PROTOBUF_NDEBUG_INLINE ErrorReport::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        breadcrumbs_{visibility, arena},
        client_version_(arena),
        platform_(arena),
        user_agent_(arena),
        device_info_(arena),
        current_screen_(arena),
        last_action_(arena),
        user_id_hash_(arena),
        network_type_(arena) {}

inline void ErrorReport::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, error_),
           0,
           offsetof(Impl_, auto_submitted_) -
               offsetof(Impl_, error_) +
               sizeof(Impl_::auto_submitted_));
}
ErrorReport::~ErrorReport() {
  // @@protoc_insertion_point(destructor:blokus.ErrorReport)
  SharedDtor(*this);
}
inline void ErrorReport::SharedDtor(MessageLite& self) {
  ErrorReport& this_ = static_cast<ErrorReport&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.client_version_.Destroy();
  this_._impl_.platform_.Destroy();
  this_._impl_.user_agent_.Destroy();
  this_._impl_.device_info_.Destroy();
  this_._impl_.current_screen_.Destroy();
  this_._impl_.last_action_.Destroy();
  this_._impl_.user_id_hash_.Destroy();
  this_._impl_.network_type_.Destroy();
  delete this_._impl_.error_;
  delete this_._impl_.reported_at_;
  this_._impl_.~Impl_();
}

inline void* ErrorReport::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ErrorReport(arena);
}
constexpr auto ErrorReport::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ErrorReport, _impl_.breadcrumbs_) +
          decltype(ErrorReport::_impl_.breadcrumbs_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(ErrorReport), alignof(ErrorReport), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ErrorReport::PlacementNew_,
                                 sizeof(ErrorReport),
                                 alignof(ErrorReport));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ErrorReport::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ErrorReport_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ErrorReport::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ErrorReport>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ErrorReport::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ErrorReport>(), &ErrorReport::ByteSizeLong,
            &ErrorReport::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ErrorReport, _impl_._cached_size_),
        false,
    },
    &ErrorReport::kDescriptorMethods,
    &descriptor_table_error_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ErrorReport::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 15, 2, 138, 2> ErrorReport::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ErrorReport, _impl_._has_bits_),
    0, // no _extensions_
    15, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294934528,  // skipmap
    offsetof(decltype(_table_), field_entries),
    15,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::ErrorReport>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .blokus.ErrorResponse error = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ErrorReport, _impl_.error_)}},
    // string client_version = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ErrorReport, _impl_.client_version_)}},
    // string platform = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ErrorReport, _impl_.platform_)}},
    // string user_agent = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(ErrorReport, _impl_.user_agent_)}},
    // string device_info = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(ErrorReport, _impl_.device_info_)}},
    // string current_screen = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(ErrorReport, _impl_.current_screen_)}},
    // string last_action = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(ErrorReport, _impl_.last_action_)}},
    // repeated string breadcrumbs = 8;
    {::_pbi::TcParser::FastUR1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(ErrorReport, _impl_.breadcrumbs_)}},
    // string user_id_hash = 9;
    {::_pbi::TcParser::FastUS1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(ErrorReport, _impl_.user_id_hash_)}},
    // int32 user_level = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ErrorReport, _impl_.user_level_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(ErrorReport, _impl_.user_level_)}},
    // int32 session_duration = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ErrorReport, _impl_.session_duration_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(ErrorReport, _impl_.session_duration_)}},
    // string network_type = 12;
    {::_pbi::TcParser::FastUS1,
     {98, 63, 0, PROTOBUF_FIELD_OFFSET(ErrorReport, _impl_.network_type_)}},
    // float network_latency = 13;
    {::_pbi::TcParser::FastF32S1,
     {109, 63, 0, PROTOBUF_FIELD_OFFSET(ErrorReport, _impl_.network_latency_)}},
    // bool auto_submitted = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ErrorReport, _impl_.auto_submitted_), 63>(),
     {112, 63, 0, PROTOBUF_FIELD_OFFSET(ErrorReport, _impl_.auto_submitted_)}},
    // .google.protobuf.Timestamp reported_at = 15;
    {::_pbi::TcParser::FastMtS1,
     {122, 1, 1, PROTOBUF_FIELD_OFFSET(ErrorReport, _impl_.reported_at_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .blokus.ErrorResponse error = 1;
    {PROTOBUF_FIELD_OFFSET(ErrorReport, _impl_.error_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string client_version = 2;
    {PROTOBUF_FIELD_OFFSET(ErrorReport, _impl_.client_version_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string platform = 3;
    {PROTOBUF_FIELD_OFFSET(ErrorReport, _impl_.platform_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string user_agent = 4;
    {PROTOBUF_FIELD_OFFSET(ErrorReport, _impl_.user_agent_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string device_info = 5;
    {PROTOBUF_FIELD_OFFSET(ErrorReport, _impl_.device_info_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string current_screen = 6;
    {PROTOBUF_FIELD_OFFSET(ErrorReport, _impl_.current_screen_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string last_action = 7;
    {PROTOBUF_FIELD_OFFSET(ErrorReport, _impl_.last_action_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated string breadcrumbs = 8;
    {PROTOBUF_FIELD_OFFSET(ErrorReport, _impl_.breadcrumbs_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // string user_id_hash = 9;
    {PROTOBUF_FIELD_OFFSET(ErrorReport, _impl_.user_id_hash_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 user_level = 10;
    {PROTOBUF_FIELD_OFFSET(ErrorReport, _impl_.user_level_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 session_duration = 11;
    {PROTOBUF_FIELD_OFFSET(ErrorReport, _impl_.session_duration_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string network_type = 12;
    {PROTOBUF_FIELD_OFFSET(ErrorReport, _impl_.network_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // float network_latency = 13;
    {PROTOBUF_FIELD_OFFSET(ErrorReport, _impl_.network_latency_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // bool auto_submitted = 14;
    {PROTOBUF_FIELD_OFFSET(ErrorReport, _impl_.auto_submitted_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .google.protobuf.Timestamp reported_at = 15;
    {PROTOBUF_FIELD_OFFSET(ErrorReport, _impl_.reported_at_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::blokus::ErrorResponse>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\22\0\16\10\12\13\16\13\13\14\0\0\14\0\0\0"
    "blokus.ErrorReport"
    "client_version"
    "platform"
    "user_agent"
    "device_info"
    "current_screen"
    "last_action"
    "breadcrumbs"
    "user_id_hash"
    "network_type"
  }},
};

PROTOBUF_NOINLINE void ErrorReport::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.ErrorReport)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.breadcrumbs_.Clear();
  _impl_.client_version_.ClearToEmpty();
  _impl_.platform_.ClearToEmpty();
  _impl_.user_agent_.ClearToEmpty();
  _impl_.device_info_.ClearToEmpty();
  _impl_.current_screen_.ClearToEmpty();
  _impl_.last_action_.ClearToEmpty();
  _impl_.user_id_hash_.ClearToEmpty();
  _impl_.network_type_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.error_ != nullptr);
      _impl_.error_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.reported_at_ != nullptr);
      _impl_.reported_at_->Clear();
    }
  }
  ::memset(&_impl_.user_level_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.auto_submitted_) -
      reinterpret_cast<char*>(&_impl_.user_level_)) + sizeof(_impl_.auto_submitted_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ErrorReport::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ErrorReport& this_ = static_cast<const ErrorReport&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ErrorReport::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ErrorReport& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.ErrorReport)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .blokus.ErrorResponse error = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.error_, this_._impl_.error_->GetCachedSize(), target,
                stream);
          }

          // string client_version = 2;
          if (!this_._internal_client_version().empty()) {
            const std::string& _s = this_._internal_client_version();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ErrorReport.client_version");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string platform = 3;
          if (!this_._internal_platform().empty()) {
            const std::string& _s = this_._internal_platform();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ErrorReport.platform");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // string user_agent = 4;
          if (!this_._internal_user_agent().empty()) {
            const std::string& _s = this_._internal_user_agent();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ErrorReport.user_agent");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // string device_info = 5;
          if (!this_._internal_device_info().empty()) {
            const std::string& _s = this_._internal_device_info();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ErrorReport.device_info");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // string current_screen = 6;
          if (!this_._internal_current_screen().empty()) {
            const std::string& _s = this_._internal_current_screen();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ErrorReport.current_screen");
            target = stream->WriteStringMaybeAliased(6, _s, target);
          }

          // string last_action = 7;
          if (!this_._internal_last_action().empty()) {
            const std::string& _s = this_._internal_last_action();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ErrorReport.last_action");
            target = stream->WriteStringMaybeAliased(7, _s, target);
          }

          // repeated string breadcrumbs = 8;
          for (int i = 0, n = this_._internal_breadcrumbs_size(); i < n; ++i) {
            const auto& s = this_._internal_breadcrumbs().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ErrorReport.breadcrumbs");
            target = stream->WriteString(8, s, target);
          }

          // string user_id_hash = 9;
          if (!this_._internal_user_id_hash().empty()) {
            const std::string& _s = this_._internal_user_id_hash();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ErrorReport.user_id_hash");
            target = stream->WriteStringMaybeAliased(9, _s, target);
          }

          // int32 user_level = 10;
          if (this_._internal_user_level() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<10>(
                    stream, this_._internal_user_level(), target);
          }

          // int32 session_duration = 11;
          if (this_._internal_session_duration() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<11>(
                    stream, this_._internal_session_duration(), target);
          }

          // string network_type = 12;
          if (!this_._internal_network_type().empty()) {
            const std::string& _s = this_._internal_network_type();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ErrorReport.network_type");
            target = stream->WriteStringMaybeAliased(12, _s, target);
          }

          // float network_latency = 13;
          if (::absl::bit_cast<::uint32_t>(this_._internal_network_latency()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                13, this_._internal_network_latency(), target);
          }

          // bool auto_submitted = 14;
          if (this_._internal_auto_submitted() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                14, this_._internal_auto_submitted(), target);
          }

          // .google.protobuf.Timestamp reported_at = 15;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                15, *this_._impl_.reported_at_, this_._impl_.reported_at_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.ErrorReport)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ErrorReport::ByteSizeLong(const MessageLite& base) {
          const ErrorReport& this_ = static_cast<const ErrorReport&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ErrorReport::ByteSizeLong() const {
          const ErrorReport& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.ErrorReport)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string breadcrumbs = 8;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_breadcrumbs().size());
              for (int i = 0, n = this_._internal_breadcrumbs().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_breadcrumbs().Get(i));
              }
            }
          }
           {
            // string client_version = 2;
            if (!this_._internal_client_version().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_client_version());
            }
            // string platform = 3;
            if (!this_._internal_platform().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_platform());
            }
            // string user_agent = 4;
            if (!this_._internal_user_agent().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_user_agent());
            }
            // string device_info = 5;
            if (!this_._internal_device_info().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_device_info());
            }
            // string current_screen = 6;
            if (!this_._internal_current_screen().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_current_screen());
            }
            // string last_action = 7;
            if (!this_._internal_last_action().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_last_action());
            }
            // string user_id_hash = 9;
            if (!this_._internal_user_id_hash().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_user_id_hash());
            }
            // string network_type = 12;
            if (!this_._internal_network_type().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_network_type());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .blokus.ErrorResponse error = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.error_);
            }
            // .google.protobuf.Timestamp reported_at = 15;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.reported_at_);
            }
          }
           {
            // int32 user_level = 10;
            if (this_._internal_user_level() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_user_level());
            }
            // int32 session_duration = 11;
            if (this_._internal_session_duration() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_session_duration());
            }
            // float network_latency = 13;
            if (::absl::bit_cast<::uint32_t>(this_._internal_network_latency()) != 0) {
              total_size += 5;
            }
            // bool auto_submitted = 14;
            if (this_._internal_auto_submitted() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ErrorReport::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ErrorReport*>(&to_msg);
  auto& from = static_cast<const ErrorReport&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.ErrorReport)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_breadcrumbs()->MergeFrom(from._internal_breadcrumbs());
  if (!from._internal_client_version().empty()) {
    _this->_internal_set_client_version(from._internal_client_version());
  }
  if (!from._internal_platform().empty()) {
    _this->_internal_set_platform(from._internal_platform());
  }
  if (!from._internal_user_agent().empty()) {
    _this->_internal_set_user_agent(from._internal_user_agent());
  }
  if (!from._internal_device_info().empty()) {
    _this->_internal_set_device_info(from._internal_device_info());
  }
  if (!from._internal_current_screen().empty()) {
    _this->_internal_set_current_screen(from._internal_current_screen());
  }
  if (!from._internal_last_action().empty()) {
    _this->_internal_set_last_action(from._internal_last_action());
  }
  if (!from._internal_user_id_hash().empty()) {
    _this->_internal_set_user_id_hash(from._internal_user_id_hash());
  }
  if (!from._internal_network_type().empty()) {
    _this->_internal_set_network_type(from._internal_network_type());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.error_ != nullptr);
      if (_this->_impl_.error_ == nullptr) {
        _this->_impl_.error_ =
            ::google::protobuf::Message::CopyConstruct<::blokus::ErrorResponse>(arena, *from._impl_.error_);
      } else {
        _this->_impl_.error_->MergeFrom(*from._impl_.error_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.reported_at_ != nullptr);
      if (_this->_impl_.reported_at_ == nullptr) {
        _this->_impl_.reported_at_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.reported_at_);
      } else {
        _this->_impl_.reported_at_->MergeFrom(*from._impl_.reported_at_);
      }
    }
  }
  if (from._internal_user_level() != 0) {
    _this->_impl_.user_level_ = from._impl_.user_level_;
  }
  if (from._internal_session_duration() != 0) {
    _this->_impl_.session_duration_ = from._impl_.session_duration_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_network_latency()) != 0) {
    _this->_impl_.network_latency_ = from._impl_.network_latency_;
  }
  if (from._internal_auto_submitted() != 0) {
    _this->_impl_.auto_submitted_ = from._impl_.auto_submitted_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ErrorReport::CopyFrom(const ErrorReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.ErrorReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ErrorReport::InternalSwap(ErrorReport* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.breadcrumbs_.InternalSwap(&other->_impl_.breadcrumbs_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.client_version_, &other->_impl_.client_version_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.platform_, &other->_impl_.platform_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.user_agent_, &other->_impl_.user_agent_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.device_info_, &other->_impl_.device_info_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.current_screen_, &other->_impl_.current_screen_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.last_action_, &other->_impl_.last_action_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.user_id_hash_, &other->_impl_.user_id_hash_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.network_type_, &other->_impl_.network_type_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ErrorReport, _impl_.auto_submitted_)
      + sizeof(ErrorReport::_impl_.auto_submitted_)
      - PROTOBUF_FIELD_OFFSET(ErrorReport, _impl_.error_)>(
          reinterpret_cast<char*>(&_impl_.error_),
          reinterpret_cast<char*>(&other->_impl_.error_));
}

::google::protobuf::Metadata ErrorReport::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace blokus
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_error_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
