// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: message_wrapper.proto
// Protobuf C++ Version: 5.29.3

#include "message_wrapper.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace blokus {
              template <typename>
PROTOBUF_CONSTEXPR MessageWrapper_HeadersEntry_DoNotUse::MessageWrapper_HeadersEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : MessageWrapper_HeadersEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : MessageWrapper_HeadersEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct MessageWrapper_HeadersEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageWrapper_HeadersEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageWrapper_HeadersEntry_DoNotUseDefaultTypeInternal() {}
  union {
    MessageWrapper_HeadersEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageWrapper_HeadersEntry_DoNotUseDefaultTypeInternal _MessageWrapper_HeadersEntry_DoNotUse_default_instance_;

inline constexpr SessionInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        session_token_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        username_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        created_at_{nullptr},
        last_activity_{nullptr},
        current_room_id_{0},
        last_message_sequence_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR SessionInfo::SessionInfo(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SessionInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SessionInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SessionInfoDefaultTypeInternal() {}
  union {
    SessionInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SessionInfoDefaultTypeInternal _SessionInfo_default_instance_;

inline constexpr MessageWrapper::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        headers_{},
        client_version_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        target_room_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        target_user_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        compression_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        trace_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        payload_{nullptr},
        timestamp_{nullptr},
        type_{static_cast< ::blokus::MessageType >(0)},
        sequence_id_{0u},
        priority_{static_cast< ::blokus::MessagePriority >(0)},
        broadcast_{false},
        requires_ack_{false},
        compressed_{false},
        retry_count_{0u},
        timeout_ms_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR MessageWrapper::MessageWrapper(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MessageWrapperDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageWrapperDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageWrapperDefaultTypeInternal() {}
  union {
    MessageWrapper _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageWrapperDefaultTypeInternal _MessageWrapper_default_instance_;

inline constexpr MessageStats::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        last_sent_{nullptr},
        sent_count_{::uint64_t{0u}},
        received_count_{::uint64_t{0u}},
        type_{static_cast< ::blokus::MessageType >(0)},
        average_latency_ms_{0},
        error_count_{::uint64_t{0u}},
        total_bytes_{::uint64_t{0u}} {}

template <typename>
PROTOBUF_CONSTEXPR MessageStats::MessageStats(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MessageStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageStatsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageStatsDefaultTypeInternal() {}
  union {
    MessageStats _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageStatsDefaultTypeInternal _MessageStats_default_instance_;

inline constexpr MessageAck::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        error_message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        received_at_{nullptr},
        sequence_id_{0u},
        success_{false} {}

template <typename>
PROTOBUF_CONSTEXPR MessageAck::MessageAck(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MessageAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageAckDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageAckDefaultTypeInternal() {}
  union {
    MessageAck _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageAckDefaultTypeInternal _MessageAck_default_instance_;

inline constexpr KeepAlive::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        timestamp_{nullptr},
        client_fps_{0u},
        network_latency_ms_{0},
        memory_usage_mb_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR KeepAlive::KeepAlive(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct KeepAliveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KeepAliveDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~KeepAliveDefaultTypeInternal() {}
  union {
    KeepAlive _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KeepAliveDefaultTypeInternal _KeepAlive_default_instance_;

inline constexpr ConnectionStatus::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        reason_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        last_activity_{nullptr},
        status_{static_cast< ::blokus::ConnectionStatus_Status >(0)},
        missed_heartbeats_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR ConnectionStatus::ConnectionStatus(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ConnectionStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConnectionStatusDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConnectionStatusDefaultTypeInternal() {}
  union {
    ConnectionStatus _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConnectionStatusDefaultTypeInternal _ConnectionStatus_default_instance_;

inline constexpr ReconnectInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        missed_messages_{},
        session_{nullptr},
        missed_message_count_{0u},
        full_state_required_{false} {}

template <typename>
PROTOBUF_CONSTEXPR ReconnectInfo::ReconnectInfo(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ReconnectInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReconnectInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReconnectInfoDefaultTypeInternal() {}
  union {
    ReconnectInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReconnectInfoDefaultTypeInternal _ReconnectInfo_default_instance_;

inline constexpr NetworkStats::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        message_stats_{},
        session_start_{nullptr},
        total_messages_sent_{::uint64_t{0u}},
        total_messages_received_{::uint64_t{0u}},
        total_bytes_sent_{::uint64_t{0u}},
        total_bytes_received_{::uint64_t{0u}},
        average_latency_ms_{0},
        connection_drops_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR NetworkStats::NetworkStats(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct NetworkStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetworkStatsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetworkStatsDefaultTypeInternal() {}
  union {
    NetworkStats _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetworkStatsDefaultTypeInternal _NetworkStats_default_instance_;

inline constexpr BatchMessage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        messages_{},
        created_at_{nullptr},
        batch_id_{0u},
        ordered_{false} {}

template <typename>
PROTOBUF_CONSTEXPR BatchMessage::BatchMessage(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct BatchMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BatchMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BatchMessageDefaultTypeInternal() {}
  union {
    BatchMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BatchMessageDefaultTypeInternal _BatchMessage_default_instance_;
}  // namespace blokus
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_message_5fwrapper_2eproto[3];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_message_5fwrapper_2eproto = nullptr;
const ::uint32_t
    TableStruct_message_5fwrapper_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::blokus::MessageWrapper_HeadersEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::MessageWrapper_HeadersEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::MessageWrapper_HeadersEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::blokus::MessageWrapper_HeadersEntry_DoNotUse, _impl_.value_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::blokus::MessageWrapper, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::MessageWrapper, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::MessageWrapper, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::blokus::MessageWrapper, _impl_.sequence_id_),
        PROTOBUF_FIELD_OFFSET(::blokus::MessageWrapper, _impl_.payload_),
        PROTOBUF_FIELD_OFFSET(::blokus::MessageWrapper, _impl_.timestamp_),
        PROTOBUF_FIELD_OFFSET(::blokus::MessageWrapper, _impl_.client_version_),
        PROTOBUF_FIELD_OFFSET(::blokus::MessageWrapper, _impl_.priority_),
        PROTOBUF_FIELD_OFFSET(::blokus::MessageWrapper, _impl_.target_room_),
        PROTOBUF_FIELD_OFFSET(::blokus::MessageWrapper, _impl_.target_user_),
        PROTOBUF_FIELD_OFFSET(::blokus::MessageWrapper, _impl_.broadcast_),
        PROTOBUF_FIELD_OFFSET(::blokus::MessageWrapper, _impl_.requires_ack_),
        PROTOBUF_FIELD_OFFSET(::blokus::MessageWrapper, _impl_.retry_count_),
        PROTOBUF_FIELD_OFFSET(::blokus::MessageWrapper, _impl_.timeout_ms_),
        PROTOBUF_FIELD_OFFSET(::blokus::MessageWrapper, _impl_.compressed_),
        PROTOBUF_FIELD_OFFSET(::blokus::MessageWrapper, _impl_.compression_type_),
        PROTOBUF_FIELD_OFFSET(::blokus::MessageWrapper, _impl_.trace_id_),
        PROTOBUF_FIELD_OFFSET(::blokus::MessageWrapper, _impl_.headers_),
        ~0u,
        ~0u,
        0,
        1,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::blokus::MessageAck, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::MessageAck, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::MessageAck, _impl_.sequence_id_),
        PROTOBUF_FIELD_OFFSET(::blokus::MessageAck, _impl_.success_),
        PROTOBUF_FIELD_OFFSET(::blokus::MessageAck, _impl_.error_message_),
        PROTOBUF_FIELD_OFFSET(::blokus::MessageAck, _impl_.received_at_),
        ~0u,
        ~0u,
        ~0u,
        0,
        PROTOBUF_FIELD_OFFSET(::blokus::BatchMessage, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::BatchMessage, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::BatchMessage, _impl_.messages_),
        PROTOBUF_FIELD_OFFSET(::blokus::BatchMessage, _impl_.batch_id_),
        PROTOBUF_FIELD_OFFSET(::blokus::BatchMessage, _impl_.created_at_),
        PROTOBUF_FIELD_OFFSET(::blokus::BatchMessage, _impl_.ordered_),
        ~0u,
        ~0u,
        0,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::blokus::KeepAlive, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::KeepAlive, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::KeepAlive, _impl_.timestamp_),
        PROTOBUF_FIELD_OFFSET(::blokus::KeepAlive, _impl_.client_fps_),
        PROTOBUF_FIELD_OFFSET(::blokus::KeepAlive, _impl_.network_latency_ms_),
        PROTOBUF_FIELD_OFFSET(::blokus::KeepAlive, _impl_.memory_usage_mb_),
        0,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::blokus::ConnectionStatus, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::ConnectionStatus, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::ConnectionStatus, _impl_.status_),
        PROTOBUF_FIELD_OFFSET(::blokus::ConnectionStatus, _impl_.reason_),
        PROTOBUF_FIELD_OFFSET(::blokus::ConnectionStatus, _impl_.last_activity_),
        PROTOBUF_FIELD_OFFSET(::blokus::ConnectionStatus, _impl_.missed_heartbeats_),
        ~0u,
        ~0u,
        0,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::blokus::SessionInfo, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::SessionInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::SessionInfo, _impl_.session_token_),
        PROTOBUF_FIELD_OFFSET(::blokus::SessionInfo, _impl_.username_),
        PROTOBUF_FIELD_OFFSET(::blokus::SessionInfo, _impl_.created_at_),
        PROTOBUF_FIELD_OFFSET(::blokus::SessionInfo, _impl_.last_activity_),
        PROTOBUF_FIELD_OFFSET(::blokus::SessionInfo, _impl_.current_room_id_),
        PROTOBUF_FIELD_OFFSET(::blokus::SessionInfo, _impl_.last_message_sequence_),
        ~0u,
        ~0u,
        0,
        1,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::blokus::ReconnectInfo, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::ReconnectInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::ReconnectInfo, _impl_.session_),
        PROTOBUF_FIELD_OFFSET(::blokus::ReconnectInfo, _impl_.missed_message_count_),
        PROTOBUF_FIELD_OFFSET(::blokus::ReconnectInfo, _impl_.missed_messages_),
        PROTOBUF_FIELD_OFFSET(::blokus::ReconnectInfo, _impl_.full_state_required_),
        0,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::blokus::MessageStats, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::MessageStats, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::MessageStats, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::blokus::MessageStats, _impl_.sent_count_),
        PROTOBUF_FIELD_OFFSET(::blokus::MessageStats, _impl_.received_count_),
        PROTOBUF_FIELD_OFFSET(::blokus::MessageStats, _impl_.error_count_),
        PROTOBUF_FIELD_OFFSET(::blokus::MessageStats, _impl_.average_latency_ms_),
        PROTOBUF_FIELD_OFFSET(::blokus::MessageStats, _impl_.total_bytes_),
        PROTOBUF_FIELD_OFFSET(::blokus::MessageStats, _impl_.last_sent_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        PROTOBUF_FIELD_OFFSET(::blokus::NetworkStats, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::NetworkStats, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::NetworkStats, _impl_.message_stats_),
        PROTOBUF_FIELD_OFFSET(::blokus::NetworkStats, _impl_.total_messages_sent_),
        PROTOBUF_FIELD_OFFSET(::blokus::NetworkStats, _impl_.total_messages_received_),
        PROTOBUF_FIELD_OFFSET(::blokus::NetworkStats, _impl_.total_bytes_sent_),
        PROTOBUF_FIELD_OFFSET(::blokus::NetworkStats, _impl_.total_bytes_received_),
        PROTOBUF_FIELD_OFFSET(::blokus::NetworkStats, _impl_.average_latency_ms_),
        PROTOBUF_FIELD_OFFSET(::blokus::NetworkStats, _impl_.connection_drops_),
        PROTOBUF_FIELD_OFFSET(::blokus::NetworkStats, _impl_.session_start_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 10, -1, sizeof(::blokus::MessageWrapper_HeadersEntry_DoNotUse)},
        {12, 36, -1, sizeof(::blokus::MessageWrapper)},
        {52, 64, -1, sizeof(::blokus::MessageAck)},
        {68, 80, -1, sizeof(::blokus::BatchMessage)},
        {84, 96, -1, sizeof(::blokus::KeepAlive)},
        {100, 112, -1, sizeof(::blokus::ConnectionStatus)},
        {116, 130, -1, sizeof(::blokus::SessionInfo)},
        {136, 148, -1, sizeof(::blokus::ReconnectInfo)},
        {152, 167, -1, sizeof(::blokus::MessageStats)},
        {174, 190, -1, sizeof(::blokus::NetworkStats)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::blokus::_MessageWrapper_HeadersEntry_DoNotUse_default_instance_._instance,
    &::blokus::_MessageWrapper_default_instance_._instance,
    &::blokus::_MessageAck_default_instance_._instance,
    &::blokus::_BatchMessage_default_instance_._instance,
    &::blokus::_KeepAlive_default_instance_._instance,
    &::blokus::_ConnectionStatus_default_instance_._instance,
    &::blokus::_SessionInfo_default_instance_._instance,
    &::blokus::_ReconnectInfo_default_instance_._instance,
    &::blokus::_MessageStats_default_instance_._instance,
    &::blokus::_NetworkStats_default_instance_._instance,
};
const char descriptor_table_protodef_message_5fwrapper_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\025message_wrapper.proto\022\006blokus\032\031google/"
    "protobuf/any.proto\032\037google/protobuf/time"
    "stamp.proto\"\203\004\n\016MessageWrapper\022!\n\004type\030\001"
    " \001(\0162\023.blokus.MessageType\022\023\n\013sequence_id"
    "\030\002 \001(\r\022%\n\007payload\030\003 \001(\0132\024.google.protobu"
    "f.Any\022-\n\ttimestamp\030\n \001(\0132\032.google.protob"
    "uf.Timestamp\022\026\n\016client_version\030\013 \001(\t\022)\n\010"
    "priority\030\014 \001(\0162\027.blokus.MessagePriority\022"
    "\023\n\013target_room\030\017 \001(\t\022\023\n\013target_user\030\020 \001("
    "\t\022\021\n\tbroadcast\030\021 \001(\010\022\024\n\014requires_ack\030\024 \001"
    "(\010\022\023\n\013retry_count\030\025 \001(\r\022\022\n\ntimeout_ms\030\026 "
    "\001(\r\022\022\n\ncompressed\030\031 \001(\010\022\030\n\020compression_t"
    "ype\030\032 \001(\t\022\020\n\010trace_id\030\036 \001(\t\0224\n\007headers\030\037"
    " \003(\0132#.blokus.MessageWrapper.HeadersEntr"
    "y\032.\n\014HeadersEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030"
    "\002 \001(\t:\0028\001\"z\n\nMessageAck\022\023\n\013sequence_id\030\001"
    " \001(\r\022\017\n\007success\030\002 \001(\010\022\025\n\rerror_message\030\003"
    " \001(\t\022/\n\013received_at\030\004 \001(\0132\032.google.proto"
    "buf.Timestamp\"\213\001\n\014BatchMessage\022(\n\010messag"
    "es\030\001 \003(\0132\026.blokus.MessageWrapper\022\020\n\010batc"
    "h_id\030\002 \001(\r\022.\n\ncreated_at\030\003 \001(\0132\032.google."
    "protobuf.Timestamp\022\017\n\007ordered\030\004 \001(\010\"\203\001\n\t"
    "KeepAlive\022-\n\ttimestamp\030\001 \001(\0132\032.google.pr"
    "otobuf.Timestamp\022\022\n\nclient_fps\030\002 \001(\r\022\032\n\022"
    "network_latency_ms\030\003 \001(\002\022\027\n\017memory_usage"
    "_mb\030\004 \001(\r\"\353\001\n\020ConnectionStatus\022/\n\006status"
    "\030\001 \001(\0162\037.blokus.ConnectionStatus.Status\022"
    "\016\n\006reason\030\002 \001(\t\0221\n\rlast_activity\030\003 \001(\0132\032"
    ".google.protobuf.Timestamp\022\031\n\021missed_hea"
    "rtbeats\030\004 \001(\r\"H\n\006Status\022\r\n\tCONNECTED\020\000\022\020"
    "\n\014DISCONNECTED\020\001\022\020\n\014RECONNECTING\020\002\022\013\n\007TI"
    "MEOUT\020\003\"\321\001\n\013SessionInfo\022\025\n\rsession_token"
    "\030\001 \001(\t\022\020\n\010username\030\002 \001(\t\022.\n\ncreated_at\030\003"
    " \001(\0132\032.google.protobuf.Timestamp\0221\n\rlast"
    "_activity\030\004 \001(\0132\032.google.protobuf.Timest"
    "amp\022\027\n\017current_room_id\030\005 \001(\005\022\035\n\025last_mes"
    "sage_sequence\030\006 \001(\r\"\241\001\n\rReconnectInfo\022$\n"
    "\007session\030\001 \001(\0132\023.blokus.SessionInfo\022\034\n\024m"
    "issed_message_count\030\002 \001(\r\022/\n\017missed_mess"
    "ages\030\003 \003(\0132\026.blokus.MessageWrapper\022\033\n\023fu"
    "ll_state_required\030\004 \001(\010\"\322\001\n\014MessageStats"
    "\022!\n\004type\030\001 \001(\0162\023.blokus.MessageType\022\022\n\ns"
    "ent_count\030\002 \001(\004\022\026\n\016received_count\030\003 \001(\004\022"
    "\023\n\013error_count\030\004 \001(\004\022\032\n\022average_latency_"
    "ms\030\005 \001(\002\022\023\n\013total_bytes\030\006 \001(\004\022-\n\tlast_se"
    "nt\030\007 \001(\0132\032.google.protobuf.Timestamp\"\232\002\n"
    "\014NetworkStats\022+\n\rmessage_stats\030\001 \003(\0132\024.b"
    "lokus.MessageStats\022\033\n\023total_messages_sen"
    "t\030\002 \001(\004\022\037\n\027total_messages_received\030\003 \001(\004"
    "\022\030\n\020total_bytes_sent\030\004 \001(\004\022\034\n\024total_byte"
    "s_received\030\005 \001(\004\022\032\n\022average_latency_ms\030\006"
    " \001(\002\022\030\n\020connection_drops\030\007 \001(\r\0221\n\rsessio"
    "n_start\030\010 \001(\0132\032.google.protobuf.Timestam"
    "p*\320\024\n\013MessageType\022\030\n\024MESSAGE_TYPE_UNKNOW"
    "N\020\000\022\035\n\031MESSAGE_TYPE_AUTH_REQUEST\020d\022\036\n\032ME"
    "SSAGE_TYPE_AUTH_RESPONSE\020e\022!\n\035MESSAGE_TY"
    "PE_REGISTER_REQUEST\020f\022\"\n\036MESSAGE_TYPE_RE"
    "GISTER_RESPONSE\020g\022\037\n\033MESSAGE_TYPE_LOGOUT"
    "_REQUEST\020h\022 \n\034MESSAGE_TYPE_LOGOUT_RESPON"
    "SE\020i\022\032\n\026MESSAGE_TYPE_HEARTBEAT\020j\022\030\n\024MESS"
    "AGE_TYPE_WELCOME\020k\022\'\n\"MESSAGE_TYPE_GET_R"
    "OOM_LIST_REQUEST\020\310\001\022$\n\037MESSAGE_TYPE_ROOM"
    "_LIST_RESPONSE\020\311\001\022\"\n\035MESSAGE_TYPE_ROOM_L"
    "IST_UPDATE\020\312\001\022%\n MESSAGE_TYPE_CREATE_ROO"
    "M_REQUEST\020\313\001\022&\n!MESSAGE_TYPE_CREATE_ROOM"
    "_RESPONSE\020\314\001\022#\n\036MESSAGE_TYPE_JOIN_ROOM_R"
    "EQUEST\020\315\001\022$\n\037MESSAGE_TYPE_JOIN_ROOM_RESP"
    "ONSE\020\316\001\022$\n\037MESSAGE_TYPE_LEAVE_ROOM_REQUE"
    "ST\020\317\001\022%\n MESSAGE_TYPE_LEAVE_ROOM_RESPONS"
    "E\020\320\001\022,\n\'MESSAGE_TYPE_PLAYER_JOINED_NOTIF"
    "ICATION\020\321\001\022*\n%MESSAGE_TYPE_PLAYER_LEFT_N"
    "OTIFICATION\020\322\001\022\"\n\035MESSAGE_TYPE_USER_LIST"
    "_UPDATE\020\323\001\022(\n#MESSAGE_TYPE_GET_USER_STAT"
    "S_REQUEST\020\324\001\022%\n MESSAGE_TYPE_USER_STATS_"
    "RESPONSE\020\325\001\022#\n\036MESSAGE_TYPE_ROOM_STATE_U"
    "PDATE\020\254\002\022\'\n\"MESSAGE_TYPE_ADD_AI_PLAYER_R"
    "EQUEST\020\255\002\022(\n#MESSAGE_TYPE_ADD_AI_PLAYER_"
    "RESPONSE\020\256\002\022\'\n\"MESSAGE_TYPE_REMOVE_PLAYE"
    "R_REQUEST\020\257\002\022(\n#MESSAGE_TYPE_REMOVE_PLAY"
    "ER_RESPONSE\020\260\002\022%\n MESSAGE_TYPE_KICK_PLAY"
    "ER_REQUEST\020\261\002\022&\n!MESSAGE_TYPE_KICK_PLAYE"
    "R_RESPONSE\020\262\002\022&\n!MESSAGE_TYPE_PLAYER_REA"
    "DY_REQUEST\020\263\002\022\'\n\"MESSAGE_TYPE_PLAYER_REA"
    "DY_RESPONSE\020\264\002\022$\n\037MESSAGE_TYPE_START_GAM"
    "E_REQUEST\020\265\002\022%\n MESSAGE_TYPE_START_GAME_"
    "RESPONSE\020\266\002\022+\n&MESSAGE_TYPE_GAME_STARTED"
    "_NOTIFICATION\020\336\002\022+\n&MESSAGE_TYPE_TURN_CH"
    "ANGED_NOTIFICATION\020\337\002\022%\n MESSAGE_TYPE_PL"
    "ACE_BLOCK_REQUEST\020\340\002\022&\n!MESSAGE_TYPE_PLA"
    "CE_BLOCK_RESPONSE\020\341\002\022+\n&MESSAGE_TYPE_BLO"
    "CK_PLACED_NOTIFICATION\020\342\002\022#\n\036MESSAGE_TYP"
    "E_GAME_STATE_UPDATE\020\343\002\022#\n\036MESSAGE_TYPE_S"
    "KIP_TURN_REQUEST\020\344\002\022$\n\037MESSAGE_TYPE_SKIP"
    "_TURN_RESPONSE\020\345\002\022)\n$MESSAGE_TYPE_GAME_E"
    "NDED_NOTIFICATION\020\346\002\022(\n#MESSAGE_TYPE_GET"
    "_GAME_STATE_REQUEST\020\347\002\022%\n MESSAGE_TYPE_G"
    "AME_STATE_RESPONSE\020\350\002\022#\n\036MESSAGE_TYPE_UN"
    "DO_MOVE_REQUEST\020\351\002\022$\n\037MESSAGE_TYPE_UNDO_"
    "MOVE_RESPONSE\020\352\002\022\036\n\031MESSAGE_TYPE_CHAT_ME"
    "SSAGE\020\220\003\022#\n\036MESSAGE_TYPE_CHAT_NOTIFICATI"
    "ON\020\221\003\022!\n\034MESSAGE_TYPE_WHISPER_MESSAGE\020\222\003"
    "\022 \n\033MESSAGE_TYPE_SYSTEM_MESSAGE\020\223\003\022&\n!ME"
    "SSAGE_TYPE_CHAT_HISTORY_REQUEST\020\224\003\022\'\n\"ME"
    "SSAGE_TYPE_CHAT_HISTORY_RESPONSE\020\225\003\022\037\n\032M"
    "ESSAGE_TYPE_ADMIN_COMMAND\020\302\003\022 \n\033MESSAGE_"
    "TYPE_ADMIN_RESPONSE\020\303\003\022%\n MESSAGE_TYPE_S"
    "ERVER_ANNOUNCEMENT\020\304\003\022*\n%MESSAGE_TYPE_MA"
    "INTENANCE_NOTIFICATION\020\305\003\022%\n MESSAGE_TYP"
    "E_GET_RANKING_REQUEST\020\364\003\022\"\n\035MESSAGE_TYPE"
    "_RANKING_RESPONSE\020\365\003\022 \n\033MESSAGE_TYPE_RAN"
    "KING_UPDATE\020\366\003\022%\n MESSAGE_TYPE_GAME_REPL"
    "AY_REQUEST\020\367\003\022&\n!MESSAGE_TYPE_GAME_REPLA"
    "Y_RESPONSE\020\370\003\022&\n!MESSAGE_TYPE_ACHIEVEMEN"
    "T_UNLOCKED\020\371\003\022 \n\033MESSAGE_TYPE_ERROR_RESP"
    "ONSE\020\204\007\022%\n MESSAGE_TYPE_RATE_LIMIT_EXCEE"
    "DED\020\205\007\022!\n\034MESSAGE_TYPE_SERVER_SHUTDOWN\020\206"
    "\007\022#\n\036MESSAGE_TYPE_RECONNECT_REQUEST\020\207\007\022$"
    "\n\037MESSAGE_TYPE_RECONNECT_RESPONSE\020\210\007\022\026\n\021"
    "MESSAGE_TYPE_PING\020\211\007\022\026\n\021MESSAGE_TYPE_PON"
    "G\020\212\007*b\n\017MessagePriority\022\020\n\014PRIORITY_LOW\020"
    "\000\022\023\n\017PRIORITY_NORMAL\020\001\022\021\n\rPRIORITY_HIGH\020"
    "\002\022\025\n\021PRIORITY_CRITICAL\020\003b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_message_5fwrapper_2eproto_deps[2] =
    {
        &::descriptor_table_google_2fprotobuf_2fany_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_message_5fwrapper_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_message_5fwrapper_2eproto = {
    false,
    false,
    4872,
    descriptor_table_protodef_message_5fwrapper_2eproto,
    "message_wrapper.proto",
    &descriptor_table_message_5fwrapper_2eproto_once,
    descriptor_table_message_5fwrapper_2eproto_deps,
    2,
    10,
    schemas,
    file_default_instances,
    TableStruct_message_5fwrapper_2eproto::offsets,
    file_level_enum_descriptors_message_5fwrapper_2eproto,
    file_level_service_descriptors_message_5fwrapper_2eproto,
};
namespace blokus {
const ::google::protobuf::EnumDescriptor* ConnectionStatus_Status_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_message_5fwrapper_2eproto);
  return file_level_enum_descriptors_message_5fwrapper_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t ConnectionStatus_Status_internal_data_[] = {
    262144u, 0u, };
bool ConnectionStatus_Status_IsValid(int value) {
  return 0 <= value && value <= 3;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr ConnectionStatus_Status ConnectionStatus::CONNECTED;
constexpr ConnectionStatus_Status ConnectionStatus::DISCONNECTED;
constexpr ConnectionStatus_Status ConnectionStatus::RECONNECTING;
constexpr ConnectionStatus_Status ConnectionStatus::TIMEOUT;
constexpr ConnectionStatus_Status ConnectionStatus::Status_MIN;
constexpr ConnectionStatus_Status ConnectionStatus::Status_MAX;
constexpr int ConnectionStatus::Status_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* MessageType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_message_5fwrapper_2eproto);
  return file_level_enum_descriptors_message_5fwrapper_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t MessageType_internal_data_[] = {
    65536u, 459264u, 0u, 0u, 0u, 2040u, 0u, 0u, 2097024u, 0u, 0u, 4192256u, 3758096384u, 1023u, 2064384u, 0u, 30u, 33030144u, 903u, 901u, 905u, 900u, 902u, 904u, 906u, };
bool MessageType_IsValid(int value) {
  return ::_pbi::ValidateEnum(value, MessageType_internal_data_);
}
const ::google::protobuf::EnumDescriptor* MessagePriority_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_message_5fwrapper_2eproto);
  return file_level_enum_descriptors_message_5fwrapper_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t MessagePriority_internal_data_[] = {
    262144u, 0u, };
bool MessagePriority_IsValid(int value) {
  return 0 <= value && value <= 3;
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              MessageWrapper_HeadersEntry_DoNotUse::MessageWrapper_HeadersEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              MessageWrapper_HeadersEntry_DoNotUse::MessageWrapper_HeadersEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              MessageWrapper_HeadersEntry_DoNotUse::MessageWrapper_HeadersEntry_DoNotUse() : SuperType() {}
              MessageWrapper_HeadersEntry_DoNotUse::MessageWrapper_HeadersEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* MessageWrapper_HeadersEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) MessageWrapper_HeadersEntry_DoNotUse(arena);
              }
              constexpr auto MessageWrapper_HeadersEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(MessageWrapper_HeadersEntry_DoNotUse),
                                                          alignof(MessageWrapper_HeadersEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull MessageWrapper_HeadersEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_MessageWrapper_HeadersEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &MessageWrapper_HeadersEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<MessageWrapper_HeadersEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &MessageWrapper_HeadersEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &MessageWrapper_HeadersEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(MessageWrapper_HeadersEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &MessageWrapper_HeadersEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_message_5fwrapper_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* MessageWrapper_HeadersEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 51, 2> MessageWrapper_HeadersEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MessageWrapper_HeadersEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::MessageWrapper_HeadersEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(MessageWrapper_HeadersEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(MessageWrapper_HeadersEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(MessageWrapper_HeadersEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2;
    {PROTOBUF_FIELD_OFFSET(MessageWrapper_HeadersEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\42\3\5\0\0\0\0\0"
    "blokus.MessageWrapper.HeadersEntry"
    "key"
    "value"
  }},
};

// ===================================================================

class MessageWrapper::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MessageWrapper>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MessageWrapper, _impl_._has_bits_);
};

void MessageWrapper::clear_payload() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.payload_ != nullptr) _impl_.payload_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void MessageWrapper::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
MessageWrapper::MessageWrapper(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.MessageWrapper)
}
inline PROTOBUF_NDEBUG_INLINE MessageWrapper::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::MessageWrapper& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        headers_{visibility, arena, from.headers_},
        client_version_(arena, from.client_version_),
        target_room_(arena, from.target_room_),
        target_user_(arena, from.target_user_),
        compression_type_(arena, from.compression_type_),
        trace_id_(arena, from.trace_id_) {}

MessageWrapper::MessageWrapper(
    ::google::protobuf::Arena* arena,
    const MessageWrapper& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MessageWrapper* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.payload_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Any>(
                              arena, *from._impl_.payload_)
                        : nullptr;
  _impl_.timestamp_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.timestamp_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, type_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, type_),
           offsetof(Impl_, timeout_ms_) -
               offsetof(Impl_, type_) +
               sizeof(Impl_::timeout_ms_));

  // @@protoc_insertion_point(copy_constructor:blokus.MessageWrapper)
}
inline PROTOBUF_NDEBUG_INLINE MessageWrapper::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        headers_{visibility, arena},
        client_version_(arena),
        target_room_(arena),
        target_user_(arena),
        compression_type_(arena),
        trace_id_(arena) {}

inline void MessageWrapper::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, payload_),
           0,
           offsetof(Impl_, timeout_ms_) -
               offsetof(Impl_, payload_) +
               sizeof(Impl_::timeout_ms_));
}
MessageWrapper::~MessageWrapper() {
  // @@protoc_insertion_point(destructor:blokus.MessageWrapper)
  SharedDtor(*this);
}
inline void MessageWrapper::SharedDtor(MessageLite& self) {
  MessageWrapper& this_ = static_cast<MessageWrapper&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.client_version_.Destroy();
  this_._impl_.target_room_.Destroy();
  this_._impl_.target_user_.Destroy();
  this_._impl_.compression_type_.Destroy();
  this_._impl_.trace_id_.Destroy();
  delete this_._impl_.payload_;
  delete this_._impl_.timestamp_;
  this_._impl_.~Impl_();
}

inline void* MessageWrapper::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MessageWrapper(arena);
}
constexpr auto MessageWrapper::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(MessageWrapper, _impl_.headers_) +
          decltype(MessageWrapper::_impl_.headers_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(MessageWrapper, _impl_.headers_) +
          decltype(MessageWrapper::_impl_.headers_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(MessageWrapper), alignof(MessageWrapper), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&MessageWrapper::PlacementNew_,
                                 sizeof(MessageWrapper),
                                 alignof(MessageWrapper));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MessageWrapper::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MessageWrapper_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MessageWrapper::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MessageWrapper>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MessageWrapper::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MessageWrapper>(), &MessageWrapper::ByteSizeLong,
            &MessageWrapper::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MessageWrapper, _impl_._cached_size_),
        false,
    },
    &MessageWrapper::kDescriptorMethods,
    &descriptor_table_message_5fwrapper_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MessageWrapper::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 16, 3, 113, 2> MessageWrapper::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MessageWrapper, _impl_._has_bits_),
    0, // no _extensions_
    31, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    2630234616,  // skipmap
    offsetof(decltype(_table_), field_entries),
    16,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::MessageWrapper>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .blokus.MessageType type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MessageWrapper, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(MessageWrapper, _impl_.type_)}},
    // uint32 sequence_id = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MessageWrapper, _impl_.sequence_id_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(MessageWrapper, _impl_.sequence_id_)}},
    // .google.protobuf.Any payload = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(MessageWrapper, _impl_.payload_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // .google.protobuf.Timestamp timestamp = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 1, 1, PROTOBUF_FIELD_OFFSET(MessageWrapper, _impl_.timestamp_)}},
    // string client_version = 11;
    {::_pbi::TcParser::FastUS1,
     {90, 63, 0, PROTOBUF_FIELD_OFFSET(MessageWrapper, _impl_.client_version_)}},
    // .blokus.MessagePriority priority = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MessageWrapper, _impl_.priority_), 63>(),
     {96, 63, 0, PROTOBUF_FIELD_OFFSET(MessageWrapper, _impl_.priority_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // string target_room = 15;
    {::_pbi::TcParser::FastUS1,
     {122, 63, 0, PROTOBUF_FIELD_OFFSET(MessageWrapper, _impl_.target_room_)}},
    // string target_user = 16;
    {::_pbi::TcParser::FastUS2,
     {386, 63, 0, PROTOBUF_FIELD_OFFSET(MessageWrapper, _impl_.target_user_)}},
    // bool broadcast = 17;
    {::_pbi::TcParser::FastV8S2,
     {392, 63, 0, PROTOBUF_FIELD_OFFSET(MessageWrapper, _impl_.broadcast_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // bool requires_ack = 20;
    {::_pbi::TcParser::FastV8S2,
     {416, 63, 0, PROTOBUF_FIELD_OFFSET(MessageWrapper, _impl_.requires_ack_)}},
    // uint32 retry_count = 21;
    {::_pbi::TcParser::FastV32S2,
     {424, 63, 0, PROTOBUF_FIELD_OFFSET(MessageWrapper, _impl_.retry_count_)}},
    // uint32 timeout_ms = 22;
    {::_pbi::TcParser::FastV32S2,
     {432, 63, 0, PROTOBUF_FIELD_OFFSET(MessageWrapper, _impl_.timeout_ms_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // bool compressed = 25;
    {::_pbi::TcParser::FastV8S2,
     {456, 63, 0, PROTOBUF_FIELD_OFFSET(MessageWrapper, _impl_.compressed_)}},
    // string compression_type = 26;
    {::_pbi::TcParser::FastUS2,
     {466, 63, 0, PROTOBUF_FIELD_OFFSET(MessageWrapper, _impl_.compression_type_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // string trace_id = 30;
    {::_pbi::TcParser::FastUS2,
     {498, 63, 0, PROTOBUF_FIELD_OFFSET(MessageWrapper, _impl_.trace_id_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .blokus.MessageType type = 1;
    {PROTOBUF_FIELD_OFFSET(MessageWrapper, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // uint32 sequence_id = 2;
    {PROTOBUF_FIELD_OFFSET(MessageWrapper, _impl_.sequence_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // .google.protobuf.Any payload = 3;
    {PROTOBUF_FIELD_OFFSET(MessageWrapper, _impl_.payload_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp timestamp = 10;
    {PROTOBUF_FIELD_OFFSET(MessageWrapper, _impl_.timestamp_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string client_version = 11;
    {PROTOBUF_FIELD_OFFSET(MessageWrapper, _impl_.client_version_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .blokus.MessagePriority priority = 12;
    {PROTOBUF_FIELD_OFFSET(MessageWrapper, _impl_.priority_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string target_room = 15;
    {PROTOBUF_FIELD_OFFSET(MessageWrapper, _impl_.target_room_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string target_user = 16;
    {PROTOBUF_FIELD_OFFSET(MessageWrapper, _impl_.target_user_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool broadcast = 17;
    {PROTOBUF_FIELD_OFFSET(MessageWrapper, _impl_.broadcast_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool requires_ack = 20;
    {PROTOBUF_FIELD_OFFSET(MessageWrapper, _impl_.requires_ack_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // uint32 retry_count = 21;
    {PROTOBUF_FIELD_OFFSET(MessageWrapper, _impl_.retry_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 timeout_ms = 22;
    {PROTOBUF_FIELD_OFFSET(MessageWrapper, _impl_.timeout_ms_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // bool compressed = 25;
    {PROTOBUF_FIELD_OFFSET(MessageWrapper, _impl_.compressed_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string compression_type = 26;
    {PROTOBUF_FIELD_OFFSET(MessageWrapper, _impl_.compression_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string trace_id = 30;
    {PROTOBUF_FIELD_OFFSET(MessageWrapper, _impl_.trace_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // map<string, string> headers = 31;
    {PROTOBUF_FIELD_OFFSET(MessageWrapper, _impl_.headers_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Any>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(MessageWrapper()._impl_.headers_)>(
        1, 0, 0, 9,
        9)},
  }}, {{
    "\25\0\0\0\0\16\0\13\13\0\0\0\0\0\20\10\7\0\0\0\0\0\0\0"
    "blokus.MessageWrapper"
    "client_version"
    "target_room"
    "target_user"
    "compression_type"
    "trace_id"
    "headers"
  }},
};

PROTOBUF_NOINLINE void MessageWrapper::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.MessageWrapper)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.headers_.Clear();
  _impl_.client_version_.ClearToEmpty();
  _impl_.target_room_.ClearToEmpty();
  _impl_.target_user_.ClearToEmpty();
  _impl_.compression_type_.ClearToEmpty();
  _impl_.trace_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.payload_ != nullptr);
      _impl_.payload_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.timestamp_ != nullptr);
      _impl_.timestamp_->Clear();
    }
  }
  ::memset(&_impl_.type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.timeout_ms_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.timeout_ms_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MessageWrapper::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MessageWrapper& this_ = static_cast<const MessageWrapper&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MessageWrapper::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MessageWrapper& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.MessageWrapper)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .blokus.MessageType type = 1;
          if (this_._internal_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_type(), target);
          }

          // uint32 sequence_id = 2;
          if (this_._internal_sequence_id() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_sequence_id(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Any payload = 3;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.payload_, this_._impl_.payload_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp timestamp = 10;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                10, *this_._impl_.timestamp_, this_._impl_.timestamp_->GetCachedSize(), target,
                stream);
          }

          // string client_version = 11;
          if (!this_._internal_client_version().empty()) {
            const std::string& _s = this_._internal_client_version();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.MessageWrapper.client_version");
            target = stream->WriteStringMaybeAliased(11, _s, target);
          }

          // .blokus.MessagePriority priority = 12;
          if (this_._internal_priority() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                12, this_._internal_priority(), target);
          }

          // string target_room = 15;
          if (!this_._internal_target_room().empty()) {
            const std::string& _s = this_._internal_target_room();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.MessageWrapper.target_room");
            target = stream->WriteStringMaybeAliased(15, _s, target);
          }

          // string target_user = 16;
          if (!this_._internal_target_user().empty()) {
            const std::string& _s = this_._internal_target_user();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.MessageWrapper.target_user");
            target = stream->WriteStringMaybeAliased(16, _s, target);
          }

          // bool broadcast = 17;
          if (this_._internal_broadcast() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                17, this_._internal_broadcast(), target);
          }

          // bool requires_ack = 20;
          if (this_._internal_requires_ack() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                20, this_._internal_requires_ack(), target);
          }

          // uint32 retry_count = 21;
          if (this_._internal_retry_count() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                21, this_._internal_retry_count(), target);
          }

          // uint32 timeout_ms = 22;
          if (this_._internal_timeout_ms() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                22, this_._internal_timeout_ms(), target);
          }

          // bool compressed = 25;
          if (this_._internal_compressed() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                25, this_._internal_compressed(), target);
          }

          // string compression_type = 26;
          if (!this_._internal_compression_type().empty()) {
            const std::string& _s = this_._internal_compression_type();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.MessageWrapper.compression_type");
            target = stream->WriteStringMaybeAliased(26, _s, target);
          }

          // string trace_id = 30;
          if (!this_._internal_trace_id().empty()) {
            const std::string& _s = this_._internal_trace_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.MessageWrapper.trace_id");
            target = stream->WriteStringMaybeAliased(30, _s, target);
          }

          // map<string, string> headers = 31;
          if (!this_._internal_headers().empty()) {
            using MapType = ::google::protobuf::Map<std::string, std::string>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_STRING>;
            const auto& field = this_._internal_headers();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    31, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.MessageWrapper.headers");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.MessageWrapper.headers");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    31, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.MessageWrapper.headers");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.MessageWrapper.headers");
              }
            }
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.MessageWrapper)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MessageWrapper::ByteSizeLong(const MessageLite& base) {
          const MessageWrapper& this_ = static_cast<const MessageWrapper&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MessageWrapper::ByteSizeLong() const {
          const MessageWrapper& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.MessageWrapper)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // map<string, string> headers = 31;
            {
              total_size +=
                  2 * ::google::protobuf::internal::FromIntSize(this_._internal_headers_size());
              for (const auto& entry : this_._internal_headers()) {
                total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
              }
            }
          }
           {
            // string client_version = 11;
            if (!this_._internal_client_version().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_client_version());
            }
            // string target_room = 15;
            if (!this_._internal_target_room().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_target_room());
            }
            // string target_user = 16;
            if (!this_._internal_target_user().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_target_user());
            }
            // string compression_type = 26;
            if (!this_._internal_compression_type().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_compression_type());
            }
            // string trace_id = 30;
            if (!this_._internal_trace_id().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_trace_id());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .google.protobuf.Any payload = 3;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.payload_);
            }
            // .google.protobuf.Timestamp timestamp = 10;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.timestamp_);
            }
          }
           {
            // .blokus.MessageType type = 1;
            if (this_._internal_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
            }
            // uint32 sequence_id = 2;
            if (this_._internal_sequence_id() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_sequence_id());
            }
            // .blokus.MessagePriority priority = 12;
            if (this_._internal_priority() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_priority());
            }
            // bool broadcast = 17;
            if (this_._internal_broadcast() != 0) {
              total_size += 3;
            }
            // bool requires_ack = 20;
            if (this_._internal_requires_ack() != 0) {
              total_size += 3;
            }
            // bool compressed = 25;
            if (this_._internal_compressed() != 0) {
              total_size += 3;
            }
            // uint32 retry_count = 21;
            if (this_._internal_retry_count() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal_retry_count());
            }
            // uint32 timeout_ms = 22;
            if (this_._internal_timeout_ms() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal_timeout_ms());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MessageWrapper::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MessageWrapper*>(&to_msg);
  auto& from = static_cast<const MessageWrapper&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.MessageWrapper)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.headers_.MergeFrom(from._impl_.headers_);
  if (!from._internal_client_version().empty()) {
    _this->_internal_set_client_version(from._internal_client_version());
  }
  if (!from._internal_target_room().empty()) {
    _this->_internal_set_target_room(from._internal_target_room());
  }
  if (!from._internal_target_user().empty()) {
    _this->_internal_set_target_user(from._internal_target_user());
  }
  if (!from._internal_compression_type().empty()) {
    _this->_internal_set_compression_type(from._internal_compression_type());
  }
  if (!from._internal_trace_id().empty()) {
    _this->_internal_set_trace_id(from._internal_trace_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.payload_ != nullptr);
      if (_this->_impl_.payload_ == nullptr) {
        _this->_impl_.payload_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Any>(arena, *from._impl_.payload_);
      } else {
        _this->_impl_.payload_->MergeFrom(*from._impl_.payload_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.timestamp_ != nullptr);
      if (_this->_impl_.timestamp_ == nullptr) {
        _this->_impl_.timestamp_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.timestamp_);
      } else {
        _this->_impl_.timestamp_->MergeFrom(*from._impl_.timestamp_);
      }
    }
  }
  if (from._internal_type() != 0) {
    _this->_impl_.type_ = from._impl_.type_;
  }
  if (from._internal_sequence_id() != 0) {
    _this->_impl_.sequence_id_ = from._impl_.sequence_id_;
  }
  if (from._internal_priority() != 0) {
    _this->_impl_.priority_ = from._impl_.priority_;
  }
  if (from._internal_broadcast() != 0) {
    _this->_impl_.broadcast_ = from._impl_.broadcast_;
  }
  if (from._internal_requires_ack() != 0) {
    _this->_impl_.requires_ack_ = from._impl_.requires_ack_;
  }
  if (from._internal_compressed() != 0) {
    _this->_impl_.compressed_ = from._impl_.compressed_;
  }
  if (from._internal_retry_count() != 0) {
    _this->_impl_.retry_count_ = from._impl_.retry_count_;
  }
  if (from._internal_timeout_ms() != 0) {
    _this->_impl_.timeout_ms_ = from._impl_.timeout_ms_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MessageWrapper::CopyFrom(const MessageWrapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.MessageWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MessageWrapper::InternalSwap(MessageWrapper* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.headers_.InternalSwap(&other->_impl_.headers_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.client_version_, &other->_impl_.client_version_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.target_room_, &other->_impl_.target_room_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.target_user_, &other->_impl_.target_user_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.compression_type_, &other->_impl_.compression_type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.trace_id_, &other->_impl_.trace_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageWrapper, _impl_.timeout_ms_)
      + sizeof(MessageWrapper::_impl_.timeout_ms_)
      - PROTOBUF_FIELD_OFFSET(MessageWrapper, _impl_.payload_)>(
          reinterpret_cast<char*>(&_impl_.payload_),
          reinterpret_cast<char*>(&other->_impl_.payload_));
}

::google::protobuf::Metadata MessageWrapper::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MessageAck::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MessageAck>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MessageAck, _impl_._has_bits_);
};

void MessageAck::clear_received_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.received_at_ != nullptr) _impl_.received_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MessageAck::MessageAck(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.MessageAck)
}
inline PROTOBUF_NDEBUG_INLINE MessageAck::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::MessageAck& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        error_message_(arena, from.error_message_) {}

MessageAck::MessageAck(
    ::google::protobuf::Arena* arena,
    const MessageAck& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MessageAck* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.received_at_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.received_at_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, sequence_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, sequence_id_),
           offsetof(Impl_, success_) -
               offsetof(Impl_, sequence_id_) +
               sizeof(Impl_::success_));

  // @@protoc_insertion_point(copy_constructor:blokus.MessageAck)
}
inline PROTOBUF_NDEBUG_INLINE MessageAck::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        error_message_(arena) {}

inline void MessageAck::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, received_at_),
           0,
           offsetof(Impl_, success_) -
               offsetof(Impl_, received_at_) +
               sizeof(Impl_::success_));
}
MessageAck::~MessageAck() {
  // @@protoc_insertion_point(destructor:blokus.MessageAck)
  SharedDtor(*this);
}
inline void MessageAck::SharedDtor(MessageLite& self) {
  MessageAck& this_ = static_cast<MessageAck&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.error_message_.Destroy();
  delete this_._impl_.received_at_;
  this_._impl_.~Impl_();
}

inline void* MessageAck::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MessageAck(arena);
}
constexpr auto MessageAck::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(MessageAck),
                                            alignof(MessageAck));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MessageAck::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MessageAck_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MessageAck::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MessageAck>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MessageAck::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MessageAck>(), &MessageAck::ByteSizeLong,
            &MessageAck::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MessageAck, _impl_._cached_size_),
        false,
    },
    &MessageAck::kDescriptorMethods,
    &descriptor_table_message_5fwrapper_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MessageAck::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 39, 2> MessageAck::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MessageAck, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::MessageAck>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .google.protobuf.Timestamp received_at = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(MessageAck, _impl_.received_at_)}},
    // uint32 sequence_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MessageAck, _impl_.sequence_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(MessageAck, _impl_.sequence_id_)}},
    // bool success = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(MessageAck, _impl_.success_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(MessageAck, _impl_.success_)}},
    // string error_message = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(MessageAck, _impl_.error_message_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 sequence_id = 1;
    {PROTOBUF_FIELD_OFFSET(MessageAck, _impl_.sequence_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // bool success = 2;
    {PROTOBUF_FIELD_OFFSET(MessageAck, _impl_.success_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string error_message = 3;
    {PROTOBUF_FIELD_OFFSET(MessageAck, _impl_.error_message_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp received_at = 4;
    {PROTOBUF_FIELD_OFFSET(MessageAck, _impl_.received_at_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\21\0\0\15\0\0\0\0"
    "blokus.MessageAck"
    "error_message"
  }},
};

PROTOBUF_NOINLINE void MessageAck::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.MessageAck)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_message_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.received_at_ != nullptr);
    _impl_.received_at_->Clear();
  }
  ::memset(&_impl_.sequence_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.success_) -
      reinterpret_cast<char*>(&_impl_.sequence_id_)) + sizeof(_impl_.success_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MessageAck::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MessageAck& this_ = static_cast<const MessageAck&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MessageAck::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MessageAck& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.MessageAck)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // uint32 sequence_id = 1;
          if (this_._internal_sequence_id() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                1, this_._internal_sequence_id(), target);
          }

          // bool success = 2;
          if (this_._internal_success() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                2, this_._internal_success(), target);
          }

          // string error_message = 3;
          if (!this_._internal_error_message().empty()) {
            const std::string& _s = this_._internal_error_message();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.MessageAck.error_message");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp received_at = 4;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.received_at_, this_._impl_.received_at_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.MessageAck)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MessageAck::ByteSizeLong(const MessageLite& base) {
          const MessageAck& this_ = static_cast<const MessageAck&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MessageAck::ByteSizeLong() const {
          const MessageAck& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.MessageAck)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string error_message = 3;
            if (!this_._internal_error_message().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_error_message());
            }
          }
           {
            // .google.protobuf.Timestamp received_at = 4;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.received_at_);
            }
          }
           {
            // uint32 sequence_id = 1;
            if (this_._internal_sequence_id() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_sequence_id());
            }
            // bool success = 2;
            if (this_._internal_success() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MessageAck::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MessageAck*>(&to_msg);
  auto& from = static_cast<const MessageAck&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.MessageAck)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.received_at_ != nullptr);
    if (_this->_impl_.received_at_ == nullptr) {
      _this->_impl_.received_at_ =
          ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.received_at_);
    } else {
      _this->_impl_.received_at_->MergeFrom(*from._impl_.received_at_);
    }
  }
  if (from._internal_sequence_id() != 0) {
    _this->_impl_.sequence_id_ = from._impl_.sequence_id_;
  }
  if (from._internal_success() != 0) {
    _this->_impl_.success_ = from._impl_.success_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MessageAck::CopyFrom(const MessageAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.MessageAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MessageAck::InternalSwap(MessageAck* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_message_, &other->_impl_.error_message_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageAck, _impl_.success_)
      + sizeof(MessageAck::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(MessageAck, _impl_.received_at_)>(
          reinterpret_cast<char*>(&_impl_.received_at_),
          reinterpret_cast<char*>(&other->_impl_.received_at_));
}

::google::protobuf::Metadata MessageAck::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class BatchMessage::_Internal {
 public:
  using HasBits =
      decltype(std::declval<BatchMessage>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(BatchMessage, _impl_._has_bits_);
};

void BatchMessage::clear_created_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.created_at_ != nullptr) _impl_.created_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
BatchMessage::BatchMessage(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.BatchMessage)
}
inline PROTOBUF_NDEBUG_INLINE BatchMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::BatchMessage& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        messages_{visibility, arena, from.messages_} {}

BatchMessage::BatchMessage(
    ::google::protobuf::Arena* arena,
    const BatchMessage& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  BatchMessage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.created_at_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.created_at_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, batch_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, batch_id_),
           offsetof(Impl_, ordered_) -
               offsetof(Impl_, batch_id_) +
               sizeof(Impl_::ordered_));

  // @@protoc_insertion_point(copy_constructor:blokus.BatchMessage)
}
inline PROTOBUF_NDEBUG_INLINE BatchMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        messages_{visibility, arena} {}

inline void BatchMessage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, created_at_),
           0,
           offsetof(Impl_, ordered_) -
               offsetof(Impl_, created_at_) +
               sizeof(Impl_::ordered_));
}
BatchMessage::~BatchMessage() {
  // @@protoc_insertion_point(destructor:blokus.BatchMessage)
  SharedDtor(*this);
}
inline void BatchMessage::SharedDtor(MessageLite& self) {
  BatchMessage& this_ = static_cast<BatchMessage&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.created_at_;
  this_._impl_.~Impl_();
}

inline void* BatchMessage::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) BatchMessage(arena);
}
constexpr auto BatchMessage::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(BatchMessage, _impl_.messages_) +
          decltype(BatchMessage::_impl_.messages_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(BatchMessage), alignof(BatchMessage), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&BatchMessage::PlacementNew_,
                                 sizeof(BatchMessage),
                                 alignof(BatchMessage));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull BatchMessage::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_BatchMessage_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &BatchMessage::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<BatchMessage>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &BatchMessage::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<BatchMessage>(), &BatchMessage::ByteSizeLong,
            &BatchMessage::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(BatchMessage, _impl_._cached_size_),
        false,
    },
    &BatchMessage::kDescriptorMethods,
    &descriptor_table_message_5fwrapper_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* BatchMessage::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 2, 0, 2> BatchMessage::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(BatchMessage, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::BatchMessage>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bool ordered = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(BatchMessage, _impl_.ordered_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(BatchMessage, _impl_.ordered_)}},
    // repeated .blokus.MessageWrapper messages = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(BatchMessage, _impl_.messages_)}},
    // uint32 batch_id = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BatchMessage, _impl_.batch_id_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(BatchMessage, _impl_.batch_id_)}},
    // .google.protobuf.Timestamp created_at = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 1, PROTOBUF_FIELD_OFFSET(BatchMessage, _impl_.created_at_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .blokus.MessageWrapper messages = 1;
    {PROTOBUF_FIELD_OFFSET(BatchMessage, _impl_.messages_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint32 batch_id = 2;
    {PROTOBUF_FIELD_OFFSET(BatchMessage, _impl_.batch_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // .google.protobuf.Timestamp created_at = 3;
    {PROTOBUF_FIELD_OFFSET(BatchMessage, _impl_.created_at_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool ordered = 4;
    {PROTOBUF_FIELD_OFFSET(BatchMessage, _impl_.ordered_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::blokus::MessageWrapper>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void BatchMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.BatchMessage)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.messages_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.created_at_ != nullptr);
    _impl_.created_at_->Clear();
  }
  ::memset(&_impl_.batch_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.ordered_) -
      reinterpret_cast<char*>(&_impl_.batch_id_)) + sizeof(_impl_.ordered_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* BatchMessage::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const BatchMessage& this_ = static_cast<const BatchMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* BatchMessage::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const BatchMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.BatchMessage)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .blokus.MessageWrapper messages = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_messages_size());
               i < n; i++) {
            const auto& repfield = this_._internal_messages().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // uint32 batch_id = 2;
          if (this_._internal_batch_id() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_batch_id(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp created_at = 3;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.created_at_, this_._impl_.created_at_->GetCachedSize(), target,
                stream);
          }

          // bool ordered = 4;
          if (this_._internal_ordered() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                4, this_._internal_ordered(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.BatchMessage)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t BatchMessage::ByteSizeLong(const MessageLite& base) {
          const BatchMessage& this_ = static_cast<const BatchMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t BatchMessage::ByteSizeLong() const {
          const BatchMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.BatchMessage)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .blokus.MessageWrapper messages = 1;
            {
              total_size += 1UL * this_._internal_messages_size();
              for (const auto& msg : this_._internal_messages()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // .google.protobuf.Timestamp created_at = 3;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.created_at_);
            }
          }
           {
            // uint32 batch_id = 2;
            if (this_._internal_batch_id() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_batch_id());
            }
            // bool ordered = 4;
            if (this_._internal_ordered() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void BatchMessage::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<BatchMessage*>(&to_msg);
  auto& from = static_cast<const BatchMessage&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.BatchMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_messages()->MergeFrom(
      from._internal_messages());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.created_at_ != nullptr);
    if (_this->_impl_.created_at_ == nullptr) {
      _this->_impl_.created_at_ =
          ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.created_at_);
    } else {
      _this->_impl_.created_at_->MergeFrom(*from._impl_.created_at_);
    }
  }
  if (from._internal_batch_id() != 0) {
    _this->_impl_.batch_id_ = from._impl_.batch_id_;
  }
  if (from._internal_ordered() != 0) {
    _this->_impl_.ordered_ = from._impl_.ordered_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BatchMessage::CopyFrom(const BatchMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.BatchMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void BatchMessage::InternalSwap(BatchMessage* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.messages_.InternalSwap(&other->_impl_.messages_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BatchMessage, _impl_.ordered_)
      + sizeof(BatchMessage::_impl_.ordered_)
      - PROTOBUF_FIELD_OFFSET(BatchMessage, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::google::protobuf::Metadata BatchMessage::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class KeepAlive::_Internal {
 public:
  using HasBits =
      decltype(std::declval<KeepAlive>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(KeepAlive, _impl_._has_bits_);
};

void KeepAlive::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
KeepAlive::KeepAlive(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.KeepAlive)
}
inline PROTOBUF_NDEBUG_INLINE KeepAlive::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::KeepAlive& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

KeepAlive::KeepAlive(
    ::google::protobuf::Arena* arena,
    const KeepAlive& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  KeepAlive* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.timestamp_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.timestamp_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, client_fps_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, client_fps_),
           offsetof(Impl_, memory_usage_mb_) -
               offsetof(Impl_, client_fps_) +
               sizeof(Impl_::memory_usage_mb_));

  // @@protoc_insertion_point(copy_constructor:blokus.KeepAlive)
}
inline PROTOBUF_NDEBUG_INLINE KeepAlive::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void KeepAlive::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_),
           0,
           offsetof(Impl_, memory_usage_mb_) -
               offsetof(Impl_, timestamp_) +
               sizeof(Impl_::memory_usage_mb_));
}
KeepAlive::~KeepAlive() {
  // @@protoc_insertion_point(destructor:blokus.KeepAlive)
  SharedDtor(*this);
}
inline void KeepAlive::SharedDtor(MessageLite& self) {
  KeepAlive& this_ = static_cast<KeepAlive&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.timestamp_;
  this_._impl_.~Impl_();
}

inline void* KeepAlive::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) KeepAlive(arena);
}
constexpr auto KeepAlive::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(KeepAlive),
                                            alignof(KeepAlive));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull KeepAlive::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_KeepAlive_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &KeepAlive::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<KeepAlive>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &KeepAlive::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<KeepAlive>(), &KeepAlive::ByteSizeLong,
            &KeepAlive::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(KeepAlive, _impl_._cached_size_),
        false,
    },
    &KeepAlive::kDescriptorMethods,
    &descriptor_table_message_5fwrapper_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* KeepAlive::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 0, 2> KeepAlive::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(KeepAlive, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::KeepAlive>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // uint32 memory_usage_mb = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(KeepAlive, _impl_.memory_usage_mb_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(KeepAlive, _impl_.memory_usage_mb_)}},
    // .google.protobuf.Timestamp timestamp = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(KeepAlive, _impl_.timestamp_)}},
    // uint32 client_fps = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(KeepAlive, _impl_.client_fps_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(KeepAlive, _impl_.client_fps_)}},
    // float network_latency_ms = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(KeepAlive, _impl_.network_latency_ms_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .google.protobuf.Timestamp timestamp = 1;
    {PROTOBUF_FIELD_OFFSET(KeepAlive, _impl_.timestamp_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint32 client_fps = 2;
    {PROTOBUF_FIELD_OFFSET(KeepAlive, _impl_.client_fps_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // float network_latency_ms = 3;
    {PROTOBUF_FIELD_OFFSET(KeepAlive, _impl_.network_latency_ms_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // uint32 memory_usage_mb = 4;
    {PROTOBUF_FIELD_OFFSET(KeepAlive, _impl_.memory_usage_mb_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void KeepAlive::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.KeepAlive)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.timestamp_ != nullptr);
    _impl_.timestamp_->Clear();
  }
  ::memset(&_impl_.client_fps_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.memory_usage_mb_) -
      reinterpret_cast<char*>(&_impl_.client_fps_)) + sizeof(_impl_.memory_usage_mb_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* KeepAlive::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const KeepAlive& this_ = static_cast<const KeepAlive&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* KeepAlive::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const KeepAlive& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.KeepAlive)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp timestamp = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.timestamp_, this_._impl_.timestamp_->GetCachedSize(), target,
                stream);
          }

          // uint32 client_fps = 2;
          if (this_._internal_client_fps() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_client_fps(), target);
          }

          // float network_latency_ms = 3;
          if (::absl::bit_cast<::uint32_t>(this_._internal_network_latency_ms()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_network_latency_ms(), target);
          }

          // uint32 memory_usage_mb = 4;
          if (this_._internal_memory_usage_mb() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                4, this_._internal_memory_usage_mb(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.KeepAlive)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t KeepAlive::ByteSizeLong(const MessageLite& base) {
          const KeepAlive& this_ = static_cast<const KeepAlive&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t KeepAlive::ByteSizeLong() const {
          const KeepAlive& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.KeepAlive)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .google.protobuf.Timestamp timestamp = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.timestamp_);
            }
          }
           {
            // uint32 client_fps = 2;
            if (this_._internal_client_fps() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_client_fps());
            }
            // float network_latency_ms = 3;
            if (::absl::bit_cast<::uint32_t>(this_._internal_network_latency_ms()) != 0) {
              total_size += 5;
            }
            // uint32 memory_usage_mb = 4;
            if (this_._internal_memory_usage_mb() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_memory_usage_mb());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void KeepAlive::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<KeepAlive*>(&to_msg);
  auto& from = static_cast<const KeepAlive&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.KeepAlive)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.timestamp_ != nullptr);
    if (_this->_impl_.timestamp_ == nullptr) {
      _this->_impl_.timestamp_ =
          ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.timestamp_);
    } else {
      _this->_impl_.timestamp_->MergeFrom(*from._impl_.timestamp_);
    }
  }
  if (from._internal_client_fps() != 0) {
    _this->_impl_.client_fps_ = from._impl_.client_fps_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_network_latency_ms()) != 0) {
    _this->_impl_.network_latency_ms_ = from._impl_.network_latency_ms_;
  }
  if (from._internal_memory_usage_mb() != 0) {
    _this->_impl_.memory_usage_mb_ = from._impl_.memory_usage_mb_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void KeepAlive::CopyFrom(const KeepAlive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.KeepAlive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void KeepAlive::InternalSwap(KeepAlive* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KeepAlive, _impl_.memory_usage_mb_)
      + sizeof(KeepAlive::_impl_.memory_usage_mb_)
      - PROTOBUF_FIELD_OFFSET(KeepAlive, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::google::protobuf::Metadata KeepAlive::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ConnectionStatus::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ConnectionStatus>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ConnectionStatus, _impl_._has_bits_);
};

void ConnectionStatus::clear_last_activity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.last_activity_ != nullptr) _impl_.last_activity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ConnectionStatus::ConnectionStatus(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.ConnectionStatus)
}
inline PROTOBUF_NDEBUG_INLINE ConnectionStatus::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::ConnectionStatus& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        reason_(arena, from.reason_) {}

ConnectionStatus::ConnectionStatus(
    ::google::protobuf::Arena* arena,
    const ConnectionStatus& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ConnectionStatus* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.last_activity_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.last_activity_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, status_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, status_),
           offsetof(Impl_, missed_heartbeats_) -
               offsetof(Impl_, status_) +
               sizeof(Impl_::missed_heartbeats_));

  // @@protoc_insertion_point(copy_constructor:blokus.ConnectionStatus)
}
inline PROTOBUF_NDEBUG_INLINE ConnectionStatus::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        reason_(arena) {}

inline void ConnectionStatus::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, last_activity_),
           0,
           offsetof(Impl_, missed_heartbeats_) -
               offsetof(Impl_, last_activity_) +
               sizeof(Impl_::missed_heartbeats_));
}
ConnectionStatus::~ConnectionStatus() {
  // @@protoc_insertion_point(destructor:blokus.ConnectionStatus)
  SharedDtor(*this);
}
inline void ConnectionStatus::SharedDtor(MessageLite& self) {
  ConnectionStatus& this_ = static_cast<ConnectionStatus&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.reason_.Destroy();
  delete this_._impl_.last_activity_;
  this_._impl_.~Impl_();
}

inline void* ConnectionStatus::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ConnectionStatus(arena);
}
constexpr auto ConnectionStatus::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ConnectionStatus),
                                            alignof(ConnectionStatus));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ConnectionStatus::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ConnectionStatus_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ConnectionStatus::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ConnectionStatus>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ConnectionStatus::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ConnectionStatus>(), &ConnectionStatus::ByteSizeLong,
            &ConnectionStatus::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ConnectionStatus, _impl_._cached_size_),
        false,
    },
    &ConnectionStatus::kDescriptorMethods,
    &descriptor_table_message_5fwrapper_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ConnectionStatus::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 38, 2> ConnectionStatus::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ConnectionStatus, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::ConnectionStatus>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // uint32 missed_heartbeats = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ConnectionStatus, _impl_.missed_heartbeats_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(ConnectionStatus, _impl_.missed_heartbeats_)}},
    // .blokus.ConnectionStatus.Status status = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ConnectionStatus, _impl_.status_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ConnectionStatus, _impl_.status_)}},
    // string reason = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ConnectionStatus, _impl_.reason_)}},
    // .google.protobuf.Timestamp last_activity = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(ConnectionStatus, _impl_.last_activity_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .blokus.ConnectionStatus.Status status = 1;
    {PROTOBUF_FIELD_OFFSET(ConnectionStatus, _impl_.status_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string reason = 2;
    {PROTOBUF_FIELD_OFFSET(ConnectionStatus, _impl_.reason_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp last_activity = 3;
    {PROTOBUF_FIELD_OFFSET(ConnectionStatus, _impl_.last_activity_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint32 missed_heartbeats = 4;
    {PROTOBUF_FIELD_OFFSET(ConnectionStatus, _impl_.missed_heartbeats_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\27\0\6\0\0\0\0\0"
    "blokus.ConnectionStatus"
    "reason"
  }},
};

PROTOBUF_NOINLINE void ConnectionStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.ConnectionStatus)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.reason_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.last_activity_ != nullptr);
    _impl_.last_activity_->Clear();
  }
  ::memset(&_impl_.status_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.missed_heartbeats_) -
      reinterpret_cast<char*>(&_impl_.status_)) + sizeof(_impl_.missed_heartbeats_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ConnectionStatus::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ConnectionStatus& this_ = static_cast<const ConnectionStatus&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ConnectionStatus::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ConnectionStatus& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.ConnectionStatus)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .blokus.ConnectionStatus.Status status = 1;
          if (this_._internal_status() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_status(), target);
          }

          // string reason = 2;
          if (!this_._internal_reason().empty()) {
            const std::string& _s = this_._internal_reason();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ConnectionStatus.reason");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp last_activity = 3;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.last_activity_, this_._impl_.last_activity_->GetCachedSize(), target,
                stream);
          }

          // uint32 missed_heartbeats = 4;
          if (this_._internal_missed_heartbeats() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                4, this_._internal_missed_heartbeats(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.ConnectionStatus)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ConnectionStatus::ByteSizeLong(const MessageLite& base) {
          const ConnectionStatus& this_ = static_cast<const ConnectionStatus&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ConnectionStatus::ByteSizeLong() const {
          const ConnectionStatus& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.ConnectionStatus)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string reason = 2;
            if (!this_._internal_reason().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_reason());
            }
          }
           {
            // .google.protobuf.Timestamp last_activity = 3;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.last_activity_);
            }
          }
           {
            // .blokus.ConnectionStatus.Status status = 1;
            if (this_._internal_status() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_status());
            }
            // uint32 missed_heartbeats = 4;
            if (this_._internal_missed_heartbeats() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_missed_heartbeats());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ConnectionStatus::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ConnectionStatus*>(&to_msg);
  auto& from = static_cast<const ConnectionStatus&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.ConnectionStatus)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_reason().empty()) {
    _this->_internal_set_reason(from._internal_reason());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.last_activity_ != nullptr);
    if (_this->_impl_.last_activity_ == nullptr) {
      _this->_impl_.last_activity_ =
          ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.last_activity_);
    } else {
      _this->_impl_.last_activity_->MergeFrom(*from._impl_.last_activity_);
    }
  }
  if (from._internal_status() != 0) {
    _this->_impl_.status_ = from._impl_.status_;
  }
  if (from._internal_missed_heartbeats() != 0) {
    _this->_impl_.missed_heartbeats_ = from._impl_.missed_heartbeats_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ConnectionStatus::CopyFrom(const ConnectionStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.ConnectionStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ConnectionStatus::InternalSwap(ConnectionStatus* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.reason_, &other->_impl_.reason_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConnectionStatus, _impl_.missed_heartbeats_)
      + sizeof(ConnectionStatus::_impl_.missed_heartbeats_)
      - PROTOBUF_FIELD_OFFSET(ConnectionStatus, _impl_.last_activity_)>(
          reinterpret_cast<char*>(&_impl_.last_activity_),
          reinterpret_cast<char*>(&other->_impl_.last_activity_));
}

::google::protobuf::Metadata ConnectionStatus::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SessionInfo::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SessionInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SessionInfo, _impl_._has_bits_);
};

void SessionInfo::clear_created_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.created_at_ != nullptr) _impl_.created_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void SessionInfo::clear_last_activity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.last_activity_ != nullptr) _impl_.last_activity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
SessionInfo::SessionInfo(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.SessionInfo)
}
inline PROTOBUF_NDEBUG_INLINE SessionInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::SessionInfo& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        session_token_(arena, from.session_token_),
        username_(arena, from.username_) {}

SessionInfo::SessionInfo(
    ::google::protobuf::Arena* arena,
    const SessionInfo& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SessionInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.created_at_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.created_at_)
                        : nullptr;
  _impl_.last_activity_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.last_activity_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, current_room_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, current_room_id_),
           offsetof(Impl_, last_message_sequence_) -
               offsetof(Impl_, current_room_id_) +
               sizeof(Impl_::last_message_sequence_));

  // @@protoc_insertion_point(copy_constructor:blokus.SessionInfo)
}
inline PROTOBUF_NDEBUG_INLINE SessionInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        session_token_(arena),
        username_(arena) {}

inline void SessionInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, created_at_),
           0,
           offsetof(Impl_, last_message_sequence_) -
               offsetof(Impl_, created_at_) +
               sizeof(Impl_::last_message_sequence_));
}
SessionInfo::~SessionInfo() {
  // @@protoc_insertion_point(destructor:blokus.SessionInfo)
  SharedDtor(*this);
}
inline void SessionInfo::SharedDtor(MessageLite& self) {
  SessionInfo& this_ = static_cast<SessionInfo&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.session_token_.Destroy();
  this_._impl_.username_.Destroy();
  delete this_._impl_.created_at_;
  delete this_._impl_.last_activity_;
  this_._impl_.~Impl_();
}

inline void* SessionInfo::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SessionInfo(arena);
}
constexpr auto SessionInfo::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(SessionInfo),
                                            alignof(SessionInfo));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SessionInfo::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SessionInfo_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SessionInfo::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SessionInfo>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SessionInfo::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SessionInfo>(), &SessionInfo::ByteSizeLong,
            &SessionInfo::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SessionInfo, _impl_._cached_size_),
        false,
    },
    &SessionInfo::kDescriptorMethods,
    &descriptor_table_message_5fwrapper_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SessionInfo::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 2, 48, 2> SessionInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SessionInfo, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::SessionInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string session_token = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SessionInfo, _impl_.session_token_)}},
    // string username = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(SessionInfo, _impl_.username_)}},
    // .google.protobuf.Timestamp created_at = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(SessionInfo, _impl_.created_at_)}},
    // .google.protobuf.Timestamp last_activity = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 1, PROTOBUF_FIELD_OFFSET(SessionInfo, _impl_.last_activity_)}},
    // int32 current_room_id = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SessionInfo, _impl_.current_room_id_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(SessionInfo, _impl_.current_room_id_)}},
    // uint32 last_message_sequence = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SessionInfo, _impl_.last_message_sequence_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(SessionInfo, _impl_.last_message_sequence_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string session_token = 1;
    {PROTOBUF_FIELD_OFFSET(SessionInfo, _impl_.session_token_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string username = 2;
    {PROTOBUF_FIELD_OFFSET(SessionInfo, _impl_.username_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp created_at = 3;
    {PROTOBUF_FIELD_OFFSET(SessionInfo, _impl_.created_at_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp last_activity = 4;
    {PROTOBUF_FIELD_OFFSET(SessionInfo, _impl_.last_activity_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 current_room_id = 5;
    {PROTOBUF_FIELD_OFFSET(SessionInfo, _impl_.current_room_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // uint32 last_message_sequence = 6;
    {PROTOBUF_FIELD_OFFSET(SessionInfo, _impl_.last_message_sequence_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\22\15\10\0\0\0\0\0"
    "blokus.SessionInfo"
    "session_token"
    "username"
  }},
};

PROTOBUF_NOINLINE void SessionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.SessionInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.session_token_.ClearToEmpty();
  _impl_.username_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.created_at_ != nullptr);
      _impl_.created_at_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.last_activity_ != nullptr);
      _impl_.last_activity_->Clear();
    }
  }
  ::memset(&_impl_.current_room_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.last_message_sequence_) -
      reinterpret_cast<char*>(&_impl_.current_room_id_)) + sizeof(_impl_.last_message_sequence_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SessionInfo::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SessionInfo& this_ = static_cast<const SessionInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SessionInfo::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SessionInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.SessionInfo)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string session_token = 1;
          if (!this_._internal_session_token().empty()) {
            const std::string& _s = this_._internal_session_token();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.SessionInfo.session_token");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string username = 2;
          if (!this_._internal_username().empty()) {
            const std::string& _s = this_._internal_username();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.SessionInfo.username");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp created_at = 3;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.created_at_, this_._impl_.created_at_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp last_activity = 4;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.last_activity_, this_._impl_.last_activity_->GetCachedSize(), target,
                stream);
          }

          // int32 current_room_id = 5;
          if (this_._internal_current_room_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<5>(
                    stream, this_._internal_current_room_id(), target);
          }

          // uint32 last_message_sequence = 6;
          if (this_._internal_last_message_sequence() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                6, this_._internal_last_message_sequence(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.SessionInfo)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SessionInfo::ByteSizeLong(const MessageLite& base) {
          const SessionInfo& this_ = static_cast<const SessionInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SessionInfo::ByteSizeLong() const {
          const SessionInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.SessionInfo)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string session_token = 1;
            if (!this_._internal_session_token().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_session_token());
            }
            // string username = 2;
            if (!this_._internal_username().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_username());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .google.protobuf.Timestamp created_at = 3;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.created_at_);
            }
            // .google.protobuf.Timestamp last_activity = 4;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.last_activity_);
            }
          }
           {
            // int32 current_room_id = 5;
            if (this_._internal_current_room_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_current_room_id());
            }
            // uint32 last_message_sequence = 6;
            if (this_._internal_last_message_sequence() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_last_message_sequence());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SessionInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SessionInfo*>(&to_msg);
  auto& from = static_cast<const SessionInfo&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.SessionInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_session_token().empty()) {
    _this->_internal_set_session_token(from._internal_session_token());
  }
  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.created_at_ != nullptr);
      if (_this->_impl_.created_at_ == nullptr) {
        _this->_impl_.created_at_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.created_at_);
      } else {
        _this->_impl_.created_at_->MergeFrom(*from._impl_.created_at_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.last_activity_ != nullptr);
      if (_this->_impl_.last_activity_ == nullptr) {
        _this->_impl_.last_activity_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.last_activity_);
      } else {
        _this->_impl_.last_activity_->MergeFrom(*from._impl_.last_activity_);
      }
    }
  }
  if (from._internal_current_room_id() != 0) {
    _this->_impl_.current_room_id_ = from._impl_.current_room_id_;
  }
  if (from._internal_last_message_sequence() != 0) {
    _this->_impl_.last_message_sequence_ = from._impl_.last_message_sequence_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SessionInfo::CopyFrom(const SessionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.SessionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SessionInfo::InternalSwap(SessionInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.session_token_, &other->_impl_.session_token_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.username_, &other->_impl_.username_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SessionInfo, _impl_.last_message_sequence_)
      + sizeof(SessionInfo::_impl_.last_message_sequence_)
      - PROTOBUF_FIELD_OFFSET(SessionInfo, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::google::protobuf::Metadata SessionInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ReconnectInfo::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ReconnectInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ReconnectInfo, _impl_._has_bits_);
};

ReconnectInfo::ReconnectInfo(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.ReconnectInfo)
}
inline PROTOBUF_NDEBUG_INLINE ReconnectInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::ReconnectInfo& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        missed_messages_{visibility, arena, from.missed_messages_} {}

ReconnectInfo::ReconnectInfo(
    ::google::protobuf::Arena* arena,
    const ReconnectInfo& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ReconnectInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.session_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::blokus::SessionInfo>(
                              arena, *from._impl_.session_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, missed_message_count_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, missed_message_count_),
           offsetof(Impl_, full_state_required_) -
               offsetof(Impl_, missed_message_count_) +
               sizeof(Impl_::full_state_required_));

  // @@protoc_insertion_point(copy_constructor:blokus.ReconnectInfo)
}
inline PROTOBUF_NDEBUG_INLINE ReconnectInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        missed_messages_{visibility, arena} {}

inline void ReconnectInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, session_),
           0,
           offsetof(Impl_, full_state_required_) -
               offsetof(Impl_, session_) +
               sizeof(Impl_::full_state_required_));
}
ReconnectInfo::~ReconnectInfo() {
  // @@protoc_insertion_point(destructor:blokus.ReconnectInfo)
  SharedDtor(*this);
}
inline void ReconnectInfo::SharedDtor(MessageLite& self) {
  ReconnectInfo& this_ = static_cast<ReconnectInfo&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.session_;
  this_._impl_.~Impl_();
}

inline void* ReconnectInfo::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ReconnectInfo(arena);
}
constexpr auto ReconnectInfo::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ReconnectInfo, _impl_.missed_messages_) +
          decltype(ReconnectInfo::_impl_.missed_messages_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(ReconnectInfo), alignof(ReconnectInfo), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ReconnectInfo::PlacementNew_,
                                 sizeof(ReconnectInfo),
                                 alignof(ReconnectInfo));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ReconnectInfo::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ReconnectInfo_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ReconnectInfo::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ReconnectInfo>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ReconnectInfo::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ReconnectInfo>(), &ReconnectInfo::ByteSizeLong,
            &ReconnectInfo::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ReconnectInfo, _impl_._cached_size_),
        false,
    },
    &ReconnectInfo::kDescriptorMethods,
    &descriptor_table_message_5fwrapper_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ReconnectInfo::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 2, 0, 2> ReconnectInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ReconnectInfo, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::ReconnectInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bool full_state_required = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ReconnectInfo, _impl_.full_state_required_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(ReconnectInfo, _impl_.full_state_required_)}},
    // .blokus.SessionInfo session = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ReconnectInfo, _impl_.session_)}},
    // uint32 missed_message_count = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ReconnectInfo, _impl_.missed_message_count_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ReconnectInfo, _impl_.missed_message_count_)}},
    // repeated .blokus.MessageWrapper missed_messages = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 1, PROTOBUF_FIELD_OFFSET(ReconnectInfo, _impl_.missed_messages_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .blokus.SessionInfo session = 1;
    {PROTOBUF_FIELD_OFFSET(ReconnectInfo, _impl_.session_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint32 missed_message_count = 2;
    {PROTOBUF_FIELD_OFFSET(ReconnectInfo, _impl_.missed_message_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // repeated .blokus.MessageWrapper missed_messages = 3;
    {PROTOBUF_FIELD_OFFSET(ReconnectInfo, _impl_.missed_messages_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool full_state_required = 4;
    {PROTOBUF_FIELD_OFFSET(ReconnectInfo, _impl_.full_state_required_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::blokus::SessionInfo>()},
    {::_pbi::TcParser::GetTable<::blokus::MessageWrapper>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void ReconnectInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.ReconnectInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.missed_messages_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.session_ != nullptr);
    _impl_.session_->Clear();
  }
  ::memset(&_impl_.missed_message_count_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.full_state_required_) -
      reinterpret_cast<char*>(&_impl_.missed_message_count_)) + sizeof(_impl_.full_state_required_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ReconnectInfo::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ReconnectInfo& this_ = static_cast<const ReconnectInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ReconnectInfo::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ReconnectInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.ReconnectInfo)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .blokus.SessionInfo session = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.session_, this_._impl_.session_->GetCachedSize(), target,
                stream);
          }

          // uint32 missed_message_count = 2;
          if (this_._internal_missed_message_count() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_missed_message_count(), target);
          }

          // repeated .blokus.MessageWrapper missed_messages = 3;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_missed_messages_size());
               i < n; i++) {
            const auto& repfield = this_._internal_missed_messages().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    3, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // bool full_state_required = 4;
          if (this_._internal_full_state_required() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                4, this_._internal_full_state_required(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.ReconnectInfo)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ReconnectInfo::ByteSizeLong(const MessageLite& base) {
          const ReconnectInfo& this_ = static_cast<const ReconnectInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ReconnectInfo::ByteSizeLong() const {
          const ReconnectInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.ReconnectInfo)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .blokus.MessageWrapper missed_messages = 3;
            {
              total_size += 1UL * this_._internal_missed_messages_size();
              for (const auto& msg : this_._internal_missed_messages()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // .blokus.SessionInfo session = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.session_);
            }
          }
           {
            // uint32 missed_message_count = 2;
            if (this_._internal_missed_message_count() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_missed_message_count());
            }
            // bool full_state_required = 4;
            if (this_._internal_full_state_required() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ReconnectInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ReconnectInfo*>(&to_msg);
  auto& from = static_cast<const ReconnectInfo&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.ReconnectInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_missed_messages()->MergeFrom(
      from._internal_missed_messages());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.session_ != nullptr);
    if (_this->_impl_.session_ == nullptr) {
      _this->_impl_.session_ =
          ::google::protobuf::Message::CopyConstruct<::blokus::SessionInfo>(arena, *from._impl_.session_);
    } else {
      _this->_impl_.session_->MergeFrom(*from._impl_.session_);
    }
  }
  if (from._internal_missed_message_count() != 0) {
    _this->_impl_.missed_message_count_ = from._impl_.missed_message_count_;
  }
  if (from._internal_full_state_required() != 0) {
    _this->_impl_.full_state_required_ = from._impl_.full_state_required_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ReconnectInfo::CopyFrom(const ReconnectInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.ReconnectInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ReconnectInfo::InternalSwap(ReconnectInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.missed_messages_.InternalSwap(&other->_impl_.missed_messages_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReconnectInfo, _impl_.full_state_required_)
      + sizeof(ReconnectInfo::_impl_.full_state_required_)
      - PROTOBUF_FIELD_OFFSET(ReconnectInfo, _impl_.session_)>(
          reinterpret_cast<char*>(&_impl_.session_),
          reinterpret_cast<char*>(&other->_impl_.session_));
}

::google::protobuf::Metadata ReconnectInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MessageStats::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MessageStats>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MessageStats, _impl_._has_bits_);
};

void MessageStats::clear_last_sent() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.last_sent_ != nullptr) _impl_.last_sent_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MessageStats::MessageStats(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.MessageStats)
}
inline PROTOBUF_NDEBUG_INLINE MessageStats::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::MessageStats& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

MessageStats::MessageStats(
    ::google::protobuf::Arena* arena,
    const MessageStats& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MessageStats* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.last_sent_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.last_sent_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, sent_count_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, sent_count_),
           offsetof(Impl_, total_bytes_) -
               offsetof(Impl_, sent_count_) +
               sizeof(Impl_::total_bytes_));

  // @@protoc_insertion_point(copy_constructor:blokus.MessageStats)
}
inline PROTOBUF_NDEBUG_INLINE MessageStats::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void MessageStats::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, last_sent_),
           0,
           offsetof(Impl_, total_bytes_) -
               offsetof(Impl_, last_sent_) +
               sizeof(Impl_::total_bytes_));
}
MessageStats::~MessageStats() {
  // @@protoc_insertion_point(destructor:blokus.MessageStats)
  SharedDtor(*this);
}
inline void MessageStats::SharedDtor(MessageLite& self) {
  MessageStats& this_ = static_cast<MessageStats&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.last_sent_;
  this_._impl_.~Impl_();
}

inline void* MessageStats::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MessageStats(arena);
}
constexpr auto MessageStats::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(MessageStats),
                                            alignof(MessageStats));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MessageStats::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MessageStats_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MessageStats::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MessageStats>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MessageStats::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MessageStats>(), &MessageStats::ByteSizeLong,
            &MessageStats::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MessageStats, _impl_._cached_size_),
        false,
    },
    &MessageStats::kDescriptorMethods,
    &descriptor_table_message_5fwrapper_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MessageStats::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 1, 0, 2> MessageStats::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MessageStats, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::MessageStats>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .blokus.MessageType type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MessageStats, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(MessageStats, _impl_.type_)}},
    // uint64 sent_count = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(MessageStats, _impl_.sent_count_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(MessageStats, _impl_.sent_count_)}},
    // uint64 received_count = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(MessageStats, _impl_.received_count_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(MessageStats, _impl_.received_count_)}},
    // uint64 error_count = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(MessageStats, _impl_.error_count_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(MessageStats, _impl_.error_count_)}},
    // float average_latency_ms = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(MessageStats, _impl_.average_latency_ms_)}},
    // uint64 total_bytes = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(MessageStats, _impl_.total_bytes_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(MessageStats, _impl_.total_bytes_)}},
    // .google.protobuf.Timestamp last_sent = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 0, 0, PROTOBUF_FIELD_OFFSET(MessageStats, _impl_.last_sent_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .blokus.MessageType type = 1;
    {PROTOBUF_FIELD_OFFSET(MessageStats, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // uint64 sent_count = 2;
    {PROTOBUF_FIELD_OFFSET(MessageStats, _impl_.sent_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // uint64 received_count = 3;
    {PROTOBUF_FIELD_OFFSET(MessageStats, _impl_.received_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // uint64 error_count = 4;
    {PROTOBUF_FIELD_OFFSET(MessageStats, _impl_.error_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // float average_latency_ms = 5;
    {PROTOBUF_FIELD_OFFSET(MessageStats, _impl_.average_latency_ms_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // uint64 total_bytes = 6;
    {PROTOBUF_FIELD_OFFSET(MessageStats, _impl_.total_bytes_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // .google.protobuf.Timestamp last_sent = 7;
    {PROTOBUF_FIELD_OFFSET(MessageStats, _impl_.last_sent_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void MessageStats::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.MessageStats)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.last_sent_ != nullptr);
    _impl_.last_sent_->Clear();
  }
  ::memset(&_impl_.sent_count_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.total_bytes_) -
      reinterpret_cast<char*>(&_impl_.sent_count_)) + sizeof(_impl_.total_bytes_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MessageStats::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MessageStats& this_ = static_cast<const MessageStats&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MessageStats::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MessageStats& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.MessageStats)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .blokus.MessageType type = 1;
          if (this_._internal_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_type(), target);
          }

          // uint64 sent_count = 2;
          if (this_._internal_sent_count() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                2, this_._internal_sent_count(), target);
          }

          // uint64 received_count = 3;
          if (this_._internal_received_count() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                3, this_._internal_received_count(), target);
          }

          // uint64 error_count = 4;
          if (this_._internal_error_count() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                4, this_._internal_error_count(), target);
          }

          // float average_latency_ms = 5;
          if (::absl::bit_cast<::uint32_t>(this_._internal_average_latency_ms()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                5, this_._internal_average_latency_ms(), target);
          }

          // uint64 total_bytes = 6;
          if (this_._internal_total_bytes() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                6, this_._internal_total_bytes(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp last_sent = 7;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                7, *this_._impl_.last_sent_, this_._impl_.last_sent_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.MessageStats)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MessageStats::ByteSizeLong(const MessageLite& base) {
          const MessageStats& this_ = static_cast<const MessageStats&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MessageStats::ByteSizeLong() const {
          const MessageStats& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.MessageStats)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .google.protobuf.Timestamp last_sent = 7;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.last_sent_);
            }
          }
           {
            // uint64 sent_count = 2;
            if (this_._internal_sent_count() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_sent_count());
            }
            // uint64 received_count = 3;
            if (this_._internal_received_count() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_received_count());
            }
            // .blokus.MessageType type = 1;
            if (this_._internal_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
            }
            // float average_latency_ms = 5;
            if (::absl::bit_cast<::uint32_t>(this_._internal_average_latency_ms()) != 0) {
              total_size += 5;
            }
            // uint64 error_count = 4;
            if (this_._internal_error_count() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_error_count());
            }
            // uint64 total_bytes = 6;
            if (this_._internal_total_bytes() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_total_bytes());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MessageStats::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MessageStats*>(&to_msg);
  auto& from = static_cast<const MessageStats&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.MessageStats)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.last_sent_ != nullptr);
    if (_this->_impl_.last_sent_ == nullptr) {
      _this->_impl_.last_sent_ =
          ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.last_sent_);
    } else {
      _this->_impl_.last_sent_->MergeFrom(*from._impl_.last_sent_);
    }
  }
  if (from._internal_sent_count() != 0) {
    _this->_impl_.sent_count_ = from._impl_.sent_count_;
  }
  if (from._internal_received_count() != 0) {
    _this->_impl_.received_count_ = from._impl_.received_count_;
  }
  if (from._internal_type() != 0) {
    _this->_impl_.type_ = from._impl_.type_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_average_latency_ms()) != 0) {
    _this->_impl_.average_latency_ms_ = from._impl_.average_latency_ms_;
  }
  if (from._internal_error_count() != 0) {
    _this->_impl_.error_count_ = from._impl_.error_count_;
  }
  if (from._internal_total_bytes() != 0) {
    _this->_impl_.total_bytes_ = from._impl_.total_bytes_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MessageStats::CopyFrom(const MessageStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.MessageStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MessageStats::InternalSwap(MessageStats* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageStats, _impl_.total_bytes_)
      + sizeof(MessageStats::_impl_.total_bytes_)
      - PROTOBUF_FIELD_OFFSET(MessageStats, _impl_.last_sent_)>(
          reinterpret_cast<char*>(&_impl_.last_sent_),
          reinterpret_cast<char*>(&other->_impl_.last_sent_));
}

::google::protobuf::Metadata MessageStats::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class NetworkStats::_Internal {
 public:
  using HasBits =
      decltype(std::declval<NetworkStats>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(NetworkStats, _impl_._has_bits_);
};

void NetworkStats::clear_session_start() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.session_start_ != nullptr) _impl_.session_start_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
NetworkStats::NetworkStats(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.NetworkStats)
}
inline PROTOBUF_NDEBUG_INLINE NetworkStats::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::NetworkStats& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        message_stats_{visibility, arena, from.message_stats_} {}

NetworkStats::NetworkStats(
    ::google::protobuf::Arena* arena,
    const NetworkStats& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  NetworkStats* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.session_start_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.session_start_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, total_messages_sent_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, total_messages_sent_),
           offsetof(Impl_, connection_drops_) -
               offsetof(Impl_, total_messages_sent_) +
               sizeof(Impl_::connection_drops_));

  // @@protoc_insertion_point(copy_constructor:blokus.NetworkStats)
}
inline PROTOBUF_NDEBUG_INLINE NetworkStats::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        message_stats_{visibility, arena} {}

inline void NetworkStats::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, session_start_),
           0,
           offsetof(Impl_, connection_drops_) -
               offsetof(Impl_, session_start_) +
               sizeof(Impl_::connection_drops_));
}
NetworkStats::~NetworkStats() {
  // @@protoc_insertion_point(destructor:blokus.NetworkStats)
  SharedDtor(*this);
}
inline void NetworkStats::SharedDtor(MessageLite& self) {
  NetworkStats& this_ = static_cast<NetworkStats&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.session_start_;
  this_._impl_.~Impl_();
}

inline void* NetworkStats::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) NetworkStats(arena);
}
constexpr auto NetworkStats::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(NetworkStats, _impl_.message_stats_) +
          decltype(NetworkStats::_impl_.message_stats_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(NetworkStats), alignof(NetworkStats), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&NetworkStats::PlacementNew_,
                                 sizeof(NetworkStats),
                                 alignof(NetworkStats));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull NetworkStats::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_NetworkStats_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &NetworkStats::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<NetworkStats>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &NetworkStats::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<NetworkStats>(), &NetworkStats::ByteSizeLong,
            &NetworkStats::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(NetworkStats, _impl_._cached_size_),
        false,
    },
    &NetworkStats::kDescriptorMethods,
    &descriptor_table_message_5fwrapper_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* NetworkStats::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 2, 0, 2> NetworkStats::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(NetworkStats, _impl_._has_bits_),
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::NetworkStats>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .google.protobuf.Timestamp session_start = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 0, 1, PROTOBUF_FIELD_OFFSET(NetworkStats, _impl_.session_start_)}},
    // repeated .blokus.MessageStats message_stats = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(NetworkStats, _impl_.message_stats_)}},
    // uint64 total_messages_sent = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(NetworkStats, _impl_.total_messages_sent_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(NetworkStats, _impl_.total_messages_sent_)}},
    // uint64 total_messages_received = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(NetworkStats, _impl_.total_messages_received_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(NetworkStats, _impl_.total_messages_received_)}},
    // uint64 total_bytes_sent = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(NetworkStats, _impl_.total_bytes_sent_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(NetworkStats, _impl_.total_bytes_sent_)}},
    // uint64 total_bytes_received = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(NetworkStats, _impl_.total_bytes_received_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(NetworkStats, _impl_.total_bytes_received_)}},
    // float average_latency_ms = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(NetworkStats, _impl_.average_latency_ms_)}},
    // uint32 connection_drops = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NetworkStats, _impl_.connection_drops_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(NetworkStats, _impl_.connection_drops_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .blokus.MessageStats message_stats = 1;
    {PROTOBUF_FIELD_OFFSET(NetworkStats, _impl_.message_stats_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint64 total_messages_sent = 2;
    {PROTOBUF_FIELD_OFFSET(NetworkStats, _impl_.total_messages_sent_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // uint64 total_messages_received = 3;
    {PROTOBUF_FIELD_OFFSET(NetworkStats, _impl_.total_messages_received_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // uint64 total_bytes_sent = 4;
    {PROTOBUF_FIELD_OFFSET(NetworkStats, _impl_.total_bytes_sent_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // uint64 total_bytes_received = 5;
    {PROTOBUF_FIELD_OFFSET(NetworkStats, _impl_.total_bytes_received_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // float average_latency_ms = 6;
    {PROTOBUF_FIELD_OFFSET(NetworkStats, _impl_.average_latency_ms_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // uint32 connection_drops = 7;
    {PROTOBUF_FIELD_OFFSET(NetworkStats, _impl_.connection_drops_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // .google.protobuf.Timestamp session_start = 8;
    {PROTOBUF_FIELD_OFFSET(NetworkStats, _impl_.session_start_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::blokus::MessageStats>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void NetworkStats::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.NetworkStats)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_stats_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.session_start_ != nullptr);
    _impl_.session_start_->Clear();
  }
  ::memset(&_impl_.total_messages_sent_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.connection_drops_) -
      reinterpret_cast<char*>(&_impl_.total_messages_sent_)) + sizeof(_impl_.connection_drops_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* NetworkStats::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const NetworkStats& this_ = static_cast<const NetworkStats&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* NetworkStats::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const NetworkStats& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.NetworkStats)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .blokus.MessageStats message_stats = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_message_stats_size());
               i < n; i++) {
            const auto& repfield = this_._internal_message_stats().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // uint64 total_messages_sent = 2;
          if (this_._internal_total_messages_sent() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                2, this_._internal_total_messages_sent(), target);
          }

          // uint64 total_messages_received = 3;
          if (this_._internal_total_messages_received() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                3, this_._internal_total_messages_received(), target);
          }

          // uint64 total_bytes_sent = 4;
          if (this_._internal_total_bytes_sent() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                4, this_._internal_total_bytes_sent(), target);
          }

          // uint64 total_bytes_received = 5;
          if (this_._internal_total_bytes_received() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                5, this_._internal_total_bytes_received(), target);
          }

          // float average_latency_ms = 6;
          if (::absl::bit_cast<::uint32_t>(this_._internal_average_latency_ms()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                6, this_._internal_average_latency_ms(), target);
          }

          // uint32 connection_drops = 7;
          if (this_._internal_connection_drops() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                7, this_._internal_connection_drops(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp session_start = 8;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                8, *this_._impl_.session_start_, this_._impl_.session_start_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.NetworkStats)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t NetworkStats::ByteSizeLong(const MessageLite& base) {
          const NetworkStats& this_ = static_cast<const NetworkStats&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t NetworkStats::ByteSizeLong() const {
          const NetworkStats& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.NetworkStats)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .blokus.MessageStats message_stats = 1;
            {
              total_size += 1UL * this_._internal_message_stats_size();
              for (const auto& msg : this_._internal_message_stats()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // .google.protobuf.Timestamp session_start = 8;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.session_start_);
            }
          }
           {
            // uint64 total_messages_sent = 2;
            if (this_._internal_total_messages_sent() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_total_messages_sent());
            }
            // uint64 total_messages_received = 3;
            if (this_._internal_total_messages_received() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_total_messages_received());
            }
            // uint64 total_bytes_sent = 4;
            if (this_._internal_total_bytes_sent() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_total_bytes_sent());
            }
            // uint64 total_bytes_received = 5;
            if (this_._internal_total_bytes_received() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_total_bytes_received());
            }
            // float average_latency_ms = 6;
            if (::absl::bit_cast<::uint32_t>(this_._internal_average_latency_ms()) != 0) {
              total_size += 5;
            }
            // uint32 connection_drops = 7;
            if (this_._internal_connection_drops() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_connection_drops());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void NetworkStats::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<NetworkStats*>(&to_msg);
  auto& from = static_cast<const NetworkStats&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.NetworkStats)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_message_stats()->MergeFrom(
      from._internal_message_stats());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.session_start_ != nullptr);
    if (_this->_impl_.session_start_ == nullptr) {
      _this->_impl_.session_start_ =
          ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.session_start_);
    } else {
      _this->_impl_.session_start_->MergeFrom(*from._impl_.session_start_);
    }
  }
  if (from._internal_total_messages_sent() != 0) {
    _this->_impl_.total_messages_sent_ = from._impl_.total_messages_sent_;
  }
  if (from._internal_total_messages_received() != 0) {
    _this->_impl_.total_messages_received_ = from._impl_.total_messages_received_;
  }
  if (from._internal_total_bytes_sent() != 0) {
    _this->_impl_.total_bytes_sent_ = from._impl_.total_bytes_sent_;
  }
  if (from._internal_total_bytes_received() != 0) {
    _this->_impl_.total_bytes_received_ = from._impl_.total_bytes_received_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_average_latency_ms()) != 0) {
    _this->_impl_.average_latency_ms_ = from._impl_.average_latency_ms_;
  }
  if (from._internal_connection_drops() != 0) {
    _this->_impl_.connection_drops_ = from._impl_.connection_drops_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NetworkStats::CopyFrom(const NetworkStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.NetworkStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void NetworkStats::InternalSwap(NetworkStats* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.message_stats_.InternalSwap(&other->_impl_.message_stats_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetworkStats, _impl_.connection_drops_)
      + sizeof(NetworkStats::_impl_.connection_drops_)
      - PROTOBUF_FIELD_OFFSET(NetworkStats, _impl_.session_start_)>(
          reinterpret_cast<char*>(&_impl_.session_start_),
          reinterpret_cast<char*>(&other->_impl_.session_start_));
}

::google::protobuf::Metadata NetworkStats::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace blokus
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_message_5fwrapper_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
