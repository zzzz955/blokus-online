syntax = "proto3";

package blokus;

import "google/protobuf/timestamp.proto";
import "common.proto";

// ========================================
// ���� ���� ������
// ========================================

enum TurnAction {
  TURN_ACTION_PLACE_BLOCK = 0;
  TURN_ACTION_SKIP = 1;
  TURN_ACTION_UNDO = 2;
  TURN_ACTION_TIMEOUT = 3;
}

enum GameEndReason {
  GAME_END_NORMAL = 0;         // ���� ���� (��� �÷��̾� ���� ���� �Ǵ� ��ġ �Ұ�)
  GAME_END_FORFEIT = 1;        // �׺�
  GAME_END_DISCONNECT = 2;     // �÷��̾� ���� ����
  GAME_END_TIMEOUT = 3;        // �ð� �ʰ�
  GAME_END_SERVER_ERROR = 4;   // ���� ����
  GAME_END_ADMIN_STOP = 5;     // ������ �ߴ�
}

// ========================================
// �� ���� ����
// ========================================

message RoomStateUpdate {
  int32 room_id = 1;
  repeated PlayerSlot player_slots = 2;
  GameState game_state = 3;
  
  // ���� ����
  string game_mode = 4;
  int32 turn_time_seconds = 5;
  bool allow_undo = 6;
  bool spectators_allowed = 7;
  
  // ���� ���� ���� (���� ���� ��)
  PlayerColor current_player = 8;
  int32 turn_number = 9;
  int32 remaining_time_seconds = 10;
  
  // �� ��Ÿ������
  google.protobuf.Timestamp last_updated = 11;
  int32 version = 12;          // ���� ���� (�浹 ����)
}


message RemovePlayerRequest {
  int32 room_id = 1;
  PlayerColor color = 2;
  string reason = 3;
  bool is_kick = 4;            // ���� ����
}

message RemovePlayerResponse {
  Result result = 1;
  string message = 2;
  bool room_disbanded = 3;     // �� ��ü ����
}

// ========================================
// ���� ����/����
// ========================================

message StartGameRequest {
  int32 room_id = 1;
  bool force_start = 2;        // ���� ���� (�غ���� ���� �÷��̾� �־)
}

message StartGameResponse {
  Result result = 1;
  string message = 2;
  google.protobuf.Timestamp game_start_time = 3;
  int32 estimated_duration_minutes = 4;
}

message GameStartedNotification {
  int32 room_id = 1;
  repeated PlayerSlot players = 2;
  PlayerColor first_player = 3;
  
  // ���� ����
  string game_mode = 4;
  int32 turn_time_seconds = 5;
  bool allow_undo = 6;
  int32 max_undo_count = 7;
  
  // �ʱ� ���� ����
  BoardState initial_board = 8;
  google.protobuf.Timestamp started_at = 9;
  string game_id = 10;         // ���� ���� ID (���÷��̿�)
}

message GameEndedNotification {
  int32 room_id = 1;
  string game_id = 2;
  GameEndReason end_reason = 3;
  
  // ���� ���
  repeated PlayerResult final_results = 4;
  string winner = 5;           // ���� (������ ��� �� ���ڿ�)
  
  // ���� ���
  GameStats game_stats = 6;
  google.protobuf.Timestamp ended_at = 7;
  int32 game_duration_seconds = 8;
  
  // ������ ��ȭ
  map<string, int32> rating_changes = 9; // �÷��̾ ������ ��ȭ
  
  // ���� �� ����
  map<string, string> achievements = 10; // �÷��̾ ���� ȹ���� ���� (���ڿ��� ����)
  map<string, int32> experience_gained = 11;     // �÷��̾ ����ġ ȹ��
}

message PlayerResult {
  string username = 1;
  PlayerColor color = 2;
  int32 final_score = 3;
  int32 blocks_placed = 4;
  int32 remaining_blocks = 5;
  bool finished_all_blocks = 6; // ��� ���� ��ġ �Ϸ�
  
  // �� ���
  int32 total_moves = 7;
  int32 undo_count = 8;
  float average_think_time = 9;
  int32 longest_think_time = 10;
  bool disconnected = 11;
}

// ========================================
// �� ����
// ========================================

message TurnChangedNotification {
  int32 room_id = 1;
  PlayerColor current_player = 2;
  PlayerColor previous_player = 3;
  int32 turn_number = 4;
  
  // 턴 시간 정보 (타이머 시스템 강화)
  int32 turn_time_seconds = 5;           // 턴 제한 시간 (기본 30초)
  google.protobuf.Timestamp turn_started_at = 6; // 턴 시작 시간
  int32 remaining_time_seconds = 7;      // 남은 시간 (클라이언트 동기화용)
  
  // 게임 진행 정보
  int32 moves_made = 8;
  bool game_nearly_finished = 9; // 게임이 곧 끝날 예정인지
  
  // 이전 턴 정보
  TurnAction previous_action = 10;
  string previous_action_details = 11;
  bool previous_turn_timed_out = 12;     // 이전 턴이 시간 초과로 끝났는지
}

// ========================================
// ���� ��ġ
// ========================================

message PlaceBlockRequest {
  int32 room_id = 1;
  BlockPlacement block_placement = 2;
  
  // ��ġ �ɼ�
  bool confirm_placement = 3;  // Ȯ�� ��ġ (false�� ��ȿ���� �˻�)
  bool use_hint = 4;          // ��Ʈ ��� ����
  
  // Ŭ���̾�Ʈ ���� ����
  int32 client_board_version = 5; // Ŭ���̾�Ʈ�� ���� ����
  string move_id = 6;         // Ŭ���̾�Ʈ���� ������ ���� ID
}

message PlaceBlockResponse {
  Result result = 1;
  
  // ���� �� ����
  BlockPlacement confirmed_placement = 2;
  int32 score_gained = 3;
  BoardState new_board_state = 4;
  bool move_accepted = 5;
  
  // ���� ���
  bool valid_placement = 6;
  repeated string validation_errors = 7;
  repeated Position suggested_positions = 8; // ��ȿ�� ��ġ ��ġ ����
  
  // ���� ���� ��ȭ
  bool turn_ended = 9;
  PlayerColor next_player = 10;
  bool game_ended = 11;
  
  // Ŭ���̾�Ʈ ����ȭ
  string move_id = 12;        // ��û���� ���� move_id �״�� ��ȯ
  int32 server_board_version = 13;
}

message BlockPlacedNotification {
  int32 room_id = 1;
  string player_username = 2;
  PlayerColor player_color = 3;
  BlockPlacement block_placement = 4;
  
  // ���� ����
  int32 score_gained = 5;
  int32 new_total_score = 6;
  int32 remaining_blocks = 7;
  
  // ���� ����
  BoardState updated_board = 8;
  
  // ���� ����
  bool turn_ended = 9;
  PlayerColor next_player = 10;
  google.protobuf.Timestamp placed_at = 11;
  
  // Ư���� ��Ȳ
  bool perfect_game = 12;     // �Ϻ��� ���� (��� ���� ���)
  bool game_winning_move = 13; // ���� �¸� ���� ��
  repeated string triggered_achievements = 14; // �� ���� �޼��� ������
}

// ========================================
// �� ��ŵ �� Ư�� �ൿ
// ========================================

message SkipTurnRequest {
  int32 room_id = 1;
  string reason = 2;          // ��ŵ ����
  bool forced = 3;            // ���� ��ŵ (�ð� �ʰ� ��)
}

message SkipTurnResponse {
  Result result = 1;
  string message = 2;
  PlayerColor next_player = 3;
  bool game_ended = 4;        // ��� �÷��̾ ��ŵ�Ͽ� ���� ����
}

message UndoMoveRequest {
  int32 room_id = 1;
  int32 moves_to_undo = 2;    // �ǵ��� ���� ����
  string reason = 3;
}

message UndoMoveResponse {
  Result result = 1;
  BoardState reverted_board = 2;
  PlayerColor current_player = 3;
  int32 undo_count_remaining = 4; // ���� ������� Ƚ��
  string message = 5;
}

// ========================================
// ���� ���� ��ȸ
// ========================================

message GetGameStateRequest {
  int32 room_id = 1;
  bool include_board = 2;     // ���� ���� ����
  bool include_player_details = 3; // �÷��̾� �� ���� ����
  bool include_move_history = 4;   // �� ��� ����
}

message GameStateResponse {
  Result result = 1;
  
  // �⺻ ���� ����
  GameState game_state = 2;
  PlayerColor current_player = 3;
  int32 turn_number = 4;
  int32 remaining_time_seconds = 5;
  
  // �÷��̾� ����
  repeated PlayerSlot players = 6;
  
  // ���� ���� (��û �ÿ���)
  BoardState board_state = 7;
  
  // ���� ��� (��û �ÿ���)
  repeated GameMove move_history = 8;
  
  // ���� ��Ÿ������
  google.protobuf.Timestamp game_started_at = 9;
  string game_id = 10;
  string game_mode = 11;
}

message GameMove {
  int32 move_number = 1;
  string player_username = 2;
  PlayerColor player_color = 3;
  TurnAction action = 4;
  BlockPlacement block_placement = 5; // action�� PLACE_BLOCK�� ���
  google.protobuf.Timestamp timestamp = 6;
  int32 think_time_seconds = 7;
  int32 score_before = 8;
  int32 score_after = 9;
}

// ========================================
// �ǽð� ���� ���� ������Ʈ
// ========================================

message GameStateUpdate {
  int32 room_id = 1;
  int32 update_version = 2;   // ������Ʈ ���� (���� ����)
  
  // ����� ������ ���� (��Ÿ ������Ʈ)
  optional PlayerColor current_player = 3;
  optional int32 remaining_time = 4;
  optional BoardState board_changes = 5;
  repeated PlayerSlot updated_players = 6;
  
  // ��Ÿ������
  google.protobuf.Timestamp updated_at = 7;
  string update_reason = 8;   // "block_placed", "turn_changed", "player_joined" ��
}

// ========================================
// ���� �м� �� ��Ʈ
// ========================================

message GetHintRequest {
  int32 room_id = 1;
  PlayerColor player = 2;
  int32 hint_level = 3;       // 1: ������ ��Ʈ, 2: ���� ��Ʈ, 3: ���� ��
}

message GetHintResponse {
  Result result = 1;
  
  // ��Ʈ ����
  repeated BlockPlacement suggested_moves = 2;
  repeated string explanations = 3; // �� ���� ���� ����
  int32 hint_quality = 4;     // ��Ʈ ǰ�� ���� (1-100)
  
  // �м� ����
  int32 possible_moves_count = 5;
  float win_probability = 6;   // �·� ����
  string strategy_advice = 7;  // ���� ����
}

// ========================================
// ���� �ý���
// ========================================

message SpectatorJoinRequest {
  int32 room_id = 1;
  bool silent_join = 2;       // ������ ���� (�˸� ����)
}

message SpectatorJoinResponse {
  Result result = 1;
  GameStateResponse current_state = 2; // ���� ���� ����
  int32 spectator_count = 3;
  string welcome_message = 4;
}

message SpectatorNotification {
  int32 room_id = 1;
  string spectator_username = 2;
  bool joined = 3;            // true: ����, false: ����
  int32 total_spectators = 4;
}

// ========================================
// Turn Timer System
// ========================================

message TurnTimerSyncRequest {
  int32 room_id = 1;
}

message TurnTimerSyncResponse {
  Result result = 1;
  int32 remaining_time_seconds = 2;  // 남은 시간 (초)
  PlayerColor current_player = 3;     // 현재 플레이어
  int32 turn_number = 4;             // 턴 번호
  google.protobuf.Timestamp server_time = 5; // 서버 시간 (동기화용)
}

message TurnTimeoutNotification {
  int32 room_id = 1;
  PlayerColor timed_out_player = 2;   // 시간 초과된 플레이어
  PlayerColor next_player = 3;        // 다음 플레이어
  int32 turn_number = 4;              // 새 턴 번호
  string timeout_reason = 5;          // 타임아웃 사유
  google.protobuf.Timestamp timeout_at = 6; // 타임아웃 발생 시간
}

// ========================================
// Game board state synchronization
// ========================================

message BoardSyncRequest {
  int32 room_id = 1;
  int32 client_board_version = 2;  // Client board version
  bool force_full_sync = 3;        // Force full synchronization request
}

message BoardSyncResponse {
  Result result = 1;
  BoardState board_state = 2;      // Full board state
  int32 server_board_version = 3;  // Server board version
  bool is_full_sync = 4;           // 전체 동기화 여부
  repeated BlockPlacement recent_moves = 5; // 최근 움직임 (부분 동기화용)
}

message BoardUpdateNotification {
  int32 room_id = 1;
  BlockPlacement new_placement = 2;     // 새로 배치된 블록
  BoardState updated_board = 3;         // 업데이트된 보드 상태
  int32 board_version = 4;              // 새 보드 버전
  PlayerColor player = 5;               // 블록을 배치한 플레이어
  int32 turn_number = 6;                // 턴 번호
  google.protobuf.Timestamp updated_at = 7;
}