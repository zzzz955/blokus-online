// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: game.proto
// Protobuf C++ Version: 5.29.3

#include "game.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace blokus {

inline constexpr UndoMoveRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : reason_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        room_id_{0},
        moves_to_undo_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR UndoMoveRequest::UndoMoveRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct UndoMoveRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UndoMoveRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UndoMoveRequestDefaultTypeInternal() {}
  union {
    UndoMoveRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UndoMoveRequestDefaultTypeInternal _UndoMoveRequest_default_instance_;

inline constexpr StartGameRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : room_id_{0},
        force_start_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR StartGameRequest::StartGameRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct StartGameRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StartGameRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StartGameRequestDefaultTypeInternal() {}
  union {
    StartGameRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StartGameRequestDefaultTypeInternal _StartGameRequest_default_instance_;

inline constexpr SpectatorNotification::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : spectator_username_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        room_id_{0},
        joined_{false},
        total_spectators_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SpectatorNotification::SpectatorNotification(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SpectatorNotificationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpectatorNotificationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpectatorNotificationDefaultTypeInternal() {}
  union {
    SpectatorNotification _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpectatorNotificationDefaultTypeInternal _SpectatorNotification_default_instance_;

inline constexpr SpectatorJoinRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : room_id_{0},
        silent_join_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SpectatorJoinRequest::SpectatorJoinRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SpectatorJoinRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpectatorJoinRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpectatorJoinRequestDefaultTypeInternal() {}
  union {
    SpectatorJoinRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpectatorJoinRequestDefaultTypeInternal _SpectatorJoinRequest_default_instance_;

inline constexpr SkipTurnRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : reason_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        room_id_{0},
        forced_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SkipTurnRequest::SkipTurnRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SkipTurnRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SkipTurnRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SkipTurnRequestDefaultTypeInternal() {}
  union {
    SkipTurnRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SkipTurnRequestDefaultTypeInternal _SkipTurnRequest_default_instance_;

inline constexpr RemovePlayerRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : reason_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        room_id_{0},
        color_{static_cast< ::blokus::PlayerColor >(0)},
        is_kick_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RemovePlayerRequest::RemovePlayerRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RemovePlayerRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemovePlayerRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemovePlayerRequestDefaultTypeInternal() {}
  union {
    RemovePlayerRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemovePlayerRequestDefaultTypeInternal _RemovePlayerRequest_default_instance_;

inline constexpr PlayerResult::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : username_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        color_{static_cast< ::blokus::PlayerColor >(0)},
        final_score_{0},
        blocks_placed_{0},
        remaining_blocks_{0},
        total_moves_{0},
        undo_count_{0},
        finished_all_blocks_{false},
        disconnected_{false},
        average_think_time_{0},
        longest_think_time_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PlayerResult::PlayerResult(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PlayerResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerResultDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerResultDefaultTypeInternal() {}
  union {
    PlayerResult _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerResultDefaultTypeInternal _PlayerResult_default_instance_;

inline constexpr GetHintRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : room_id_{0},
        player_{static_cast< ::blokus::PlayerColor >(0)},
        hint_level_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetHintRequest::GetHintRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetHintRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetHintRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetHintRequestDefaultTypeInternal() {}
  union {
    GetHintRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetHintRequestDefaultTypeInternal _GetHintRequest_default_instance_;

inline constexpr GetGameStateRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : room_id_{0},
        include_board_{false},
        include_player_details_{false},
        include_move_history_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetGameStateRequest::GetGameStateRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetGameStateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetGameStateRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetGameStateRequestDefaultTypeInternal() {}
  union {
    GetGameStateRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetGameStateRequestDefaultTypeInternal _GetGameStateRequest_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR GameEndedNotification_RatingChangesEntry_DoNotUse::GameEndedNotification_RatingChangesEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : GameEndedNotification_RatingChangesEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : GameEndedNotification_RatingChangesEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct GameEndedNotification_RatingChangesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEndedNotification_RatingChangesEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEndedNotification_RatingChangesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GameEndedNotification_RatingChangesEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEndedNotification_RatingChangesEntry_DoNotUseDefaultTypeInternal _GameEndedNotification_RatingChangesEntry_DoNotUse_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR GameEndedNotification_ExperienceGainedEntry_DoNotUse::GameEndedNotification_ExperienceGainedEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : GameEndedNotification_ExperienceGainedEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : GameEndedNotification_ExperienceGainedEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct GameEndedNotification_ExperienceGainedEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEndedNotification_ExperienceGainedEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEndedNotification_ExperienceGainedEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GameEndedNotification_ExperienceGainedEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEndedNotification_ExperienceGainedEntry_DoNotUseDefaultTypeInternal _GameEndedNotification_ExperienceGainedEntry_DoNotUse_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR GameEndedNotification_AchievementsEntry_DoNotUse::GameEndedNotification_AchievementsEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : GameEndedNotification_AchievementsEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : GameEndedNotification_AchievementsEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct GameEndedNotification_AchievementsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEndedNotification_AchievementsEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEndedNotification_AchievementsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GameEndedNotification_AchievementsEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEndedNotification_AchievementsEntry_DoNotUseDefaultTypeInternal _GameEndedNotification_AchievementsEntry_DoNotUse_default_instance_;

inline constexpr AddAIPlayerRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : ai_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ai_personality_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        room_id_{0},
        color_{static_cast< ::blokus::PlayerColor >(0)},
        difficulty_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AddAIPlayerRequest::AddAIPlayerRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AddAIPlayerRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddAIPlayerRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddAIPlayerRequestDefaultTypeInternal() {}
  union {
    AddAIPlayerRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddAIPlayerRequestDefaultTypeInternal _AddAIPlayerRequest_default_instance_;

inline constexpr TurnChangedNotification::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        previous_action_details_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        turn_started_at_{nullptr},
        room_id_{0},
        current_player_{static_cast< ::blokus::PlayerColor >(0)},
        previous_player_{static_cast< ::blokus::PlayerColor >(0)},
        turn_number_{0},
        turn_time_seconds_{0},
        moves_made_{0},
        game_nearly_finished_{false},
        previous_action_{static_cast< ::blokus::TurnAction >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR TurnChangedNotification::TurnChangedNotification(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TurnChangedNotificationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TurnChangedNotificationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TurnChangedNotificationDefaultTypeInternal() {}
  union {
    TurnChangedNotification _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TurnChangedNotificationDefaultTypeInternal _TurnChangedNotification_default_instance_;

inline constexpr RoomStateUpdate::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        player_slots_{},
        game_mode_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        last_updated_{nullptr},
        room_id_{0},
        game_state_{static_cast< ::blokus::GameState >(0)},
        turn_time_seconds_{0},
        allow_undo_{false},
        spectators_allowed_{false},
        current_player_{static_cast< ::blokus::PlayerColor >(0)},
        turn_number_{0},
        remaining_time_seconds_{0},
        version_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RoomStateUpdate::RoomStateUpdate(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RoomStateUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoomStateUpdateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoomStateUpdateDefaultTypeInternal() {}
  union {
    RoomStateUpdate _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoomStateUpdateDefaultTypeInternal _RoomStateUpdate_default_instance_;

inline constexpr GameStateUpdate::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        updated_players_{},
        update_reason_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        board_changes_{nullptr},
        updated_at_{nullptr},
        room_id_{0},
        update_version_{0},
        current_player_{static_cast< ::blokus::PlayerColor >(0)},
        remaining_time_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GameStateUpdate::GameStateUpdate(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GameStateUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameStateUpdateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameStateUpdateDefaultTypeInternal() {}
  union {
    GameStateUpdate _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameStateUpdateDefaultTypeInternal _GameStateUpdate_default_instance_;

inline constexpr GameStartedNotification::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        players_{},
        game_mode_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        game_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        initial_board_{nullptr},
        started_at_{nullptr},
        room_id_{0},
        first_player_{static_cast< ::blokus::PlayerColor >(0)},
        turn_time_seconds_{0},
        allow_undo_{false},
        max_undo_count_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GameStartedNotification::GameStartedNotification(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GameStartedNotificationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameStartedNotificationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameStartedNotificationDefaultTypeInternal() {}
  union {
    GameStartedNotification _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameStartedNotificationDefaultTypeInternal _GameStartedNotification_default_instance_;

inline constexpr UndoMoveResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        result_{nullptr},
        reverted_board_{nullptr},
        current_player_{static_cast< ::blokus::PlayerColor >(0)},
        undo_count_remaining_{0} {}

template <typename>
PROTOBUF_CONSTEXPR UndoMoveResponse::UndoMoveResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct UndoMoveResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UndoMoveResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UndoMoveResponseDefaultTypeInternal() {}
  union {
    UndoMoveResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UndoMoveResponseDefaultTypeInternal _UndoMoveResponse_default_instance_;

inline constexpr StartGameResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        result_{nullptr},
        game_start_time_{nullptr},
        estimated_duration_minutes_{0} {}

template <typename>
PROTOBUF_CONSTEXPR StartGameResponse::StartGameResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct StartGameResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StartGameResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StartGameResponseDefaultTypeInternal() {}
  union {
    StartGameResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StartGameResponseDefaultTypeInternal _StartGameResponse_default_instance_;

inline constexpr SkipTurnResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        result_{nullptr},
        next_player_{static_cast< ::blokus::PlayerColor >(0)},
        game_ended_{false} {}

template <typename>
PROTOBUF_CONSTEXPR SkipTurnResponse::SkipTurnResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SkipTurnResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SkipTurnResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SkipTurnResponseDefaultTypeInternal() {}
  union {
    SkipTurnResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SkipTurnResponseDefaultTypeInternal _SkipTurnResponse_default_instance_;

inline constexpr RemovePlayerResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        result_{nullptr},
        room_disbanded_{false} {}

template <typename>
PROTOBUF_CONSTEXPR RemovePlayerResponse::RemovePlayerResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RemovePlayerResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemovePlayerResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemovePlayerResponseDefaultTypeInternal() {}
  union {
    RemovePlayerResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemovePlayerResponseDefaultTypeInternal _RemovePlayerResponse_default_instance_;

inline constexpr PlaceBlockResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        validation_errors_{},
        suggested_positions_{},
        move_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        result_{nullptr},
        confirmed_placement_{nullptr},
        new_board_state_{nullptr},
        score_gained_{0},
        move_accepted_{false},
        valid_placement_{false},
        turn_ended_{false},
        game_ended_{false},
        next_player_{static_cast< ::blokus::PlayerColor >(0)},
        server_board_version_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PlaceBlockResponse::PlaceBlockResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PlaceBlockResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlaceBlockResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlaceBlockResponseDefaultTypeInternal() {}
  union {
    PlaceBlockResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlaceBlockResponseDefaultTypeInternal _PlaceBlockResponse_default_instance_;

inline constexpr PlaceBlockRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        move_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        block_placement_{nullptr},
        room_id_{0},
        confirm_placement_{false},
        use_hint_{false},
        client_board_version_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PlaceBlockRequest::PlaceBlockRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PlaceBlockRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlaceBlockRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlaceBlockRequestDefaultTypeInternal() {}
  union {
    PlaceBlockRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlaceBlockRequestDefaultTypeInternal _PlaceBlockRequest_default_instance_;

inline constexpr GetHintResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        suggested_moves_{},
        explanations_{},
        strategy_advice_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        result_{nullptr},
        hint_quality_{0},
        possible_moves_count_{0},
        win_probability_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetHintResponse::GetHintResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetHintResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetHintResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetHintResponseDefaultTypeInternal() {}
  union {
    GetHintResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetHintResponseDefaultTypeInternal _GetHintResponse_default_instance_;

inline constexpr GameMove::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        player_username_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        block_placement_{nullptr},
        timestamp_{nullptr},
        move_number_{0},
        player_color_{static_cast< ::blokus::PlayerColor >(0)},
        action_{static_cast< ::blokus::TurnAction >(0)},
        think_time_seconds_{0},
        score_before_{0},
        score_after_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GameMove::GameMove(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GameMoveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameMoveDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameMoveDefaultTypeInternal() {}
  union {
    GameMove _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameMoveDefaultTypeInternal _GameMove_default_instance_;

inline constexpr GameEndedNotification::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        final_results_{},
        rating_changes_{},
        achievements_{},
        experience_gained_{},
        game_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        winner_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        game_stats_{nullptr},
        ended_at_{nullptr},
        room_id_{0},
        end_reason_{static_cast< ::blokus::GameEndReason >(0)},
        game_duration_seconds_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GameEndedNotification::GameEndedNotification(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GameEndedNotificationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEndedNotificationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEndedNotificationDefaultTypeInternal() {}
  union {
    GameEndedNotification _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEndedNotificationDefaultTypeInternal _GameEndedNotification_default_instance_;

inline constexpr BlockPlacedNotification::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        triggered_achievements_{},
        player_username_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        block_placement_{nullptr},
        updated_board_{nullptr},
        placed_at_{nullptr},
        room_id_{0},
        player_color_{static_cast< ::blokus::PlayerColor >(0)},
        score_gained_{0},
        new_total_score_{0},
        remaining_blocks_{0},
        next_player_{static_cast< ::blokus::PlayerColor >(0)},
        turn_ended_{false},
        perfect_game_{false},
        game_winning_move_{false} {}

template <typename>
PROTOBUF_CONSTEXPR BlockPlacedNotification::BlockPlacedNotification(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct BlockPlacedNotificationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockPlacedNotificationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockPlacedNotificationDefaultTypeInternal() {}
  union {
    BlockPlacedNotification _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockPlacedNotificationDefaultTypeInternal _BlockPlacedNotification_default_instance_;

inline constexpr AddAIPlayerResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        result_{nullptr},
        ai_player_slot_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR AddAIPlayerResponse::AddAIPlayerResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AddAIPlayerResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddAIPlayerResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddAIPlayerResponseDefaultTypeInternal() {}
  union {
    AddAIPlayerResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddAIPlayerResponseDefaultTypeInternal _AddAIPlayerResponse_default_instance_;

inline constexpr GameStateResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        players_{},
        move_history_{},
        game_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        game_mode_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        result_{nullptr},
        board_state_{nullptr},
        game_started_at_{nullptr},
        game_state_{static_cast< ::blokus::GameState >(0)},
        current_player_{static_cast< ::blokus::PlayerColor >(0)},
        turn_number_{0},
        remaining_time_seconds_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GameStateResponse::GameStateResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GameStateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameStateResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameStateResponseDefaultTypeInternal() {}
  union {
    GameStateResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameStateResponseDefaultTypeInternal _GameStateResponse_default_instance_;

inline constexpr SpectatorJoinResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        welcome_message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        result_{nullptr},
        current_state_{nullptr},
        spectator_count_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SpectatorJoinResponse::SpectatorJoinResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SpectatorJoinResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpectatorJoinResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpectatorJoinResponseDefaultTypeInternal() {}
  union {
    SpectatorJoinResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpectatorJoinResponseDefaultTypeInternal _SpectatorJoinResponse_default_instance_;
}  // namespace blokus
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_game_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_game_2eproto = nullptr;
const ::uint32_t
    TableStruct_game_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::blokus::RoomStateUpdate, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::RoomStateUpdate, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::RoomStateUpdate, _impl_.room_id_),
        PROTOBUF_FIELD_OFFSET(::blokus::RoomStateUpdate, _impl_.player_slots_),
        PROTOBUF_FIELD_OFFSET(::blokus::RoomStateUpdate, _impl_.game_state_),
        PROTOBUF_FIELD_OFFSET(::blokus::RoomStateUpdate, _impl_.game_mode_),
        PROTOBUF_FIELD_OFFSET(::blokus::RoomStateUpdate, _impl_.turn_time_seconds_),
        PROTOBUF_FIELD_OFFSET(::blokus::RoomStateUpdate, _impl_.allow_undo_),
        PROTOBUF_FIELD_OFFSET(::blokus::RoomStateUpdate, _impl_.spectators_allowed_),
        PROTOBUF_FIELD_OFFSET(::blokus::RoomStateUpdate, _impl_.current_player_),
        PROTOBUF_FIELD_OFFSET(::blokus::RoomStateUpdate, _impl_.turn_number_),
        PROTOBUF_FIELD_OFFSET(::blokus::RoomStateUpdate, _impl_.remaining_time_seconds_),
        PROTOBUF_FIELD_OFFSET(::blokus::RoomStateUpdate, _impl_.last_updated_),
        PROTOBUF_FIELD_OFFSET(::blokus::RoomStateUpdate, _impl_.version_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::blokus::AddAIPlayerRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::AddAIPlayerRequest, _impl_.room_id_),
        PROTOBUF_FIELD_OFFSET(::blokus::AddAIPlayerRequest, _impl_.color_),
        PROTOBUF_FIELD_OFFSET(::blokus::AddAIPlayerRequest, _impl_.difficulty_),
        PROTOBUF_FIELD_OFFSET(::blokus::AddAIPlayerRequest, _impl_.ai_name_),
        PROTOBUF_FIELD_OFFSET(::blokus::AddAIPlayerRequest, _impl_.ai_personality_),
        PROTOBUF_FIELD_OFFSET(::blokus::AddAIPlayerResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::AddAIPlayerResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::AddAIPlayerResponse, _impl_.result_),
        PROTOBUF_FIELD_OFFSET(::blokus::AddAIPlayerResponse, _impl_.ai_player_slot_),
        PROTOBUF_FIELD_OFFSET(::blokus::AddAIPlayerResponse, _impl_.message_),
        0,
        1,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::blokus::RemovePlayerRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::RemovePlayerRequest, _impl_.room_id_),
        PROTOBUF_FIELD_OFFSET(::blokus::RemovePlayerRequest, _impl_.color_),
        PROTOBUF_FIELD_OFFSET(::blokus::RemovePlayerRequest, _impl_.reason_),
        PROTOBUF_FIELD_OFFSET(::blokus::RemovePlayerRequest, _impl_.is_kick_),
        PROTOBUF_FIELD_OFFSET(::blokus::RemovePlayerResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::RemovePlayerResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::RemovePlayerResponse, _impl_.result_),
        PROTOBUF_FIELD_OFFSET(::blokus::RemovePlayerResponse, _impl_.message_),
        PROTOBUF_FIELD_OFFSET(::blokus::RemovePlayerResponse, _impl_.room_disbanded_),
        0,
        ~0u,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::blokus::StartGameRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::StartGameRequest, _impl_.room_id_),
        PROTOBUF_FIELD_OFFSET(::blokus::StartGameRequest, _impl_.force_start_),
        PROTOBUF_FIELD_OFFSET(::blokus::StartGameResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::StartGameResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::StartGameResponse, _impl_.result_),
        PROTOBUF_FIELD_OFFSET(::blokus::StartGameResponse, _impl_.message_),
        PROTOBUF_FIELD_OFFSET(::blokus::StartGameResponse, _impl_.game_start_time_),
        PROTOBUF_FIELD_OFFSET(::blokus::StartGameResponse, _impl_.estimated_duration_minutes_),
        0,
        ~0u,
        1,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::blokus::GameStartedNotification, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameStartedNotification, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::GameStartedNotification, _impl_.room_id_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameStartedNotification, _impl_.players_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameStartedNotification, _impl_.first_player_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameStartedNotification, _impl_.game_mode_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameStartedNotification, _impl_.turn_time_seconds_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameStartedNotification, _impl_.allow_undo_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameStartedNotification, _impl_.max_undo_count_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameStartedNotification, _impl_.initial_board_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameStartedNotification, _impl_.started_at_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameStartedNotification, _impl_.game_id_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        1,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::blokus::GameEndedNotification_RatingChangesEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameEndedNotification_RatingChangesEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::GameEndedNotification_RatingChangesEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameEndedNotification_RatingChangesEntry_DoNotUse, _impl_.value_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::blokus::GameEndedNotification_AchievementsEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameEndedNotification_AchievementsEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::GameEndedNotification_AchievementsEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameEndedNotification_AchievementsEntry_DoNotUse, _impl_.value_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::blokus::GameEndedNotification_ExperienceGainedEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameEndedNotification_ExperienceGainedEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::GameEndedNotification_ExperienceGainedEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameEndedNotification_ExperienceGainedEntry_DoNotUse, _impl_.value_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::blokus::GameEndedNotification, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameEndedNotification, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::GameEndedNotification, _impl_.room_id_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameEndedNotification, _impl_.game_id_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameEndedNotification, _impl_.end_reason_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameEndedNotification, _impl_.final_results_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameEndedNotification, _impl_.winner_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameEndedNotification, _impl_.game_stats_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameEndedNotification, _impl_.ended_at_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameEndedNotification, _impl_.game_duration_seconds_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameEndedNotification, _impl_.rating_changes_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameEndedNotification, _impl_.achievements_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameEndedNotification, _impl_.experience_gained_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        1,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::blokus::PlayerResult, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::PlayerResult, _impl_.username_),
        PROTOBUF_FIELD_OFFSET(::blokus::PlayerResult, _impl_.color_),
        PROTOBUF_FIELD_OFFSET(::blokus::PlayerResult, _impl_.final_score_),
        PROTOBUF_FIELD_OFFSET(::blokus::PlayerResult, _impl_.blocks_placed_),
        PROTOBUF_FIELD_OFFSET(::blokus::PlayerResult, _impl_.remaining_blocks_),
        PROTOBUF_FIELD_OFFSET(::blokus::PlayerResult, _impl_.finished_all_blocks_),
        PROTOBUF_FIELD_OFFSET(::blokus::PlayerResult, _impl_.total_moves_),
        PROTOBUF_FIELD_OFFSET(::blokus::PlayerResult, _impl_.undo_count_),
        PROTOBUF_FIELD_OFFSET(::blokus::PlayerResult, _impl_.average_think_time_),
        PROTOBUF_FIELD_OFFSET(::blokus::PlayerResult, _impl_.longest_think_time_),
        PROTOBUF_FIELD_OFFSET(::blokus::PlayerResult, _impl_.disconnected_),
        PROTOBUF_FIELD_OFFSET(::blokus::TurnChangedNotification, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::TurnChangedNotification, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::TurnChangedNotification, _impl_.room_id_),
        PROTOBUF_FIELD_OFFSET(::blokus::TurnChangedNotification, _impl_.current_player_),
        PROTOBUF_FIELD_OFFSET(::blokus::TurnChangedNotification, _impl_.previous_player_),
        PROTOBUF_FIELD_OFFSET(::blokus::TurnChangedNotification, _impl_.turn_number_),
        PROTOBUF_FIELD_OFFSET(::blokus::TurnChangedNotification, _impl_.turn_time_seconds_),
        PROTOBUF_FIELD_OFFSET(::blokus::TurnChangedNotification, _impl_.turn_started_at_),
        PROTOBUF_FIELD_OFFSET(::blokus::TurnChangedNotification, _impl_.moves_made_),
        PROTOBUF_FIELD_OFFSET(::blokus::TurnChangedNotification, _impl_.game_nearly_finished_),
        PROTOBUF_FIELD_OFFSET(::blokus::TurnChangedNotification, _impl_.previous_action_),
        PROTOBUF_FIELD_OFFSET(::blokus::TurnChangedNotification, _impl_.previous_action_details_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::blokus::PlaceBlockRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::PlaceBlockRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::PlaceBlockRequest, _impl_.room_id_),
        PROTOBUF_FIELD_OFFSET(::blokus::PlaceBlockRequest, _impl_.block_placement_),
        PROTOBUF_FIELD_OFFSET(::blokus::PlaceBlockRequest, _impl_.confirm_placement_),
        PROTOBUF_FIELD_OFFSET(::blokus::PlaceBlockRequest, _impl_.use_hint_),
        PROTOBUF_FIELD_OFFSET(::blokus::PlaceBlockRequest, _impl_.client_board_version_),
        PROTOBUF_FIELD_OFFSET(::blokus::PlaceBlockRequest, _impl_.move_id_),
        ~0u,
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::blokus::PlaceBlockResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::PlaceBlockResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::PlaceBlockResponse, _impl_.result_),
        PROTOBUF_FIELD_OFFSET(::blokus::PlaceBlockResponse, _impl_.confirmed_placement_),
        PROTOBUF_FIELD_OFFSET(::blokus::PlaceBlockResponse, _impl_.score_gained_),
        PROTOBUF_FIELD_OFFSET(::blokus::PlaceBlockResponse, _impl_.new_board_state_),
        PROTOBUF_FIELD_OFFSET(::blokus::PlaceBlockResponse, _impl_.move_accepted_),
        PROTOBUF_FIELD_OFFSET(::blokus::PlaceBlockResponse, _impl_.valid_placement_),
        PROTOBUF_FIELD_OFFSET(::blokus::PlaceBlockResponse, _impl_.validation_errors_),
        PROTOBUF_FIELD_OFFSET(::blokus::PlaceBlockResponse, _impl_.suggested_positions_),
        PROTOBUF_FIELD_OFFSET(::blokus::PlaceBlockResponse, _impl_.turn_ended_),
        PROTOBUF_FIELD_OFFSET(::blokus::PlaceBlockResponse, _impl_.next_player_),
        PROTOBUF_FIELD_OFFSET(::blokus::PlaceBlockResponse, _impl_.game_ended_),
        PROTOBUF_FIELD_OFFSET(::blokus::PlaceBlockResponse, _impl_.move_id_),
        PROTOBUF_FIELD_OFFSET(::blokus::PlaceBlockResponse, _impl_.server_board_version_),
        0,
        1,
        ~0u,
        2,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::blokus::BlockPlacedNotification, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::BlockPlacedNotification, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::BlockPlacedNotification, _impl_.room_id_),
        PROTOBUF_FIELD_OFFSET(::blokus::BlockPlacedNotification, _impl_.player_username_),
        PROTOBUF_FIELD_OFFSET(::blokus::BlockPlacedNotification, _impl_.player_color_),
        PROTOBUF_FIELD_OFFSET(::blokus::BlockPlacedNotification, _impl_.block_placement_),
        PROTOBUF_FIELD_OFFSET(::blokus::BlockPlacedNotification, _impl_.score_gained_),
        PROTOBUF_FIELD_OFFSET(::blokus::BlockPlacedNotification, _impl_.new_total_score_),
        PROTOBUF_FIELD_OFFSET(::blokus::BlockPlacedNotification, _impl_.remaining_blocks_),
        PROTOBUF_FIELD_OFFSET(::blokus::BlockPlacedNotification, _impl_.updated_board_),
        PROTOBUF_FIELD_OFFSET(::blokus::BlockPlacedNotification, _impl_.turn_ended_),
        PROTOBUF_FIELD_OFFSET(::blokus::BlockPlacedNotification, _impl_.next_player_),
        PROTOBUF_FIELD_OFFSET(::blokus::BlockPlacedNotification, _impl_.placed_at_),
        PROTOBUF_FIELD_OFFSET(::blokus::BlockPlacedNotification, _impl_.perfect_game_),
        PROTOBUF_FIELD_OFFSET(::blokus::BlockPlacedNotification, _impl_.game_winning_move_),
        PROTOBUF_FIELD_OFFSET(::blokus::BlockPlacedNotification, _impl_.triggered_achievements_),
        ~0u,
        ~0u,
        ~0u,
        0,
        ~0u,
        ~0u,
        ~0u,
        1,
        ~0u,
        ~0u,
        2,
        ~0u,
        ~0u,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::blokus::SkipTurnRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::SkipTurnRequest, _impl_.room_id_),
        PROTOBUF_FIELD_OFFSET(::blokus::SkipTurnRequest, _impl_.reason_),
        PROTOBUF_FIELD_OFFSET(::blokus::SkipTurnRequest, _impl_.forced_),
        PROTOBUF_FIELD_OFFSET(::blokus::SkipTurnResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::SkipTurnResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::SkipTurnResponse, _impl_.result_),
        PROTOBUF_FIELD_OFFSET(::blokus::SkipTurnResponse, _impl_.message_),
        PROTOBUF_FIELD_OFFSET(::blokus::SkipTurnResponse, _impl_.next_player_),
        PROTOBUF_FIELD_OFFSET(::blokus::SkipTurnResponse, _impl_.game_ended_),
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::blokus::UndoMoveRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::UndoMoveRequest, _impl_.room_id_),
        PROTOBUF_FIELD_OFFSET(::blokus::UndoMoveRequest, _impl_.moves_to_undo_),
        PROTOBUF_FIELD_OFFSET(::blokus::UndoMoveRequest, _impl_.reason_),
        PROTOBUF_FIELD_OFFSET(::blokus::UndoMoveResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::UndoMoveResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::UndoMoveResponse, _impl_.result_),
        PROTOBUF_FIELD_OFFSET(::blokus::UndoMoveResponse, _impl_.reverted_board_),
        PROTOBUF_FIELD_OFFSET(::blokus::UndoMoveResponse, _impl_.current_player_),
        PROTOBUF_FIELD_OFFSET(::blokus::UndoMoveResponse, _impl_.undo_count_remaining_),
        PROTOBUF_FIELD_OFFSET(::blokus::UndoMoveResponse, _impl_.message_),
        0,
        1,
        ~0u,
        ~0u,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::blokus::GetGameStateRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::GetGameStateRequest, _impl_.room_id_),
        PROTOBUF_FIELD_OFFSET(::blokus::GetGameStateRequest, _impl_.include_board_),
        PROTOBUF_FIELD_OFFSET(::blokus::GetGameStateRequest, _impl_.include_player_details_),
        PROTOBUF_FIELD_OFFSET(::blokus::GetGameStateRequest, _impl_.include_move_history_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameStateResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameStateResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::GameStateResponse, _impl_.result_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameStateResponse, _impl_.game_state_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameStateResponse, _impl_.current_player_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameStateResponse, _impl_.turn_number_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameStateResponse, _impl_.remaining_time_seconds_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameStateResponse, _impl_.players_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameStateResponse, _impl_.board_state_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameStateResponse, _impl_.move_history_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameStateResponse, _impl_.game_started_at_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameStateResponse, _impl_.game_id_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameStateResponse, _impl_.game_mode_),
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        1,
        ~0u,
        2,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::blokus::GameMove, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameMove, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::GameMove, _impl_.move_number_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameMove, _impl_.player_username_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameMove, _impl_.player_color_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameMove, _impl_.action_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameMove, _impl_.block_placement_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameMove, _impl_.timestamp_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameMove, _impl_.think_time_seconds_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameMove, _impl_.score_before_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameMove, _impl_.score_after_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        1,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::blokus::GameStateUpdate, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameStateUpdate, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::GameStateUpdate, _impl_.room_id_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameStateUpdate, _impl_.update_version_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameStateUpdate, _impl_.current_player_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameStateUpdate, _impl_.remaining_time_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameStateUpdate, _impl_.board_changes_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameStateUpdate, _impl_.updated_players_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameStateUpdate, _impl_.updated_at_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameStateUpdate, _impl_.update_reason_),
        ~0u,
        ~0u,
        2,
        3,
        0,
        ~0u,
        1,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::blokus::GetHintRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::GetHintRequest, _impl_.room_id_),
        PROTOBUF_FIELD_OFFSET(::blokus::GetHintRequest, _impl_.player_),
        PROTOBUF_FIELD_OFFSET(::blokus::GetHintRequest, _impl_.hint_level_),
        PROTOBUF_FIELD_OFFSET(::blokus::GetHintResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::GetHintResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::GetHintResponse, _impl_.result_),
        PROTOBUF_FIELD_OFFSET(::blokus::GetHintResponse, _impl_.suggested_moves_),
        PROTOBUF_FIELD_OFFSET(::blokus::GetHintResponse, _impl_.explanations_),
        PROTOBUF_FIELD_OFFSET(::blokus::GetHintResponse, _impl_.hint_quality_),
        PROTOBUF_FIELD_OFFSET(::blokus::GetHintResponse, _impl_.possible_moves_count_),
        PROTOBUF_FIELD_OFFSET(::blokus::GetHintResponse, _impl_.win_probability_),
        PROTOBUF_FIELD_OFFSET(::blokus::GetHintResponse, _impl_.strategy_advice_),
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::blokus::SpectatorJoinRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::SpectatorJoinRequest, _impl_.room_id_),
        PROTOBUF_FIELD_OFFSET(::blokus::SpectatorJoinRequest, _impl_.silent_join_),
        PROTOBUF_FIELD_OFFSET(::blokus::SpectatorJoinResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::SpectatorJoinResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::SpectatorJoinResponse, _impl_.result_),
        PROTOBUF_FIELD_OFFSET(::blokus::SpectatorJoinResponse, _impl_.current_state_),
        PROTOBUF_FIELD_OFFSET(::blokus::SpectatorJoinResponse, _impl_.spectator_count_),
        PROTOBUF_FIELD_OFFSET(::blokus::SpectatorJoinResponse, _impl_.welcome_message_),
        0,
        1,
        ~0u,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::blokus::SpectatorNotification, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::SpectatorNotification, _impl_.room_id_),
        PROTOBUF_FIELD_OFFSET(::blokus::SpectatorNotification, _impl_.spectator_username_),
        PROTOBUF_FIELD_OFFSET(::blokus::SpectatorNotification, _impl_.joined_),
        PROTOBUF_FIELD_OFFSET(::blokus::SpectatorNotification, _impl_.total_spectators_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 20, -1, sizeof(::blokus::RoomStateUpdate)},
        {32, -1, -1, sizeof(::blokus::AddAIPlayerRequest)},
        {45, 56, -1, sizeof(::blokus::AddAIPlayerResponse)},
        {59, -1, -1, sizeof(::blokus::RemovePlayerRequest)},
        {71, 82, -1, sizeof(::blokus::RemovePlayerResponse)},
        {85, -1, -1, sizeof(::blokus::StartGameRequest)},
        {95, 107, -1, sizeof(::blokus::StartGameResponse)},
        {111, 129, -1, sizeof(::blokus::GameStartedNotification)},
        {139, 149, -1, sizeof(::blokus::GameEndedNotification_RatingChangesEntry_DoNotUse)},
        {151, 161, -1, sizeof(::blokus::GameEndedNotification_AchievementsEntry_DoNotUse)},
        {163, 173, -1, sizeof(::blokus::GameEndedNotification_ExperienceGainedEntry_DoNotUse)},
        {175, 194, -1, sizeof(::blokus::GameEndedNotification)},
        {205, -1, -1, sizeof(::blokus::PlayerResult)},
        {224, 242, -1, sizeof(::blokus::TurnChangedNotification)},
        {252, 266, -1, sizeof(::blokus::PlaceBlockRequest)},
        {272, 293, -1, sizeof(::blokus::PlaceBlockResponse)},
        {306, 328, -1, sizeof(::blokus::BlockPlacedNotification)},
        {342, -1, -1, sizeof(::blokus::SkipTurnRequest)},
        {353, 365, -1, sizeof(::blokus::SkipTurnResponse)},
        {369, -1, -1, sizeof(::blokus::UndoMoveRequest)},
        {380, 393, -1, sizeof(::blokus::UndoMoveResponse)},
        {398, -1, -1, sizeof(::blokus::GetGameStateRequest)},
        {410, 429, -1, sizeof(::blokus::GameStateResponse)},
        {440, 457, -1, sizeof(::blokus::GameMove)},
        {466, 482, -1, sizeof(::blokus::GameStateUpdate)},
        {490, -1, -1, sizeof(::blokus::GetHintRequest)},
        {501, 516, -1, sizeof(::blokus::GetHintResponse)},
        {523, -1, -1, sizeof(::blokus::SpectatorJoinRequest)},
        {533, 545, -1, sizeof(::blokus::SpectatorJoinResponse)},
        {549, -1, -1, sizeof(::blokus::SpectatorNotification)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::blokus::_RoomStateUpdate_default_instance_._instance,
    &::blokus::_AddAIPlayerRequest_default_instance_._instance,
    &::blokus::_AddAIPlayerResponse_default_instance_._instance,
    &::blokus::_RemovePlayerRequest_default_instance_._instance,
    &::blokus::_RemovePlayerResponse_default_instance_._instance,
    &::blokus::_StartGameRequest_default_instance_._instance,
    &::blokus::_StartGameResponse_default_instance_._instance,
    &::blokus::_GameStartedNotification_default_instance_._instance,
    &::blokus::_GameEndedNotification_RatingChangesEntry_DoNotUse_default_instance_._instance,
    &::blokus::_GameEndedNotification_AchievementsEntry_DoNotUse_default_instance_._instance,
    &::blokus::_GameEndedNotification_ExperienceGainedEntry_DoNotUse_default_instance_._instance,
    &::blokus::_GameEndedNotification_default_instance_._instance,
    &::blokus::_PlayerResult_default_instance_._instance,
    &::blokus::_TurnChangedNotification_default_instance_._instance,
    &::blokus::_PlaceBlockRequest_default_instance_._instance,
    &::blokus::_PlaceBlockResponse_default_instance_._instance,
    &::blokus::_BlockPlacedNotification_default_instance_._instance,
    &::blokus::_SkipTurnRequest_default_instance_._instance,
    &::blokus::_SkipTurnResponse_default_instance_._instance,
    &::blokus::_UndoMoveRequest_default_instance_._instance,
    &::blokus::_UndoMoveResponse_default_instance_._instance,
    &::blokus::_GetGameStateRequest_default_instance_._instance,
    &::blokus::_GameStateResponse_default_instance_._instance,
    &::blokus::_GameMove_default_instance_._instance,
    &::blokus::_GameStateUpdate_default_instance_._instance,
    &::blokus::_GetHintRequest_default_instance_._instance,
    &::blokus::_GetHintResponse_default_instance_._instance,
    &::blokus::_SpectatorJoinRequest_default_instance_._instance,
    &::blokus::_SpectatorJoinResponse_default_instance_._instance,
    &::blokus::_SpectatorNotification_default_instance_._instance,
};
const char descriptor_table_protodef_game_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\ngame.proto\022\006blokus\032\037google/protobuf/ti"
    "mestamp.proto\032\014common.proto\"\366\002\n\017RoomStat"
    "eUpdate\022\017\n\007room_id\030\001 \001(\005\022(\n\014player_slots"
    "\030\002 \003(\0132\022.blokus.PlayerSlot\022%\n\ngame_state"
    "\030\003 \001(\0162\021.blokus.GameState\022\021\n\tgame_mode\030\004"
    " \001(\t\022\031\n\021turn_time_seconds\030\005 \001(\005\022\022\n\nallow"
    "_undo\030\006 \001(\010\022\032\n\022spectators_allowed\030\007 \001(\010\022"
    "+\n\016current_player\030\010 \001(\0162\023.blokus.PlayerC"
    "olor\022\023\n\013turn_number\030\t \001(\005\022\036\n\026remaining_t"
    "ime_seconds\030\n \001(\005\0220\n\014last_updated\030\013 \001(\0132"
    "\032.google.protobuf.Timestamp\022\017\n\007version\030\014"
    " \001(\005\"\206\001\n\022AddAIPlayerRequest\022\017\n\007room_id\030\001"
    " \001(\005\022\"\n\005color\030\002 \001(\0162\023.blokus.PlayerColor"
    "\022\022\n\ndifficulty\030\003 \001(\005\022\017\n\007ai_name\030\004 \001(\t\022\026\n"
    "\016ai_personality\030\005 \001(\t\"r\n\023AddAIPlayerResp"
    "onse\022\036\n\006result\030\001 \001(\0132\016.blokus.Result\022*\n\016"
    "ai_player_slot\030\002 \001(\0132\022.blokus.PlayerSlot"
    "\022\017\n\007message\030\003 \001(\t\"k\n\023RemovePlayerRequest"
    "\022\017\n\007room_id\030\001 \001(\005\022\"\n\005color\030\002 \001(\0162\023.bloku"
    "s.PlayerColor\022\016\n\006reason\030\003 \001(\t\022\017\n\007is_kick"
    "\030\004 \001(\010\"_\n\024RemovePlayerResponse\022\036\n\006result"
    "\030\001 \001(\0132\016.blokus.Result\022\017\n\007message\030\002 \001(\t\022"
    "\026\n\016room_disbanded\030\003 \001(\010\"8\n\020StartGameRequ"
    "est\022\017\n\007room_id\030\001 \001(\005\022\023\n\013force_start\030\002 \001("
    "\010\"\235\001\n\021StartGameResponse\022\036\n\006result\030\001 \001(\0132"
    "\016.blokus.Result\022\017\n\007message\030\002 \001(\t\0223\n\017game"
    "_start_time\030\003 \001(\0132\032.google.protobuf.Time"
    "stamp\022\"\n\032estimated_duration_minutes\030\004 \001("
    "\005\"\300\002\n\027GameStartedNotification\022\017\n\007room_id"
    "\030\001 \001(\005\022#\n\007players\030\002 \003(\0132\022.blokus.PlayerS"
    "lot\022)\n\014first_player\030\003 \001(\0162\023.blokus.Playe"
    "rColor\022\021\n\tgame_mode\030\004 \001(\t\022\031\n\021turn_time_s"
    "econds\030\005 \001(\005\022\022\n\nallow_undo\030\006 \001(\010\022\026\n\016max_"
    "undo_count\030\007 \001(\005\022)\n\rinitial_board\030\010 \001(\0132"
    "\022.blokus.BoardState\022.\n\nstarted_at\030\t \001(\0132"
    "\032.google.protobuf.Timestamp\022\017\n\007game_id\030\n"
    " \001(\t\"\232\005\n\025GameEndedNotification\022\017\n\007room_i"
    "d\030\001 \001(\005\022\017\n\007game_id\030\002 \001(\t\022)\n\nend_reason\030\003"
    " \001(\0162\025.blokus.GameEndReason\022+\n\rfinal_res"
    "ults\030\004 \003(\0132\024.blokus.PlayerResult\022\016\n\006winn"
    "er\030\005 \001(\t\022%\n\ngame_stats\030\006 \001(\0132\021.blokus.Ga"
    "meStats\022,\n\010ended_at\030\007 \001(\0132\032.google.proto"
    "buf.Timestamp\022\035\n\025game_duration_seconds\030\010"
    " \001(\005\022H\n\016rating_changes\030\t \003(\01320.blokus.Ga"
    "meEndedNotification.RatingChangesEntry\022E"
    "\n\014achievements\030\n \003(\0132/.blokus.GameEndedN"
    "otification.AchievementsEntry\022N\n\021experie"
    "nce_gained\030\013 \003(\01323.blokus.GameEndedNotif"
    "ication.ExperienceGainedEntry\0324\n\022RatingC"
    "hangesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\005:"
    "\0028\001\0323\n\021AchievementsEntry\022\013\n\003key\030\001 \001(\t\022\r\n"
    "\005value\030\002 \001(\t:\0028\001\0327\n\025ExperienceGainedEntr"
    "y\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\005:\0028\001\"\236\002\n\014Pl"
    "ayerResult\022\020\n\010username\030\001 \001(\t\022\"\n\005color\030\002 "
    "\001(\0162\023.blokus.PlayerColor\022\023\n\013final_score\030"
    "\003 \001(\005\022\025\n\rblocks_placed\030\004 \001(\005\022\030\n\020remainin"
    "g_blocks\030\005 \001(\005\022\033\n\023finished_all_blocks\030\006 "
    "\001(\010\022\023\n\013total_moves\030\007 \001(\005\022\022\n\nundo_count\030\010"
    " \001(\005\022\032\n\022average_think_time\030\t \001(\002\022\032\n\022long"
    "est_think_time\030\n \001(\005\022\024\n\014disconnected\030\013 \001"
    "(\010\"\352\002\n\027TurnChangedNotification\022\017\n\007room_i"
    "d\030\001 \001(\005\022+\n\016current_player\030\002 \001(\0162\023.blokus"
    ".PlayerColor\022,\n\017previous_player\030\003 \001(\0162\023."
    "blokus.PlayerColor\022\023\n\013turn_number\030\004 \001(\005\022"
    "\031\n\021turn_time_seconds\030\005 \001(\005\0223\n\017turn_start"
    "ed_at\030\006 \001(\0132\032.google.protobuf.Timestamp\022"
    "\022\n\nmoves_made\030\007 \001(\005\022\034\n\024game_nearly_finis"
    "hed\030\010 \001(\010\022+\n\017previous_action\030\t \001(\0162\022.blo"
    "kus.TurnAction\022\037\n\027previous_action_detail"
    "s\030\n \001(\t\"\261\001\n\021PlaceBlockRequest\022\017\n\007room_id"
    "\030\001 \001(\005\022/\n\017block_placement\030\002 \001(\0132\026.blokus"
    ".BlockPlacement\022\031\n\021confirm_placement\030\003 \001"
    "(\010\022\020\n\010use_hint\030\004 \001(\010\022\034\n\024client_board_ver"
    "sion\030\005 \001(\005\022\017\n\007move_id\030\006 \001(\t\"\247\003\n\022PlaceBlo"
    "ckResponse\022\036\n\006result\030\001 \001(\0132\016.blokus.Resu"
    "lt\0223\n\023confirmed_placement\030\002 \001(\0132\026.blokus"
    ".BlockPlacement\022\024\n\014score_gained\030\003 \001(\005\022+\n"
    "\017new_board_state\030\004 \001(\0132\022.blokus.BoardSta"
    "te\022\025\n\rmove_accepted\030\005 \001(\010\022\027\n\017valid_place"
    "ment\030\006 \001(\010\022\031\n\021validation_errors\030\007 \003(\t\022-\n"
    "\023suggested_positions\030\010 \003(\0132\020.blokus.Posi"
    "tion\022\022\n\nturn_ended\030\t \001(\010\022(\n\013next_player\030"
    "\n \001(\0162\023.blokus.PlayerColor\022\022\n\ngame_ended"
    "\030\013 \001(\010\022\017\n\007move_id\030\014 \001(\t\022\034\n\024server_board_"
    "version\030\r \001(\005\"\321\003\n\027BlockPlacedNotificatio"
    "n\022\017\n\007room_id\030\001 \001(\005\022\027\n\017player_username\030\002 "
    "\001(\t\022)\n\014player_color\030\003 \001(\0162\023.blokus.Playe"
    "rColor\022/\n\017block_placement\030\004 \001(\0132\026.blokus"
    ".BlockPlacement\022\024\n\014score_gained\030\005 \001(\005\022\027\n"
    "\017new_total_score\030\006 \001(\005\022\030\n\020remaining_bloc"
    "ks\030\007 \001(\005\022)\n\rupdated_board\030\010 \001(\0132\022.blokus"
    ".BoardState\022\022\n\nturn_ended\030\t \001(\010\022(\n\013next_"
    "player\030\n \001(\0162\023.blokus.PlayerColor\022-\n\tpla"
    "ced_at\030\013 \001(\0132\032.google.protobuf.Timestamp"
    "\022\024\n\014perfect_game\030\014 \001(\010\022\031\n\021game_winning_m"
    "ove\030\r \001(\010\022\036\n\026triggered_achievements\030\016 \003("
    "\t\"B\n\017SkipTurnRequest\022\017\n\007room_id\030\001 \001(\005\022\016\n"
    "\006reason\030\002 \001(\t\022\016\n\006forced\030\003 \001(\010\"\201\001\n\020SkipTu"
    "rnResponse\022\036\n\006result\030\001 \001(\0132\016.blokus.Resu"
    "lt\022\017\n\007message\030\002 \001(\t\022(\n\013next_player\030\003 \001(\016"
    "2\023.blokus.PlayerColor\022\022\n\ngame_ended\030\004 \001("
    "\010\"I\n\017UndoMoveRequest\022\017\n\007room_id\030\001 \001(\005\022\025\n"
    "\rmoves_to_undo\030\002 \001(\005\022\016\n\006reason\030\003 \001(\t\"\272\001\n"
    "\020UndoMoveResponse\022\036\n\006result\030\001 \001(\0132\016.blok"
    "us.Result\022*\n\016reverted_board\030\002 \001(\0132\022.blok"
    "us.BoardState\022+\n\016current_player\030\003 \001(\0162\023."
    "blokus.PlayerColor\022\034\n\024undo_count_remaini"
    "ng\030\004 \001(\005\022\017\n\007message\030\005 \001(\t\"{\n\023GetGameStat"
    "eRequest\022\017\n\007room_id\030\001 \001(\005\022\025\n\rinclude_boa"
    "rd\030\002 \001(\010\022\036\n\026include_player_details\030\003 \001(\010"
    "\022\034\n\024include_move_history\030\004 \001(\010\"\213\003\n\021GameS"
    "tateResponse\022\036\n\006result\030\001 \001(\0132\016.blokus.Re"
    "sult\022%\n\ngame_state\030\002 \001(\0162\021.blokus.GameSt"
    "ate\022+\n\016current_player\030\003 \001(\0162\023.blokus.Pla"
    "yerColor\022\023\n\013turn_number\030\004 \001(\005\022\036\n\026remaini"
    "ng_time_seconds\030\005 \001(\005\022#\n\007players\030\006 \003(\0132\022"
    ".blokus.PlayerSlot\022\'\n\013board_state\030\007 \001(\0132"
    "\022.blokus.BoardState\022&\n\014move_history\030\010 \003("
    "\0132\020.blokus.GameMove\0223\n\017game_started_at\030\t"
    " \001(\0132\032.google.protobuf.Timestamp\022\017\n\007game"
    "_id\030\n \001(\t\022\021\n\tgame_mode\030\013 \001(\t\"\256\002\n\010GameMov"
    "e\022\023\n\013move_number\030\001 \001(\005\022\027\n\017player_usernam"
    "e\030\002 \001(\t\022)\n\014player_color\030\003 \001(\0162\023.blokus.P"
    "layerColor\022\"\n\006action\030\004 \001(\0162\022.blokus.Turn"
    "Action\022/\n\017block_placement\030\005 \001(\0132\026.blokus"
    ".BlockPlacement\022-\n\ttimestamp\030\006 \001(\0132\032.goo"
    "gle.protobuf.Timestamp\022\032\n\022think_time_sec"
    "onds\030\007 \001(\005\022\024\n\014score_before\030\010 \001(\005\022\023\n\013scor"
    "e_after\030\t \001(\005\"\345\002\n\017GameStateUpdate\022\017\n\007roo"
    "m_id\030\001 \001(\005\022\026\n\016update_version\030\002 \001(\005\0220\n\016cu"
    "rrent_player\030\003 \001(\0162\023.blokus.PlayerColorH"
    "\000\210\001\001\022\033\n\016remaining_time\030\004 \001(\005H\001\210\001\001\022.\n\rboa"
    "rd_changes\030\005 \001(\0132\022.blokus.BoardStateH\002\210\001"
    "\001\022+\n\017updated_players\030\006 \003(\0132\022.blokus.Play"
    "erSlot\022.\n\nupdated_at\030\007 \001(\0132\032.google.prot"
    "obuf.Timestamp\022\025\n\rupdate_reason\030\010 \001(\tB\021\n"
    "\017_current_playerB\021\n\017_remaining_timeB\020\n\016_"
    "board_changes\"Z\n\016GetHintRequest\022\017\n\007room_"
    "id\030\001 \001(\005\022#\n\006player\030\002 \001(\0162\023.blokus.Player"
    "Color\022\022\n\nhint_level\030\003 \001(\005\"\336\001\n\017GetHintRes"
    "ponse\022\036\n\006result\030\001 \001(\0132\016.blokus.Result\022/\n"
    "\017suggested_moves\030\002 \003(\0132\026.blokus.BlockPla"
    "cement\022\024\n\014explanations\030\003 \003(\t\022\024\n\014hint_qua"
    "lity\030\004 \001(\005\022\034\n\024possible_moves_count\030\005 \001(\005"
    "\022\027\n\017win_probability\030\006 \001(\002\022\027\n\017strategy_ad"
    "vice\030\007 \001(\t\"<\n\024SpectatorJoinRequest\022\017\n\007ro"
    "om_id\030\001 \001(\005\022\023\n\013silent_join\030\002 \001(\010\"\233\001\n\025Spe"
    "ctatorJoinResponse\022\036\n\006result\030\001 \001(\0132\016.blo"
    "kus.Result\0220\n\rcurrent_state\030\002 \001(\0132\031.blok"
    "us.GameStateResponse\022\027\n\017spectator_count\030"
    "\003 \001(\005\022\027\n\017welcome_message\030\004 \001(\t\"n\n\025Specta"
    "torNotification\022\017\n\007room_id\030\001 \001(\005\022\032\n\022spec"
    "tator_username\030\002 \001(\t\022\016\n\006joined\030\003 \001(\010\022\030\n\020"
    "total_spectators\030\004 \001(\005*n\n\nTurnAction\022\033\n\027"
    "TURN_ACTION_PLACE_BLOCK\020\000\022\024\n\020TURN_ACTION"
    "_SKIP\020\001\022\024\n\020TURN_ACTION_UNDO\020\002\022\027\n\023TURN_AC"
    "TION_TIMEOUT\020\003*\235\001\n\rGameEndReason\022\023\n\017GAME"
    "_END_NORMAL\020\000\022\024\n\020GAME_END_FORFEIT\020\001\022\027\n\023G"
    "AME_END_DISCONNECT\020\002\022\024\n\020GAME_END_TIMEOUT"
    "\020\003\022\031\n\025GAME_END_SERVER_ERROR\020\004\022\027\n\023GAME_EN"
    "D_ADMIN_STOP\020\005b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_game_2eproto_deps[2] =
    {
        &::descriptor_table_common_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_game_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_game_2eproto = {
    false,
    false,
    6422,
    descriptor_table_protodef_game_2eproto,
    "game.proto",
    &descriptor_table_game_2eproto_once,
    descriptor_table_game_2eproto_deps,
    2,
    30,
    schemas,
    file_default_instances,
    TableStruct_game_2eproto::offsets,
    file_level_enum_descriptors_game_2eproto,
    file_level_service_descriptors_game_2eproto,
};
namespace blokus {
const ::google::protobuf::EnumDescriptor* TurnAction_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_game_2eproto);
  return file_level_enum_descriptors_game_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t TurnAction_internal_data_[] = {
    262144u, 0u, };
bool TurnAction_IsValid(int value) {
  return 0 <= value && value <= 3;
}
const ::google::protobuf::EnumDescriptor* GameEndReason_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_game_2eproto);
  return file_level_enum_descriptors_game_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t GameEndReason_internal_data_[] = {
    393216u, 0u, };
bool GameEndReason_IsValid(int value) {
  return 0 <= value && value <= 5;
}
// ===================================================================

class RoomStateUpdate::_Internal {
 public:
  using HasBits =
      decltype(std::declval<RoomStateUpdate>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(RoomStateUpdate, _impl_._has_bits_);
};

void RoomStateUpdate::clear_player_slots() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_slots_.Clear();
}
void RoomStateUpdate::clear_last_updated() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.last_updated_ != nullptr) _impl_.last_updated_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
RoomStateUpdate::RoomStateUpdate(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.RoomStateUpdate)
}
inline PROTOBUF_NDEBUG_INLINE RoomStateUpdate::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::RoomStateUpdate& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        player_slots_{visibility, arena, from.player_slots_},
        game_mode_(arena, from.game_mode_) {}

RoomStateUpdate::RoomStateUpdate(
    ::google::protobuf::Arena* arena,
    const RoomStateUpdate& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RoomStateUpdate* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.last_updated_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.last_updated_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, room_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, room_id_),
           offsetof(Impl_, version_) -
               offsetof(Impl_, room_id_) +
               sizeof(Impl_::version_));

  // @@protoc_insertion_point(copy_constructor:blokus.RoomStateUpdate)
}
inline PROTOBUF_NDEBUG_INLINE RoomStateUpdate::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        player_slots_{visibility, arena},
        game_mode_(arena) {}

inline void RoomStateUpdate::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, last_updated_),
           0,
           offsetof(Impl_, version_) -
               offsetof(Impl_, last_updated_) +
               sizeof(Impl_::version_));
}
RoomStateUpdate::~RoomStateUpdate() {
  // @@protoc_insertion_point(destructor:blokus.RoomStateUpdate)
  SharedDtor(*this);
}
inline void RoomStateUpdate::SharedDtor(MessageLite& self) {
  RoomStateUpdate& this_ = static_cast<RoomStateUpdate&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.game_mode_.Destroy();
  delete this_._impl_.last_updated_;
  this_._impl_.~Impl_();
}

inline void* RoomStateUpdate::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) RoomStateUpdate(arena);
}
constexpr auto RoomStateUpdate::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(RoomStateUpdate, _impl_.player_slots_) +
          decltype(RoomStateUpdate::_impl_.player_slots_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(RoomStateUpdate), alignof(RoomStateUpdate), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&RoomStateUpdate::PlacementNew_,
                                 sizeof(RoomStateUpdate),
                                 alignof(RoomStateUpdate));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull RoomStateUpdate::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_RoomStateUpdate_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &RoomStateUpdate::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<RoomStateUpdate>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &RoomStateUpdate::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<RoomStateUpdate>(), &RoomStateUpdate::ByteSizeLong,
            &RoomStateUpdate::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(RoomStateUpdate, _impl_._cached_size_),
        false,
    },
    &RoomStateUpdate::kDescriptorMethods,
    &descriptor_table_game_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* RoomStateUpdate::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 12, 2, 48, 2> RoomStateUpdate::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RoomStateUpdate, _impl_._has_bits_),
    0, // no _extensions_
    12, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294963200,  // skipmap
    offsetof(decltype(_table_), field_entries),
    12,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::RoomStateUpdate>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 room_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RoomStateUpdate, _impl_.room_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(RoomStateUpdate, _impl_.room_id_)}},
    // repeated .blokus.PlayerSlot player_slots = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(RoomStateUpdate, _impl_.player_slots_)}},
    // .blokus.GameState game_state = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RoomStateUpdate, _impl_.game_state_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(RoomStateUpdate, _impl_.game_state_)}},
    // string game_mode = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(RoomStateUpdate, _impl_.game_mode_)}},
    // int32 turn_time_seconds = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RoomStateUpdate, _impl_.turn_time_seconds_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(RoomStateUpdate, _impl_.turn_time_seconds_)}},
    // bool allow_undo = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(RoomStateUpdate, _impl_.allow_undo_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(RoomStateUpdate, _impl_.allow_undo_)}},
    // bool spectators_allowed = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(RoomStateUpdate, _impl_.spectators_allowed_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(RoomStateUpdate, _impl_.spectators_allowed_)}},
    // .blokus.PlayerColor current_player = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RoomStateUpdate, _impl_.current_player_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(RoomStateUpdate, _impl_.current_player_)}},
    // int32 turn_number = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RoomStateUpdate, _impl_.turn_number_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(RoomStateUpdate, _impl_.turn_number_)}},
    // int32 remaining_time_seconds = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RoomStateUpdate, _impl_.remaining_time_seconds_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(RoomStateUpdate, _impl_.remaining_time_seconds_)}},
    // .google.protobuf.Timestamp last_updated = 11;
    {::_pbi::TcParser::FastMtS1,
     {90, 0, 1, PROTOBUF_FIELD_OFFSET(RoomStateUpdate, _impl_.last_updated_)}},
    // int32 version = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RoomStateUpdate, _impl_.version_), 63>(),
     {96, 63, 0, PROTOBUF_FIELD_OFFSET(RoomStateUpdate, _impl_.version_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 room_id = 1;
    {PROTOBUF_FIELD_OFFSET(RoomStateUpdate, _impl_.room_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated .blokus.PlayerSlot player_slots = 2;
    {PROTOBUF_FIELD_OFFSET(RoomStateUpdate, _impl_.player_slots_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .blokus.GameState game_state = 3;
    {PROTOBUF_FIELD_OFFSET(RoomStateUpdate, _impl_.game_state_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string game_mode = 4;
    {PROTOBUF_FIELD_OFFSET(RoomStateUpdate, _impl_.game_mode_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 turn_time_seconds = 5;
    {PROTOBUF_FIELD_OFFSET(RoomStateUpdate, _impl_.turn_time_seconds_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool allow_undo = 6;
    {PROTOBUF_FIELD_OFFSET(RoomStateUpdate, _impl_.allow_undo_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool spectators_allowed = 7;
    {PROTOBUF_FIELD_OFFSET(RoomStateUpdate, _impl_.spectators_allowed_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .blokus.PlayerColor current_player = 8;
    {PROTOBUF_FIELD_OFFSET(RoomStateUpdate, _impl_.current_player_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int32 turn_number = 9;
    {PROTOBUF_FIELD_OFFSET(RoomStateUpdate, _impl_.turn_number_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 remaining_time_seconds = 10;
    {PROTOBUF_FIELD_OFFSET(RoomStateUpdate, _impl_.remaining_time_seconds_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .google.protobuf.Timestamp last_updated = 11;
    {PROTOBUF_FIELD_OFFSET(RoomStateUpdate, _impl_.last_updated_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 version = 12;
    {PROTOBUF_FIELD_OFFSET(RoomStateUpdate, _impl_.version_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::blokus::PlayerSlot>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\26\0\0\0\11\0\0\0\0\0\0\0\0\0\0\0"
    "blokus.RoomStateUpdate"
    "game_mode"
  }},
};

PROTOBUF_NOINLINE void RoomStateUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.RoomStateUpdate)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_slots_.Clear();
  _impl_.game_mode_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.last_updated_ != nullptr);
    _impl_.last_updated_->Clear();
  }
  ::memset(&_impl_.room_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.version_) -
      reinterpret_cast<char*>(&_impl_.room_id_)) + sizeof(_impl_.version_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* RoomStateUpdate::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const RoomStateUpdate& this_ = static_cast<const RoomStateUpdate&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* RoomStateUpdate::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const RoomStateUpdate& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.RoomStateUpdate)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 room_id = 1;
          if (this_._internal_room_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_room_id(), target);
          }

          // repeated .blokus.PlayerSlot player_slots = 2;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_player_slots_size());
               i < n; i++) {
            const auto& repfield = this_._internal_player_slots().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    2, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // .blokus.GameState game_state = 3;
          if (this_._internal_game_state() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                3, this_._internal_game_state(), target);
          }

          // string game_mode = 4;
          if (!this_._internal_game_mode().empty()) {
            const std::string& _s = this_._internal_game_mode();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.RoomStateUpdate.game_mode");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // int32 turn_time_seconds = 5;
          if (this_._internal_turn_time_seconds() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<5>(
                    stream, this_._internal_turn_time_seconds(), target);
          }

          // bool allow_undo = 6;
          if (this_._internal_allow_undo() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                6, this_._internal_allow_undo(), target);
          }

          // bool spectators_allowed = 7;
          if (this_._internal_spectators_allowed() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                7, this_._internal_spectators_allowed(), target);
          }

          // .blokus.PlayerColor current_player = 8;
          if (this_._internal_current_player() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                8, this_._internal_current_player(), target);
          }

          // int32 turn_number = 9;
          if (this_._internal_turn_number() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<9>(
                    stream, this_._internal_turn_number(), target);
          }

          // int32 remaining_time_seconds = 10;
          if (this_._internal_remaining_time_seconds() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<10>(
                    stream, this_._internal_remaining_time_seconds(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp last_updated = 11;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                11, *this_._impl_.last_updated_, this_._impl_.last_updated_->GetCachedSize(), target,
                stream);
          }

          // int32 version = 12;
          if (this_._internal_version() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<12>(
                    stream, this_._internal_version(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.RoomStateUpdate)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t RoomStateUpdate::ByteSizeLong(const MessageLite& base) {
          const RoomStateUpdate& this_ = static_cast<const RoomStateUpdate&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t RoomStateUpdate::ByteSizeLong() const {
          const RoomStateUpdate& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.RoomStateUpdate)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .blokus.PlayerSlot player_slots = 2;
            {
              total_size += 1UL * this_._internal_player_slots_size();
              for (const auto& msg : this_._internal_player_slots()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // string game_mode = 4;
            if (!this_._internal_game_mode().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_game_mode());
            }
          }
           {
            // .google.protobuf.Timestamp last_updated = 11;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.last_updated_);
            }
          }
           {
            // int32 room_id = 1;
            if (this_._internal_room_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_room_id());
            }
            // .blokus.GameState game_state = 3;
            if (this_._internal_game_state() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_game_state());
            }
            // int32 turn_time_seconds = 5;
            if (this_._internal_turn_time_seconds() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_turn_time_seconds());
            }
            // bool allow_undo = 6;
            if (this_._internal_allow_undo() != 0) {
              total_size += 2;
            }
            // bool spectators_allowed = 7;
            if (this_._internal_spectators_allowed() != 0) {
              total_size += 2;
            }
            // .blokus.PlayerColor current_player = 8;
            if (this_._internal_current_player() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_current_player());
            }
            // int32 turn_number = 9;
            if (this_._internal_turn_number() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_turn_number());
            }
            // int32 remaining_time_seconds = 10;
            if (this_._internal_remaining_time_seconds() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_remaining_time_seconds());
            }
            // int32 version = 12;
            if (this_._internal_version() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_version());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void RoomStateUpdate::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RoomStateUpdate*>(&to_msg);
  auto& from = static_cast<const RoomStateUpdate&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.RoomStateUpdate)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_player_slots()->MergeFrom(
      from._internal_player_slots());
  if (!from._internal_game_mode().empty()) {
    _this->_internal_set_game_mode(from._internal_game_mode());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.last_updated_ != nullptr);
    if (_this->_impl_.last_updated_ == nullptr) {
      _this->_impl_.last_updated_ =
          ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.last_updated_);
    } else {
      _this->_impl_.last_updated_->MergeFrom(*from._impl_.last_updated_);
    }
  }
  if (from._internal_room_id() != 0) {
    _this->_impl_.room_id_ = from._impl_.room_id_;
  }
  if (from._internal_game_state() != 0) {
    _this->_impl_.game_state_ = from._impl_.game_state_;
  }
  if (from._internal_turn_time_seconds() != 0) {
    _this->_impl_.turn_time_seconds_ = from._impl_.turn_time_seconds_;
  }
  if (from._internal_allow_undo() != 0) {
    _this->_impl_.allow_undo_ = from._impl_.allow_undo_;
  }
  if (from._internal_spectators_allowed() != 0) {
    _this->_impl_.spectators_allowed_ = from._impl_.spectators_allowed_;
  }
  if (from._internal_current_player() != 0) {
    _this->_impl_.current_player_ = from._impl_.current_player_;
  }
  if (from._internal_turn_number() != 0) {
    _this->_impl_.turn_number_ = from._impl_.turn_number_;
  }
  if (from._internal_remaining_time_seconds() != 0) {
    _this->_impl_.remaining_time_seconds_ = from._impl_.remaining_time_seconds_;
  }
  if (from._internal_version() != 0) {
    _this->_impl_.version_ = from._impl_.version_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RoomStateUpdate::CopyFrom(const RoomStateUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.RoomStateUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RoomStateUpdate::InternalSwap(RoomStateUpdate* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.player_slots_.InternalSwap(&other->_impl_.player_slots_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.game_mode_, &other->_impl_.game_mode_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoomStateUpdate, _impl_.version_)
      + sizeof(RoomStateUpdate::_impl_.version_)
      - PROTOBUF_FIELD_OFFSET(RoomStateUpdate, _impl_.last_updated_)>(
          reinterpret_cast<char*>(&_impl_.last_updated_),
          reinterpret_cast<char*>(&other->_impl_.last_updated_));
}

::google::protobuf::Metadata RoomStateUpdate::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AddAIPlayerRequest::_Internal {
 public:
};

AddAIPlayerRequest::AddAIPlayerRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.AddAIPlayerRequest)
}
inline PROTOBUF_NDEBUG_INLINE AddAIPlayerRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::AddAIPlayerRequest& from_msg)
      : ai_name_(arena, from.ai_name_),
        ai_personality_(arena, from.ai_personality_),
        _cached_size_{0} {}

AddAIPlayerRequest::AddAIPlayerRequest(
    ::google::protobuf::Arena* arena,
    const AddAIPlayerRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AddAIPlayerRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, room_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, room_id_),
           offsetof(Impl_, difficulty_) -
               offsetof(Impl_, room_id_) +
               sizeof(Impl_::difficulty_));

  // @@protoc_insertion_point(copy_constructor:blokus.AddAIPlayerRequest)
}
inline PROTOBUF_NDEBUG_INLINE AddAIPlayerRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : ai_name_(arena),
        ai_personality_(arena),
        _cached_size_{0} {}

inline void AddAIPlayerRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, room_id_),
           0,
           offsetof(Impl_, difficulty_) -
               offsetof(Impl_, room_id_) +
               sizeof(Impl_::difficulty_));
}
AddAIPlayerRequest::~AddAIPlayerRequest() {
  // @@protoc_insertion_point(destructor:blokus.AddAIPlayerRequest)
  SharedDtor(*this);
}
inline void AddAIPlayerRequest::SharedDtor(MessageLite& self) {
  AddAIPlayerRequest& this_ = static_cast<AddAIPlayerRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.ai_name_.Destroy();
  this_._impl_.ai_personality_.Destroy();
  this_._impl_.~Impl_();
}

inline void* AddAIPlayerRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) AddAIPlayerRequest(arena);
}
constexpr auto AddAIPlayerRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(AddAIPlayerRequest),
                                            alignof(AddAIPlayerRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull AddAIPlayerRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_AddAIPlayerRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &AddAIPlayerRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<AddAIPlayerRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &AddAIPlayerRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<AddAIPlayerRequest>(), &AddAIPlayerRequest::ByteSizeLong,
            &AddAIPlayerRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(AddAIPlayerRequest, _impl_._cached_size_),
        false,
    },
    &AddAIPlayerRequest::kDescriptorMethods,
    &descriptor_table_game_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* AddAIPlayerRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 55, 2> AddAIPlayerRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::AddAIPlayerRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 room_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AddAIPlayerRequest, _impl_.room_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AddAIPlayerRequest, _impl_.room_id_)}},
    // .blokus.PlayerColor color = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AddAIPlayerRequest, _impl_.color_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(AddAIPlayerRequest, _impl_.color_)}},
    // int32 difficulty = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AddAIPlayerRequest, _impl_.difficulty_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(AddAIPlayerRequest, _impl_.difficulty_)}},
    // string ai_name = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(AddAIPlayerRequest, _impl_.ai_name_)}},
    // string ai_personality = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(AddAIPlayerRequest, _impl_.ai_personality_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 room_id = 1;
    {PROTOBUF_FIELD_OFFSET(AddAIPlayerRequest, _impl_.room_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .blokus.PlayerColor color = 2;
    {PROTOBUF_FIELD_OFFSET(AddAIPlayerRequest, _impl_.color_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int32 difficulty = 3;
    {PROTOBUF_FIELD_OFFSET(AddAIPlayerRequest, _impl_.difficulty_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string ai_name = 4;
    {PROTOBUF_FIELD_OFFSET(AddAIPlayerRequest, _impl_.ai_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string ai_personality = 5;
    {PROTOBUF_FIELD_OFFSET(AddAIPlayerRequest, _impl_.ai_personality_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\31\0\0\0\7\16\0\0"
    "blokus.AddAIPlayerRequest"
    "ai_name"
    "ai_personality"
  }},
};

PROTOBUF_NOINLINE void AddAIPlayerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.AddAIPlayerRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ai_name_.ClearToEmpty();
  _impl_.ai_personality_.ClearToEmpty();
  ::memset(&_impl_.room_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.difficulty_) -
      reinterpret_cast<char*>(&_impl_.room_id_)) + sizeof(_impl_.difficulty_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AddAIPlayerRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AddAIPlayerRequest& this_ = static_cast<const AddAIPlayerRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AddAIPlayerRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AddAIPlayerRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.AddAIPlayerRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 room_id = 1;
          if (this_._internal_room_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_room_id(), target);
          }

          // .blokus.PlayerColor color = 2;
          if (this_._internal_color() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                2, this_._internal_color(), target);
          }

          // int32 difficulty = 3;
          if (this_._internal_difficulty() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_difficulty(), target);
          }

          // string ai_name = 4;
          if (!this_._internal_ai_name().empty()) {
            const std::string& _s = this_._internal_ai_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.AddAIPlayerRequest.ai_name");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // string ai_personality = 5;
          if (!this_._internal_ai_personality().empty()) {
            const std::string& _s = this_._internal_ai_personality();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.AddAIPlayerRequest.ai_personality");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.AddAIPlayerRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AddAIPlayerRequest::ByteSizeLong(const MessageLite& base) {
          const AddAIPlayerRequest& this_ = static_cast<const AddAIPlayerRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AddAIPlayerRequest::ByteSizeLong() const {
          const AddAIPlayerRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.AddAIPlayerRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string ai_name = 4;
            if (!this_._internal_ai_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_ai_name());
            }
            // string ai_personality = 5;
            if (!this_._internal_ai_personality().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_ai_personality());
            }
            // int32 room_id = 1;
            if (this_._internal_room_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_room_id());
            }
            // .blokus.PlayerColor color = 2;
            if (this_._internal_color() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_color());
            }
            // int32 difficulty = 3;
            if (this_._internal_difficulty() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_difficulty());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AddAIPlayerRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AddAIPlayerRequest*>(&to_msg);
  auto& from = static_cast<const AddAIPlayerRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.AddAIPlayerRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ai_name().empty()) {
    _this->_internal_set_ai_name(from._internal_ai_name());
  }
  if (!from._internal_ai_personality().empty()) {
    _this->_internal_set_ai_personality(from._internal_ai_personality());
  }
  if (from._internal_room_id() != 0) {
    _this->_impl_.room_id_ = from._impl_.room_id_;
  }
  if (from._internal_color() != 0) {
    _this->_impl_.color_ = from._impl_.color_;
  }
  if (from._internal_difficulty() != 0) {
    _this->_impl_.difficulty_ = from._impl_.difficulty_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AddAIPlayerRequest::CopyFrom(const AddAIPlayerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.AddAIPlayerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AddAIPlayerRequest::InternalSwap(AddAIPlayerRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ai_name_, &other->_impl_.ai_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ai_personality_, &other->_impl_.ai_personality_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddAIPlayerRequest, _impl_.difficulty_)
      + sizeof(AddAIPlayerRequest::_impl_.difficulty_)
      - PROTOBUF_FIELD_OFFSET(AddAIPlayerRequest, _impl_.room_id_)>(
          reinterpret_cast<char*>(&_impl_.room_id_),
          reinterpret_cast<char*>(&other->_impl_.room_id_));
}

::google::protobuf::Metadata AddAIPlayerRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AddAIPlayerResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<AddAIPlayerResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AddAIPlayerResponse, _impl_._has_bits_);
};

void AddAIPlayerResponse::clear_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_ != nullptr) _impl_.result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void AddAIPlayerResponse::clear_ai_player_slot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ai_player_slot_ != nullptr) _impl_.ai_player_slot_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
AddAIPlayerResponse::AddAIPlayerResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.AddAIPlayerResponse)
}
inline PROTOBUF_NDEBUG_INLINE AddAIPlayerResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::AddAIPlayerResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        message_(arena, from.message_) {}

AddAIPlayerResponse::AddAIPlayerResponse(
    ::google::protobuf::Arena* arena,
    const AddAIPlayerResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AddAIPlayerResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::blokus::Result>(
                              arena, *from._impl_.result_)
                        : nullptr;
  _impl_.ai_player_slot_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::blokus::PlayerSlot>(
                              arena, *from._impl_.ai_player_slot_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:blokus.AddAIPlayerResponse)
}
inline PROTOBUF_NDEBUG_INLINE AddAIPlayerResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        message_(arena) {}

inline void AddAIPlayerResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, result_),
           0,
           offsetof(Impl_, ai_player_slot_) -
               offsetof(Impl_, result_) +
               sizeof(Impl_::ai_player_slot_));
}
AddAIPlayerResponse::~AddAIPlayerResponse() {
  // @@protoc_insertion_point(destructor:blokus.AddAIPlayerResponse)
  SharedDtor(*this);
}
inline void AddAIPlayerResponse::SharedDtor(MessageLite& self) {
  AddAIPlayerResponse& this_ = static_cast<AddAIPlayerResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.message_.Destroy();
  delete this_._impl_.result_;
  delete this_._impl_.ai_player_slot_;
  this_._impl_.~Impl_();
}

inline void* AddAIPlayerResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) AddAIPlayerResponse(arena);
}
constexpr auto AddAIPlayerResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(AddAIPlayerResponse),
                                            alignof(AddAIPlayerResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull AddAIPlayerResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_AddAIPlayerResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &AddAIPlayerResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<AddAIPlayerResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &AddAIPlayerResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<AddAIPlayerResponse>(), &AddAIPlayerResponse::ByteSizeLong,
            &AddAIPlayerResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(AddAIPlayerResponse, _impl_._cached_size_),
        false,
    },
    &AddAIPlayerResponse::kDescriptorMethods,
    &descriptor_table_game_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* AddAIPlayerResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 42, 2> AddAIPlayerResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AddAIPlayerResponse, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::AddAIPlayerResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .blokus.Result result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(AddAIPlayerResponse, _impl_.result_)}},
    // .blokus.PlayerSlot ai_player_slot = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(AddAIPlayerResponse, _impl_.ai_player_slot_)}},
    // string message = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(AddAIPlayerResponse, _impl_.message_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .blokus.Result result = 1;
    {PROTOBUF_FIELD_OFFSET(AddAIPlayerResponse, _impl_.result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .blokus.PlayerSlot ai_player_slot = 2;
    {PROTOBUF_FIELD_OFFSET(AddAIPlayerResponse, _impl_.ai_player_slot_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string message = 3;
    {PROTOBUF_FIELD_OFFSET(AddAIPlayerResponse, _impl_.message_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::blokus::Result>()},
    {::_pbi::TcParser::GetTable<::blokus::PlayerSlot>()},
  }}, {{
    "\32\0\0\7\0\0\0\0"
    "blokus.AddAIPlayerResponse"
    "message"
  }},
};

PROTOBUF_NOINLINE void AddAIPlayerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.AddAIPlayerResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.result_ != nullptr);
      _impl_.result_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.ai_player_slot_ != nullptr);
      _impl_.ai_player_slot_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AddAIPlayerResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AddAIPlayerResponse& this_ = static_cast<const AddAIPlayerResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AddAIPlayerResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AddAIPlayerResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.AddAIPlayerResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .blokus.Result result = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.result_, this_._impl_.result_->GetCachedSize(), target,
                stream);
          }

          // .blokus.PlayerSlot ai_player_slot = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.ai_player_slot_, this_._impl_.ai_player_slot_->GetCachedSize(), target,
                stream);
          }

          // string message = 3;
          if (!this_._internal_message().empty()) {
            const std::string& _s = this_._internal_message();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.AddAIPlayerResponse.message");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.AddAIPlayerResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AddAIPlayerResponse::ByteSizeLong(const MessageLite& base) {
          const AddAIPlayerResponse& this_ = static_cast<const AddAIPlayerResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AddAIPlayerResponse::ByteSizeLong() const {
          const AddAIPlayerResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.AddAIPlayerResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string message = 3;
            if (!this_._internal_message().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_message());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .blokus.Result result = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_);
            }
            // .blokus.PlayerSlot ai_player_slot = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.ai_player_slot_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AddAIPlayerResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AddAIPlayerResponse*>(&to_msg);
  auto& from = static_cast<const AddAIPlayerResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.AddAIPlayerResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.result_ != nullptr);
      if (_this->_impl_.result_ == nullptr) {
        _this->_impl_.result_ =
            ::google::protobuf::Message::CopyConstruct<::blokus::Result>(arena, *from._impl_.result_);
      } else {
        _this->_impl_.result_->MergeFrom(*from._impl_.result_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.ai_player_slot_ != nullptr);
      if (_this->_impl_.ai_player_slot_ == nullptr) {
        _this->_impl_.ai_player_slot_ =
            ::google::protobuf::Message::CopyConstruct<::blokus::PlayerSlot>(arena, *from._impl_.ai_player_slot_);
      } else {
        _this->_impl_.ai_player_slot_->MergeFrom(*from._impl_.ai_player_slot_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AddAIPlayerResponse::CopyFrom(const AddAIPlayerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.AddAIPlayerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AddAIPlayerResponse::InternalSwap(AddAIPlayerResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddAIPlayerResponse, _impl_.ai_player_slot_)
      + sizeof(AddAIPlayerResponse::_impl_.ai_player_slot_)
      - PROTOBUF_FIELD_OFFSET(AddAIPlayerResponse, _impl_.result_)>(
          reinterpret_cast<char*>(&_impl_.result_),
          reinterpret_cast<char*>(&other->_impl_.result_));
}

::google::protobuf::Metadata AddAIPlayerResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RemovePlayerRequest::_Internal {
 public:
};

RemovePlayerRequest::RemovePlayerRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.RemovePlayerRequest)
}
inline PROTOBUF_NDEBUG_INLINE RemovePlayerRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::RemovePlayerRequest& from_msg)
      : reason_(arena, from.reason_),
        _cached_size_{0} {}

RemovePlayerRequest::RemovePlayerRequest(
    ::google::protobuf::Arena* arena,
    const RemovePlayerRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RemovePlayerRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, room_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, room_id_),
           offsetof(Impl_, is_kick_) -
               offsetof(Impl_, room_id_) +
               sizeof(Impl_::is_kick_));

  // @@protoc_insertion_point(copy_constructor:blokus.RemovePlayerRequest)
}
inline PROTOBUF_NDEBUG_INLINE RemovePlayerRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : reason_(arena),
        _cached_size_{0} {}

inline void RemovePlayerRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, room_id_),
           0,
           offsetof(Impl_, is_kick_) -
               offsetof(Impl_, room_id_) +
               sizeof(Impl_::is_kick_));
}
RemovePlayerRequest::~RemovePlayerRequest() {
  // @@protoc_insertion_point(destructor:blokus.RemovePlayerRequest)
  SharedDtor(*this);
}
inline void RemovePlayerRequest::SharedDtor(MessageLite& self) {
  RemovePlayerRequest& this_ = static_cast<RemovePlayerRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.reason_.Destroy();
  this_._impl_.~Impl_();
}

inline void* RemovePlayerRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) RemovePlayerRequest(arena);
}
constexpr auto RemovePlayerRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(RemovePlayerRequest),
                                            alignof(RemovePlayerRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull RemovePlayerRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_RemovePlayerRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &RemovePlayerRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<RemovePlayerRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &RemovePlayerRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<RemovePlayerRequest>(), &RemovePlayerRequest::ByteSizeLong,
            &RemovePlayerRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(RemovePlayerRequest, _impl_._cached_size_),
        false,
    },
    &RemovePlayerRequest::kDescriptorMethods,
    &descriptor_table_game_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* RemovePlayerRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 41, 2> RemovePlayerRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::RemovePlayerRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bool is_kick = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(RemovePlayerRequest, _impl_.is_kick_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(RemovePlayerRequest, _impl_.is_kick_)}},
    // int32 room_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RemovePlayerRequest, _impl_.room_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(RemovePlayerRequest, _impl_.room_id_)}},
    // .blokus.PlayerColor color = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RemovePlayerRequest, _impl_.color_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(RemovePlayerRequest, _impl_.color_)}},
    // string reason = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(RemovePlayerRequest, _impl_.reason_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 room_id = 1;
    {PROTOBUF_FIELD_OFFSET(RemovePlayerRequest, _impl_.room_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .blokus.PlayerColor color = 2;
    {PROTOBUF_FIELD_OFFSET(RemovePlayerRequest, _impl_.color_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string reason = 3;
    {PROTOBUF_FIELD_OFFSET(RemovePlayerRequest, _impl_.reason_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool is_kick = 4;
    {PROTOBUF_FIELD_OFFSET(RemovePlayerRequest, _impl_.is_kick_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\32\0\0\6\0\0\0\0"
    "blokus.RemovePlayerRequest"
    "reason"
  }},
};

PROTOBUF_NOINLINE void RemovePlayerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.RemovePlayerRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.reason_.ClearToEmpty();
  ::memset(&_impl_.room_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.is_kick_) -
      reinterpret_cast<char*>(&_impl_.room_id_)) + sizeof(_impl_.is_kick_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* RemovePlayerRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const RemovePlayerRequest& this_ = static_cast<const RemovePlayerRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* RemovePlayerRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const RemovePlayerRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.RemovePlayerRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 room_id = 1;
          if (this_._internal_room_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_room_id(), target);
          }

          // .blokus.PlayerColor color = 2;
          if (this_._internal_color() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                2, this_._internal_color(), target);
          }

          // string reason = 3;
          if (!this_._internal_reason().empty()) {
            const std::string& _s = this_._internal_reason();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.RemovePlayerRequest.reason");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // bool is_kick = 4;
          if (this_._internal_is_kick() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                4, this_._internal_is_kick(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.RemovePlayerRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t RemovePlayerRequest::ByteSizeLong(const MessageLite& base) {
          const RemovePlayerRequest& this_ = static_cast<const RemovePlayerRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t RemovePlayerRequest::ByteSizeLong() const {
          const RemovePlayerRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.RemovePlayerRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string reason = 3;
            if (!this_._internal_reason().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_reason());
            }
            // int32 room_id = 1;
            if (this_._internal_room_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_room_id());
            }
            // .blokus.PlayerColor color = 2;
            if (this_._internal_color() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_color());
            }
            // bool is_kick = 4;
            if (this_._internal_is_kick() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void RemovePlayerRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RemovePlayerRequest*>(&to_msg);
  auto& from = static_cast<const RemovePlayerRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.RemovePlayerRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_reason().empty()) {
    _this->_internal_set_reason(from._internal_reason());
  }
  if (from._internal_room_id() != 0) {
    _this->_impl_.room_id_ = from._impl_.room_id_;
  }
  if (from._internal_color() != 0) {
    _this->_impl_.color_ = from._impl_.color_;
  }
  if (from._internal_is_kick() != 0) {
    _this->_impl_.is_kick_ = from._impl_.is_kick_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RemovePlayerRequest::CopyFrom(const RemovePlayerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.RemovePlayerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RemovePlayerRequest::InternalSwap(RemovePlayerRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.reason_, &other->_impl_.reason_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemovePlayerRequest, _impl_.is_kick_)
      + sizeof(RemovePlayerRequest::_impl_.is_kick_)
      - PROTOBUF_FIELD_OFFSET(RemovePlayerRequest, _impl_.room_id_)>(
          reinterpret_cast<char*>(&_impl_.room_id_),
          reinterpret_cast<char*>(&other->_impl_.room_id_));
}

::google::protobuf::Metadata RemovePlayerRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RemovePlayerResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<RemovePlayerResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(RemovePlayerResponse, _impl_._has_bits_);
};

void RemovePlayerResponse::clear_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_ != nullptr) _impl_.result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
RemovePlayerResponse::RemovePlayerResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.RemovePlayerResponse)
}
inline PROTOBUF_NDEBUG_INLINE RemovePlayerResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::RemovePlayerResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        message_(arena, from.message_) {}

RemovePlayerResponse::RemovePlayerResponse(
    ::google::protobuf::Arena* arena,
    const RemovePlayerResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RemovePlayerResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::blokus::Result>(
                              arena, *from._impl_.result_)
                        : nullptr;
  _impl_.room_disbanded_ = from._impl_.room_disbanded_;

  // @@protoc_insertion_point(copy_constructor:blokus.RemovePlayerResponse)
}
inline PROTOBUF_NDEBUG_INLINE RemovePlayerResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        message_(arena) {}

inline void RemovePlayerResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, result_),
           0,
           offsetof(Impl_, room_disbanded_) -
               offsetof(Impl_, result_) +
               sizeof(Impl_::room_disbanded_));
}
RemovePlayerResponse::~RemovePlayerResponse() {
  // @@protoc_insertion_point(destructor:blokus.RemovePlayerResponse)
  SharedDtor(*this);
}
inline void RemovePlayerResponse::SharedDtor(MessageLite& self) {
  RemovePlayerResponse& this_ = static_cast<RemovePlayerResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.message_.Destroy();
  delete this_._impl_.result_;
  this_._impl_.~Impl_();
}

inline void* RemovePlayerResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) RemovePlayerResponse(arena);
}
constexpr auto RemovePlayerResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(RemovePlayerResponse),
                                            alignof(RemovePlayerResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull RemovePlayerResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_RemovePlayerResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &RemovePlayerResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<RemovePlayerResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &RemovePlayerResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<RemovePlayerResponse>(), &RemovePlayerResponse::ByteSizeLong,
            &RemovePlayerResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(RemovePlayerResponse, _impl_._cached_size_),
        false,
    },
    &RemovePlayerResponse::kDescriptorMethods,
    &descriptor_table_game_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* RemovePlayerResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 43, 2> RemovePlayerResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RemovePlayerResponse, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::RemovePlayerResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .blokus.Result result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(RemovePlayerResponse, _impl_.result_)}},
    // string message = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(RemovePlayerResponse, _impl_.message_)}},
    // bool room_disbanded = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(RemovePlayerResponse, _impl_.room_disbanded_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(RemovePlayerResponse, _impl_.room_disbanded_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .blokus.Result result = 1;
    {PROTOBUF_FIELD_OFFSET(RemovePlayerResponse, _impl_.result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string message = 2;
    {PROTOBUF_FIELD_OFFSET(RemovePlayerResponse, _impl_.message_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool room_disbanded = 3;
    {PROTOBUF_FIELD_OFFSET(RemovePlayerResponse, _impl_.room_disbanded_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::blokus::Result>()},
  }}, {{
    "\33\0\7\0\0\0\0\0"
    "blokus.RemovePlayerResponse"
    "message"
  }},
};

PROTOBUF_NOINLINE void RemovePlayerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.RemovePlayerResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.result_ != nullptr);
    _impl_.result_->Clear();
  }
  _impl_.room_disbanded_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* RemovePlayerResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const RemovePlayerResponse& this_ = static_cast<const RemovePlayerResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* RemovePlayerResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const RemovePlayerResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.RemovePlayerResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .blokus.Result result = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.result_, this_._impl_.result_->GetCachedSize(), target,
                stream);
          }

          // string message = 2;
          if (!this_._internal_message().empty()) {
            const std::string& _s = this_._internal_message();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.RemovePlayerResponse.message");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // bool room_disbanded = 3;
          if (this_._internal_room_disbanded() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                3, this_._internal_room_disbanded(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.RemovePlayerResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t RemovePlayerResponse::ByteSizeLong(const MessageLite& base) {
          const RemovePlayerResponse& this_ = static_cast<const RemovePlayerResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t RemovePlayerResponse::ByteSizeLong() const {
          const RemovePlayerResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.RemovePlayerResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string message = 2;
            if (!this_._internal_message().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_message());
            }
          }
           {
            // .blokus.Result result = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_);
            }
          }
           {
            // bool room_disbanded = 3;
            if (this_._internal_room_disbanded() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void RemovePlayerResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RemovePlayerResponse*>(&to_msg);
  auto& from = static_cast<const RemovePlayerResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.RemovePlayerResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.result_ != nullptr);
    if (_this->_impl_.result_ == nullptr) {
      _this->_impl_.result_ =
          ::google::protobuf::Message::CopyConstruct<::blokus::Result>(arena, *from._impl_.result_);
    } else {
      _this->_impl_.result_->MergeFrom(*from._impl_.result_);
    }
  }
  if (from._internal_room_disbanded() != 0) {
    _this->_impl_.room_disbanded_ = from._impl_.room_disbanded_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RemovePlayerResponse::CopyFrom(const RemovePlayerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.RemovePlayerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RemovePlayerResponse::InternalSwap(RemovePlayerResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemovePlayerResponse, _impl_.room_disbanded_)
      + sizeof(RemovePlayerResponse::_impl_.room_disbanded_)
      - PROTOBUF_FIELD_OFFSET(RemovePlayerResponse, _impl_.result_)>(
          reinterpret_cast<char*>(&_impl_.result_),
          reinterpret_cast<char*>(&other->_impl_.result_));
}

::google::protobuf::Metadata RemovePlayerResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class StartGameRequest::_Internal {
 public:
};

StartGameRequest::StartGameRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.StartGameRequest)
}
StartGameRequest::StartGameRequest(
    ::google::protobuf::Arena* arena, const StartGameRequest& from)
    : StartGameRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE StartGameRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void StartGameRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, room_id_),
           0,
           offsetof(Impl_, force_start_) -
               offsetof(Impl_, room_id_) +
               sizeof(Impl_::force_start_));
}
StartGameRequest::~StartGameRequest() {
  // @@protoc_insertion_point(destructor:blokus.StartGameRequest)
  SharedDtor(*this);
}
inline void StartGameRequest::SharedDtor(MessageLite& self) {
  StartGameRequest& this_ = static_cast<StartGameRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* StartGameRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) StartGameRequest(arena);
}
constexpr auto StartGameRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(StartGameRequest),
                                            alignof(StartGameRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull StartGameRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_StartGameRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &StartGameRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<StartGameRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &StartGameRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<StartGameRequest>(), &StartGameRequest::ByteSizeLong,
            &StartGameRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(StartGameRequest, _impl_._cached_size_),
        false,
    },
    &StartGameRequest::kDescriptorMethods,
    &descriptor_table_game_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* StartGameRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> StartGameRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::StartGameRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bool force_start = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(StartGameRequest, _impl_.force_start_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(StartGameRequest, _impl_.force_start_)}},
    // int32 room_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(StartGameRequest, _impl_.room_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(StartGameRequest, _impl_.room_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 room_id = 1;
    {PROTOBUF_FIELD_OFFSET(StartGameRequest, _impl_.room_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool force_start = 2;
    {PROTOBUF_FIELD_OFFSET(StartGameRequest, _impl_.force_start_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void StartGameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.StartGameRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.room_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.force_start_) -
      reinterpret_cast<char*>(&_impl_.room_id_)) + sizeof(_impl_.force_start_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* StartGameRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const StartGameRequest& this_ = static_cast<const StartGameRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* StartGameRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const StartGameRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.StartGameRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 room_id = 1;
          if (this_._internal_room_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_room_id(), target);
          }

          // bool force_start = 2;
          if (this_._internal_force_start() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                2, this_._internal_force_start(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.StartGameRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t StartGameRequest::ByteSizeLong(const MessageLite& base) {
          const StartGameRequest& this_ = static_cast<const StartGameRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t StartGameRequest::ByteSizeLong() const {
          const StartGameRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.StartGameRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // int32 room_id = 1;
            if (this_._internal_room_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_room_id());
            }
            // bool force_start = 2;
            if (this_._internal_force_start() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void StartGameRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<StartGameRequest*>(&to_msg);
  auto& from = static_cast<const StartGameRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.StartGameRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_room_id() != 0) {
    _this->_impl_.room_id_ = from._impl_.room_id_;
  }
  if (from._internal_force_start() != 0) {
    _this->_impl_.force_start_ = from._impl_.force_start_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StartGameRequest::CopyFrom(const StartGameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.StartGameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void StartGameRequest::InternalSwap(StartGameRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StartGameRequest, _impl_.force_start_)
      + sizeof(StartGameRequest::_impl_.force_start_)
      - PROTOBUF_FIELD_OFFSET(StartGameRequest, _impl_.room_id_)>(
          reinterpret_cast<char*>(&_impl_.room_id_),
          reinterpret_cast<char*>(&other->_impl_.room_id_));
}

::google::protobuf::Metadata StartGameRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class StartGameResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<StartGameResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(StartGameResponse, _impl_._has_bits_);
};

void StartGameResponse::clear_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_ != nullptr) _impl_.result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void StartGameResponse::clear_game_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.game_start_time_ != nullptr) _impl_.game_start_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
StartGameResponse::StartGameResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.StartGameResponse)
}
inline PROTOBUF_NDEBUG_INLINE StartGameResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::StartGameResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        message_(arena, from.message_) {}

StartGameResponse::StartGameResponse(
    ::google::protobuf::Arena* arena,
    const StartGameResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  StartGameResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::blokus::Result>(
                              arena, *from._impl_.result_)
                        : nullptr;
  _impl_.game_start_time_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.game_start_time_)
                        : nullptr;
  _impl_.estimated_duration_minutes_ = from._impl_.estimated_duration_minutes_;

  // @@protoc_insertion_point(copy_constructor:blokus.StartGameResponse)
}
inline PROTOBUF_NDEBUG_INLINE StartGameResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        message_(arena) {}

inline void StartGameResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, result_),
           0,
           offsetof(Impl_, estimated_duration_minutes_) -
               offsetof(Impl_, result_) +
               sizeof(Impl_::estimated_duration_minutes_));
}
StartGameResponse::~StartGameResponse() {
  // @@protoc_insertion_point(destructor:blokus.StartGameResponse)
  SharedDtor(*this);
}
inline void StartGameResponse::SharedDtor(MessageLite& self) {
  StartGameResponse& this_ = static_cast<StartGameResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.message_.Destroy();
  delete this_._impl_.result_;
  delete this_._impl_.game_start_time_;
  this_._impl_.~Impl_();
}

inline void* StartGameResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) StartGameResponse(arena);
}
constexpr auto StartGameResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(StartGameResponse),
                                            alignof(StartGameResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull StartGameResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_StartGameResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &StartGameResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<StartGameResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &StartGameResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<StartGameResponse>(), &StartGameResponse::ByteSizeLong,
            &StartGameResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(StartGameResponse, _impl_._cached_size_),
        false,
    },
    &StartGameResponse::kDescriptorMethods,
    &descriptor_table_game_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* StartGameResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 2, 40, 2> StartGameResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(StartGameResponse, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::StartGameResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 estimated_duration_minutes = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(StartGameResponse, _impl_.estimated_duration_minutes_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(StartGameResponse, _impl_.estimated_duration_minutes_)}},
    // .blokus.Result result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(StartGameResponse, _impl_.result_)}},
    // string message = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(StartGameResponse, _impl_.message_)}},
    // .google.protobuf.Timestamp game_start_time = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(StartGameResponse, _impl_.game_start_time_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .blokus.Result result = 1;
    {PROTOBUF_FIELD_OFFSET(StartGameResponse, _impl_.result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string message = 2;
    {PROTOBUF_FIELD_OFFSET(StartGameResponse, _impl_.message_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp game_start_time = 3;
    {PROTOBUF_FIELD_OFFSET(StartGameResponse, _impl_.game_start_time_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 estimated_duration_minutes = 4;
    {PROTOBUF_FIELD_OFFSET(StartGameResponse, _impl_.estimated_duration_minutes_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::blokus::Result>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\30\0\7\0\0\0\0\0"
    "blokus.StartGameResponse"
    "message"
  }},
};

PROTOBUF_NOINLINE void StartGameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.StartGameResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.result_ != nullptr);
      _impl_.result_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.game_start_time_ != nullptr);
      _impl_.game_start_time_->Clear();
    }
  }
  _impl_.estimated_duration_minutes_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* StartGameResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const StartGameResponse& this_ = static_cast<const StartGameResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* StartGameResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const StartGameResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.StartGameResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .blokus.Result result = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.result_, this_._impl_.result_->GetCachedSize(), target,
                stream);
          }

          // string message = 2;
          if (!this_._internal_message().empty()) {
            const std::string& _s = this_._internal_message();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.StartGameResponse.message");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // .google.protobuf.Timestamp game_start_time = 3;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.game_start_time_, this_._impl_.game_start_time_->GetCachedSize(), target,
                stream);
          }

          // int32 estimated_duration_minutes = 4;
          if (this_._internal_estimated_duration_minutes() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_estimated_duration_minutes(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.StartGameResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t StartGameResponse::ByteSizeLong(const MessageLite& base) {
          const StartGameResponse& this_ = static_cast<const StartGameResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t StartGameResponse::ByteSizeLong() const {
          const StartGameResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.StartGameResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string message = 2;
            if (!this_._internal_message().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_message());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .blokus.Result result = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_);
            }
            // .google.protobuf.Timestamp game_start_time = 3;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.game_start_time_);
            }
          }
           {
            // int32 estimated_duration_minutes = 4;
            if (this_._internal_estimated_duration_minutes() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_estimated_duration_minutes());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void StartGameResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<StartGameResponse*>(&to_msg);
  auto& from = static_cast<const StartGameResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.StartGameResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.result_ != nullptr);
      if (_this->_impl_.result_ == nullptr) {
        _this->_impl_.result_ =
            ::google::protobuf::Message::CopyConstruct<::blokus::Result>(arena, *from._impl_.result_);
      } else {
        _this->_impl_.result_->MergeFrom(*from._impl_.result_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.game_start_time_ != nullptr);
      if (_this->_impl_.game_start_time_ == nullptr) {
        _this->_impl_.game_start_time_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.game_start_time_);
      } else {
        _this->_impl_.game_start_time_->MergeFrom(*from._impl_.game_start_time_);
      }
    }
  }
  if (from._internal_estimated_duration_minutes() != 0) {
    _this->_impl_.estimated_duration_minutes_ = from._impl_.estimated_duration_minutes_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StartGameResponse::CopyFrom(const StartGameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.StartGameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void StartGameResponse::InternalSwap(StartGameResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StartGameResponse, _impl_.estimated_duration_minutes_)
      + sizeof(StartGameResponse::_impl_.estimated_duration_minutes_)
      - PROTOBUF_FIELD_OFFSET(StartGameResponse, _impl_.result_)>(
          reinterpret_cast<char*>(&_impl_.result_),
          reinterpret_cast<char*>(&other->_impl_.result_));
}

::google::protobuf::Metadata StartGameResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GameStartedNotification::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GameStartedNotification>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GameStartedNotification, _impl_._has_bits_);
};

void GameStartedNotification::clear_players() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.players_.Clear();
}
void GameStartedNotification::clear_initial_board() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.initial_board_ != nullptr) _impl_.initial_board_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GameStartedNotification::clear_started_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.started_at_ != nullptr) _impl_.started_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
GameStartedNotification::GameStartedNotification(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.GameStartedNotification)
}
inline PROTOBUF_NDEBUG_INLINE GameStartedNotification::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::GameStartedNotification& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        players_{visibility, arena, from.players_},
        game_mode_(arena, from.game_mode_),
        game_id_(arena, from.game_id_) {}

GameStartedNotification::GameStartedNotification(
    ::google::protobuf::Arena* arena,
    const GameStartedNotification& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GameStartedNotification* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.initial_board_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::blokus::BoardState>(
                              arena, *from._impl_.initial_board_)
                        : nullptr;
  _impl_.started_at_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.started_at_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, room_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, room_id_),
           offsetof(Impl_, max_undo_count_) -
               offsetof(Impl_, room_id_) +
               sizeof(Impl_::max_undo_count_));

  // @@protoc_insertion_point(copy_constructor:blokus.GameStartedNotification)
}
inline PROTOBUF_NDEBUG_INLINE GameStartedNotification::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        players_{visibility, arena},
        game_mode_(arena),
        game_id_(arena) {}

inline void GameStartedNotification::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, initial_board_),
           0,
           offsetof(Impl_, max_undo_count_) -
               offsetof(Impl_, initial_board_) +
               sizeof(Impl_::max_undo_count_));
}
GameStartedNotification::~GameStartedNotification() {
  // @@protoc_insertion_point(destructor:blokus.GameStartedNotification)
  SharedDtor(*this);
}
inline void GameStartedNotification::SharedDtor(MessageLite& self) {
  GameStartedNotification& this_ = static_cast<GameStartedNotification&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.game_mode_.Destroy();
  this_._impl_.game_id_.Destroy();
  delete this_._impl_.initial_board_;
  delete this_._impl_.started_at_;
  this_._impl_.~Impl_();
}

inline void* GameStartedNotification::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GameStartedNotification(arena);
}
constexpr auto GameStartedNotification::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(GameStartedNotification, _impl_.players_) +
          decltype(GameStartedNotification::_impl_.players_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(GameStartedNotification), alignof(GameStartedNotification), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&GameStartedNotification::PlacementNew_,
                                 sizeof(GameStartedNotification),
                                 alignof(GameStartedNotification));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GameStartedNotification::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GameStartedNotification_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GameStartedNotification::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GameStartedNotification>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GameStartedNotification::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GameStartedNotification>(), &GameStartedNotification::ByteSizeLong,
            &GameStartedNotification::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GameStartedNotification, _impl_._cached_size_),
        false,
    },
    &GameStartedNotification::kDescriptorMethods,
    &descriptor_table_game_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GameStartedNotification::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 3, 63, 2> GameStartedNotification::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameStartedNotification, _impl_._has_bits_),
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::GameStartedNotification>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 room_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameStartedNotification, _impl_.room_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(GameStartedNotification, _impl_.room_id_)}},
    // repeated .blokus.PlayerSlot players = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(GameStartedNotification, _impl_.players_)}},
    // .blokus.PlayerColor first_player = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameStartedNotification, _impl_.first_player_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(GameStartedNotification, _impl_.first_player_)}},
    // string game_mode = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(GameStartedNotification, _impl_.game_mode_)}},
    // int32 turn_time_seconds = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameStartedNotification, _impl_.turn_time_seconds_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(GameStartedNotification, _impl_.turn_time_seconds_)}},
    // bool allow_undo = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(GameStartedNotification, _impl_.allow_undo_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(GameStartedNotification, _impl_.allow_undo_)}},
    // int32 max_undo_count = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameStartedNotification, _impl_.max_undo_count_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(GameStartedNotification, _impl_.max_undo_count_)}},
    // .blokus.BoardState initial_board = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 0, 1, PROTOBUF_FIELD_OFFSET(GameStartedNotification, _impl_.initial_board_)}},
    // .google.protobuf.Timestamp started_at = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 1, 2, PROTOBUF_FIELD_OFFSET(GameStartedNotification, _impl_.started_at_)}},
    // string game_id = 10;
    {::_pbi::TcParser::FastUS1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(GameStartedNotification, _impl_.game_id_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 room_id = 1;
    {PROTOBUF_FIELD_OFFSET(GameStartedNotification, _impl_.room_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated .blokus.PlayerSlot players = 2;
    {PROTOBUF_FIELD_OFFSET(GameStartedNotification, _impl_.players_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .blokus.PlayerColor first_player = 3;
    {PROTOBUF_FIELD_OFFSET(GameStartedNotification, _impl_.first_player_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string game_mode = 4;
    {PROTOBUF_FIELD_OFFSET(GameStartedNotification, _impl_.game_mode_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 turn_time_seconds = 5;
    {PROTOBUF_FIELD_OFFSET(GameStartedNotification, _impl_.turn_time_seconds_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool allow_undo = 6;
    {PROTOBUF_FIELD_OFFSET(GameStartedNotification, _impl_.allow_undo_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 max_undo_count = 7;
    {PROTOBUF_FIELD_OFFSET(GameStartedNotification, _impl_.max_undo_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .blokus.BoardState initial_board = 8;
    {PROTOBUF_FIELD_OFFSET(GameStartedNotification, _impl_.initial_board_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp started_at = 9;
    {PROTOBUF_FIELD_OFFSET(GameStartedNotification, _impl_.started_at_), _Internal::kHasBitsOffset + 1, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string game_id = 10;
    {PROTOBUF_FIELD_OFFSET(GameStartedNotification, _impl_.game_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::blokus::PlayerSlot>()},
    {::_pbi::TcParser::GetTable<::blokus::BoardState>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\36\0\0\0\11\0\0\0\0\0\7\0\0\0\0\0"
    "blokus.GameStartedNotification"
    "game_mode"
    "game_id"
  }},
};

PROTOBUF_NOINLINE void GameStartedNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.GameStartedNotification)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  _impl_.game_mode_.ClearToEmpty();
  _impl_.game_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.initial_board_ != nullptr);
      _impl_.initial_board_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.started_at_ != nullptr);
      _impl_.started_at_->Clear();
    }
  }
  ::memset(&_impl_.room_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.max_undo_count_) -
      reinterpret_cast<char*>(&_impl_.room_id_)) + sizeof(_impl_.max_undo_count_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GameStartedNotification::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GameStartedNotification& this_ = static_cast<const GameStartedNotification&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GameStartedNotification::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GameStartedNotification& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.GameStartedNotification)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 room_id = 1;
          if (this_._internal_room_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_room_id(), target);
          }

          // repeated .blokus.PlayerSlot players = 2;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_players_size());
               i < n; i++) {
            const auto& repfield = this_._internal_players().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    2, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // .blokus.PlayerColor first_player = 3;
          if (this_._internal_first_player() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                3, this_._internal_first_player(), target);
          }

          // string game_mode = 4;
          if (!this_._internal_game_mode().empty()) {
            const std::string& _s = this_._internal_game_mode();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.GameStartedNotification.game_mode");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // int32 turn_time_seconds = 5;
          if (this_._internal_turn_time_seconds() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<5>(
                    stream, this_._internal_turn_time_seconds(), target);
          }

          // bool allow_undo = 6;
          if (this_._internal_allow_undo() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                6, this_._internal_allow_undo(), target);
          }

          // int32 max_undo_count = 7;
          if (this_._internal_max_undo_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<7>(
                    stream, this_._internal_max_undo_count(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .blokus.BoardState initial_board = 8;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                8, *this_._impl_.initial_board_, this_._impl_.initial_board_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp started_at = 9;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                9, *this_._impl_.started_at_, this_._impl_.started_at_->GetCachedSize(), target,
                stream);
          }

          // string game_id = 10;
          if (!this_._internal_game_id().empty()) {
            const std::string& _s = this_._internal_game_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.GameStartedNotification.game_id");
            target = stream->WriteStringMaybeAliased(10, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.GameStartedNotification)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GameStartedNotification::ByteSizeLong(const MessageLite& base) {
          const GameStartedNotification& this_ = static_cast<const GameStartedNotification&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GameStartedNotification::ByteSizeLong() const {
          const GameStartedNotification& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.GameStartedNotification)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .blokus.PlayerSlot players = 2;
            {
              total_size += 1UL * this_._internal_players_size();
              for (const auto& msg : this_._internal_players()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // string game_mode = 4;
            if (!this_._internal_game_mode().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_game_mode());
            }
            // string game_id = 10;
            if (!this_._internal_game_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_game_id());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .blokus.BoardState initial_board = 8;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.initial_board_);
            }
            // .google.protobuf.Timestamp started_at = 9;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.started_at_);
            }
          }
           {
            // int32 room_id = 1;
            if (this_._internal_room_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_room_id());
            }
            // .blokus.PlayerColor first_player = 3;
            if (this_._internal_first_player() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_first_player());
            }
            // int32 turn_time_seconds = 5;
            if (this_._internal_turn_time_seconds() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_turn_time_seconds());
            }
            // bool allow_undo = 6;
            if (this_._internal_allow_undo() != 0) {
              total_size += 2;
            }
            // int32 max_undo_count = 7;
            if (this_._internal_max_undo_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_max_undo_count());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GameStartedNotification::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameStartedNotification*>(&to_msg);
  auto& from = static_cast<const GameStartedNotification&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.GameStartedNotification)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_players()->MergeFrom(
      from._internal_players());
  if (!from._internal_game_mode().empty()) {
    _this->_internal_set_game_mode(from._internal_game_mode());
  }
  if (!from._internal_game_id().empty()) {
    _this->_internal_set_game_id(from._internal_game_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.initial_board_ != nullptr);
      if (_this->_impl_.initial_board_ == nullptr) {
        _this->_impl_.initial_board_ =
            ::google::protobuf::Message::CopyConstruct<::blokus::BoardState>(arena, *from._impl_.initial_board_);
      } else {
        _this->_impl_.initial_board_->MergeFrom(*from._impl_.initial_board_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.started_at_ != nullptr);
      if (_this->_impl_.started_at_ == nullptr) {
        _this->_impl_.started_at_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.started_at_);
      } else {
        _this->_impl_.started_at_->MergeFrom(*from._impl_.started_at_);
      }
    }
  }
  if (from._internal_room_id() != 0) {
    _this->_impl_.room_id_ = from._impl_.room_id_;
  }
  if (from._internal_first_player() != 0) {
    _this->_impl_.first_player_ = from._impl_.first_player_;
  }
  if (from._internal_turn_time_seconds() != 0) {
    _this->_impl_.turn_time_seconds_ = from._impl_.turn_time_seconds_;
  }
  if (from._internal_allow_undo() != 0) {
    _this->_impl_.allow_undo_ = from._impl_.allow_undo_;
  }
  if (from._internal_max_undo_count() != 0) {
    _this->_impl_.max_undo_count_ = from._impl_.max_undo_count_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameStartedNotification::CopyFrom(const GameStartedNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.GameStartedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GameStartedNotification::InternalSwap(GameStartedNotification* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.game_mode_, &other->_impl_.game_mode_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.game_id_, &other->_impl_.game_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameStartedNotification, _impl_.max_undo_count_)
      + sizeof(GameStartedNotification::_impl_.max_undo_count_)
      - PROTOBUF_FIELD_OFFSET(GameStartedNotification, _impl_.initial_board_)>(
          reinterpret_cast<char*>(&_impl_.initial_board_),
          reinterpret_cast<char*>(&other->_impl_.initial_board_));
}

::google::protobuf::Metadata GameStartedNotification::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              GameEndedNotification_RatingChangesEntry_DoNotUse::GameEndedNotification_RatingChangesEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              GameEndedNotification_RatingChangesEntry_DoNotUse::GameEndedNotification_RatingChangesEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              GameEndedNotification_RatingChangesEntry_DoNotUse::GameEndedNotification_RatingChangesEntry_DoNotUse() : SuperType() {}
              GameEndedNotification_RatingChangesEntry_DoNotUse::GameEndedNotification_RatingChangesEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* GameEndedNotification_RatingChangesEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) GameEndedNotification_RatingChangesEntry_DoNotUse(arena);
              }
              constexpr auto GameEndedNotification_RatingChangesEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(GameEndedNotification_RatingChangesEntry_DoNotUse),
                                                          alignof(GameEndedNotification_RatingChangesEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull GameEndedNotification_RatingChangesEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_GameEndedNotification_RatingChangesEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &GameEndedNotification_RatingChangesEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<GameEndedNotification_RatingChangesEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &GameEndedNotification_RatingChangesEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &GameEndedNotification_RatingChangesEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(GameEndedNotification_RatingChangesEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &GameEndedNotification_RatingChangesEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_game_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* GameEndedNotification_RatingChangesEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 59, 2> GameEndedNotification_RatingChangesEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameEndedNotification_RatingChangesEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::GameEndedNotification_RatingChangesEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 value = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameEndedNotification_RatingChangesEntry_DoNotUse, _impl_.value_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(GameEndedNotification_RatingChangesEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GameEndedNotification_RatingChangesEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(GameEndedNotification_RatingChangesEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 value = 2;
    {PROTOBUF_FIELD_OFFSET(GameEndedNotification_RatingChangesEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\57\3\0\0\0\0\0\0"
    "blokus.GameEndedNotification.RatingChangesEntry"
    "key"
  }},
};

// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              GameEndedNotification_AchievementsEntry_DoNotUse::GameEndedNotification_AchievementsEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              GameEndedNotification_AchievementsEntry_DoNotUse::GameEndedNotification_AchievementsEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              GameEndedNotification_AchievementsEntry_DoNotUse::GameEndedNotification_AchievementsEntry_DoNotUse() : SuperType() {}
              GameEndedNotification_AchievementsEntry_DoNotUse::GameEndedNotification_AchievementsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* GameEndedNotification_AchievementsEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) GameEndedNotification_AchievementsEntry_DoNotUse(arena);
              }
              constexpr auto GameEndedNotification_AchievementsEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(GameEndedNotification_AchievementsEntry_DoNotUse),
                                                          alignof(GameEndedNotification_AchievementsEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull GameEndedNotification_AchievementsEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_GameEndedNotification_AchievementsEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &GameEndedNotification_AchievementsEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<GameEndedNotification_AchievementsEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &GameEndedNotification_AchievementsEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &GameEndedNotification_AchievementsEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(GameEndedNotification_AchievementsEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &GameEndedNotification_AchievementsEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_game_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* GameEndedNotification_AchievementsEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 63, 2> GameEndedNotification_AchievementsEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameEndedNotification_AchievementsEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::GameEndedNotification_AchievementsEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(GameEndedNotification_AchievementsEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GameEndedNotification_AchievementsEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(GameEndedNotification_AchievementsEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2;
    {PROTOBUF_FIELD_OFFSET(GameEndedNotification_AchievementsEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\56\3\5\0\0\0\0\0"
    "blokus.GameEndedNotification.AchievementsEntry"
    "key"
    "value"
  }},
};

// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              GameEndedNotification_ExperienceGainedEntry_DoNotUse::GameEndedNotification_ExperienceGainedEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              GameEndedNotification_ExperienceGainedEntry_DoNotUse::GameEndedNotification_ExperienceGainedEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              GameEndedNotification_ExperienceGainedEntry_DoNotUse::GameEndedNotification_ExperienceGainedEntry_DoNotUse() : SuperType() {}
              GameEndedNotification_ExperienceGainedEntry_DoNotUse::GameEndedNotification_ExperienceGainedEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* GameEndedNotification_ExperienceGainedEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) GameEndedNotification_ExperienceGainedEntry_DoNotUse(arena);
              }
              constexpr auto GameEndedNotification_ExperienceGainedEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(GameEndedNotification_ExperienceGainedEntry_DoNotUse),
                                                          alignof(GameEndedNotification_ExperienceGainedEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull GameEndedNotification_ExperienceGainedEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_GameEndedNotification_ExperienceGainedEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &GameEndedNotification_ExperienceGainedEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<GameEndedNotification_ExperienceGainedEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &GameEndedNotification_ExperienceGainedEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &GameEndedNotification_ExperienceGainedEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(GameEndedNotification_ExperienceGainedEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &GameEndedNotification_ExperienceGainedEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_game_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* GameEndedNotification_ExperienceGainedEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 62, 2> GameEndedNotification_ExperienceGainedEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameEndedNotification_ExperienceGainedEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::GameEndedNotification_ExperienceGainedEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 value = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameEndedNotification_ExperienceGainedEntry_DoNotUse, _impl_.value_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(GameEndedNotification_ExperienceGainedEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GameEndedNotification_ExperienceGainedEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(GameEndedNotification_ExperienceGainedEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 value = 2;
    {PROTOBUF_FIELD_OFFSET(GameEndedNotification_ExperienceGainedEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\62\3\0\0\0\0\0\0"
    "blokus.GameEndedNotification.ExperienceGainedEntry"
    "key"
  }},
};

// ===================================================================

class GameEndedNotification::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GameEndedNotification>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GameEndedNotification, _impl_._has_bits_);
};

void GameEndedNotification::clear_game_stats() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.game_stats_ != nullptr) _impl_.game_stats_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GameEndedNotification::clear_ended_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ended_at_ != nullptr) _impl_.ended_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
GameEndedNotification::GameEndedNotification(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.GameEndedNotification)
}
inline PROTOBUF_NDEBUG_INLINE GameEndedNotification::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::GameEndedNotification& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        final_results_{visibility, arena, from.final_results_},
        rating_changes_{visibility, arena, from.rating_changes_},
        achievements_{visibility, arena, from.achievements_},
        experience_gained_{visibility, arena, from.experience_gained_},
        game_id_(arena, from.game_id_),
        winner_(arena, from.winner_) {}

GameEndedNotification::GameEndedNotification(
    ::google::protobuf::Arena* arena,
    const GameEndedNotification& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GameEndedNotification* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.game_stats_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::blokus::GameStats>(
                              arena, *from._impl_.game_stats_)
                        : nullptr;
  _impl_.ended_at_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.ended_at_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, room_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, room_id_),
           offsetof(Impl_, game_duration_seconds_) -
               offsetof(Impl_, room_id_) +
               sizeof(Impl_::game_duration_seconds_));

  // @@protoc_insertion_point(copy_constructor:blokus.GameEndedNotification)
}
inline PROTOBUF_NDEBUG_INLINE GameEndedNotification::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        final_results_{visibility, arena},
        rating_changes_{visibility, arena},
        achievements_{visibility, arena},
        experience_gained_{visibility, arena},
        game_id_(arena),
        winner_(arena) {}

inline void GameEndedNotification::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, game_stats_),
           0,
           offsetof(Impl_, game_duration_seconds_) -
               offsetof(Impl_, game_stats_) +
               sizeof(Impl_::game_duration_seconds_));
}
GameEndedNotification::~GameEndedNotification() {
  // @@protoc_insertion_point(destructor:blokus.GameEndedNotification)
  SharedDtor(*this);
}
inline void GameEndedNotification::SharedDtor(MessageLite& self) {
  GameEndedNotification& this_ = static_cast<GameEndedNotification&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.game_id_.Destroy();
  this_._impl_.winner_.Destroy();
  delete this_._impl_.game_stats_;
  delete this_._impl_.ended_at_;
  this_._impl_.~Impl_();
}

inline void* GameEndedNotification::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GameEndedNotification(arena);
}
constexpr auto GameEndedNotification::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(GameEndedNotification, _impl_.final_results_) +
          decltype(GameEndedNotification::_impl_.final_results_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(GameEndedNotification, _impl_.rating_changes_) +
          decltype(GameEndedNotification::_impl_.rating_changes_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(GameEndedNotification, _impl_.rating_changes_) +
          decltype(GameEndedNotification::_impl_.rating_changes_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(GameEndedNotification, _impl_.achievements_) +
          decltype(GameEndedNotification::_impl_.achievements_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(GameEndedNotification, _impl_.achievements_) +
          decltype(GameEndedNotification::_impl_.achievements_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(GameEndedNotification, _impl_.experience_gained_) +
          decltype(GameEndedNotification::_impl_.experience_gained_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(GameEndedNotification, _impl_.experience_gained_) +
          decltype(GameEndedNotification::_impl_.experience_gained_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(GameEndedNotification), alignof(GameEndedNotification), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&GameEndedNotification::PlacementNew_,
                                 sizeof(GameEndedNotification),
                                 alignof(GameEndedNotification));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GameEndedNotification::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GameEndedNotification_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GameEndedNotification::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GameEndedNotification>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GameEndedNotification::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GameEndedNotification>(), &GameEndedNotification::ByteSizeLong,
            &GameEndedNotification::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GameEndedNotification, _impl_._cached_size_),
        false,
    },
    &GameEndedNotification::kDescriptorMethods,
    &descriptor_table_game_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GameEndedNotification::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 11, 6, 101, 2> GameEndedNotification::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameEndedNotification, _impl_._has_bits_),
    0, // no _extensions_
    11, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294965248,  // skipmap
    offsetof(decltype(_table_), field_entries),
    11,  // num_field_entries
    6,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::GameEndedNotification>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 game_duration_seconds = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameEndedNotification, _impl_.game_duration_seconds_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(GameEndedNotification, _impl_.game_duration_seconds_)}},
    // int32 room_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameEndedNotification, _impl_.room_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(GameEndedNotification, _impl_.room_id_)}},
    // string game_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(GameEndedNotification, _impl_.game_id_)}},
    // .blokus.GameEndReason end_reason = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameEndedNotification, _impl_.end_reason_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(GameEndedNotification, _impl_.end_reason_)}},
    // repeated .blokus.PlayerResult final_results = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(GameEndedNotification, _impl_.final_results_)}},
    // string winner = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(GameEndedNotification, _impl_.winner_)}},
    // .blokus.GameStats game_stats = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 0, 1, PROTOBUF_FIELD_OFFSET(GameEndedNotification, _impl_.game_stats_)}},
    // .google.protobuf.Timestamp ended_at = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 1, 2, PROTOBUF_FIELD_OFFSET(GameEndedNotification, _impl_.ended_at_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 room_id = 1;
    {PROTOBUF_FIELD_OFFSET(GameEndedNotification, _impl_.room_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string game_id = 2;
    {PROTOBUF_FIELD_OFFSET(GameEndedNotification, _impl_.game_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .blokus.GameEndReason end_reason = 3;
    {PROTOBUF_FIELD_OFFSET(GameEndedNotification, _impl_.end_reason_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // repeated .blokus.PlayerResult final_results = 4;
    {PROTOBUF_FIELD_OFFSET(GameEndedNotification, _impl_.final_results_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // string winner = 5;
    {PROTOBUF_FIELD_OFFSET(GameEndedNotification, _impl_.winner_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .blokus.GameStats game_stats = 6;
    {PROTOBUF_FIELD_OFFSET(GameEndedNotification, _impl_.game_stats_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp ended_at = 7;
    {PROTOBUF_FIELD_OFFSET(GameEndedNotification, _impl_.ended_at_), _Internal::kHasBitsOffset + 1, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 game_duration_seconds = 8;
    {PROTOBUF_FIELD_OFFSET(GameEndedNotification, _impl_.game_duration_seconds_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // map<string, int32> rating_changes = 9;
    {PROTOBUF_FIELD_OFFSET(GameEndedNotification, _impl_.rating_changes_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // map<string, string> achievements = 10;
    {PROTOBUF_FIELD_OFFSET(GameEndedNotification, _impl_.achievements_), -1, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // map<string, int32> experience_gained = 11;
    {PROTOBUF_FIELD_OFFSET(GameEndedNotification, _impl_.experience_gained_), -1, 5,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
  }}, {{
    {::_pbi::TcParser::GetTable<::blokus::PlayerResult>()},
    {::_pbi::TcParser::GetTable<::blokus::GameStats>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(GameEndedNotification()._impl_.rating_changes_)>(
        1, 0, 0, 9,
        5)},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(GameEndedNotification()._impl_.achievements_)>(
        1, 0, 0, 9,
        9)},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(GameEndedNotification()._impl_.experience_gained_)>(
        1, 0, 0, 9,
        5)},
  }}, {{
    "\34\0\7\0\0\6\0\0\0\16\14\21\0\0\0\0"
    "blokus.GameEndedNotification"
    "game_id"
    "winner"
    "rating_changes"
    "achievements"
    "experience_gained"
  }},
};

PROTOBUF_NOINLINE void GameEndedNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.GameEndedNotification)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.final_results_.Clear();
  _impl_.rating_changes_.Clear();
  _impl_.achievements_.Clear();
  _impl_.experience_gained_.Clear();
  _impl_.game_id_.ClearToEmpty();
  _impl_.winner_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.game_stats_ != nullptr);
      _impl_.game_stats_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.ended_at_ != nullptr);
      _impl_.ended_at_->Clear();
    }
  }
  ::memset(&_impl_.room_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.game_duration_seconds_) -
      reinterpret_cast<char*>(&_impl_.room_id_)) + sizeof(_impl_.game_duration_seconds_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GameEndedNotification::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GameEndedNotification& this_ = static_cast<const GameEndedNotification&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GameEndedNotification::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GameEndedNotification& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.GameEndedNotification)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 room_id = 1;
          if (this_._internal_room_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_room_id(), target);
          }

          // string game_id = 2;
          if (!this_._internal_game_id().empty()) {
            const std::string& _s = this_._internal_game_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.GameEndedNotification.game_id");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // .blokus.GameEndReason end_reason = 3;
          if (this_._internal_end_reason() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                3, this_._internal_end_reason(), target);
          }

          // repeated .blokus.PlayerResult final_results = 4;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_final_results_size());
               i < n; i++) {
            const auto& repfield = this_._internal_final_results().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    4, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // string winner = 5;
          if (!this_._internal_winner().empty()) {
            const std::string& _s = this_._internal_winner();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.GameEndedNotification.winner");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .blokus.GameStats game_stats = 6;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                6, *this_._impl_.game_stats_, this_._impl_.game_stats_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp ended_at = 7;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                7, *this_._impl_.ended_at_, this_._impl_.ended_at_->GetCachedSize(), target,
                stream);
          }

          // int32 game_duration_seconds = 8;
          if (this_._internal_game_duration_seconds() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<8>(
                    stream, this_._internal_game_duration_seconds(), target);
          }

          // map<string, int32> rating_changes = 9;
          if (!this_._internal_rating_changes().empty()) {
            using MapType = ::google::protobuf::Map<std::string, ::int32_t>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, ::int32_t,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_INT32>;
            const auto& field = this_._internal_rating_changes();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    9, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.GameEndedNotification.rating_changes");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    9, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.GameEndedNotification.rating_changes");
              }
            }
          }

          // map<string, string> achievements = 10;
          if (!this_._internal_achievements().empty()) {
            using MapType = ::google::protobuf::Map<std::string, std::string>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_STRING>;
            const auto& field = this_._internal_achievements();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    10, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.GameEndedNotification.achievements");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.GameEndedNotification.achievements");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    10, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.GameEndedNotification.achievements");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.GameEndedNotification.achievements");
              }
            }
          }

          // map<string, int32> experience_gained = 11;
          if (!this_._internal_experience_gained().empty()) {
            using MapType = ::google::protobuf::Map<std::string, ::int32_t>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, ::int32_t,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_INT32>;
            const auto& field = this_._internal_experience_gained();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    11, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.GameEndedNotification.experience_gained");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    11, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.GameEndedNotification.experience_gained");
              }
            }
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.GameEndedNotification)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GameEndedNotification::ByteSizeLong(const MessageLite& base) {
          const GameEndedNotification& this_ = static_cast<const GameEndedNotification&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GameEndedNotification::ByteSizeLong() const {
          const GameEndedNotification& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.GameEndedNotification)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .blokus.PlayerResult final_results = 4;
            {
              total_size += 1UL * this_._internal_final_results_size();
              for (const auto& msg : this_._internal_final_results()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // map<string, int32> rating_changes = 9;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_rating_changes_size());
              for (const auto& entry : this_._internal_rating_changes()) {
                total_size += _pbi::MapEntryFuncs<std::string, ::int32_t,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_INT32>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // map<string, string> achievements = 10;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_achievements_size());
              for (const auto& entry : this_._internal_achievements()) {
                total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // map<string, int32> experience_gained = 11;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_experience_gained_size());
              for (const auto& entry : this_._internal_experience_gained()) {
                total_size += _pbi::MapEntryFuncs<std::string, ::int32_t,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_INT32>::ByteSizeLong(entry.first, entry.second);
              }
            }
          }
           {
            // string game_id = 2;
            if (!this_._internal_game_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_game_id());
            }
            // string winner = 5;
            if (!this_._internal_winner().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_winner());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .blokus.GameStats game_stats = 6;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.game_stats_);
            }
            // .google.protobuf.Timestamp ended_at = 7;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.ended_at_);
            }
          }
           {
            // int32 room_id = 1;
            if (this_._internal_room_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_room_id());
            }
            // .blokus.GameEndReason end_reason = 3;
            if (this_._internal_end_reason() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_end_reason());
            }
            // int32 game_duration_seconds = 8;
            if (this_._internal_game_duration_seconds() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_game_duration_seconds());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GameEndedNotification::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameEndedNotification*>(&to_msg);
  auto& from = static_cast<const GameEndedNotification&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.GameEndedNotification)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_final_results()->MergeFrom(
      from._internal_final_results());
  _this->_impl_.rating_changes_.MergeFrom(from._impl_.rating_changes_);
  _this->_impl_.achievements_.MergeFrom(from._impl_.achievements_);
  _this->_impl_.experience_gained_.MergeFrom(from._impl_.experience_gained_);
  if (!from._internal_game_id().empty()) {
    _this->_internal_set_game_id(from._internal_game_id());
  }
  if (!from._internal_winner().empty()) {
    _this->_internal_set_winner(from._internal_winner());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.game_stats_ != nullptr);
      if (_this->_impl_.game_stats_ == nullptr) {
        _this->_impl_.game_stats_ =
            ::google::protobuf::Message::CopyConstruct<::blokus::GameStats>(arena, *from._impl_.game_stats_);
      } else {
        _this->_impl_.game_stats_->MergeFrom(*from._impl_.game_stats_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.ended_at_ != nullptr);
      if (_this->_impl_.ended_at_ == nullptr) {
        _this->_impl_.ended_at_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.ended_at_);
      } else {
        _this->_impl_.ended_at_->MergeFrom(*from._impl_.ended_at_);
      }
    }
  }
  if (from._internal_room_id() != 0) {
    _this->_impl_.room_id_ = from._impl_.room_id_;
  }
  if (from._internal_end_reason() != 0) {
    _this->_impl_.end_reason_ = from._impl_.end_reason_;
  }
  if (from._internal_game_duration_seconds() != 0) {
    _this->_impl_.game_duration_seconds_ = from._impl_.game_duration_seconds_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameEndedNotification::CopyFrom(const GameEndedNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.GameEndedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GameEndedNotification::InternalSwap(GameEndedNotification* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.final_results_.InternalSwap(&other->_impl_.final_results_);
  _impl_.rating_changes_.InternalSwap(&other->_impl_.rating_changes_);
  _impl_.achievements_.InternalSwap(&other->_impl_.achievements_);
  _impl_.experience_gained_.InternalSwap(&other->_impl_.experience_gained_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.game_id_, &other->_impl_.game_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.winner_, &other->_impl_.winner_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEndedNotification, _impl_.game_duration_seconds_)
      + sizeof(GameEndedNotification::_impl_.game_duration_seconds_)
      - PROTOBUF_FIELD_OFFSET(GameEndedNotification, _impl_.game_stats_)>(
          reinterpret_cast<char*>(&_impl_.game_stats_),
          reinterpret_cast<char*>(&other->_impl_.game_stats_));
}

::google::protobuf::Metadata GameEndedNotification::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PlayerResult::_Internal {
 public:
};

PlayerResult::PlayerResult(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.PlayerResult)
}
inline PROTOBUF_NDEBUG_INLINE PlayerResult::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::PlayerResult& from_msg)
      : username_(arena, from.username_),
        _cached_size_{0} {}

PlayerResult::PlayerResult(
    ::google::protobuf::Arena* arena,
    const PlayerResult& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PlayerResult* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, color_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, color_),
           offsetof(Impl_, longest_think_time_) -
               offsetof(Impl_, color_) +
               sizeof(Impl_::longest_think_time_));

  // @@protoc_insertion_point(copy_constructor:blokus.PlayerResult)
}
inline PROTOBUF_NDEBUG_INLINE PlayerResult::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : username_(arena),
        _cached_size_{0} {}

inline void PlayerResult::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, color_),
           0,
           offsetof(Impl_, longest_think_time_) -
               offsetof(Impl_, color_) +
               sizeof(Impl_::longest_think_time_));
}
PlayerResult::~PlayerResult() {
  // @@protoc_insertion_point(destructor:blokus.PlayerResult)
  SharedDtor(*this);
}
inline void PlayerResult::SharedDtor(MessageLite& self) {
  PlayerResult& this_ = static_cast<PlayerResult&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.username_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PlayerResult::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PlayerResult(arena);
}
constexpr auto PlayerResult::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(PlayerResult),
                                            alignof(PlayerResult));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PlayerResult::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PlayerResult_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PlayerResult::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PlayerResult>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PlayerResult::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PlayerResult>(), &PlayerResult::ByteSizeLong,
            &PlayerResult::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PlayerResult, _impl_._cached_size_),
        false,
    },
    &PlayerResult::kDescriptorMethods,
    &descriptor_table_game_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PlayerResult::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 11, 0, 44, 2> PlayerResult::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    11, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294965248,  // skipmap
    offsetof(decltype(_table_), field_entries),
    11,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::PlayerResult>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string username = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerResult, _impl_.username_)}},
    // .blokus.PlayerColor color = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PlayerResult, _impl_.color_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerResult, _impl_.color_)}},
    // int32 final_score = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PlayerResult, _impl_.final_score_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerResult, _impl_.final_score_)}},
    // int32 blocks_placed = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PlayerResult, _impl_.blocks_placed_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerResult, _impl_.blocks_placed_)}},
    // int32 remaining_blocks = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PlayerResult, _impl_.remaining_blocks_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerResult, _impl_.remaining_blocks_)}},
    // bool finished_all_blocks = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(PlayerResult, _impl_.finished_all_blocks_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerResult, _impl_.finished_all_blocks_)}},
    // int32 total_moves = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PlayerResult, _impl_.total_moves_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerResult, _impl_.total_moves_)}},
    // int32 undo_count = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PlayerResult, _impl_.undo_count_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerResult, _impl_.undo_count_)}},
    // float average_think_time = 9;
    {::_pbi::TcParser::FastF32S1,
     {77, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerResult, _impl_.average_think_time_)}},
    // int32 longest_think_time = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PlayerResult, _impl_.longest_think_time_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerResult, _impl_.longest_think_time_)}},
    // bool disconnected = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(PlayerResult, _impl_.disconnected_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerResult, _impl_.disconnected_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string username = 1;
    {PROTOBUF_FIELD_OFFSET(PlayerResult, _impl_.username_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .blokus.PlayerColor color = 2;
    {PROTOBUF_FIELD_OFFSET(PlayerResult, _impl_.color_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int32 final_score = 3;
    {PROTOBUF_FIELD_OFFSET(PlayerResult, _impl_.final_score_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 blocks_placed = 4;
    {PROTOBUF_FIELD_OFFSET(PlayerResult, _impl_.blocks_placed_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 remaining_blocks = 5;
    {PROTOBUF_FIELD_OFFSET(PlayerResult, _impl_.remaining_blocks_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool finished_all_blocks = 6;
    {PROTOBUF_FIELD_OFFSET(PlayerResult, _impl_.finished_all_blocks_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 total_moves = 7;
    {PROTOBUF_FIELD_OFFSET(PlayerResult, _impl_.total_moves_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 undo_count = 8;
    {PROTOBUF_FIELD_OFFSET(PlayerResult, _impl_.undo_count_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // float average_think_time = 9;
    {PROTOBUF_FIELD_OFFSET(PlayerResult, _impl_.average_think_time_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // int32 longest_think_time = 10;
    {PROTOBUF_FIELD_OFFSET(PlayerResult, _impl_.longest_think_time_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool disconnected = 11;
    {PROTOBUF_FIELD_OFFSET(PlayerResult, _impl_.disconnected_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\23\10\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "blokus.PlayerResult"
    "username"
  }},
};

PROTOBUF_NOINLINE void PlayerResult::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.PlayerResult)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.username_.ClearToEmpty();
  ::memset(&_impl_.color_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.longest_think_time_) -
      reinterpret_cast<char*>(&_impl_.color_)) + sizeof(_impl_.longest_think_time_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PlayerResult::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PlayerResult& this_ = static_cast<const PlayerResult&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PlayerResult::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PlayerResult& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.PlayerResult)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string username = 1;
          if (!this_._internal_username().empty()) {
            const std::string& _s = this_._internal_username();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.PlayerResult.username");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // .blokus.PlayerColor color = 2;
          if (this_._internal_color() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                2, this_._internal_color(), target);
          }

          // int32 final_score = 3;
          if (this_._internal_final_score() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_final_score(), target);
          }

          // int32 blocks_placed = 4;
          if (this_._internal_blocks_placed() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_blocks_placed(), target);
          }

          // int32 remaining_blocks = 5;
          if (this_._internal_remaining_blocks() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<5>(
                    stream, this_._internal_remaining_blocks(), target);
          }

          // bool finished_all_blocks = 6;
          if (this_._internal_finished_all_blocks() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                6, this_._internal_finished_all_blocks(), target);
          }

          // int32 total_moves = 7;
          if (this_._internal_total_moves() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<7>(
                    stream, this_._internal_total_moves(), target);
          }

          // int32 undo_count = 8;
          if (this_._internal_undo_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<8>(
                    stream, this_._internal_undo_count(), target);
          }

          // float average_think_time = 9;
          if (::absl::bit_cast<::uint32_t>(this_._internal_average_think_time()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                9, this_._internal_average_think_time(), target);
          }

          // int32 longest_think_time = 10;
          if (this_._internal_longest_think_time() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<10>(
                    stream, this_._internal_longest_think_time(), target);
          }

          // bool disconnected = 11;
          if (this_._internal_disconnected() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                11, this_._internal_disconnected(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.PlayerResult)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PlayerResult::ByteSizeLong(const MessageLite& base) {
          const PlayerResult& this_ = static_cast<const PlayerResult&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PlayerResult::ByteSizeLong() const {
          const PlayerResult& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.PlayerResult)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string username = 1;
            if (!this_._internal_username().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_username());
            }
            // .blokus.PlayerColor color = 2;
            if (this_._internal_color() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_color());
            }
            // int32 final_score = 3;
            if (this_._internal_final_score() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_final_score());
            }
            // int32 blocks_placed = 4;
            if (this_._internal_blocks_placed() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_blocks_placed());
            }
            // int32 remaining_blocks = 5;
            if (this_._internal_remaining_blocks() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_remaining_blocks());
            }
            // int32 total_moves = 7;
            if (this_._internal_total_moves() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_total_moves());
            }
            // int32 undo_count = 8;
            if (this_._internal_undo_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_undo_count());
            }
            // bool finished_all_blocks = 6;
            if (this_._internal_finished_all_blocks() != 0) {
              total_size += 2;
            }
            // bool disconnected = 11;
            if (this_._internal_disconnected() != 0) {
              total_size += 2;
            }
            // float average_think_time = 9;
            if (::absl::bit_cast<::uint32_t>(this_._internal_average_think_time()) != 0) {
              total_size += 5;
            }
            // int32 longest_think_time = 10;
            if (this_._internal_longest_think_time() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_longest_think_time());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PlayerResult::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PlayerResult*>(&to_msg);
  auto& from = static_cast<const PlayerResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.PlayerResult)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (from._internal_color() != 0) {
    _this->_impl_.color_ = from._impl_.color_;
  }
  if (from._internal_final_score() != 0) {
    _this->_impl_.final_score_ = from._impl_.final_score_;
  }
  if (from._internal_blocks_placed() != 0) {
    _this->_impl_.blocks_placed_ = from._impl_.blocks_placed_;
  }
  if (from._internal_remaining_blocks() != 0) {
    _this->_impl_.remaining_blocks_ = from._impl_.remaining_blocks_;
  }
  if (from._internal_total_moves() != 0) {
    _this->_impl_.total_moves_ = from._impl_.total_moves_;
  }
  if (from._internal_undo_count() != 0) {
    _this->_impl_.undo_count_ = from._impl_.undo_count_;
  }
  if (from._internal_finished_all_blocks() != 0) {
    _this->_impl_.finished_all_blocks_ = from._impl_.finished_all_blocks_;
  }
  if (from._internal_disconnected() != 0) {
    _this->_impl_.disconnected_ = from._impl_.disconnected_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_average_think_time()) != 0) {
    _this->_impl_.average_think_time_ = from._impl_.average_think_time_;
  }
  if (from._internal_longest_think_time() != 0) {
    _this->_impl_.longest_think_time_ = from._impl_.longest_think_time_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerResult::CopyFrom(const PlayerResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.PlayerResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PlayerResult::InternalSwap(PlayerResult* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.username_, &other->_impl_.username_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerResult, _impl_.longest_think_time_)
      + sizeof(PlayerResult::_impl_.longest_think_time_)
      - PROTOBUF_FIELD_OFFSET(PlayerResult, _impl_.color_)>(
          reinterpret_cast<char*>(&_impl_.color_),
          reinterpret_cast<char*>(&other->_impl_.color_));
}

::google::protobuf::Metadata PlayerResult::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TurnChangedNotification::_Internal {
 public:
  using HasBits =
      decltype(std::declval<TurnChangedNotification>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TurnChangedNotification, _impl_._has_bits_);
};

void TurnChangedNotification::clear_turn_started_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.turn_started_at_ != nullptr) _impl_.turn_started_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TurnChangedNotification::TurnChangedNotification(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.TurnChangedNotification)
}
inline PROTOBUF_NDEBUG_INLINE TurnChangedNotification::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::TurnChangedNotification& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        previous_action_details_(arena, from.previous_action_details_) {}

TurnChangedNotification::TurnChangedNotification(
    ::google::protobuf::Arena* arena,
    const TurnChangedNotification& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TurnChangedNotification* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.turn_started_at_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.turn_started_at_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, room_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, room_id_),
           offsetof(Impl_, previous_action_) -
               offsetof(Impl_, room_id_) +
               sizeof(Impl_::previous_action_));

  // @@protoc_insertion_point(copy_constructor:blokus.TurnChangedNotification)
}
inline PROTOBUF_NDEBUG_INLINE TurnChangedNotification::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        previous_action_details_(arena) {}

inline void TurnChangedNotification::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, turn_started_at_),
           0,
           offsetof(Impl_, previous_action_) -
               offsetof(Impl_, turn_started_at_) +
               sizeof(Impl_::previous_action_));
}
TurnChangedNotification::~TurnChangedNotification() {
  // @@protoc_insertion_point(destructor:blokus.TurnChangedNotification)
  SharedDtor(*this);
}
inline void TurnChangedNotification::SharedDtor(MessageLite& self) {
  TurnChangedNotification& this_ = static_cast<TurnChangedNotification&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.previous_action_details_.Destroy();
  delete this_._impl_.turn_started_at_;
  this_._impl_.~Impl_();
}

inline void* TurnChangedNotification::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) TurnChangedNotification(arena);
}
constexpr auto TurnChangedNotification::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(TurnChangedNotification),
                                            alignof(TurnChangedNotification));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull TurnChangedNotification::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_TurnChangedNotification_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &TurnChangedNotification::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<TurnChangedNotification>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &TurnChangedNotification::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<TurnChangedNotification>(), &TurnChangedNotification::ByteSizeLong,
            &TurnChangedNotification::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(TurnChangedNotification, _impl_._cached_size_),
        false,
    },
    &TurnChangedNotification::kDescriptorMethods,
    &descriptor_table_game_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* TurnChangedNotification::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 1, 70, 2> TurnChangedNotification::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TurnChangedNotification, _impl_._has_bits_),
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::TurnChangedNotification>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 room_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TurnChangedNotification, _impl_.room_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TurnChangedNotification, _impl_.room_id_)}},
    // .blokus.PlayerColor current_player = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TurnChangedNotification, _impl_.current_player_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TurnChangedNotification, _impl_.current_player_)}},
    // .blokus.PlayerColor previous_player = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TurnChangedNotification, _impl_.previous_player_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(TurnChangedNotification, _impl_.previous_player_)}},
    // int32 turn_number = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TurnChangedNotification, _impl_.turn_number_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(TurnChangedNotification, _impl_.turn_number_)}},
    // int32 turn_time_seconds = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TurnChangedNotification, _impl_.turn_time_seconds_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(TurnChangedNotification, _impl_.turn_time_seconds_)}},
    // .google.protobuf.Timestamp turn_started_at = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 0, 0, PROTOBUF_FIELD_OFFSET(TurnChangedNotification, _impl_.turn_started_at_)}},
    // int32 moves_made = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TurnChangedNotification, _impl_.moves_made_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(TurnChangedNotification, _impl_.moves_made_)}},
    // bool game_nearly_finished = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(TurnChangedNotification, _impl_.game_nearly_finished_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(TurnChangedNotification, _impl_.game_nearly_finished_)}},
    // .blokus.TurnAction previous_action = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TurnChangedNotification, _impl_.previous_action_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(TurnChangedNotification, _impl_.previous_action_)}},
    // string previous_action_details = 10;
    {::_pbi::TcParser::FastUS1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(TurnChangedNotification, _impl_.previous_action_details_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 room_id = 1;
    {PROTOBUF_FIELD_OFFSET(TurnChangedNotification, _impl_.room_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .blokus.PlayerColor current_player = 2;
    {PROTOBUF_FIELD_OFFSET(TurnChangedNotification, _impl_.current_player_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .blokus.PlayerColor previous_player = 3;
    {PROTOBUF_FIELD_OFFSET(TurnChangedNotification, _impl_.previous_player_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int32 turn_number = 4;
    {PROTOBUF_FIELD_OFFSET(TurnChangedNotification, _impl_.turn_number_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 turn_time_seconds = 5;
    {PROTOBUF_FIELD_OFFSET(TurnChangedNotification, _impl_.turn_time_seconds_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .google.protobuf.Timestamp turn_started_at = 6;
    {PROTOBUF_FIELD_OFFSET(TurnChangedNotification, _impl_.turn_started_at_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 moves_made = 7;
    {PROTOBUF_FIELD_OFFSET(TurnChangedNotification, _impl_.moves_made_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool game_nearly_finished = 8;
    {PROTOBUF_FIELD_OFFSET(TurnChangedNotification, _impl_.game_nearly_finished_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .blokus.TurnAction previous_action = 9;
    {PROTOBUF_FIELD_OFFSET(TurnChangedNotification, _impl_.previous_action_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string previous_action_details = 10;
    {PROTOBUF_FIELD_OFFSET(TurnChangedNotification, _impl_.previous_action_details_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\36\0\0\0\0\0\0\0\0\0\27\0\0\0\0\0"
    "blokus.TurnChangedNotification"
    "previous_action_details"
  }},
};

PROTOBUF_NOINLINE void TurnChangedNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.TurnChangedNotification)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.previous_action_details_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.turn_started_at_ != nullptr);
    _impl_.turn_started_at_->Clear();
  }
  ::memset(&_impl_.room_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.previous_action_) -
      reinterpret_cast<char*>(&_impl_.room_id_)) + sizeof(_impl_.previous_action_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TurnChangedNotification::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TurnChangedNotification& this_ = static_cast<const TurnChangedNotification&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TurnChangedNotification::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TurnChangedNotification& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.TurnChangedNotification)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 room_id = 1;
          if (this_._internal_room_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_room_id(), target);
          }

          // .blokus.PlayerColor current_player = 2;
          if (this_._internal_current_player() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                2, this_._internal_current_player(), target);
          }

          // .blokus.PlayerColor previous_player = 3;
          if (this_._internal_previous_player() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                3, this_._internal_previous_player(), target);
          }

          // int32 turn_number = 4;
          if (this_._internal_turn_number() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_turn_number(), target);
          }

          // int32 turn_time_seconds = 5;
          if (this_._internal_turn_time_seconds() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<5>(
                    stream, this_._internal_turn_time_seconds(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp turn_started_at = 6;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                6, *this_._impl_.turn_started_at_, this_._impl_.turn_started_at_->GetCachedSize(), target,
                stream);
          }

          // int32 moves_made = 7;
          if (this_._internal_moves_made() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<7>(
                    stream, this_._internal_moves_made(), target);
          }

          // bool game_nearly_finished = 8;
          if (this_._internal_game_nearly_finished() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                8, this_._internal_game_nearly_finished(), target);
          }

          // .blokus.TurnAction previous_action = 9;
          if (this_._internal_previous_action() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                9, this_._internal_previous_action(), target);
          }

          // string previous_action_details = 10;
          if (!this_._internal_previous_action_details().empty()) {
            const std::string& _s = this_._internal_previous_action_details();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.TurnChangedNotification.previous_action_details");
            target = stream->WriteStringMaybeAliased(10, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.TurnChangedNotification)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TurnChangedNotification::ByteSizeLong(const MessageLite& base) {
          const TurnChangedNotification& this_ = static_cast<const TurnChangedNotification&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TurnChangedNotification::ByteSizeLong() const {
          const TurnChangedNotification& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.TurnChangedNotification)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string previous_action_details = 10;
            if (!this_._internal_previous_action_details().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_previous_action_details());
            }
          }
           {
            // .google.protobuf.Timestamp turn_started_at = 6;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.turn_started_at_);
            }
          }
           {
            // int32 room_id = 1;
            if (this_._internal_room_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_room_id());
            }
            // .blokus.PlayerColor current_player = 2;
            if (this_._internal_current_player() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_current_player());
            }
            // .blokus.PlayerColor previous_player = 3;
            if (this_._internal_previous_player() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_previous_player());
            }
            // int32 turn_number = 4;
            if (this_._internal_turn_number() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_turn_number());
            }
            // int32 turn_time_seconds = 5;
            if (this_._internal_turn_time_seconds() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_turn_time_seconds());
            }
            // int32 moves_made = 7;
            if (this_._internal_moves_made() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_moves_made());
            }
            // bool game_nearly_finished = 8;
            if (this_._internal_game_nearly_finished() != 0) {
              total_size += 2;
            }
            // .blokus.TurnAction previous_action = 9;
            if (this_._internal_previous_action() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_previous_action());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void TurnChangedNotification::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TurnChangedNotification*>(&to_msg);
  auto& from = static_cast<const TurnChangedNotification&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.TurnChangedNotification)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_previous_action_details().empty()) {
    _this->_internal_set_previous_action_details(from._internal_previous_action_details());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.turn_started_at_ != nullptr);
    if (_this->_impl_.turn_started_at_ == nullptr) {
      _this->_impl_.turn_started_at_ =
          ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.turn_started_at_);
    } else {
      _this->_impl_.turn_started_at_->MergeFrom(*from._impl_.turn_started_at_);
    }
  }
  if (from._internal_room_id() != 0) {
    _this->_impl_.room_id_ = from._impl_.room_id_;
  }
  if (from._internal_current_player() != 0) {
    _this->_impl_.current_player_ = from._impl_.current_player_;
  }
  if (from._internal_previous_player() != 0) {
    _this->_impl_.previous_player_ = from._impl_.previous_player_;
  }
  if (from._internal_turn_number() != 0) {
    _this->_impl_.turn_number_ = from._impl_.turn_number_;
  }
  if (from._internal_turn_time_seconds() != 0) {
    _this->_impl_.turn_time_seconds_ = from._impl_.turn_time_seconds_;
  }
  if (from._internal_moves_made() != 0) {
    _this->_impl_.moves_made_ = from._impl_.moves_made_;
  }
  if (from._internal_game_nearly_finished() != 0) {
    _this->_impl_.game_nearly_finished_ = from._impl_.game_nearly_finished_;
  }
  if (from._internal_previous_action() != 0) {
    _this->_impl_.previous_action_ = from._impl_.previous_action_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TurnChangedNotification::CopyFrom(const TurnChangedNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.TurnChangedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TurnChangedNotification::InternalSwap(TurnChangedNotification* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.previous_action_details_, &other->_impl_.previous_action_details_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TurnChangedNotification, _impl_.previous_action_)
      + sizeof(TurnChangedNotification::_impl_.previous_action_)
      - PROTOBUF_FIELD_OFFSET(TurnChangedNotification, _impl_.turn_started_at_)>(
          reinterpret_cast<char*>(&_impl_.turn_started_at_),
          reinterpret_cast<char*>(&other->_impl_.turn_started_at_));
}

::google::protobuf::Metadata TurnChangedNotification::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PlaceBlockRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PlaceBlockRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PlaceBlockRequest, _impl_._has_bits_);
};

void PlaceBlockRequest::clear_block_placement() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.block_placement_ != nullptr) _impl_.block_placement_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
PlaceBlockRequest::PlaceBlockRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.PlaceBlockRequest)
}
inline PROTOBUF_NDEBUG_INLINE PlaceBlockRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::PlaceBlockRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        move_id_(arena, from.move_id_) {}

PlaceBlockRequest::PlaceBlockRequest(
    ::google::protobuf::Arena* arena,
    const PlaceBlockRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PlaceBlockRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.block_placement_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::blokus::BlockPlacement>(
                              arena, *from._impl_.block_placement_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, room_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, room_id_),
           offsetof(Impl_, client_board_version_) -
               offsetof(Impl_, room_id_) +
               sizeof(Impl_::client_board_version_));

  // @@protoc_insertion_point(copy_constructor:blokus.PlaceBlockRequest)
}
inline PROTOBUF_NDEBUG_INLINE PlaceBlockRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        move_id_(arena) {}

inline void PlaceBlockRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, block_placement_),
           0,
           offsetof(Impl_, client_board_version_) -
               offsetof(Impl_, block_placement_) +
               sizeof(Impl_::client_board_version_));
}
PlaceBlockRequest::~PlaceBlockRequest() {
  // @@protoc_insertion_point(destructor:blokus.PlaceBlockRequest)
  SharedDtor(*this);
}
inline void PlaceBlockRequest::SharedDtor(MessageLite& self) {
  PlaceBlockRequest& this_ = static_cast<PlaceBlockRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.move_id_.Destroy();
  delete this_._impl_.block_placement_;
  this_._impl_.~Impl_();
}

inline void* PlaceBlockRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PlaceBlockRequest(arena);
}
constexpr auto PlaceBlockRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(PlaceBlockRequest),
                                            alignof(PlaceBlockRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PlaceBlockRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PlaceBlockRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PlaceBlockRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PlaceBlockRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PlaceBlockRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PlaceBlockRequest>(), &PlaceBlockRequest::ByteSizeLong,
            &PlaceBlockRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PlaceBlockRequest, _impl_._cached_size_),
        false,
    },
    &PlaceBlockRequest::kDescriptorMethods,
    &descriptor_table_game_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PlaceBlockRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 1, 40, 2> PlaceBlockRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PlaceBlockRequest, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::PlaceBlockRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 room_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PlaceBlockRequest, _impl_.room_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(PlaceBlockRequest, _impl_.room_id_)}},
    // .blokus.BlockPlacement block_placement = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(PlaceBlockRequest, _impl_.block_placement_)}},
    // bool confirm_placement = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(PlaceBlockRequest, _impl_.confirm_placement_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(PlaceBlockRequest, _impl_.confirm_placement_)}},
    // bool use_hint = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(PlaceBlockRequest, _impl_.use_hint_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(PlaceBlockRequest, _impl_.use_hint_)}},
    // int32 client_board_version = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PlaceBlockRequest, _impl_.client_board_version_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(PlaceBlockRequest, _impl_.client_board_version_)}},
    // string move_id = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(PlaceBlockRequest, _impl_.move_id_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 room_id = 1;
    {PROTOBUF_FIELD_OFFSET(PlaceBlockRequest, _impl_.room_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .blokus.BlockPlacement block_placement = 2;
    {PROTOBUF_FIELD_OFFSET(PlaceBlockRequest, _impl_.block_placement_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool confirm_placement = 3;
    {PROTOBUF_FIELD_OFFSET(PlaceBlockRequest, _impl_.confirm_placement_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool use_hint = 4;
    {PROTOBUF_FIELD_OFFSET(PlaceBlockRequest, _impl_.use_hint_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 client_board_version = 5;
    {PROTOBUF_FIELD_OFFSET(PlaceBlockRequest, _impl_.client_board_version_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string move_id = 6;
    {PROTOBUF_FIELD_OFFSET(PlaceBlockRequest, _impl_.move_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::blokus::BlockPlacement>()},
  }}, {{
    "\30\0\0\0\0\0\7\0"
    "blokus.PlaceBlockRequest"
    "move_id"
  }},
};

PROTOBUF_NOINLINE void PlaceBlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.PlaceBlockRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.move_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.block_placement_ != nullptr);
    _impl_.block_placement_->Clear();
  }
  ::memset(&_impl_.room_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.client_board_version_) -
      reinterpret_cast<char*>(&_impl_.room_id_)) + sizeof(_impl_.client_board_version_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PlaceBlockRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PlaceBlockRequest& this_ = static_cast<const PlaceBlockRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PlaceBlockRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PlaceBlockRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.PlaceBlockRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 room_id = 1;
          if (this_._internal_room_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_room_id(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .blokus.BlockPlacement block_placement = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.block_placement_, this_._impl_.block_placement_->GetCachedSize(), target,
                stream);
          }

          // bool confirm_placement = 3;
          if (this_._internal_confirm_placement() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                3, this_._internal_confirm_placement(), target);
          }

          // bool use_hint = 4;
          if (this_._internal_use_hint() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                4, this_._internal_use_hint(), target);
          }

          // int32 client_board_version = 5;
          if (this_._internal_client_board_version() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<5>(
                    stream, this_._internal_client_board_version(), target);
          }

          // string move_id = 6;
          if (!this_._internal_move_id().empty()) {
            const std::string& _s = this_._internal_move_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.PlaceBlockRequest.move_id");
            target = stream->WriteStringMaybeAliased(6, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.PlaceBlockRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PlaceBlockRequest::ByteSizeLong(const MessageLite& base) {
          const PlaceBlockRequest& this_ = static_cast<const PlaceBlockRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PlaceBlockRequest::ByteSizeLong() const {
          const PlaceBlockRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.PlaceBlockRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string move_id = 6;
            if (!this_._internal_move_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_move_id());
            }
          }
           {
            // .blokus.BlockPlacement block_placement = 2;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.block_placement_);
            }
          }
           {
            // int32 room_id = 1;
            if (this_._internal_room_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_room_id());
            }
            // bool confirm_placement = 3;
            if (this_._internal_confirm_placement() != 0) {
              total_size += 2;
            }
            // bool use_hint = 4;
            if (this_._internal_use_hint() != 0) {
              total_size += 2;
            }
            // int32 client_board_version = 5;
            if (this_._internal_client_board_version() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_client_board_version());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PlaceBlockRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PlaceBlockRequest*>(&to_msg);
  auto& from = static_cast<const PlaceBlockRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.PlaceBlockRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_move_id().empty()) {
    _this->_internal_set_move_id(from._internal_move_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.block_placement_ != nullptr);
    if (_this->_impl_.block_placement_ == nullptr) {
      _this->_impl_.block_placement_ =
          ::google::protobuf::Message::CopyConstruct<::blokus::BlockPlacement>(arena, *from._impl_.block_placement_);
    } else {
      _this->_impl_.block_placement_->MergeFrom(*from._impl_.block_placement_);
    }
  }
  if (from._internal_room_id() != 0) {
    _this->_impl_.room_id_ = from._impl_.room_id_;
  }
  if (from._internal_confirm_placement() != 0) {
    _this->_impl_.confirm_placement_ = from._impl_.confirm_placement_;
  }
  if (from._internal_use_hint() != 0) {
    _this->_impl_.use_hint_ = from._impl_.use_hint_;
  }
  if (from._internal_client_board_version() != 0) {
    _this->_impl_.client_board_version_ = from._impl_.client_board_version_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PlaceBlockRequest::CopyFrom(const PlaceBlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.PlaceBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PlaceBlockRequest::InternalSwap(PlaceBlockRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.move_id_, &other->_impl_.move_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlaceBlockRequest, _impl_.client_board_version_)
      + sizeof(PlaceBlockRequest::_impl_.client_board_version_)
      - PROTOBUF_FIELD_OFFSET(PlaceBlockRequest, _impl_.block_placement_)>(
          reinterpret_cast<char*>(&_impl_.block_placement_),
          reinterpret_cast<char*>(&other->_impl_.block_placement_));
}

::google::protobuf::Metadata PlaceBlockRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PlaceBlockResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PlaceBlockResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PlaceBlockResponse, _impl_._has_bits_);
};

void PlaceBlockResponse::clear_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_ != nullptr) _impl_.result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void PlaceBlockResponse::clear_confirmed_placement() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.confirmed_placement_ != nullptr) _impl_.confirmed_placement_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void PlaceBlockResponse::clear_new_board_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.new_board_state_ != nullptr) _impl_.new_board_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void PlaceBlockResponse::clear_suggested_positions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.suggested_positions_.Clear();
}
PlaceBlockResponse::PlaceBlockResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.PlaceBlockResponse)
}
inline PROTOBUF_NDEBUG_INLINE PlaceBlockResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::PlaceBlockResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        validation_errors_{visibility, arena, from.validation_errors_},
        suggested_positions_{visibility, arena, from.suggested_positions_},
        move_id_(arena, from.move_id_) {}

PlaceBlockResponse::PlaceBlockResponse(
    ::google::protobuf::Arena* arena,
    const PlaceBlockResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PlaceBlockResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::blokus::Result>(
                              arena, *from._impl_.result_)
                        : nullptr;
  _impl_.confirmed_placement_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::blokus::BlockPlacement>(
                              arena, *from._impl_.confirmed_placement_)
                        : nullptr;
  _impl_.new_board_state_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::blokus::BoardState>(
                              arena, *from._impl_.new_board_state_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, score_gained_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, score_gained_),
           offsetof(Impl_, server_board_version_) -
               offsetof(Impl_, score_gained_) +
               sizeof(Impl_::server_board_version_));

  // @@protoc_insertion_point(copy_constructor:blokus.PlaceBlockResponse)
}
inline PROTOBUF_NDEBUG_INLINE PlaceBlockResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        validation_errors_{visibility, arena},
        suggested_positions_{visibility, arena},
        move_id_(arena) {}

inline void PlaceBlockResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, result_),
           0,
           offsetof(Impl_, server_board_version_) -
               offsetof(Impl_, result_) +
               sizeof(Impl_::server_board_version_));
}
PlaceBlockResponse::~PlaceBlockResponse() {
  // @@protoc_insertion_point(destructor:blokus.PlaceBlockResponse)
  SharedDtor(*this);
}
inline void PlaceBlockResponse::SharedDtor(MessageLite& self) {
  PlaceBlockResponse& this_ = static_cast<PlaceBlockResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.move_id_.Destroy();
  delete this_._impl_.result_;
  delete this_._impl_.confirmed_placement_;
  delete this_._impl_.new_board_state_;
  this_._impl_.~Impl_();
}

inline void* PlaceBlockResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PlaceBlockResponse(arena);
}
constexpr auto PlaceBlockResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(PlaceBlockResponse, _impl_.validation_errors_) +
          decltype(PlaceBlockResponse::_impl_.validation_errors_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(PlaceBlockResponse, _impl_.suggested_positions_) +
          decltype(PlaceBlockResponse::_impl_.suggested_positions_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(PlaceBlockResponse), alignof(PlaceBlockResponse), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&PlaceBlockResponse::PlacementNew_,
                                 sizeof(PlaceBlockResponse),
                                 alignof(PlaceBlockResponse));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PlaceBlockResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PlaceBlockResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PlaceBlockResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PlaceBlockResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PlaceBlockResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PlaceBlockResponse>(), &PlaceBlockResponse::ByteSizeLong,
            &PlaceBlockResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PlaceBlockResponse, _impl_._cached_size_),
        false,
    },
    &PlaceBlockResponse::kDescriptorMethods,
    &descriptor_table_game_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PlaceBlockResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 13, 4, 66, 2> PlaceBlockResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PlaceBlockResponse, _impl_._has_bits_),
    0, // no _extensions_
    13, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294959104,  // skipmap
    offsetof(decltype(_table_), field_entries),
    13,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::PlaceBlockResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .blokus.Result result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PlaceBlockResponse, _impl_.result_)}},
    // .blokus.BlockPlacement confirmed_placement = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(PlaceBlockResponse, _impl_.confirmed_placement_)}},
    // int32 score_gained = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PlaceBlockResponse, _impl_.score_gained_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(PlaceBlockResponse, _impl_.score_gained_)}},
    // .blokus.BoardState new_board_state = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 2, 2, PROTOBUF_FIELD_OFFSET(PlaceBlockResponse, _impl_.new_board_state_)}},
    // bool move_accepted = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(PlaceBlockResponse, _impl_.move_accepted_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(PlaceBlockResponse, _impl_.move_accepted_)}},
    // bool valid_placement = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(PlaceBlockResponse, _impl_.valid_placement_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(PlaceBlockResponse, _impl_.valid_placement_)}},
    // repeated string validation_errors = 7;
    {::_pbi::TcParser::FastUR1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(PlaceBlockResponse, _impl_.validation_errors_)}},
    // repeated .blokus.Position suggested_positions = 8;
    {::_pbi::TcParser::FastMtR1,
     {66, 63, 3, PROTOBUF_FIELD_OFFSET(PlaceBlockResponse, _impl_.suggested_positions_)}},
    // bool turn_ended = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(PlaceBlockResponse, _impl_.turn_ended_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(PlaceBlockResponse, _impl_.turn_ended_)}},
    // .blokus.PlayerColor next_player = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PlaceBlockResponse, _impl_.next_player_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(PlaceBlockResponse, _impl_.next_player_)}},
    // bool game_ended = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(PlaceBlockResponse, _impl_.game_ended_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(PlaceBlockResponse, _impl_.game_ended_)}},
    // string move_id = 12;
    {::_pbi::TcParser::FastUS1,
     {98, 63, 0, PROTOBUF_FIELD_OFFSET(PlaceBlockResponse, _impl_.move_id_)}},
    // int32 server_board_version = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PlaceBlockResponse, _impl_.server_board_version_), 63>(),
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(PlaceBlockResponse, _impl_.server_board_version_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .blokus.Result result = 1;
    {PROTOBUF_FIELD_OFFSET(PlaceBlockResponse, _impl_.result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .blokus.BlockPlacement confirmed_placement = 2;
    {PROTOBUF_FIELD_OFFSET(PlaceBlockResponse, _impl_.confirmed_placement_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 score_gained = 3;
    {PROTOBUF_FIELD_OFFSET(PlaceBlockResponse, _impl_.score_gained_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .blokus.BoardState new_board_state = 4;
    {PROTOBUF_FIELD_OFFSET(PlaceBlockResponse, _impl_.new_board_state_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool move_accepted = 5;
    {PROTOBUF_FIELD_OFFSET(PlaceBlockResponse, _impl_.move_accepted_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool valid_placement = 6;
    {PROTOBUF_FIELD_OFFSET(PlaceBlockResponse, _impl_.valid_placement_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // repeated string validation_errors = 7;
    {PROTOBUF_FIELD_OFFSET(PlaceBlockResponse, _impl_.validation_errors_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // repeated .blokus.Position suggested_positions = 8;
    {PROTOBUF_FIELD_OFFSET(PlaceBlockResponse, _impl_.suggested_positions_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool turn_ended = 9;
    {PROTOBUF_FIELD_OFFSET(PlaceBlockResponse, _impl_.turn_ended_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .blokus.PlayerColor next_player = 10;
    {PROTOBUF_FIELD_OFFSET(PlaceBlockResponse, _impl_.next_player_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bool game_ended = 11;
    {PROTOBUF_FIELD_OFFSET(PlaceBlockResponse, _impl_.game_ended_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string move_id = 12;
    {PROTOBUF_FIELD_OFFSET(PlaceBlockResponse, _impl_.move_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 server_board_version = 13;
    {PROTOBUF_FIELD_OFFSET(PlaceBlockResponse, _impl_.server_board_version_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::blokus::Result>()},
    {::_pbi::TcParser::GetTable<::blokus::BlockPlacement>()},
    {::_pbi::TcParser::GetTable<::blokus::BoardState>()},
    {::_pbi::TcParser::GetTable<::blokus::Position>()},
  }}, {{
    "\31\0\0\0\0\0\0\21\0\0\0\0\7\0\0\0"
    "blokus.PlaceBlockResponse"
    "validation_errors"
    "move_id"
  }},
};

PROTOBUF_NOINLINE void PlaceBlockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.PlaceBlockResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.validation_errors_.Clear();
  _impl_.suggested_positions_.Clear();
  _impl_.move_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.result_ != nullptr);
      _impl_.result_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.confirmed_placement_ != nullptr);
      _impl_.confirmed_placement_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.new_board_state_ != nullptr);
      _impl_.new_board_state_->Clear();
    }
  }
  ::memset(&_impl_.score_gained_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.server_board_version_) -
      reinterpret_cast<char*>(&_impl_.score_gained_)) + sizeof(_impl_.server_board_version_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PlaceBlockResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PlaceBlockResponse& this_ = static_cast<const PlaceBlockResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PlaceBlockResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PlaceBlockResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.PlaceBlockResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .blokus.Result result = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.result_, this_._impl_.result_->GetCachedSize(), target,
                stream);
          }

          // .blokus.BlockPlacement confirmed_placement = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.confirmed_placement_, this_._impl_.confirmed_placement_->GetCachedSize(), target,
                stream);
          }

          // int32 score_gained = 3;
          if (this_._internal_score_gained() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_score_gained(), target);
          }

          // .blokus.BoardState new_board_state = 4;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.new_board_state_, this_._impl_.new_board_state_->GetCachedSize(), target,
                stream);
          }

          // bool move_accepted = 5;
          if (this_._internal_move_accepted() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                5, this_._internal_move_accepted(), target);
          }

          // bool valid_placement = 6;
          if (this_._internal_valid_placement() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                6, this_._internal_valid_placement(), target);
          }

          // repeated string validation_errors = 7;
          for (int i = 0, n = this_._internal_validation_errors_size(); i < n; ++i) {
            const auto& s = this_._internal_validation_errors().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.PlaceBlockResponse.validation_errors");
            target = stream->WriteString(7, s, target);
          }

          // repeated .blokus.Position suggested_positions = 8;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_suggested_positions_size());
               i < n; i++) {
            const auto& repfield = this_._internal_suggested_positions().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    8, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // bool turn_ended = 9;
          if (this_._internal_turn_ended() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                9, this_._internal_turn_ended(), target);
          }

          // .blokus.PlayerColor next_player = 10;
          if (this_._internal_next_player() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                10, this_._internal_next_player(), target);
          }

          // bool game_ended = 11;
          if (this_._internal_game_ended() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                11, this_._internal_game_ended(), target);
          }

          // string move_id = 12;
          if (!this_._internal_move_id().empty()) {
            const std::string& _s = this_._internal_move_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.PlaceBlockResponse.move_id");
            target = stream->WriteStringMaybeAliased(12, _s, target);
          }

          // int32 server_board_version = 13;
          if (this_._internal_server_board_version() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<13>(
                    stream, this_._internal_server_board_version(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.PlaceBlockResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PlaceBlockResponse::ByteSizeLong(const MessageLite& base) {
          const PlaceBlockResponse& this_ = static_cast<const PlaceBlockResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PlaceBlockResponse::ByteSizeLong() const {
          const PlaceBlockResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.PlaceBlockResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string validation_errors = 7;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_validation_errors().size());
              for (int i = 0, n = this_._internal_validation_errors().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_validation_errors().Get(i));
              }
            }
            // repeated .blokus.Position suggested_positions = 8;
            {
              total_size += 1UL * this_._internal_suggested_positions_size();
              for (const auto& msg : this_._internal_suggested_positions()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // string move_id = 12;
            if (!this_._internal_move_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_move_id());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // .blokus.Result result = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_);
            }
            // .blokus.BlockPlacement confirmed_placement = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.confirmed_placement_);
            }
            // .blokus.BoardState new_board_state = 4;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.new_board_state_);
            }
          }
           {
            // int32 score_gained = 3;
            if (this_._internal_score_gained() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_score_gained());
            }
            // bool move_accepted = 5;
            if (this_._internal_move_accepted() != 0) {
              total_size += 2;
            }
            // bool valid_placement = 6;
            if (this_._internal_valid_placement() != 0) {
              total_size += 2;
            }
            // bool turn_ended = 9;
            if (this_._internal_turn_ended() != 0) {
              total_size += 2;
            }
            // bool game_ended = 11;
            if (this_._internal_game_ended() != 0) {
              total_size += 2;
            }
            // .blokus.PlayerColor next_player = 10;
            if (this_._internal_next_player() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_next_player());
            }
            // int32 server_board_version = 13;
            if (this_._internal_server_board_version() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_server_board_version());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PlaceBlockResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PlaceBlockResponse*>(&to_msg);
  auto& from = static_cast<const PlaceBlockResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.PlaceBlockResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_validation_errors()->MergeFrom(from._internal_validation_errors());
  _this->_internal_mutable_suggested_positions()->MergeFrom(
      from._internal_suggested_positions());
  if (!from._internal_move_id().empty()) {
    _this->_internal_set_move_id(from._internal_move_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.result_ != nullptr);
      if (_this->_impl_.result_ == nullptr) {
        _this->_impl_.result_ =
            ::google::protobuf::Message::CopyConstruct<::blokus::Result>(arena, *from._impl_.result_);
      } else {
        _this->_impl_.result_->MergeFrom(*from._impl_.result_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.confirmed_placement_ != nullptr);
      if (_this->_impl_.confirmed_placement_ == nullptr) {
        _this->_impl_.confirmed_placement_ =
            ::google::protobuf::Message::CopyConstruct<::blokus::BlockPlacement>(arena, *from._impl_.confirmed_placement_);
      } else {
        _this->_impl_.confirmed_placement_->MergeFrom(*from._impl_.confirmed_placement_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.new_board_state_ != nullptr);
      if (_this->_impl_.new_board_state_ == nullptr) {
        _this->_impl_.new_board_state_ =
            ::google::protobuf::Message::CopyConstruct<::blokus::BoardState>(arena, *from._impl_.new_board_state_);
      } else {
        _this->_impl_.new_board_state_->MergeFrom(*from._impl_.new_board_state_);
      }
    }
  }
  if (from._internal_score_gained() != 0) {
    _this->_impl_.score_gained_ = from._impl_.score_gained_;
  }
  if (from._internal_move_accepted() != 0) {
    _this->_impl_.move_accepted_ = from._impl_.move_accepted_;
  }
  if (from._internal_valid_placement() != 0) {
    _this->_impl_.valid_placement_ = from._impl_.valid_placement_;
  }
  if (from._internal_turn_ended() != 0) {
    _this->_impl_.turn_ended_ = from._impl_.turn_ended_;
  }
  if (from._internal_game_ended() != 0) {
    _this->_impl_.game_ended_ = from._impl_.game_ended_;
  }
  if (from._internal_next_player() != 0) {
    _this->_impl_.next_player_ = from._impl_.next_player_;
  }
  if (from._internal_server_board_version() != 0) {
    _this->_impl_.server_board_version_ = from._impl_.server_board_version_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PlaceBlockResponse::CopyFrom(const PlaceBlockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.PlaceBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PlaceBlockResponse::InternalSwap(PlaceBlockResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.validation_errors_.InternalSwap(&other->_impl_.validation_errors_);
  _impl_.suggested_positions_.InternalSwap(&other->_impl_.suggested_positions_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.move_id_, &other->_impl_.move_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlaceBlockResponse, _impl_.server_board_version_)
      + sizeof(PlaceBlockResponse::_impl_.server_board_version_)
      - PROTOBUF_FIELD_OFFSET(PlaceBlockResponse, _impl_.result_)>(
          reinterpret_cast<char*>(&_impl_.result_),
          reinterpret_cast<char*>(&other->_impl_.result_));
}

::google::protobuf::Metadata PlaceBlockResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class BlockPlacedNotification::_Internal {
 public:
  using HasBits =
      decltype(std::declval<BlockPlacedNotification>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(BlockPlacedNotification, _impl_._has_bits_);
};

void BlockPlacedNotification::clear_block_placement() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.block_placement_ != nullptr) _impl_.block_placement_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void BlockPlacedNotification::clear_updated_board() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.updated_board_ != nullptr) _impl_.updated_board_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void BlockPlacedNotification::clear_placed_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.placed_at_ != nullptr) _impl_.placed_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
BlockPlacedNotification::BlockPlacedNotification(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.BlockPlacedNotification)
}
inline PROTOBUF_NDEBUG_INLINE BlockPlacedNotification::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::BlockPlacedNotification& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        triggered_achievements_{visibility, arena, from.triggered_achievements_},
        player_username_(arena, from.player_username_) {}

BlockPlacedNotification::BlockPlacedNotification(
    ::google::protobuf::Arena* arena,
    const BlockPlacedNotification& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  BlockPlacedNotification* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.block_placement_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::blokus::BlockPlacement>(
                              arena, *from._impl_.block_placement_)
                        : nullptr;
  _impl_.updated_board_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::blokus::BoardState>(
                              arena, *from._impl_.updated_board_)
                        : nullptr;
  _impl_.placed_at_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.placed_at_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, room_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, room_id_),
           offsetof(Impl_, game_winning_move_) -
               offsetof(Impl_, room_id_) +
               sizeof(Impl_::game_winning_move_));

  // @@protoc_insertion_point(copy_constructor:blokus.BlockPlacedNotification)
}
inline PROTOBUF_NDEBUG_INLINE BlockPlacedNotification::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        triggered_achievements_{visibility, arena},
        player_username_(arena) {}

inline void BlockPlacedNotification::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, block_placement_),
           0,
           offsetof(Impl_, game_winning_move_) -
               offsetof(Impl_, block_placement_) +
               sizeof(Impl_::game_winning_move_));
}
BlockPlacedNotification::~BlockPlacedNotification() {
  // @@protoc_insertion_point(destructor:blokus.BlockPlacedNotification)
  SharedDtor(*this);
}
inline void BlockPlacedNotification::SharedDtor(MessageLite& self) {
  BlockPlacedNotification& this_ = static_cast<BlockPlacedNotification&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.player_username_.Destroy();
  delete this_._impl_.block_placement_;
  delete this_._impl_.updated_board_;
  delete this_._impl_.placed_at_;
  this_._impl_.~Impl_();
}

inline void* BlockPlacedNotification::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) BlockPlacedNotification(arena);
}
constexpr auto BlockPlacedNotification::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(BlockPlacedNotification, _impl_.triggered_achievements_) +
          decltype(BlockPlacedNotification::_impl_.triggered_achievements_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(BlockPlacedNotification), alignof(BlockPlacedNotification), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&BlockPlacedNotification::PlacementNew_,
                                 sizeof(BlockPlacedNotification),
                                 alignof(BlockPlacedNotification));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull BlockPlacedNotification::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_BlockPlacedNotification_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &BlockPlacedNotification::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<BlockPlacedNotification>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &BlockPlacedNotification::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<BlockPlacedNotification>(), &BlockPlacedNotification::ByteSizeLong,
            &BlockPlacedNotification::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(BlockPlacedNotification, _impl_._cached_size_),
        false,
    },
    &BlockPlacedNotification::kDescriptorMethods,
    &descriptor_table_game_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* BlockPlacedNotification::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 14, 3, 84, 2> BlockPlacedNotification::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(BlockPlacedNotification, _impl_._has_bits_),
    0, // no _extensions_
    14, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294950912,  // skipmap
    offsetof(decltype(_table_), field_entries),
    14,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::BlockPlacedNotification>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 room_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BlockPlacedNotification, _impl_.room_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(BlockPlacedNotification, _impl_.room_id_)}},
    // string player_username = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(BlockPlacedNotification, _impl_.player_username_)}},
    // .blokus.PlayerColor player_color = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BlockPlacedNotification, _impl_.player_color_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(BlockPlacedNotification, _impl_.player_color_)}},
    // .blokus.BlockPlacement block_placement = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(BlockPlacedNotification, _impl_.block_placement_)}},
    // int32 score_gained = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BlockPlacedNotification, _impl_.score_gained_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(BlockPlacedNotification, _impl_.score_gained_)}},
    // int32 new_total_score = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BlockPlacedNotification, _impl_.new_total_score_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(BlockPlacedNotification, _impl_.new_total_score_)}},
    // int32 remaining_blocks = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BlockPlacedNotification, _impl_.remaining_blocks_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(BlockPlacedNotification, _impl_.remaining_blocks_)}},
    // .blokus.BoardState updated_board = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 1, 1, PROTOBUF_FIELD_OFFSET(BlockPlacedNotification, _impl_.updated_board_)}},
    // bool turn_ended = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(BlockPlacedNotification, _impl_.turn_ended_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(BlockPlacedNotification, _impl_.turn_ended_)}},
    // .blokus.PlayerColor next_player = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BlockPlacedNotification, _impl_.next_player_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(BlockPlacedNotification, _impl_.next_player_)}},
    // .google.protobuf.Timestamp placed_at = 11;
    {::_pbi::TcParser::FastMtS1,
     {90, 2, 2, PROTOBUF_FIELD_OFFSET(BlockPlacedNotification, _impl_.placed_at_)}},
    // bool perfect_game = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(BlockPlacedNotification, _impl_.perfect_game_), 63>(),
     {96, 63, 0, PROTOBUF_FIELD_OFFSET(BlockPlacedNotification, _impl_.perfect_game_)}},
    // bool game_winning_move = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(BlockPlacedNotification, _impl_.game_winning_move_), 63>(),
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(BlockPlacedNotification, _impl_.game_winning_move_)}},
    // repeated string triggered_achievements = 14;
    {::_pbi::TcParser::FastUR1,
     {114, 63, 0, PROTOBUF_FIELD_OFFSET(BlockPlacedNotification, _impl_.triggered_achievements_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 room_id = 1;
    {PROTOBUF_FIELD_OFFSET(BlockPlacedNotification, _impl_.room_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string player_username = 2;
    {PROTOBUF_FIELD_OFFSET(BlockPlacedNotification, _impl_.player_username_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .blokus.PlayerColor player_color = 3;
    {PROTOBUF_FIELD_OFFSET(BlockPlacedNotification, _impl_.player_color_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .blokus.BlockPlacement block_placement = 4;
    {PROTOBUF_FIELD_OFFSET(BlockPlacedNotification, _impl_.block_placement_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 score_gained = 5;
    {PROTOBUF_FIELD_OFFSET(BlockPlacedNotification, _impl_.score_gained_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 new_total_score = 6;
    {PROTOBUF_FIELD_OFFSET(BlockPlacedNotification, _impl_.new_total_score_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 remaining_blocks = 7;
    {PROTOBUF_FIELD_OFFSET(BlockPlacedNotification, _impl_.remaining_blocks_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .blokus.BoardState updated_board = 8;
    {PROTOBUF_FIELD_OFFSET(BlockPlacedNotification, _impl_.updated_board_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool turn_ended = 9;
    {PROTOBUF_FIELD_OFFSET(BlockPlacedNotification, _impl_.turn_ended_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .blokus.PlayerColor next_player = 10;
    {PROTOBUF_FIELD_OFFSET(BlockPlacedNotification, _impl_.next_player_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .google.protobuf.Timestamp placed_at = 11;
    {PROTOBUF_FIELD_OFFSET(BlockPlacedNotification, _impl_.placed_at_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool perfect_game = 12;
    {PROTOBUF_FIELD_OFFSET(BlockPlacedNotification, _impl_.perfect_game_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool game_winning_move = 13;
    {PROTOBUF_FIELD_OFFSET(BlockPlacedNotification, _impl_.game_winning_move_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // repeated string triggered_achievements = 14;
    {PROTOBUF_FIELD_OFFSET(BlockPlacedNotification, _impl_.triggered_achievements_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::blokus::BlockPlacement>()},
    {::_pbi::TcParser::GetTable<::blokus::BoardState>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\36\0\17\0\0\0\0\0\0\0\0\0\0\0\26\0"
    "blokus.BlockPlacedNotification"
    "player_username"
    "triggered_achievements"
  }},
};

PROTOBUF_NOINLINE void BlockPlacedNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.BlockPlacedNotification)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.triggered_achievements_.Clear();
  _impl_.player_username_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.block_placement_ != nullptr);
      _impl_.block_placement_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.updated_board_ != nullptr);
      _impl_.updated_board_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.placed_at_ != nullptr);
      _impl_.placed_at_->Clear();
    }
  }
  ::memset(&_impl_.room_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.game_winning_move_) -
      reinterpret_cast<char*>(&_impl_.room_id_)) + sizeof(_impl_.game_winning_move_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* BlockPlacedNotification::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const BlockPlacedNotification& this_ = static_cast<const BlockPlacedNotification&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* BlockPlacedNotification::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const BlockPlacedNotification& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.BlockPlacedNotification)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 room_id = 1;
          if (this_._internal_room_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_room_id(), target);
          }

          // string player_username = 2;
          if (!this_._internal_player_username().empty()) {
            const std::string& _s = this_._internal_player_username();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.BlockPlacedNotification.player_username");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // .blokus.PlayerColor player_color = 3;
          if (this_._internal_player_color() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                3, this_._internal_player_color(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .blokus.BlockPlacement block_placement = 4;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.block_placement_, this_._impl_.block_placement_->GetCachedSize(), target,
                stream);
          }

          // int32 score_gained = 5;
          if (this_._internal_score_gained() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<5>(
                    stream, this_._internal_score_gained(), target);
          }

          // int32 new_total_score = 6;
          if (this_._internal_new_total_score() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<6>(
                    stream, this_._internal_new_total_score(), target);
          }

          // int32 remaining_blocks = 7;
          if (this_._internal_remaining_blocks() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<7>(
                    stream, this_._internal_remaining_blocks(), target);
          }

          // .blokus.BoardState updated_board = 8;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                8, *this_._impl_.updated_board_, this_._impl_.updated_board_->GetCachedSize(), target,
                stream);
          }

          // bool turn_ended = 9;
          if (this_._internal_turn_ended() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                9, this_._internal_turn_ended(), target);
          }

          // .blokus.PlayerColor next_player = 10;
          if (this_._internal_next_player() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                10, this_._internal_next_player(), target);
          }

          // .google.protobuf.Timestamp placed_at = 11;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                11, *this_._impl_.placed_at_, this_._impl_.placed_at_->GetCachedSize(), target,
                stream);
          }

          // bool perfect_game = 12;
          if (this_._internal_perfect_game() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                12, this_._internal_perfect_game(), target);
          }

          // bool game_winning_move = 13;
          if (this_._internal_game_winning_move() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                13, this_._internal_game_winning_move(), target);
          }

          // repeated string triggered_achievements = 14;
          for (int i = 0, n = this_._internal_triggered_achievements_size(); i < n; ++i) {
            const auto& s = this_._internal_triggered_achievements().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.BlockPlacedNotification.triggered_achievements");
            target = stream->WriteString(14, s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.BlockPlacedNotification)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t BlockPlacedNotification::ByteSizeLong(const MessageLite& base) {
          const BlockPlacedNotification& this_ = static_cast<const BlockPlacedNotification&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t BlockPlacedNotification::ByteSizeLong() const {
          const BlockPlacedNotification& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.BlockPlacedNotification)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string triggered_achievements = 14;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_triggered_achievements().size());
              for (int i = 0, n = this_._internal_triggered_achievements().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_triggered_achievements().Get(i));
              }
            }
          }
           {
            // string player_username = 2;
            if (!this_._internal_player_username().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_player_username());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // .blokus.BlockPlacement block_placement = 4;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.block_placement_);
            }
            // .blokus.BoardState updated_board = 8;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.updated_board_);
            }
            // .google.protobuf.Timestamp placed_at = 11;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.placed_at_);
            }
          }
           {
            // int32 room_id = 1;
            if (this_._internal_room_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_room_id());
            }
            // .blokus.PlayerColor player_color = 3;
            if (this_._internal_player_color() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_player_color());
            }
            // int32 score_gained = 5;
            if (this_._internal_score_gained() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_score_gained());
            }
            // int32 new_total_score = 6;
            if (this_._internal_new_total_score() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_new_total_score());
            }
            // int32 remaining_blocks = 7;
            if (this_._internal_remaining_blocks() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_remaining_blocks());
            }
            // .blokus.PlayerColor next_player = 10;
            if (this_._internal_next_player() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_next_player());
            }
            // bool turn_ended = 9;
            if (this_._internal_turn_ended() != 0) {
              total_size += 2;
            }
            // bool perfect_game = 12;
            if (this_._internal_perfect_game() != 0) {
              total_size += 2;
            }
            // bool game_winning_move = 13;
            if (this_._internal_game_winning_move() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void BlockPlacedNotification::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<BlockPlacedNotification*>(&to_msg);
  auto& from = static_cast<const BlockPlacedNotification&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.BlockPlacedNotification)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_triggered_achievements()->MergeFrom(from._internal_triggered_achievements());
  if (!from._internal_player_username().empty()) {
    _this->_internal_set_player_username(from._internal_player_username());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.block_placement_ != nullptr);
      if (_this->_impl_.block_placement_ == nullptr) {
        _this->_impl_.block_placement_ =
            ::google::protobuf::Message::CopyConstruct<::blokus::BlockPlacement>(arena, *from._impl_.block_placement_);
      } else {
        _this->_impl_.block_placement_->MergeFrom(*from._impl_.block_placement_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.updated_board_ != nullptr);
      if (_this->_impl_.updated_board_ == nullptr) {
        _this->_impl_.updated_board_ =
            ::google::protobuf::Message::CopyConstruct<::blokus::BoardState>(arena, *from._impl_.updated_board_);
      } else {
        _this->_impl_.updated_board_->MergeFrom(*from._impl_.updated_board_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.placed_at_ != nullptr);
      if (_this->_impl_.placed_at_ == nullptr) {
        _this->_impl_.placed_at_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.placed_at_);
      } else {
        _this->_impl_.placed_at_->MergeFrom(*from._impl_.placed_at_);
      }
    }
  }
  if (from._internal_room_id() != 0) {
    _this->_impl_.room_id_ = from._impl_.room_id_;
  }
  if (from._internal_player_color() != 0) {
    _this->_impl_.player_color_ = from._impl_.player_color_;
  }
  if (from._internal_score_gained() != 0) {
    _this->_impl_.score_gained_ = from._impl_.score_gained_;
  }
  if (from._internal_new_total_score() != 0) {
    _this->_impl_.new_total_score_ = from._impl_.new_total_score_;
  }
  if (from._internal_remaining_blocks() != 0) {
    _this->_impl_.remaining_blocks_ = from._impl_.remaining_blocks_;
  }
  if (from._internal_next_player() != 0) {
    _this->_impl_.next_player_ = from._impl_.next_player_;
  }
  if (from._internal_turn_ended() != 0) {
    _this->_impl_.turn_ended_ = from._impl_.turn_ended_;
  }
  if (from._internal_perfect_game() != 0) {
    _this->_impl_.perfect_game_ = from._impl_.perfect_game_;
  }
  if (from._internal_game_winning_move() != 0) {
    _this->_impl_.game_winning_move_ = from._impl_.game_winning_move_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BlockPlacedNotification::CopyFrom(const BlockPlacedNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.BlockPlacedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void BlockPlacedNotification::InternalSwap(BlockPlacedNotification* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.triggered_achievements_.InternalSwap(&other->_impl_.triggered_achievements_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.player_username_, &other->_impl_.player_username_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockPlacedNotification, _impl_.game_winning_move_)
      + sizeof(BlockPlacedNotification::_impl_.game_winning_move_)
      - PROTOBUF_FIELD_OFFSET(BlockPlacedNotification, _impl_.block_placement_)>(
          reinterpret_cast<char*>(&_impl_.block_placement_),
          reinterpret_cast<char*>(&other->_impl_.block_placement_));
}

::google::protobuf::Metadata BlockPlacedNotification::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SkipTurnRequest::_Internal {
 public:
};

SkipTurnRequest::SkipTurnRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.SkipTurnRequest)
}
inline PROTOBUF_NDEBUG_INLINE SkipTurnRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::SkipTurnRequest& from_msg)
      : reason_(arena, from.reason_),
        _cached_size_{0} {}

SkipTurnRequest::SkipTurnRequest(
    ::google::protobuf::Arena* arena,
    const SkipTurnRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SkipTurnRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, room_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, room_id_),
           offsetof(Impl_, forced_) -
               offsetof(Impl_, room_id_) +
               sizeof(Impl_::forced_));

  // @@protoc_insertion_point(copy_constructor:blokus.SkipTurnRequest)
}
inline PROTOBUF_NDEBUG_INLINE SkipTurnRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : reason_(arena),
        _cached_size_{0} {}

inline void SkipTurnRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, room_id_),
           0,
           offsetof(Impl_, forced_) -
               offsetof(Impl_, room_id_) +
               sizeof(Impl_::forced_));
}
SkipTurnRequest::~SkipTurnRequest() {
  // @@protoc_insertion_point(destructor:blokus.SkipTurnRequest)
  SharedDtor(*this);
}
inline void SkipTurnRequest::SharedDtor(MessageLite& self) {
  SkipTurnRequest& this_ = static_cast<SkipTurnRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.reason_.Destroy();
  this_._impl_.~Impl_();
}

inline void* SkipTurnRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SkipTurnRequest(arena);
}
constexpr auto SkipTurnRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(SkipTurnRequest),
                                            alignof(SkipTurnRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SkipTurnRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SkipTurnRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SkipTurnRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SkipTurnRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SkipTurnRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SkipTurnRequest>(), &SkipTurnRequest::ByteSizeLong,
            &SkipTurnRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SkipTurnRequest, _impl_._cached_size_),
        false,
    },
    &SkipTurnRequest::kDescriptorMethods,
    &descriptor_table_game_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SkipTurnRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 37, 2> SkipTurnRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::SkipTurnRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 room_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SkipTurnRequest, _impl_.room_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SkipTurnRequest, _impl_.room_id_)}},
    // string reason = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(SkipTurnRequest, _impl_.reason_)}},
    // bool forced = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SkipTurnRequest, _impl_.forced_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(SkipTurnRequest, _impl_.forced_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 room_id = 1;
    {PROTOBUF_FIELD_OFFSET(SkipTurnRequest, _impl_.room_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string reason = 2;
    {PROTOBUF_FIELD_OFFSET(SkipTurnRequest, _impl_.reason_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool forced = 3;
    {PROTOBUF_FIELD_OFFSET(SkipTurnRequest, _impl_.forced_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\26\0\6\0\0\0\0\0"
    "blokus.SkipTurnRequest"
    "reason"
  }},
};

PROTOBUF_NOINLINE void SkipTurnRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.SkipTurnRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.reason_.ClearToEmpty();
  ::memset(&_impl_.room_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.forced_) -
      reinterpret_cast<char*>(&_impl_.room_id_)) + sizeof(_impl_.forced_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SkipTurnRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SkipTurnRequest& this_ = static_cast<const SkipTurnRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SkipTurnRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SkipTurnRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.SkipTurnRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 room_id = 1;
          if (this_._internal_room_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_room_id(), target);
          }

          // string reason = 2;
          if (!this_._internal_reason().empty()) {
            const std::string& _s = this_._internal_reason();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.SkipTurnRequest.reason");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // bool forced = 3;
          if (this_._internal_forced() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                3, this_._internal_forced(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.SkipTurnRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SkipTurnRequest::ByteSizeLong(const MessageLite& base) {
          const SkipTurnRequest& this_ = static_cast<const SkipTurnRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SkipTurnRequest::ByteSizeLong() const {
          const SkipTurnRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.SkipTurnRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string reason = 2;
            if (!this_._internal_reason().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_reason());
            }
            // int32 room_id = 1;
            if (this_._internal_room_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_room_id());
            }
            // bool forced = 3;
            if (this_._internal_forced() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SkipTurnRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SkipTurnRequest*>(&to_msg);
  auto& from = static_cast<const SkipTurnRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.SkipTurnRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_reason().empty()) {
    _this->_internal_set_reason(from._internal_reason());
  }
  if (from._internal_room_id() != 0) {
    _this->_impl_.room_id_ = from._impl_.room_id_;
  }
  if (from._internal_forced() != 0) {
    _this->_impl_.forced_ = from._impl_.forced_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SkipTurnRequest::CopyFrom(const SkipTurnRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.SkipTurnRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SkipTurnRequest::InternalSwap(SkipTurnRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.reason_, &other->_impl_.reason_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SkipTurnRequest, _impl_.forced_)
      + sizeof(SkipTurnRequest::_impl_.forced_)
      - PROTOBUF_FIELD_OFFSET(SkipTurnRequest, _impl_.room_id_)>(
          reinterpret_cast<char*>(&_impl_.room_id_),
          reinterpret_cast<char*>(&other->_impl_.room_id_));
}

::google::protobuf::Metadata SkipTurnRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SkipTurnResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SkipTurnResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SkipTurnResponse, _impl_._has_bits_);
};

void SkipTurnResponse::clear_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_ != nullptr) _impl_.result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SkipTurnResponse::SkipTurnResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.SkipTurnResponse)
}
inline PROTOBUF_NDEBUG_INLINE SkipTurnResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::SkipTurnResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        message_(arena, from.message_) {}

SkipTurnResponse::SkipTurnResponse(
    ::google::protobuf::Arena* arena,
    const SkipTurnResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SkipTurnResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::blokus::Result>(
                              arena, *from._impl_.result_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, next_player_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, next_player_),
           offsetof(Impl_, game_ended_) -
               offsetof(Impl_, next_player_) +
               sizeof(Impl_::game_ended_));

  // @@protoc_insertion_point(copy_constructor:blokus.SkipTurnResponse)
}
inline PROTOBUF_NDEBUG_INLINE SkipTurnResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        message_(arena) {}

inline void SkipTurnResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, result_),
           0,
           offsetof(Impl_, game_ended_) -
               offsetof(Impl_, result_) +
               sizeof(Impl_::game_ended_));
}
SkipTurnResponse::~SkipTurnResponse() {
  // @@protoc_insertion_point(destructor:blokus.SkipTurnResponse)
  SharedDtor(*this);
}
inline void SkipTurnResponse::SharedDtor(MessageLite& self) {
  SkipTurnResponse& this_ = static_cast<SkipTurnResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.message_.Destroy();
  delete this_._impl_.result_;
  this_._impl_.~Impl_();
}

inline void* SkipTurnResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SkipTurnResponse(arena);
}
constexpr auto SkipTurnResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(SkipTurnResponse),
                                            alignof(SkipTurnResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SkipTurnResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SkipTurnResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SkipTurnResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SkipTurnResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SkipTurnResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SkipTurnResponse>(), &SkipTurnResponse::ByteSizeLong,
            &SkipTurnResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SkipTurnResponse, _impl_._cached_size_),
        false,
    },
    &SkipTurnResponse::kDescriptorMethods,
    &descriptor_table_game_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SkipTurnResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 39, 2> SkipTurnResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SkipTurnResponse, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::SkipTurnResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bool game_ended = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SkipTurnResponse, _impl_.game_ended_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(SkipTurnResponse, _impl_.game_ended_)}},
    // .blokus.Result result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SkipTurnResponse, _impl_.result_)}},
    // string message = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(SkipTurnResponse, _impl_.message_)}},
    // .blokus.PlayerColor next_player = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SkipTurnResponse, _impl_.next_player_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(SkipTurnResponse, _impl_.next_player_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .blokus.Result result = 1;
    {PROTOBUF_FIELD_OFFSET(SkipTurnResponse, _impl_.result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string message = 2;
    {PROTOBUF_FIELD_OFFSET(SkipTurnResponse, _impl_.message_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .blokus.PlayerColor next_player = 3;
    {PROTOBUF_FIELD_OFFSET(SkipTurnResponse, _impl_.next_player_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bool game_ended = 4;
    {PROTOBUF_FIELD_OFFSET(SkipTurnResponse, _impl_.game_ended_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::blokus::Result>()},
  }}, {{
    "\27\0\7\0\0\0\0\0"
    "blokus.SkipTurnResponse"
    "message"
  }},
};

PROTOBUF_NOINLINE void SkipTurnResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.SkipTurnResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.result_ != nullptr);
    _impl_.result_->Clear();
  }
  ::memset(&_impl_.next_player_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.game_ended_) -
      reinterpret_cast<char*>(&_impl_.next_player_)) + sizeof(_impl_.game_ended_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SkipTurnResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SkipTurnResponse& this_ = static_cast<const SkipTurnResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SkipTurnResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SkipTurnResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.SkipTurnResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .blokus.Result result = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.result_, this_._impl_.result_->GetCachedSize(), target,
                stream);
          }

          // string message = 2;
          if (!this_._internal_message().empty()) {
            const std::string& _s = this_._internal_message();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.SkipTurnResponse.message");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // .blokus.PlayerColor next_player = 3;
          if (this_._internal_next_player() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                3, this_._internal_next_player(), target);
          }

          // bool game_ended = 4;
          if (this_._internal_game_ended() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                4, this_._internal_game_ended(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.SkipTurnResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SkipTurnResponse::ByteSizeLong(const MessageLite& base) {
          const SkipTurnResponse& this_ = static_cast<const SkipTurnResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SkipTurnResponse::ByteSizeLong() const {
          const SkipTurnResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.SkipTurnResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string message = 2;
            if (!this_._internal_message().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_message());
            }
          }
           {
            // .blokus.Result result = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_);
            }
          }
           {
            // .blokus.PlayerColor next_player = 3;
            if (this_._internal_next_player() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_next_player());
            }
            // bool game_ended = 4;
            if (this_._internal_game_ended() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SkipTurnResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SkipTurnResponse*>(&to_msg);
  auto& from = static_cast<const SkipTurnResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.SkipTurnResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.result_ != nullptr);
    if (_this->_impl_.result_ == nullptr) {
      _this->_impl_.result_ =
          ::google::protobuf::Message::CopyConstruct<::blokus::Result>(arena, *from._impl_.result_);
    } else {
      _this->_impl_.result_->MergeFrom(*from._impl_.result_);
    }
  }
  if (from._internal_next_player() != 0) {
    _this->_impl_.next_player_ = from._impl_.next_player_;
  }
  if (from._internal_game_ended() != 0) {
    _this->_impl_.game_ended_ = from._impl_.game_ended_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SkipTurnResponse::CopyFrom(const SkipTurnResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.SkipTurnResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SkipTurnResponse::InternalSwap(SkipTurnResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SkipTurnResponse, _impl_.game_ended_)
      + sizeof(SkipTurnResponse::_impl_.game_ended_)
      - PROTOBUF_FIELD_OFFSET(SkipTurnResponse, _impl_.result_)>(
          reinterpret_cast<char*>(&_impl_.result_),
          reinterpret_cast<char*>(&other->_impl_.result_));
}

::google::protobuf::Metadata SkipTurnResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class UndoMoveRequest::_Internal {
 public:
};

UndoMoveRequest::UndoMoveRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.UndoMoveRequest)
}
inline PROTOBUF_NDEBUG_INLINE UndoMoveRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::UndoMoveRequest& from_msg)
      : reason_(arena, from.reason_),
        _cached_size_{0} {}

UndoMoveRequest::UndoMoveRequest(
    ::google::protobuf::Arena* arena,
    const UndoMoveRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  UndoMoveRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, room_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, room_id_),
           offsetof(Impl_, moves_to_undo_) -
               offsetof(Impl_, room_id_) +
               sizeof(Impl_::moves_to_undo_));

  // @@protoc_insertion_point(copy_constructor:blokus.UndoMoveRequest)
}
inline PROTOBUF_NDEBUG_INLINE UndoMoveRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : reason_(arena),
        _cached_size_{0} {}

inline void UndoMoveRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, room_id_),
           0,
           offsetof(Impl_, moves_to_undo_) -
               offsetof(Impl_, room_id_) +
               sizeof(Impl_::moves_to_undo_));
}
UndoMoveRequest::~UndoMoveRequest() {
  // @@protoc_insertion_point(destructor:blokus.UndoMoveRequest)
  SharedDtor(*this);
}
inline void UndoMoveRequest::SharedDtor(MessageLite& self) {
  UndoMoveRequest& this_ = static_cast<UndoMoveRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.reason_.Destroy();
  this_._impl_.~Impl_();
}

inline void* UndoMoveRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) UndoMoveRequest(arena);
}
constexpr auto UndoMoveRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(UndoMoveRequest),
                                            alignof(UndoMoveRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull UndoMoveRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_UndoMoveRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &UndoMoveRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<UndoMoveRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &UndoMoveRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<UndoMoveRequest>(), &UndoMoveRequest::ByteSizeLong,
            &UndoMoveRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(UndoMoveRequest, _impl_._cached_size_),
        false,
    },
    &UndoMoveRequest::kDescriptorMethods,
    &descriptor_table_game_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* UndoMoveRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 37, 2> UndoMoveRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::UndoMoveRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 room_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(UndoMoveRequest, _impl_.room_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(UndoMoveRequest, _impl_.room_id_)}},
    // int32 moves_to_undo = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(UndoMoveRequest, _impl_.moves_to_undo_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(UndoMoveRequest, _impl_.moves_to_undo_)}},
    // string reason = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(UndoMoveRequest, _impl_.reason_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 room_id = 1;
    {PROTOBUF_FIELD_OFFSET(UndoMoveRequest, _impl_.room_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 moves_to_undo = 2;
    {PROTOBUF_FIELD_OFFSET(UndoMoveRequest, _impl_.moves_to_undo_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string reason = 3;
    {PROTOBUF_FIELD_OFFSET(UndoMoveRequest, _impl_.reason_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\26\0\0\6\0\0\0\0"
    "blokus.UndoMoveRequest"
    "reason"
  }},
};

PROTOBUF_NOINLINE void UndoMoveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.UndoMoveRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.reason_.ClearToEmpty();
  ::memset(&_impl_.room_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.moves_to_undo_) -
      reinterpret_cast<char*>(&_impl_.room_id_)) + sizeof(_impl_.moves_to_undo_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* UndoMoveRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const UndoMoveRequest& this_ = static_cast<const UndoMoveRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* UndoMoveRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const UndoMoveRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.UndoMoveRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 room_id = 1;
          if (this_._internal_room_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_room_id(), target);
          }

          // int32 moves_to_undo = 2;
          if (this_._internal_moves_to_undo() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_moves_to_undo(), target);
          }

          // string reason = 3;
          if (!this_._internal_reason().empty()) {
            const std::string& _s = this_._internal_reason();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.UndoMoveRequest.reason");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.UndoMoveRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t UndoMoveRequest::ByteSizeLong(const MessageLite& base) {
          const UndoMoveRequest& this_ = static_cast<const UndoMoveRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t UndoMoveRequest::ByteSizeLong() const {
          const UndoMoveRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.UndoMoveRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string reason = 3;
            if (!this_._internal_reason().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_reason());
            }
            // int32 room_id = 1;
            if (this_._internal_room_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_room_id());
            }
            // int32 moves_to_undo = 2;
            if (this_._internal_moves_to_undo() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_moves_to_undo());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void UndoMoveRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<UndoMoveRequest*>(&to_msg);
  auto& from = static_cast<const UndoMoveRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.UndoMoveRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_reason().empty()) {
    _this->_internal_set_reason(from._internal_reason());
  }
  if (from._internal_room_id() != 0) {
    _this->_impl_.room_id_ = from._impl_.room_id_;
  }
  if (from._internal_moves_to_undo() != 0) {
    _this->_impl_.moves_to_undo_ = from._impl_.moves_to_undo_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UndoMoveRequest::CopyFrom(const UndoMoveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.UndoMoveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void UndoMoveRequest::InternalSwap(UndoMoveRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.reason_, &other->_impl_.reason_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UndoMoveRequest, _impl_.moves_to_undo_)
      + sizeof(UndoMoveRequest::_impl_.moves_to_undo_)
      - PROTOBUF_FIELD_OFFSET(UndoMoveRequest, _impl_.room_id_)>(
          reinterpret_cast<char*>(&_impl_.room_id_),
          reinterpret_cast<char*>(&other->_impl_.room_id_));
}

::google::protobuf::Metadata UndoMoveRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class UndoMoveResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<UndoMoveResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(UndoMoveResponse, _impl_._has_bits_);
};

void UndoMoveResponse::clear_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_ != nullptr) _impl_.result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void UndoMoveResponse::clear_reverted_board() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.reverted_board_ != nullptr) _impl_.reverted_board_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
UndoMoveResponse::UndoMoveResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.UndoMoveResponse)
}
inline PROTOBUF_NDEBUG_INLINE UndoMoveResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::UndoMoveResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        message_(arena, from.message_) {}

UndoMoveResponse::UndoMoveResponse(
    ::google::protobuf::Arena* arena,
    const UndoMoveResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  UndoMoveResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::blokus::Result>(
                              arena, *from._impl_.result_)
                        : nullptr;
  _impl_.reverted_board_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::blokus::BoardState>(
                              arena, *from._impl_.reverted_board_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, current_player_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, current_player_),
           offsetof(Impl_, undo_count_remaining_) -
               offsetof(Impl_, current_player_) +
               sizeof(Impl_::undo_count_remaining_));

  // @@protoc_insertion_point(copy_constructor:blokus.UndoMoveResponse)
}
inline PROTOBUF_NDEBUG_INLINE UndoMoveResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        message_(arena) {}

inline void UndoMoveResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, result_),
           0,
           offsetof(Impl_, undo_count_remaining_) -
               offsetof(Impl_, result_) +
               sizeof(Impl_::undo_count_remaining_));
}
UndoMoveResponse::~UndoMoveResponse() {
  // @@protoc_insertion_point(destructor:blokus.UndoMoveResponse)
  SharedDtor(*this);
}
inline void UndoMoveResponse::SharedDtor(MessageLite& self) {
  UndoMoveResponse& this_ = static_cast<UndoMoveResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.message_.Destroy();
  delete this_._impl_.result_;
  delete this_._impl_.reverted_board_;
  this_._impl_.~Impl_();
}

inline void* UndoMoveResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) UndoMoveResponse(arena);
}
constexpr auto UndoMoveResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(UndoMoveResponse),
                                            alignof(UndoMoveResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull UndoMoveResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_UndoMoveResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &UndoMoveResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<UndoMoveResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &UndoMoveResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<UndoMoveResponse>(), &UndoMoveResponse::ByteSizeLong,
            &UndoMoveResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(UndoMoveResponse, _impl_._cached_size_),
        false,
    },
    &UndoMoveResponse::kDescriptorMethods,
    &descriptor_table_game_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* UndoMoveResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 2, 39, 2> UndoMoveResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(UndoMoveResponse, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::UndoMoveResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .blokus.Result result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(UndoMoveResponse, _impl_.result_)}},
    // .blokus.BoardState reverted_board = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(UndoMoveResponse, _impl_.reverted_board_)}},
    // .blokus.PlayerColor current_player = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(UndoMoveResponse, _impl_.current_player_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(UndoMoveResponse, _impl_.current_player_)}},
    // int32 undo_count_remaining = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(UndoMoveResponse, _impl_.undo_count_remaining_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(UndoMoveResponse, _impl_.undo_count_remaining_)}},
    // string message = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(UndoMoveResponse, _impl_.message_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .blokus.Result result = 1;
    {PROTOBUF_FIELD_OFFSET(UndoMoveResponse, _impl_.result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .blokus.BoardState reverted_board = 2;
    {PROTOBUF_FIELD_OFFSET(UndoMoveResponse, _impl_.reverted_board_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .blokus.PlayerColor current_player = 3;
    {PROTOBUF_FIELD_OFFSET(UndoMoveResponse, _impl_.current_player_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int32 undo_count_remaining = 4;
    {PROTOBUF_FIELD_OFFSET(UndoMoveResponse, _impl_.undo_count_remaining_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string message = 5;
    {PROTOBUF_FIELD_OFFSET(UndoMoveResponse, _impl_.message_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::blokus::Result>()},
    {::_pbi::TcParser::GetTable<::blokus::BoardState>()},
  }}, {{
    "\27\0\0\0\0\7\0\0"
    "blokus.UndoMoveResponse"
    "message"
  }},
};

PROTOBUF_NOINLINE void UndoMoveResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.UndoMoveResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.result_ != nullptr);
      _impl_.result_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.reverted_board_ != nullptr);
      _impl_.reverted_board_->Clear();
    }
  }
  ::memset(&_impl_.current_player_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.undo_count_remaining_) -
      reinterpret_cast<char*>(&_impl_.current_player_)) + sizeof(_impl_.undo_count_remaining_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* UndoMoveResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const UndoMoveResponse& this_ = static_cast<const UndoMoveResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* UndoMoveResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const UndoMoveResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.UndoMoveResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .blokus.Result result = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.result_, this_._impl_.result_->GetCachedSize(), target,
                stream);
          }

          // .blokus.BoardState reverted_board = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.reverted_board_, this_._impl_.reverted_board_->GetCachedSize(), target,
                stream);
          }

          // .blokus.PlayerColor current_player = 3;
          if (this_._internal_current_player() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                3, this_._internal_current_player(), target);
          }

          // int32 undo_count_remaining = 4;
          if (this_._internal_undo_count_remaining() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_undo_count_remaining(), target);
          }

          // string message = 5;
          if (!this_._internal_message().empty()) {
            const std::string& _s = this_._internal_message();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.UndoMoveResponse.message");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.UndoMoveResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t UndoMoveResponse::ByteSizeLong(const MessageLite& base) {
          const UndoMoveResponse& this_ = static_cast<const UndoMoveResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t UndoMoveResponse::ByteSizeLong() const {
          const UndoMoveResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.UndoMoveResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string message = 5;
            if (!this_._internal_message().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_message());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .blokus.Result result = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_);
            }
            // .blokus.BoardState reverted_board = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.reverted_board_);
            }
          }
           {
            // .blokus.PlayerColor current_player = 3;
            if (this_._internal_current_player() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_current_player());
            }
            // int32 undo_count_remaining = 4;
            if (this_._internal_undo_count_remaining() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_undo_count_remaining());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void UndoMoveResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<UndoMoveResponse*>(&to_msg);
  auto& from = static_cast<const UndoMoveResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.UndoMoveResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.result_ != nullptr);
      if (_this->_impl_.result_ == nullptr) {
        _this->_impl_.result_ =
            ::google::protobuf::Message::CopyConstruct<::blokus::Result>(arena, *from._impl_.result_);
      } else {
        _this->_impl_.result_->MergeFrom(*from._impl_.result_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.reverted_board_ != nullptr);
      if (_this->_impl_.reverted_board_ == nullptr) {
        _this->_impl_.reverted_board_ =
            ::google::protobuf::Message::CopyConstruct<::blokus::BoardState>(arena, *from._impl_.reverted_board_);
      } else {
        _this->_impl_.reverted_board_->MergeFrom(*from._impl_.reverted_board_);
      }
    }
  }
  if (from._internal_current_player() != 0) {
    _this->_impl_.current_player_ = from._impl_.current_player_;
  }
  if (from._internal_undo_count_remaining() != 0) {
    _this->_impl_.undo_count_remaining_ = from._impl_.undo_count_remaining_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UndoMoveResponse::CopyFrom(const UndoMoveResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.UndoMoveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void UndoMoveResponse::InternalSwap(UndoMoveResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UndoMoveResponse, _impl_.undo_count_remaining_)
      + sizeof(UndoMoveResponse::_impl_.undo_count_remaining_)
      - PROTOBUF_FIELD_OFFSET(UndoMoveResponse, _impl_.result_)>(
          reinterpret_cast<char*>(&_impl_.result_),
          reinterpret_cast<char*>(&other->_impl_.result_));
}

::google::protobuf::Metadata UndoMoveResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetGameStateRequest::_Internal {
 public:
};

GetGameStateRequest::GetGameStateRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.GetGameStateRequest)
}
GetGameStateRequest::GetGameStateRequest(
    ::google::protobuf::Arena* arena, const GetGameStateRequest& from)
    : GetGameStateRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE GetGameStateRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GetGameStateRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, room_id_),
           0,
           offsetof(Impl_, include_move_history_) -
               offsetof(Impl_, room_id_) +
               sizeof(Impl_::include_move_history_));
}
GetGameStateRequest::~GetGameStateRequest() {
  // @@protoc_insertion_point(destructor:blokus.GetGameStateRequest)
  SharedDtor(*this);
}
inline void GetGameStateRequest::SharedDtor(MessageLite& self) {
  GetGameStateRequest& this_ = static_cast<GetGameStateRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* GetGameStateRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetGameStateRequest(arena);
}
constexpr auto GetGameStateRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(GetGameStateRequest),
                                            alignof(GetGameStateRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetGameStateRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetGameStateRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetGameStateRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GetGameStateRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetGameStateRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GetGameStateRequest>(), &GetGameStateRequest::ByteSizeLong,
            &GetGameStateRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetGameStateRequest, _impl_._cached_size_),
        false,
    },
    &GetGameStateRequest::kDescriptorMethods,
    &descriptor_table_game_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetGameStateRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> GetGameStateRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::GetGameStateRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bool include_move_history = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(GetGameStateRequest, _impl_.include_move_history_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(GetGameStateRequest, _impl_.include_move_history_)}},
    // int32 room_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetGameStateRequest, _impl_.room_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(GetGameStateRequest, _impl_.room_id_)}},
    // bool include_board = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(GetGameStateRequest, _impl_.include_board_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(GetGameStateRequest, _impl_.include_board_)}},
    // bool include_player_details = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(GetGameStateRequest, _impl_.include_player_details_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(GetGameStateRequest, _impl_.include_player_details_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 room_id = 1;
    {PROTOBUF_FIELD_OFFSET(GetGameStateRequest, _impl_.room_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool include_board = 2;
    {PROTOBUF_FIELD_OFFSET(GetGameStateRequest, _impl_.include_board_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool include_player_details = 3;
    {PROTOBUF_FIELD_OFFSET(GetGameStateRequest, _impl_.include_player_details_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool include_move_history = 4;
    {PROTOBUF_FIELD_OFFSET(GetGameStateRequest, _impl_.include_move_history_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void GetGameStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.GetGameStateRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.room_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.include_move_history_) -
      reinterpret_cast<char*>(&_impl_.room_id_)) + sizeof(_impl_.include_move_history_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GetGameStateRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GetGameStateRequest& this_ = static_cast<const GetGameStateRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GetGameStateRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GetGameStateRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.GetGameStateRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 room_id = 1;
          if (this_._internal_room_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_room_id(), target);
          }

          // bool include_board = 2;
          if (this_._internal_include_board() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                2, this_._internal_include_board(), target);
          }

          // bool include_player_details = 3;
          if (this_._internal_include_player_details() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                3, this_._internal_include_player_details(), target);
          }

          // bool include_move_history = 4;
          if (this_._internal_include_move_history() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                4, this_._internal_include_move_history(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.GetGameStateRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GetGameStateRequest::ByteSizeLong(const MessageLite& base) {
          const GetGameStateRequest& this_ = static_cast<const GetGameStateRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GetGameStateRequest::ByteSizeLong() const {
          const GetGameStateRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.GetGameStateRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // int32 room_id = 1;
            if (this_._internal_room_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_room_id());
            }
            // bool include_board = 2;
            if (this_._internal_include_board() != 0) {
              total_size += 2;
            }
            // bool include_player_details = 3;
            if (this_._internal_include_player_details() != 0) {
              total_size += 2;
            }
            // bool include_move_history = 4;
            if (this_._internal_include_move_history() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GetGameStateRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetGameStateRequest*>(&to_msg);
  auto& from = static_cast<const GetGameStateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.GetGameStateRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_room_id() != 0) {
    _this->_impl_.room_id_ = from._impl_.room_id_;
  }
  if (from._internal_include_board() != 0) {
    _this->_impl_.include_board_ = from._impl_.include_board_;
  }
  if (from._internal_include_player_details() != 0) {
    _this->_impl_.include_player_details_ = from._impl_.include_player_details_;
  }
  if (from._internal_include_move_history() != 0) {
    _this->_impl_.include_move_history_ = from._impl_.include_move_history_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetGameStateRequest::CopyFrom(const GetGameStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.GetGameStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetGameStateRequest::InternalSwap(GetGameStateRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetGameStateRequest, _impl_.include_move_history_)
      + sizeof(GetGameStateRequest::_impl_.include_move_history_)
      - PROTOBUF_FIELD_OFFSET(GetGameStateRequest, _impl_.room_id_)>(
          reinterpret_cast<char*>(&_impl_.room_id_),
          reinterpret_cast<char*>(&other->_impl_.room_id_));
}

::google::protobuf::Metadata GetGameStateRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GameStateResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GameStateResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GameStateResponse, _impl_._has_bits_);
};

void GameStateResponse::clear_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_ != nullptr) _impl_.result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GameStateResponse::clear_players() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.players_.Clear();
}
void GameStateResponse::clear_board_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.board_state_ != nullptr) _impl_.board_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void GameStateResponse::clear_game_started_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.game_started_at_ != nullptr) _impl_.game_started_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
GameStateResponse::GameStateResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.GameStateResponse)
}
inline PROTOBUF_NDEBUG_INLINE GameStateResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::GameStateResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        players_{visibility, arena, from.players_},
        move_history_{visibility, arena, from.move_history_},
        game_id_(arena, from.game_id_),
        game_mode_(arena, from.game_mode_) {}

GameStateResponse::GameStateResponse(
    ::google::protobuf::Arena* arena,
    const GameStateResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GameStateResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::blokus::Result>(
                              arena, *from._impl_.result_)
                        : nullptr;
  _impl_.board_state_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::blokus::BoardState>(
                              arena, *from._impl_.board_state_)
                        : nullptr;
  _impl_.game_started_at_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.game_started_at_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, game_state_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, game_state_),
           offsetof(Impl_, remaining_time_seconds_) -
               offsetof(Impl_, game_state_) +
               sizeof(Impl_::remaining_time_seconds_));

  // @@protoc_insertion_point(copy_constructor:blokus.GameStateResponse)
}
inline PROTOBUF_NDEBUG_INLINE GameStateResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        players_{visibility, arena},
        move_history_{visibility, arena},
        game_id_(arena),
        game_mode_(arena) {}

inline void GameStateResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, result_),
           0,
           offsetof(Impl_, remaining_time_seconds_) -
               offsetof(Impl_, result_) +
               sizeof(Impl_::remaining_time_seconds_));
}
GameStateResponse::~GameStateResponse() {
  // @@protoc_insertion_point(destructor:blokus.GameStateResponse)
  SharedDtor(*this);
}
inline void GameStateResponse::SharedDtor(MessageLite& self) {
  GameStateResponse& this_ = static_cast<GameStateResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.game_id_.Destroy();
  this_._impl_.game_mode_.Destroy();
  delete this_._impl_.result_;
  delete this_._impl_.board_state_;
  delete this_._impl_.game_started_at_;
  this_._impl_.~Impl_();
}

inline void* GameStateResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GameStateResponse(arena);
}
constexpr auto GameStateResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(GameStateResponse, _impl_.players_) +
          decltype(GameStateResponse::_impl_.players_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(GameStateResponse, _impl_.move_history_) +
          decltype(GameStateResponse::_impl_.move_history_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(GameStateResponse), alignof(GameStateResponse), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&GameStateResponse::PlacementNew_,
                                 sizeof(GameStateResponse),
                                 alignof(GameStateResponse));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GameStateResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GameStateResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GameStateResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GameStateResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GameStateResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GameStateResponse>(), &GameStateResponse::ByteSizeLong,
            &GameStateResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GameStateResponse, _impl_._cached_size_),
        false,
    },
    &GameStateResponse::kDescriptorMethods,
    &descriptor_table_game_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GameStateResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 11, 5, 57, 2> GameStateResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameStateResponse, _impl_._has_bits_),
    0, // no _extensions_
    11, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294965248,  // skipmap
    offsetof(decltype(_table_), field_entries),
    11,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::GameStateResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .blokus.Result result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(GameStateResponse, _impl_.result_)}},
    // .blokus.GameState game_state = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameStateResponse, _impl_.game_state_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(GameStateResponse, _impl_.game_state_)}},
    // .blokus.PlayerColor current_player = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameStateResponse, _impl_.current_player_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(GameStateResponse, _impl_.current_player_)}},
    // int32 turn_number = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameStateResponse, _impl_.turn_number_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(GameStateResponse, _impl_.turn_number_)}},
    // int32 remaining_time_seconds = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameStateResponse, _impl_.remaining_time_seconds_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(GameStateResponse, _impl_.remaining_time_seconds_)}},
    // repeated .blokus.PlayerSlot players = 6;
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 1, PROTOBUF_FIELD_OFFSET(GameStateResponse, _impl_.players_)}},
    // .blokus.BoardState board_state = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 1, 2, PROTOBUF_FIELD_OFFSET(GameStateResponse, _impl_.board_state_)}},
    // repeated .blokus.GameMove move_history = 8;
    {::_pbi::TcParser::FastMtR1,
     {66, 63, 3, PROTOBUF_FIELD_OFFSET(GameStateResponse, _impl_.move_history_)}},
    // .google.protobuf.Timestamp game_started_at = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 2, 4, PROTOBUF_FIELD_OFFSET(GameStateResponse, _impl_.game_started_at_)}},
    // string game_id = 10;
    {::_pbi::TcParser::FastUS1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(GameStateResponse, _impl_.game_id_)}},
    // string game_mode = 11;
    {::_pbi::TcParser::FastUS1,
     {90, 63, 0, PROTOBUF_FIELD_OFFSET(GameStateResponse, _impl_.game_mode_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .blokus.Result result = 1;
    {PROTOBUF_FIELD_OFFSET(GameStateResponse, _impl_.result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .blokus.GameState game_state = 2;
    {PROTOBUF_FIELD_OFFSET(GameStateResponse, _impl_.game_state_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .blokus.PlayerColor current_player = 3;
    {PROTOBUF_FIELD_OFFSET(GameStateResponse, _impl_.current_player_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int32 turn_number = 4;
    {PROTOBUF_FIELD_OFFSET(GameStateResponse, _impl_.turn_number_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 remaining_time_seconds = 5;
    {PROTOBUF_FIELD_OFFSET(GameStateResponse, _impl_.remaining_time_seconds_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated .blokus.PlayerSlot players = 6;
    {PROTOBUF_FIELD_OFFSET(GameStateResponse, _impl_.players_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .blokus.BoardState board_state = 7;
    {PROTOBUF_FIELD_OFFSET(GameStateResponse, _impl_.board_state_), _Internal::kHasBitsOffset + 1, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .blokus.GameMove move_history = 8;
    {PROTOBUF_FIELD_OFFSET(GameStateResponse, _impl_.move_history_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp game_started_at = 9;
    {PROTOBUF_FIELD_OFFSET(GameStateResponse, _impl_.game_started_at_), _Internal::kHasBitsOffset + 2, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string game_id = 10;
    {PROTOBUF_FIELD_OFFSET(GameStateResponse, _impl_.game_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string game_mode = 11;
    {PROTOBUF_FIELD_OFFSET(GameStateResponse, _impl_.game_mode_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::blokus::Result>()},
    {::_pbi::TcParser::GetTable<::blokus::PlayerSlot>()},
    {::_pbi::TcParser::GetTable<::blokus::BoardState>()},
    {::_pbi::TcParser::GetTable<::blokus::GameMove>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\30\0\0\0\0\0\0\0\0\0\7\11\0\0\0\0"
    "blokus.GameStateResponse"
    "game_id"
    "game_mode"
  }},
};

PROTOBUF_NOINLINE void GameStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.GameStateResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  _impl_.move_history_.Clear();
  _impl_.game_id_.ClearToEmpty();
  _impl_.game_mode_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.result_ != nullptr);
      _impl_.result_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.board_state_ != nullptr);
      _impl_.board_state_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.game_started_at_ != nullptr);
      _impl_.game_started_at_->Clear();
    }
  }
  ::memset(&_impl_.game_state_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.remaining_time_seconds_) -
      reinterpret_cast<char*>(&_impl_.game_state_)) + sizeof(_impl_.remaining_time_seconds_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GameStateResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GameStateResponse& this_ = static_cast<const GameStateResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GameStateResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GameStateResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.GameStateResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .blokus.Result result = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.result_, this_._impl_.result_->GetCachedSize(), target,
                stream);
          }

          // .blokus.GameState game_state = 2;
          if (this_._internal_game_state() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                2, this_._internal_game_state(), target);
          }

          // .blokus.PlayerColor current_player = 3;
          if (this_._internal_current_player() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                3, this_._internal_current_player(), target);
          }

          // int32 turn_number = 4;
          if (this_._internal_turn_number() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_turn_number(), target);
          }

          // int32 remaining_time_seconds = 5;
          if (this_._internal_remaining_time_seconds() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<5>(
                    stream, this_._internal_remaining_time_seconds(), target);
          }

          // repeated .blokus.PlayerSlot players = 6;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_players_size());
               i < n; i++) {
            const auto& repfield = this_._internal_players().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    6, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // .blokus.BoardState board_state = 7;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                7, *this_._impl_.board_state_, this_._impl_.board_state_->GetCachedSize(), target,
                stream);
          }

          // repeated .blokus.GameMove move_history = 8;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_move_history_size());
               i < n; i++) {
            const auto& repfield = this_._internal_move_history().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    8, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // .google.protobuf.Timestamp game_started_at = 9;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                9, *this_._impl_.game_started_at_, this_._impl_.game_started_at_->GetCachedSize(), target,
                stream);
          }

          // string game_id = 10;
          if (!this_._internal_game_id().empty()) {
            const std::string& _s = this_._internal_game_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.GameStateResponse.game_id");
            target = stream->WriteStringMaybeAliased(10, _s, target);
          }

          // string game_mode = 11;
          if (!this_._internal_game_mode().empty()) {
            const std::string& _s = this_._internal_game_mode();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.GameStateResponse.game_mode");
            target = stream->WriteStringMaybeAliased(11, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.GameStateResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GameStateResponse::ByteSizeLong(const MessageLite& base) {
          const GameStateResponse& this_ = static_cast<const GameStateResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GameStateResponse::ByteSizeLong() const {
          const GameStateResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.GameStateResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .blokus.PlayerSlot players = 6;
            {
              total_size += 1UL * this_._internal_players_size();
              for (const auto& msg : this_._internal_players()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated .blokus.GameMove move_history = 8;
            {
              total_size += 1UL * this_._internal_move_history_size();
              for (const auto& msg : this_._internal_move_history()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // string game_id = 10;
            if (!this_._internal_game_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_game_id());
            }
            // string game_mode = 11;
            if (!this_._internal_game_mode().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_game_mode());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // .blokus.Result result = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_);
            }
            // .blokus.BoardState board_state = 7;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.board_state_);
            }
            // .google.protobuf.Timestamp game_started_at = 9;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.game_started_at_);
            }
          }
           {
            // .blokus.GameState game_state = 2;
            if (this_._internal_game_state() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_game_state());
            }
            // .blokus.PlayerColor current_player = 3;
            if (this_._internal_current_player() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_current_player());
            }
            // int32 turn_number = 4;
            if (this_._internal_turn_number() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_turn_number());
            }
            // int32 remaining_time_seconds = 5;
            if (this_._internal_remaining_time_seconds() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_remaining_time_seconds());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GameStateResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameStateResponse*>(&to_msg);
  auto& from = static_cast<const GameStateResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.GameStateResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_players()->MergeFrom(
      from._internal_players());
  _this->_internal_mutable_move_history()->MergeFrom(
      from._internal_move_history());
  if (!from._internal_game_id().empty()) {
    _this->_internal_set_game_id(from._internal_game_id());
  }
  if (!from._internal_game_mode().empty()) {
    _this->_internal_set_game_mode(from._internal_game_mode());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.result_ != nullptr);
      if (_this->_impl_.result_ == nullptr) {
        _this->_impl_.result_ =
            ::google::protobuf::Message::CopyConstruct<::blokus::Result>(arena, *from._impl_.result_);
      } else {
        _this->_impl_.result_->MergeFrom(*from._impl_.result_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.board_state_ != nullptr);
      if (_this->_impl_.board_state_ == nullptr) {
        _this->_impl_.board_state_ =
            ::google::protobuf::Message::CopyConstruct<::blokus::BoardState>(arena, *from._impl_.board_state_);
      } else {
        _this->_impl_.board_state_->MergeFrom(*from._impl_.board_state_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.game_started_at_ != nullptr);
      if (_this->_impl_.game_started_at_ == nullptr) {
        _this->_impl_.game_started_at_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.game_started_at_);
      } else {
        _this->_impl_.game_started_at_->MergeFrom(*from._impl_.game_started_at_);
      }
    }
  }
  if (from._internal_game_state() != 0) {
    _this->_impl_.game_state_ = from._impl_.game_state_;
  }
  if (from._internal_current_player() != 0) {
    _this->_impl_.current_player_ = from._impl_.current_player_;
  }
  if (from._internal_turn_number() != 0) {
    _this->_impl_.turn_number_ = from._impl_.turn_number_;
  }
  if (from._internal_remaining_time_seconds() != 0) {
    _this->_impl_.remaining_time_seconds_ = from._impl_.remaining_time_seconds_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameStateResponse::CopyFrom(const GameStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.GameStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GameStateResponse::InternalSwap(GameStateResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  _impl_.move_history_.InternalSwap(&other->_impl_.move_history_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.game_id_, &other->_impl_.game_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.game_mode_, &other->_impl_.game_mode_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameStateResponse, _impl_.remaining_time_seconds_)
      + sizeof(GameStateResponse::_impl_.remaining_time_seconds_)
      - PROTOBUF_FIELD_OFFSET(GameStateResponse, _impl_.result_)>(
          reinterpret_cast<char*>(&_impl_.result_),
          reinterpret_cast<char*>(&other->_impl_.result_));
}

::google::protobuf::Metadata GameStateResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GameMove::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GameMove>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GameMove, _impl_._has_bits_);
};

void GameMove::clear_block_placement() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.block_placement_ != nullptr) _impl_.block_placement_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GameMove::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
GameMove::GameMove(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.GameMove)
}
inline PROTOBUF_NDEBUG_INLINE GameMove::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::GameMove& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        player_username_(arena, from.player_username_) {}

GameMove::GameMove(
    ::google::protobuf::Arena* arena,
    const GameMove& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GameMove* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.block_placement_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::blokus::BlockPlacement>(
                              arena, *from._impl_.block_placement_)
                        : nullptr;
  _impl_.timestamp_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.timestamp_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, move_number_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, move_number_),
           offsetof(Impl_, score_after_) -
               offsetof(Impl_, move_number_) +
               sizeof(Impl_::score_after_));

  // @@protoc_insertion_point(copy_constructor:blokus.GameMove)
}
inline PROTOBUF_NDEBUG_INLINE GameMove::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        player_username_(arena) {}

inline void GameMove::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, block_placement_),
           0,
           offsetof(Impl_, score_after_) -
               offsetof(Impl_, block_placement_) +
               sizeof(Impl_::score_after_));
}
GameMove::~GameMove() {
  // @@protoc_insertion_point(destructor:blokus.GameMove)
  SharedDtor(*this);
}
inline void GameMove::SharedDtor(MessageLite& self) {
  GameMove& this_ = static_cast<GameMove&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.player_username_.Destroy();
  delete this_._impl_.block_placement_;
  delete this_._impl_.timestamp_;
  this_._impl_.~Impl_();
}

inline void* GameMove::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GameMove(arena);
}
constexpr auto GameMove::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(GameMove),
                                            alignof(GameMove));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GameMove::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GameMove_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GameMove::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GameMove>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GameMove::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GameMove>(), &GameMove::ByteSizeLong,
            &GameMove::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GameMove, _impl_._cached_size_),
        false,
    },
    &GameMove::kDescriptorMethods,
    &descriptor_table_game_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GameMove::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 2, 47, 2> GameMove::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameMove, _impl_._has_bits_),
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::GameMove>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 move_number = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameMove, _impl_.move_number_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(GameMove, _impl_.move_number_)}},
    // string player_username = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(GameMove, _impl_.player_username_)}},
    // .blokus.PlayerColor player_color = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameMove, _impl_.player_color_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(GameMove, _impl_.player_color_)}},
    // .blokus.TurnAction action = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameMove, _impl_.action_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(GameMove, _impl_.action_)}},
    // .blokus.BlockPlacement block_placement = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 0, 0, PROTOBUF_FIELD_OFFSET(GameMove, _impl_.block_placement_)}},
    // .google.protobuf.Timestamp timestamp = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 1, 1, PROTOBUF_FIELD_OFFSET(GameMove, _impl_.timestamp_)}},
    // int32 think_time_seconds = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameMove, _impl_.think_time_seconds_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(GameMove, _impl_.think_time_seconds_)}},
    // int32 score_before = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameMove, _impl_.score_before_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(GameMove, _impl_.score_before_)}},
    // int32 score_after = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameMove, _impl_.score_after_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(GameMove, _impl_.score_after_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 move_number = 1;
    {PROTOBUF_FIELD_OFFSET(GameMove, _impl_.move_number_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string player_username = 2;
    {PROTOBUF_FIELD_OFFSET(GameMove, _impl_.player_username_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .blokus.PlayerColor player_color = 3;
    {PROTOBUF_FIELD_OFFSET(GameMove, _impl_.player_color_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .blokus.TurnAction action = 4;
    {PROTOBUF_FIELD_OFFSET(GameMove, _impl_.action_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .blokus.BlockPlacement block_placement = 5;
    {PROTOBUF_FIELD_OFFSET(GameMove, _impl_.block_placement_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp timestamp = 6;
    {PROTOBUF_FIELD_OFFSET(GameMove, _impl_.timestamp_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 think_time_seconds = 7;
    {PROTOBUF_FIELD_OFFSET(GameMove, _impl_.think_time_seconds_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 score_before = 8;
    {PROTOBUF_FIELD_OFFSET(GameMove, _impl_.score_before_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 score_after = 9;
    {PROTOBUF_FIELD_OFFSET(GameMove, _impl_.score_after_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::blokus::BlockPlacement>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\17\0\17\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "blokus.GameMove"
    "player_username"
  }},
};

PROTOBUF_NOINLINE void GameMove::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.GameMove)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_username_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.block_placement_ != nullptr);
      _impl_.block_placement_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.timestamp_ != nullptr);
      _impl_.timestamp_->Clear();
    }
  }
  ::memset(&_impl_.move_number_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.score_after_) -
      reinterpret_cast<char*>(&_impl_.move_number_)) + sizeof(_impl_.score_after_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GameMove::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GameMove& this_ = static_cast<const GameMove&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GameMove::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GameMove& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.GameMove)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 move_number = 1;
          if (this_._internal_move_number() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_move_number(), target);
          }

          // string player_username = 2;
          if (!this_._internal_player_username().empty()) {
            const std::string& _s = this_._internal_player_username();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.GameMove.player_username");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // .blokus.PlayerColor player_color = 3;
          if (this_._internal_player_color() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                3, this_._internal_player_color(), target);
          }

          // .blokus.TurnAction action = 4;
          if (this_._internal_action() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                4, this_._internal_action(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .blokus.BlockPlacement block_placement = 5;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                5, *this_._impl_.block_placement_, this_._impl_.block_placement_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp timestamp = 6;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                6, *this_._impl_.timestamp_, this_._impl_.timestamp_->GetCachedSize(), target,
                stream);
          }

          // int32 think_time_seconds = 7;
          if (this_._internal_think_time_seconds() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<7>(
                    stream, this_._internal_think_time_seconds(), target);
          }

          // int32 score_before = 8;
          if (this_._internal_score_before() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<8>(
                    stream, this_._internal_score_before(), target);
          }

          // int32 score_after = 9;
          if (this_._internal_score_after() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<9>(
                    stream, this_._internal_score_after(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.GameMove)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GameMove::ByteSizeLong(const MessageLite& base) {
          const GameMove& this_ = static_cast<const GameMove&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GameMove::ByteSizeLong() const {
          const GameMove& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.GameMove)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string player_username = 2;
            if (!this_._internal_player_username().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_player_username());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .blokus.BlockPlacement block_placement = 5;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.block_placement_);
            }
            // .google.protobuf.Timestamp timestamp = 6;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.timestamp_);
            }
          }
           {
            // int32 move_number = 1;
            if (this_._internal_move_number() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_move_number());
            }
            // .blokus.PlayerColor player_color = 3;
            if (this_._internal_player_color() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_player_color());
            }
            // .blokus.TurnAction action = 4;
            if (this_._internal_action() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_action());
            }
            // int32 think_time_seconds = 7;
            if (this_._internal_think_time_seconds() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_think_time_seconds());
            }
            // int32 score_before = 8;
            if (this_._internal_score_before() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_score_before());
            }
            // int32 score_after = 9;
            if (this_._internal_score_after() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_score_after());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GameMove::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameMove*>(&to_msg);
  auto& from = static_cast<const GameMove&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.GameMove)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_player_username().empty()) {
    _this->_internal_set_player_username(from._internal_player_username());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.block_placement_ != nullptr);
      if (_this->_impl_.block_placement_ == nullptr) {
        _this->_impl_.block_placement_ =
            ::google::protobuf::Message::CopyConstruct<::blokus::BlockPlacement>(arena, *from._impl_.block_placement_);
      } else {
        _this->_impl_.block_placement_->MergeFrom(*from._impl_.block_placement_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.timestamp_ != nullptr);
      if (_this->_impl_.timestamp_ == nullptr) {
        _this->_impl_.timestamp_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.timestamp_);
      } else {
        _this->_impl_.timestamp_->MergeFrom(*from._impl_.timestamp_);
      }
    }
  }
  if (from._internal_move_number() != 0) {
    _this->_impl_.move_number_ = from._impl_.move_number_;
  }
  if (from._internal_player_color() != 0) {
    _this->_impl_.player_color_ = from._impl_.player_color_;
  }
  if (from._internal_action() != 0) {
    _this->_impl_.action_ = from._impl_.action_;
  }
  if (from._internal_think_time_seconds() != 0) {
    _this->_impl_.think_time_seconds_ = from._impl_.think_time_seconds_;
  }
  if (from._internal_score_before() != 0) {
    _this->_impl_.score_before_ = from._impl_.score_before_;
  }
  if (from._internal_score_after() != 0) {
    _this->_impl_.score_after_ = from._impl_.score_after_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameMove::CopyFrom(const GameMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.GameMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GameMove::InternalSwap(GameMove* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.player_username_, &other->_impl_.player_username_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameMove, _impl_.score_after_)
      + sizeof(GameMove::_impl_.score_after_)
      - PROTOBUF_FIELD_OFFSET(GameMove, _impl_.block_placement_)>(
          reinterpret_cast<char*>(&_impl_.block_placement_),
          reinterpret_cast<char*>(&other->_impl_.block_placement_));
}

::google::protobuf::Metadata GameMove::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GameStateUpdate::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GameStateUpdate>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GameStateUpdate, _impl_._has_bits_);
};

void GameStateUpdate::clear_board_changes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.board_changes_ != nullptr) _impl_.board_changes_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GameStateUpdate::clear_updated_players() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.updated_players_.Clear();
}
void GameStateUpdate::clear_updated_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.updated_at_ != nullptr) _impl_.updated_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
GameStateUpdate::GameStateUpdate(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.GameStateUpdate)
}
inline PROTOBUF_NDEBUG_INLINE GameStateUpdate::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::GameStateUpdate& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        updated_players_{visibility, arena, from.updated_players_},
        update_reason_(arena, from.update_reason_) {}

GameStateUpdate::GameStateUpdate(
    ::google::protobuf::Arena* arena,
    const GameStateUpdate& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GameStateUpdate* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.board_changes_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::blokus::BoardState>(
                              arena, *from._impl_.board_changes_)
                        : nullptr;
  _impl_.updated_at_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.updated_at_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, room_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, room_id_),
           offsetof(Impl_, remaining_time_) -
               offsetof(Impl_, room_id_) +
               sizeof(Impl_::remaining_time_));

  // @@protoc_insertion_point(copy_constructor:blokus.GameStateUpdate)
}
inline PROTOBUF_NDEBUG_INLINE GameStateUpdate::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        updated_players_{visibility, arena},
        update_reason_(arena) {}

inline void GameStateUpdate::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, board_changes_),
           0,
           offsetof(Impl_, remaining_time_) -
               offsetof(Impl_, board_changes_) +
               sizeof(Impl_::remaining_time_));
}
GameStateUpdate::~GameStateUpdate() {
  // @@protoc_insertion_point(destructor:blokus.GameStateUpdate)
  SharedDtor(*this);
}
inline void GameStateUpdate::SharedDtor(MessageLite& self) {
  GameStateUpdate& this_ = static_cast<GameStateUpdate&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.update_reason_.Destroy();
  delete this_._impl_.board_changes_;
  delete this_._impl_.updated_at_;
  this_._impl_.~Impl_();
}

inline void* GameStateUpdate::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GameStateUpdate(arena);
}
constexpr auto GameStateUpdate::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(GameStateUpdate, _impl_.updated_players_) +
          decltype(GameStateUpdate::_impl_.updated_players_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(GameStateUpdate), alignof(GameStateUpdate), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&GameStateUpdate::PlacementNew_,
                                 sizeof(GameStateUpdate),
                                 alignof(GameStateUpdate));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GameStateUpdate::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GameStateUpdate_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GameStateUpdate::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GameStateUpdate>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GameStateUpdate::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GameStateUpdate>(), &GameStateUpdate::ByteSizeLong,
            &GameStateUpdate::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GameStateUpdate, _impl_._cached_size_),
        false,
    },
    &GameStateUpdate::kDescriptorMethods,
    &descriptor_table_game_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GameStateUpdate::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 3, 52, 2> GameStateUpdate::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameStateUpdate, _impl_._has_bits_),
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::GameStateUpdate>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string update_reason = 8;
    {::_pbi::TcParser::FastUS1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(GameStateUpdate, _impl_.update_reason_)}},
    // int32 room_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameStateUpdate, _impl_.room_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(GameStateUpdate, _impl_.room_id_)}},
    // int32 update_version = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameStateUpdate, _impl_.update_version_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(GameStateUpdate, _impl_.update_version_)}},
    // optional .blokus.PlayerColor current_player = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameStateUpdate, _impl_.current_player_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(GameStateUpdate, _impl_.current_player_)}},
    // optional int32 remaining_time = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameStateUpdate, _impl_.remaining_time_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(GameStateUpdate, _impl_.remaining_time_)}},
    // optional .blokus.BoardState board_changes = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 0, 0, PROTOBUF_FIELD_OFFSET(GameStateUpdate, _impl_.board_changes_)}},
    // repeated .blokus.PlayerSlot updated_players = 6;
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 1, PROTOBUF_FIELD_OFFSET(GameStateUpdate, _impl_.updated_players_)}},
    // .google.protobuf.Timestamp updated_at = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 1, 2, PROTOBUF_FIELD_OFFSET(GameStateUpdate, _impl_.updated_at_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 room_id = 1;
    {PROTOBUF_FIELD_OFFSET(GameStateUpdate, _impl_.room_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 update_version = 2;
    {PROTOBUF_FIELD_OFFSET(GameStateUpdate, _impl_.update_version_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // optional .blokus.PlayerColor current_player = 3;
    {PROTOBUF_FIELD_OFFSET(GameStateUpdate, _impl_.current_player_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // optional int32 remaining_time = 4;
    {PROTOBUF_FIELD_OFFSET(GameStateUpdate, _impl_.remaining_time_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional .blokus.BoardState board_changes = 5;
    {PROTOBUF_FIELD_OFFSET(GameStateUpdate, _impl_.board_changes_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .blokus.PlayerSlot updated_players = 6;
    {PROTOBUF_FIELD_OFFSET(GameStateUpdate, _impl_.updated_players_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp updated_at = 7;
    {PROTOBUF_FIELD_OFFSET(GameStateUpdate, _impl_.updated_at_), _Internal::kHasBitsOffset + 1, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string update_reason = 8;
    {PROTOBUF_FIELD_OFFSET(GameStateUpdate, _impl_.update_reason_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::blokus::BoardState>()},
    {::_pbi::TcParser::GetTable<::blokus::PlayerSlot>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\26\0\0\0\0\0\0\0\15\0\0\0\0\0\0\0"
    "blokus.GameStateUpdate"
    "update_reason"
  }},
};

PROTOBUF_NOINLINE void GameStateUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.GameStateUpdate)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.updated_players_.Clear();
  _impl_.update_reason_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.board_changes_ != nullptr);
      _impl_.board_changes_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.updated_at_ != nullptr);
      _impl_.updated_at_->Clear();
    }
  }
  ::memset(&_impl_.room_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.update_version_) -
      reinterpret_cast<char*>(&_impl_.room_id_)) + sizeof(_impl_.update_version_));
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.current_player_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.remaining_time_) -
        reinterpret_cast<char*>(&_impl_.current_player_)) + sizeof(_impl_.remaining_time_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GameStateUpdate::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GameStateUpdate& this_ = static_cast<const GameStateUpdate&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GameStateUpdate::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GameStateUpdate& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.GameStateUpdate)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 room_id = 1;
          if (this_._internal_room_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_room_id(), target);
          }

          // int32 update_version = 2;
          if (this_._internal_update_version() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_update_version(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional .blokus.PlayerColor current_player = 3;
          if (cached_has_bits & 0x00000004u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                3, this_._internal_current_player(), target);
          }

          // optional int32 remaining_time = 4;
          if (cached_has_bits & 0x00000008u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_remaining_time(), target);
          }

          // optional .blokus.BoardState board_changes = 5;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                5, *this_._impl_.board_changes_, this_._impl_.board_changes_->GetCachedSize(), target,
                stream);
          }

          // repeated .blokus.PlayerSlot updated_players = 6;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_updated_players_size());
               i < n; i++) {
            const auto& repfield = this_._internal_updated_players().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    6, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // .google.protobuf.Timestamp updated_at = 7;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                7, *this_._impl_.updated_at_, this_._impl_.updated_at_->GetCachedSize(), target,
                stream);
          }

          // string update_reason = 8;
          if (!this_._internal_update_reason().empty()) {
            const std::string& _s = this_._internal_update_reason();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.GameStateUpdate.update_reason");
            target = stream->WriteStringMaybeAliased(8, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.GameStateUpdate)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GameStateUpdate::ByteSizeLong(const MessageLite& base) {
          const GameStateUpdate& this_ = static_cast<const GameStateUpdate&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GameStateUpdate::ByteSizeLong() const {
          const GameStateUpdate& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.GameStateUpdate)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .blokus.PlayerSlot updated_players = 6;
            {
              total_size += 1UL * this_._internal_updated_players_size();
              for (const auto& msg : this_._internal_updated_players()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // string update_reason = 8;
            if (!this_._internal_update_reason().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_update_reason());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // optional .blokus.BoardState board_changes = 5;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.board_changes_);
            }
            // .google.protobuf.Timestamp updated_at = 7;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.updated_at_);
            }
          }
           {
            // int32 room_id = 1;
            if (this_._internal_room_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_room_id());
            }
            // int32 update_version = 2;
            if (this_._internal_update_version() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_update_version());
            }
          }
          if (cached_has_bits & 0x0000000cu) {
            // optional .blokus.PlayerColor current_player = 3;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_current_player());
            }
            // optional int32 remaining_time = 4;
            if (cached_has_bits & 0x00000008u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_remaining_time());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GameStateUpdate::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameStateUpdate*>(&to_msg);
  auto& from = static_cast<const GameStateUpdate&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.GameStateUpdate)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_updated_players()->MergeFrom(
      from._internal_updated_players());
  if (!from._internal_update_reason().empty()) {
    _this->_internal_set_update_reason(from._internal_update_reason());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.board_changes_ != nullptr);
      if (_this->_impl_.board_changes_ == nullptr) {
        _this->_impl_.board_changes_ =
            ::google::protobuf::Message::CopyConstruct<::blokus::BoardState>(arena, *from._impl_.board_changes_);
      } else {
        _this->_impl_.board_changes_->MergeFrom(*from._impl_.board_changes_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.updated_at_ != nullptr);
      if (_this->_impl_.updated_at_ == nullptr) {
        _this->_impl_.updated_at_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.updated_at_);
      } else {
        _this->_impl_.updated_at_->MergeFrom(*from._impl_.updated_at_);
      }
    }
  }
  if (from._internal_room_id() != 0) {
    _this->_impl_.room_id_ = from._impl_.room_id_;
  }
  if (from._internal_update_version() != 0) {
    _this->_impl_.update_version_ = from._impl_.update_version_;
  }
  if (cached_has_bits & 0x0000000cu) {
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.current_player_ = from._impl_.current_player_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.remaining_time_ = from._impl_.remaining_time_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameStateUpdate::CopyFrom(const GameStateUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.GameStateUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GameStateUpdate::InternalSwap(GameStateUpdate* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.updated_players_.InternalSwap(&other->_impl_.updated_players_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.update_reason_, &other->_impl_.update_reason_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameStateUpdate, _impl_.remaining_time_)
      + sizeof(GameStateUpdate::_impl_.remaining_time_)
      - PROTOBUF_FIELD_OFFSET(GameStateUpdate, _impl_.board_changes_)>(
          reinterpret_cast<char*>(&_impl_.board_changes_),
          reinterpret_cast<char*>(&other->_impl_.board_changes_));
}

::google::protobuf::Metadata GameStateUpdate::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetHintRequest::_Internal {
 public:
};

GetHintRequest::GetHintRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.GetHintRequest)
}
GetHintRequest::GetHintRequest(
    ::google::protobuf::Arena* arena, const GetHintRequest& from)
    : GetHintRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE GetHintRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GetHintRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, room_id_),
           0,
           offsetof(Impl_, hint_level_) -
               offsetof(Impl_, room_id_) +
               sizeof(Impl_::hint_level_));
}
GetHintRequest::~GetHintRequest() {
  // @@protoc_insertion_point(destructor:blokus.GetHintRequest)
  SharedDtor(*this);
}
inline void GetHintRequest::SharedDtor(MessageLite& self) {
  GetHintRequest& this_ = static_cast<GetHintRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* GetHintRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetHintRequest(arena);
}
constexpr auto GetHintRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(GetHintRequest),
                                            alignof(GetHintRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetHintRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetHintRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetHintRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GetHintRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetHintRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GetHintRequest>(), &GetHintRequest::ByteSizeLong,
            &GetHintRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetHintRequest, _impl_._cached_size_),
        false,
    },
    &GetHintRequest::kDescriptorMethods,
    &descriptor_table_game_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetHintRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> GetHintRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::GetHintRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 room_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetHintRequest, _impl_.room_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(GetHintRequest, _impl_.room_id_)}},
    // .blokus.PlayerColor player = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetHintRequest, _impl_.player_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(GetHintRequest, _impl_.player_)}},
    // int32 hint_level = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetHintRequest, _impl_.hint_level_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(GetHintRequest, _impl_.hint_level_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 room_id = 1;
    {PROTOBUF_FIELD_OFFSET(GetHintRequest, _impl_.room_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .blokus.PlayerColor player = 2;
    {PROTOBUF_FIELD_OFFSET(GetHintRequest, _impl_.player_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int32 hint_level = 3;
    {PROTOBUF_FIELD_OFFSET(GetHintRequest, _impl_.hint_level_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void GetHintRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.GetHintRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.room_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.hint_level_) -
      reinterpret_cast<char*>(&_impl_.room_id_)) + sizeof(_impl_.hint_level_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GetHintRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GetHintRequest& this_ = static_cast<const GetHintRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GetHintRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GetHintRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.GetHintRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 room_id = 1;
          if (this_._internal_room_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_room_id(), target);
          }

          // .blokus.PlayerColor player = 2;
          if (this_._internal_player() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                2, this_._internal_player(), target);
          }

          // int32 hint_level = 3;
          if (this_._internal_hint_level() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_hint_level(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.GetHintRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GetHintRequest::ByteSizeLong(const MessageLite& base) {
          const GetHintRequest& this_ = static_cast<const GetHintRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GetHintRequest::ByteSizeLong() const {
          const GetHintRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.GetHintRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // int32 room_id = 1;
            if (this_._internal_room_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_room_id());
            }
            // .blokus.PlayerColor player = 2;
            if (this_._internal_player() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_player());
            }
            // int32 hint_level = 3;
            if (this_._internal_hint_level() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_hint_level());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GetHintRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetHintRequest*>(&to_msg);
  auto& from = static_cast<const GetHintRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.GetHintRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_room_id() != 0) {
    _this->_impl_.room_id_ = from._impl_.room_id_;
  }
  if (from._internal_player() != 0) {
    _this->_impl_.player_ = from._impl_.player_;
  }
  if (from._internal_hint_level() != 0) {
    _this->_impl_.hint_level_ = from._impl_.hint_level_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetHintRequest::CopyFrom(const GetHintRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.GetHintRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetHintRequest::InternalSwap(GetHintRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetHintRequest, _impl_.hint_level_)
      + sizeof(GetHintRequest::_impl_.hint_level_)
      - PROTOBUF_FIELD_OFFSET(GetHintRequest, _impl_.room_id_)>(
          reinterpret_cast<char*>(&_impl_.room_id_),
          reinterpret_cast<char*>(&other->_impl_.room_id_));
}

::google::protobuf::Metadata GetHintRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetHintResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GetHintResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GetHintResponse, _impl_._has_bits_);
};

void GetHintResponse::clear_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_ != nullptr) _impl_.result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GetHintResponse::clear_suggested_moves() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.suggested_moves_.Clear();
}
GetHintResponse::GetHintResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.GetHintResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetHintResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::GetHintResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        suggested_moves_{visibility, arena, from.suggested_moves_},
        explanations_{visibility, arena, from.explanations_},
        strategy_advice_(arena, from.strategy_advice_) {}

GetHintResponse::GetHintResponse(
    ::google::protobuf::Arena* arena,
    const GetHintResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetHintResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::blokus::Result>(
                              arena, *from._impl_.result_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, hint_quality_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, hint_quality_),
           offsetof(Impl_, win_probability_) -
               offsetof(Impl_, hint_quality_) +
               sizeof(Impl_::win_probability_));

  // @@protoc_insertion_point(copy_constructor:blokus.GetHintResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetHintResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        suggested_moves_{visibility, arena},
        explanations_{visibility, arena},
        strategy_advice_(arena) {}

inline void GetHintResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, result_),
           0,
           offsetof(Impl_, win_probability_) -
               offsetof(Impl_, result_) +
               sizeof(Impl_::win_probability_));
}
GetHintResponse::~GetHintResponse() {
  // @@protoc_insertion_point(destructor:blokus.GetHintResponse)
  SharedDtor(*this);
}
inline void GetHintResponse::SharedDtor(MessageLite& self) {
  GetHintResponse& this_ = static_cast<GetHintResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.strategy_advice_.Destroy();
  delete this_._impl_.result_;
  this_._impl_.~Impl_();
}

inline void* GetHintResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetHintResponse(arena);
}
constexpr auto GetHintResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(GetHintResponse, _impl_.suggested_moves_) +
          decltype(GetHintResponse::_impl_.suggested_moves_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(GetHintResponse, _impl_.explanations_) +
          decltype(GetHintResponse::_impl_.explanations_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(GetHintResponse), alignof(GetHintResponse), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&GetHintResponse::PlacementNew_,
                                 sizeof(GetHintResponse),
                                 alignof(GetHintResponse));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetHintResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetHintResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetHintResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GetHintResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetHintResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GetHintResponse>(), &GetHintResponse::ByteSizeLong,
            &GetHintResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetHintResponse, _impl_._cached_size_),
        false,
    },
    &GetHintResponse::kDescriptorMethods,
    &descriptor_table_game_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetHintResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 2, 58, 2> GetHintResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetHintResponse, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::GetHintResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .blokus.Result result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(GetHintResponse, _impl_.result_)}},
    // repeated .blokus.BlockPlacement suggested_moves = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(GetHintResponse, _impl_.suggested_moves_)}},
    // repeated string explanations = 3;
    {::_pbi::TcParser::FastUR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(GetHintResponse, _impl_.explanations_)}},
    // int32 hint_quality = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetHintResponse, _impl_.hint_quality_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(GetHintResponse, _impl_.hint_quality_)}},
    // int32 possible_moves_count = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetHintResponse, _impl_.possible_moves_count_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(GetHintResponse, _impl_.possible_moves_count_)}},
    // float win_probability = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(GetHintResponse, _impl_.win_probability_)}},
    // string strategy_advice = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(GetHintResponse, _impl_.strategy_advice_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .blokus.Result result = 1;
    {PROTOBUF_FIELD_OFFSET(GetHintResponse, _impl_.result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .blokus.BlockPlacement suggested_moves = 2;
    {PROTOBUF_FIELD_OFFSET(GetHintResponse, _impl_.suggested_moves_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated string explanations = 3;
    {PROTOBUF_FIELD_OFFSET(GetHintResponse, _impl_.explanations_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // int32 hint_quality = 4;
    {PROTOBUF_FIELD_OFFSET(GetHintResponse, _impl_.hint_quality_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 possible_moves_count = 5;
    {PROTOBUF_FIELD_OFFSET(GetHintResponse, _impl_.possible_moves_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // float win_probability = 6;
    {PROTOBUF_FIELD_OFFSET(GetHintResponse, _impl_.win_probability_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // string strategy_advice = 7;
    {PROTOBUF_FIELD_OFFSET(GetHintResponse, _impl_.strategy_advice_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::blokus::Result>()},
    {::_pbi::TcParser::GetTable<::blokus::BlockPlacement>()},
  }}, {{
    "\26\0\0\14\0\0\0\17"
    "blokus.GetHintResponse"
    "explanations"
    "strategy_advice"
  }},
};

PROTOBUF_NOINLINE void GetHintResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.GetHintResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.suggested_moves_.Clear();
  _impl_.explanations_.Clear();
  _impl_.strategy_advice_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.result_ != nullptr);
    _impl_.result_->Clear();
  }
  ::memset(&_impl_.hint_quality_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.win_probability_) -
      reinterpret_cast<char*>(&_impl_.hint_quality_)) + sizeof(_impl_.win_probability_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GetHintResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GetHintResponse& this_ = static_cast<const GetHintResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GetHintResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GetHintResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.GetHintResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .blokus.Result result = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.result_, this_._impl_.result_->GetCachedSize(), target,
                stream);
          }

          // repeated .blokus.BlockPlacement suggested_moves = 2;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_suggested_moves_size());
               i < n; i++) {
            const auto& repfield = this_._internal_suggested_moves().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    2, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // repeated string explanations = 3;
          for (int i = 0, n = this_._internal_explanations_size(); i < n; ++i) {
            const auto& s = this_._internal_explanations().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.GetHintResponse.explanations");
            target = stream->WriteString(3, s, target);
          }

          // int32 hint_quality = 4;
          if (this_._internal_hint_quality() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_hint_quality(), target);
          }

          // int32 possible_moves_count = 5;
          if (this_._internal_possible_moves_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<5>(
                    stream, this_._internal_possible_moves_count(), target);
          }

          // float win_probability = 6;
          if (::absl::bit_cast<::uint32_t>(this_._internal_win_probability()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                6, this_._internal_win_probability(), target);
          }

          // string strategy_advice = 7;
          if (!this_._internal_strategy_advice().empty()) {
            const std::string& _s = this_._internal_strategy_advice();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.GetHintResponse.strategy_advice");
            target = stream->WriteStringMaybeAliased(7, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.GetHintResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GetHintResponse::ByteSizeLong(const MessageLite& base) {
          const GetHintResponse& this_ = static_cast<const GetHintResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GetHintResponse::ByteSizeLong() const {
          const GetHintResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.GetHintResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .blokus.BlockPlacement suggested_moves = 2;
            {
              total_size += 1UL * this_._internal_suggested_moves_size();
              for (const auto& msg : this_._internal_suggested_moves()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated string explanations = 3;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_explanations().size());
              for (int i = 0, n = this_._internal_explanations().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_explanations().Get(i));
              }
            }
          }
           {
            // string strategy_advice = 7;
            if (!this_._internal_strategy_advice().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_strategy_advice());
            }
          }
           {
            // .blokus.Result result = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_);
            }
          }
           {
            // int32 hint_quality = 4;
            if (this_._internal_hint_quality() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_hint_quality());
            }
            // int32 possible_moves_count = 5;
            if (this_._internal_possible_moves_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_possible_moves_count());
            }
            // float win_probability = 6;
            if (::absl::bit_cast<::uint32_t>(this_._internal_win_probability()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GetHintResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetHintResponse*>(&to_msg);
  auto& from = static_cast<const GetHintResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.GetHintResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_suggested_moves()->MergeFrom(
      from._internal_suggested_moves());
  _this->_internal_mutable_explanations()->MergeFrom(from._internal_explanations());
  if (!from._internal_strategy_advice().empty()) {
    _this->_internal_set_strategy_advice(from._internal_strategy_advice());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.result_ != nullptr);
    if (_this->_impl_.result_ == nullptr) {
      _this->_impl_.result_ =
          ::google::protobuf::Message::CopyConstruct<::blokus::Result>(arena, *from._impl_.result_);
    } else {
      _this->_impl_.result_->MergeFrom(*from._impl_.result_);
    }
  }
  if (from._internal_hint_quality() != 0) {
    _this->_impl_.hint_quality_ = from._impl_.hint_quality_;
  }
  if (from._internal_possible_moves_count() != 0) {
    _this->_impl_.possible_moves_count_ = from._impl_.possible_moves_count_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_win_probability()) != 0) {
    _this->_impl_.win_probability_ = from._impl_.win_probability_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetHintResponse::CopyFrom(const GetHintResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.GetHintResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetHintResponse::InternalSwap(GetHintResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.suggested_moves_.InternalSwap(&other->_impl_.suggested_moves_);
  _impl_.explanations_.InternalSwap(&other->_impl_.explanations_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.strategy_advice_, &other->_impl_.strategy_advice_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetHintResponse, _impl_.win_probability_)
      + sizeof(GetHintResponse::_impl_.win_probability_)
      - PROTOBUF_FIELD_OFFSET(GetHintResponse, _impl_.result_)>(
          reinterpret_cast<char*>(&_impl_.result_),
          reinterpret_cast<char*>(&other->_impl_.result_));
}

::google::protobuf::Metadata GetHintResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SpectatorJoinRequest::_Internal {
 public:
};

SpectatorJoinRequest::SpectatorJoinRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.SpectatorJoinRequest)
}
SpectatorJoinRequest::SpectatorJoinRequest(
    ::google::protobuf::Arena* arena, const SpectatorJoinRequest& from)
    : SpectatorJoinRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SpectatorJoinRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SpectatorJoinRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, room_id_),
           0,
           offsetof(Impl_, silent_join_) -
               offsetof(Impl_, room_id_) +
               sizeof(Impl_::silent_join_));
}
SpectatorJoinRequest::~SpectatorJoinRequest() {
  // @@protoc_insertion_point(destructor:blokus.SpectatorJoinRequest)
  SharedDtor(*this);
}
inline void SpectatorJoinRequest::SharedDtor(MessageLite& self) {
  SpectatorJoinRequest& this_ = static_cast<SpectatorJoinRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* SpectatorJoinRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SpectatorJoinRequest(arena);
}
constexpr auto SpectatorJoinRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SpectatorJoinRequest),
                                            alignof(SpectatorJoinRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SpectatorJoinRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SpectatorJoinRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SpectatorJoinRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SpectatorJoinRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SpectatorJoinRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SpectatorJoinRequest>(), &SpectatorJoinRequest::ByteSizeLong,
            &SpectatorJoinRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SpectatorJoinRequest, _impl_._cached_size_),
        false,
    },
    &SpectatorJoinRequest::kDescriptorMethods,
    &descriptor_table_game_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SpectatorJoinRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> SpectatorJoinRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::SpectatorJoinRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bool silent_join = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SpectatorJoinRequest, _impl_.silent_join_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(SpectatorJoinRequest, _impl_.silent_join_)}},
    // int32 room_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SpectatorJoinRequest, _impl_.room_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SpectatorJoinRequest, _impl_.room_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 room_id = 1;
    {PROTOBUF_FIELD_OFFSET(SpectatorJoinRequest, _impl_.room_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool silent_join = 2;
    {PROTOBUF_FIELD_OFFSET(SpectatorJoinRequest, _impl_.silent_join_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void SpectatorJoinRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.SpectatorJoinRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.room_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.silent_join_) -
      reinterpret_cast<char*>(&_impl_.room_id_)) + sizeof(_impl_.silent_join_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SpectatorJoinRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SpectatorJoinRequest& this_ = static_cast<const SpectatorJoinRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SpectatorJoinRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SpectatorJoinRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.SpectatorJoinRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 room_id = 1;
          if (this_._internal_room_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_room_id(), target);
          }

          // bool silent_join = 2;
          if (this_._internal_silent_join() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                2, this_._internal_silent_join(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.SpectatorJoinRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SpectatorJoinRequest::ByteSizeLong(const MessageLite& base) {
          const SpectatorJoinRequest& this_ = static_cast<const SpectatorJoinRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SpectatorJoinRequest::ByteSizeLong() const {
          const SpectatorJoinRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.SpectatorJoinRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // int32 room_id = 1;
            if (this_._internal_room_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_room_id());
            }
            // bool silent_join = 2;
            if (this_._internal_silent_join() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SpectatorJoinRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SpectatorJoinRequest*>(&to_msg);
  auto& from = static_cast<const SpectatorJoinRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.SpectatorJoinRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_room_id() != 0) {
    _this->_impl_.room_id_ = from._impl_.room_id_;
  }
  if (from._internal_silent_join() != 0) {
    _this->_impl_.silent_join_ = from._impl_.silent_join_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SpectatorJoinRequest::CopyFrom(const SpectatorJoinRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.SpectatorJoinRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SpectatorJoinRequest::InternalSwap(SpectatorJoinRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpectatorJoinRequest, _impl_.silent_join_)
      + sizeof(SpectatorJoinRequest::_impl_.silent_join_)
      - PROTOBUF_FIELD_OFFSET(SpectatorJoinRequest, _impl_.room_id_)>(
          reinterpret_cast<char*>(&_impl_.room_id_),
          reinterpret_cast<char*>(&other->_impl_.room_id_));
}

::google::protobuf::Metadata SpectatorJoinRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SpectatorJoinResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SpectatorJoinResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SpectatorJoinResponse, _impl_._has_bits_);
};

void SpectatorJoinResponse::clear_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_ != nullptr) _impl_.result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SpectatorJoinResponse::SpectatorJoinResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.SpectatorJoinResponse)
}
inline PROTOBUF_NDEBUG_INLINE SpectatorJoinResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::SpectatorJoinResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        welcome_message_(arena, from.welcome_message_) {}

SpectatorJoinResponse::SpectatorJoinResponse(
    ::google::protobuf::Arena* arena,
    const SpectatorJoinResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SpectatorJoinResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.result_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::blokus::Result>(
                              arena, *from._impl_.result_)
                        : nullptr;
  _impl_.current_state_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::blokus::GameStateResponse>(
                              arena, *from._impl_.current_state_)
                        : nullptr;
  _impl_.spectator_count_ = from._impl_.spectator_count_;

  // @@protoc_insertion_point(copy_constructor:blokus.SpectatorJoinResponse)
}
inline PROTOBUF_NDEBUG_INLINE SpectatorJoinResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        welcome_message_(arena) {}

inline void SpectatorJoinResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, result_),
           0,
           offsetof(Impl_, spectator_count_) -
               offsetof(Impl_, result_) +
               sizeof(Impl_::spectator_count_));
}
SpectatorJoinResponse::~SpectatorJoinResponse() {
  // @@protoc_insertion_point(destructor:blokus.SpectatorJoinResponse)
  SharedDtor(*this);
}
inline void SpectatorJoinResponse::SharedDtor(MessageLite& self) {
  SpectatorJoinResponse& this_ = static_cast<SpectatorJoinResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.welcome_message_.Destroy();
  delete this_._impl_.result_;
  delete this_._impl_.current_state_;
  this_._impl_.~Impl_();
}

inline void* SpectatorJoinResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SpectatorJoinResponse(arena);
}
constexpr auto SpectatorJoinResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(SpectatorJoinResponse),
                                            alignof(SpectatorJoinResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SpectatorJoinResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SpectatorJoinResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SpectatorJoinResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SpectatorJoinResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SpectatorJoinResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SpectatorJoinResponse>(), &SpectatorJoinResponse::ByteSizeLong,
            &SpectatorJoinResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SpectatorJoinResponse, _impl_._cached_size_),
        false,
    },
    &SpectatorJoinResponse::kDescriptorMethods,
    &descriptor_table_game_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SpectatorJoinResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 2, 52, 2> SpectatorJoinResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SpectatorJoinResponse, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::SpectatorJoinResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string welcome_message = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(SpectatorJoinResponse, _impl_.welcome_message_)}},
    // .blokus.Result result = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SpectatorJoinResponse, _impl_.result_)}},
    // .blokus.GameStateResponse current_state = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(SpectatorJoinResponse, _impl_.current_state_)}},
    // int32 spectator_count = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SpectatorJoinResponse, _impl_.spectator_count_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(SpectatorJoinResponse, _impl_.spectator_count_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .blokus.Result result = 1;
    {PROTOBUF_FIELD_OFFSET(SpectatorJoinResponse, _impl_.result_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .blokus.GameStateResponse current_state = 2;
    {PROTOBUF_FIELD_OFFSET(SpectatorJoinResponse, _impl_.current_state_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 spectator_count = 3;
    {PROTOBUF_FIELD_OFFSET(SpectatorJoinResponse, _impl_.spectator_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string welcome_message = 4;
    {PROTOBUF_FIELD_OFFSET(SpectatorJoinResponse, _impl_.welcome_message_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::blokus::Result>()},
    {::_pbi::TcParser::GetTable<::blokus::GameStateResponse>()},
  }}, {{
    "\34\0\0\0\17\0\0\0"
    "blokus.SpectatorJoinResponse"
    "welcome_message"
  }},
};

PROTOBUF_NOINLINE void SpectatorJoinResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.SpectatorJoinResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.welcome_message_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.result_ != nullptr);
      _impl_.result_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.current_state_ != nullptr);
      _impl_.current_state_->Clear();
    }
  }
  _impl_.spectator_count_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SpectatorJoinResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SpectatorJoinResponse& this_ = static_cast<const SpectatorJoinResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SpectatorJoinResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SpectatorJoinResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.SpectatorJoinResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .blokus.Result result = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.result_, this_._impl_.result_->GetCachedSize(), target,
                stream);
          }

          // .blokus.GameStateResponse current_state = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.current_state_, this_._impl_.current_state_->GetCachedSize(), target,
                stream);
          }

          // int32 spectator_count = 3;
          if (this_._internal_spectator_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_spectator_count(), target);
          }

          // string welcome_message = 4;
          if (!this_._internal_welcome_message().empty()) {
            const std::string& _s = this_._internal_welcome_message();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.SpectatorJoinResponse.welcome_message");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.SpectatorJoinResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SpectatorJoinResponse::ByteSizeLong(const MessageLite& base) {
          const SpectatorJoinResponse& this_ = static_cast<const SpectatorJoinResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SpectatorJoinResponse::ByteSizeLong() const {
          const SpectatorJoinResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.SpectatorJoinResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string welcome_message = 4;
            if (!this_._internal_welcome_message().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_welcome_message());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .blokus.Result result = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.result_);
            }
            // .blokus.GameStateResponse current_state = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.current_state_);
            }
          }
           {
            // int32 spectator_count = 3;
            if (this_._internal_spectator_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_spectator_count());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SpectatorJoinResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SpectatorJoinResponse*>(&to_msg);
  auto& from = static_cast<const SpectatorJoinResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.SpectatorJoinResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_welcome_message().empty()) {
    _this->_internal_set_welcome_message(from._internal_welcome_message());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.result_ != nullptr);
      if (_this->_impl_.result_ == nullptr) {
        _this->_impl_.result_ =
            ::google::protobuf::Message::CopyConstruct<::blokus::Result>(arena, *from._impl_.result_);
      } else {
        _this->_impl_.result_->MergeFrom(*from._impl_.result_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.current_state_ != nullptr);
      if (_this->_impl_.current_state_ == nullptr) {
        _this->_impl_.current_state_ =
            ::google::protobuf::Message::CopyConstruct<::blokus::GameStateResponse>(arena, *from._impl_.current_state_);
      } else {
        _this->_impl_.current_state_->MergeFrom(*from._impl_.current_state_);
      }
    }
  }
  if (from._internal_spectator_count() != 0) {
    _this->_impl_.spectator_count_ = from._impl_.spectator_count_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SpectatorJoinResponse::CopyFrom(const SpectatorJoinResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.SpectatorJoinResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SpectatorJoinResponse::InternalSwap(SpectatorJoinResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.welcome_message_, &other->_impl_.welcome_message_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpectatorJoinResponse, _impl_.spectator_count_)
      + sizeof(SpectatorJoinResponse::_impl_.spectator_count_)
      - PROTOBUF_FIELD_OFFSET(SpectatorJoinResponse, _impl_.result_)>(
          reinterpret_cast<char*>(&_impl_.result_),
          reinterpret_cast<char*>(&other->_impl_.result_));
}

::google::protobuf::Metadata SpectatorJoinResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SpectatorNotification::_Internal {
 public:
};

SpectatorNotification::SpectatorNotification(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.SpectatorNotification)
}
inline PROTOBUF_NDEBUG_INLINE SpectatorNotification::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::SpectatorNotification& from_msg)
      : spectator_username_(arena, from.spectator_username_),
        _cached_size_{0} {}

SpectatorNotification::SpectatorNotification(
    ::google::protobuf::Arena* arena,
    const SpectatorNotification& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SpectatorNotification* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, room_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, room_id_),
           offsetof(Impl_, total_spectators_) -
               offsetof(Impl_, room_id_) +
               sizeof(Impl_::total_spectators_));

  // @@protoc_insertion_point(copy_constructor:blokus.SpectatorNotification)
}
inline PROTOBUF_NDEBUG_INLINE SpectatorNotification::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : spectator_username_(arena),
        _cached_size_{0} {}

inline void SpectatorNotification::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, room_id_),
           0,
           offsetof(Impl_, total_spectators_) -
               offsetof(Impl_, room_id_) +
               sizeof(Impl_::total_spectators_));
}
SpectatorNotification::~SpectatorNotification() {
  // @@protoc_insertion_point(destructor:blokus.SpectatorNotification)
  SharedDtor(*this);
}
inline void SpectatorNotification::SharedDtor(MessageLite& self) {
  SpectatorNotification& this_ = static_cast<SpectatorNotification&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.spectator_username_.Destroy();
  this_._impl_.~Impl_();
}

inline void* SpectatorNotification::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SpectatorNotification(arena);
}
constexpr auto SpectatorNotification::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(SpectatorNotification),
                                            alignof(SpectatorNotification));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SpectatorNotification::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SpectatorNotification_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SpectatorNotification::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SpectatorNotification>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SpectatorNotification::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SpectatorNotification>(), &SpectatorNotification::ByteSizeLong,
            &SpectatorNotification::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SpectatorNotification, _impl_._cached_size_),
        false,
    },
    &SpectatorNotification::kDescriptorMethods,
    &descriptor_table_game_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SpectatorNotification::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 55, 2> SpectatorNotification::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::SpectatorNotification>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 total_spectators = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SpectatorNotification, _impl_.total_spectators_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(SpectatorNotification, _impl_.total_spectators_)}},
    // int32 room_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SpectatorNotification, _impl_.room_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SpectatorNotification, _impl_.room_id_)}},
    // string spectator_username = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(SpectatorNotification, _impl_.spectator_username_)}},
    // bool joined = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SpectatorNotification, _impl_.joined_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(SpectatorNotification, _impl_.joined_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 room_id = 1;
    {PROTOBUF_FIELD_OFFSET(SpectatorNotification, _impl_.room_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string spectator_username = 2;
    {PROTOBUF_FIELD_OFFSET(SpectatorNotification, _impl_.spectator_username_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool joined = 3;
    {PROTOBUF_FIELD_OFFSET(SpectatorNotification, _impl_.joined_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 total_spectators = 4;
    {PROTOBUF_FIELD_OFFSET(SpectatorNotification, _impl_.total_spectators_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\34\0\22\0\0\0\0\0"
    "blokus.SpectatorNotification"
    "spectator_username"
  }},
};

PROTOBUF_NOINLINE void SpectatorNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.SpectatorNotification)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.spectator_username_.ClearToEmpty();
  ::memset(&_impl_.room_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.total_spectators_) -
      reinterpret_cast<char*>(&_impl_.room_id_)) + sizeof(_impl_.total_spectators_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SpectatorNotification::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SpectatorNotification& this_ = static_cast<const SpectatorNotification&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SpectatorNotification::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SpectatorNotification& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.SpectatorNotification)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 room_id = 1;
          if (this_._internal_room_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_room_id(), target);
          }

          // string spectator_username = 2;
          if (!this_._internal_spectator_username().empty()) {
            const std::string& _s = this_._internal_spectator_username();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.SpectatorNotification.spectator_username");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // bool joined = 3;
          if (this_._internal_joined() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                3, this_._internal_joined(), target);
          }

          // int32 total_spectators = 4;
          if (this_._internal_total_spectators() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_total_spectators(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.SpectatorNotification)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SpectatorNotification::ByteSizeLong(const MessageLite& base) {
          const SpectatorNotification& this_ = static_cast<const SpectatorNotification&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SpectatorNotification::ByteSizeLong() const {
          const SpectatorNotification& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.SpectatorNotification)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string spectator_username = 2;
            if (!this_._internal_spectator_username().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_spectator_username());
            }
            // int32 room_id = 1;
            if (this_._internal_room_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_room_id());
            }
            // bool joined = 3;
            if (this_._internal_joined() != 0) {
              total_size += 2;
            }
            // int32 total_spectators = 4;
            if (this_._internal_total_spectators() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_total_spectators());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SpectatorNotification::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SpectatorNotification*>(&to_msg);
  auto& from = static_cast<const SpectatorNotification&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.SpectatorNotification)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_spectator_username().empty()) {
    _this->_internal_set_spectator_username(from._internal_spectator_username());
  }
  if (from._internal_room_id() != 0) {
    _this->_impl_.room_id_ = from._impl_.room_id_;
  }
  if (from._internal_joined() != 0) {
    _this->_impl_.joined_ = from._impl_.joined_;
  }
  if (from._internal_total_spectators() != 0) {
    _this->_impl_.total_spectators_ = from._impl_.total_spectators_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SpectatorNotification::CopyFrom(const SpectatorNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.SpectatorNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SpectatorNotification::InternalSwap(SpectatorNotification* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.spectator_username_, &other->_impl_.spectator_username_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpectatorNotification, _impl_.total_spectators_)
      + sizeof(SpectatorNotification::_impl_.total_spectators_)
      - PROTOBUF_FIELD_OFFSET(SpectatorNotification, _impl_.room_id_)>(
          reinterpret_cast<char*>(&_impl_.room_id_),
          reinterpret_cast<char*>(&other->_impl_.room_id_));
}

::google::protobuf::Metadata SpectatorNotification::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace blokus
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_game_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
