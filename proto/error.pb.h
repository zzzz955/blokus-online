// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: error.proto
// Protobuf C++ Version: 5.29.3

#ifndef error_2eproto_2epb_2eh
#define error_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
#include "common.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_error_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_error_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_error_2eproto;
namespace blokus {
class ClientError;
struct ClientErrorDefaultTypeInternal;
extern ClientErrorDefaultTypeInternal _ClientError_default_instance_;
class ConnectionError;
struct ConnectionErrorDefaultTypeInternal;
extern ConnectionErrorDefaultTypeInternal _ConnectionError_default_instance_;
class ErrorAction;
struct ErrorActionDefaultTypeInternal;
extern ErrorActionDefaultTypeInternal _ErrorAction_default_instance_;
class ErrorReport;
struct ErrorReportDefaultTypeInternal;
extern ErrorReportDefaultTypeInternal _ErrorReport_default_instance_;
class ErrorResponse;
struct ErrorResponseDefaultTypeInternal;
extern ErrorResponseDefaultTypeInternal _ErrorResponse_default_instance_;
class ErrorResponse_DetailsEntry_DoNotUse;
struct ErrorResponse_DetailsEntry_DoNotUseDefaultTypeInternal;
extern ErrorResponse_DetailsEntry_DoNotUseDefaultTypeInternal _ErrorResponse_DetailsEntry_DoNotUse_default_instance_;
class FieldError;
struct FieldErrorDefaultTypeInternal;
extern FieldErrorDefaultTypeInternal _FieldError_default_instance_;
class GameErrorDetails;
struct GameErrorDetailsDefaultTypeInternal;
extern GameErrorDetailsDefaultTypeInternal _GameErrorDetails_default_instance_;
class RateLimitExceeded;
struct RateLimitExceededDefaultTypeInternal;
extern RateLimitExceededDefaultTypeInternal _RateLimitExceeded_default_instance_;
class RateLimitExceeded_RateLimitInfoEntry_DoNotUse;
struct RateLimitExceeded_RateLimitInfoEntry_DoNotUseDefaultTypeInternal;
extern RateLimitExceeded_RateLimitInfoEntry_DoNotUseDefaultTypeInternal _RateLimitExceeded_RateLimitInfoEntry_DoNotUse_default_instance_;
class ServerError;
struct ServerErrorDefaultTypeInternal;
extern ServerErrorDefaultTypeInternal _ServerError_default_instance_;
class UserFriendlyError;
struct UserFriendlyErrorDefaultTypeInternal;
extern UserFriendlyErrorDefaultTypeInternal _UserFriendlyError_default_instance_;
}  // namespace blokus
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace blokus {
enum ServerError_ServerErrorType : int {
  ServerError_ServerErrorType_INTERNAL_ERROR = 0,
  ServerError_ServerErrorType_DATABASE_ERROR = 1,
  ServerError_ServerErrorType_SERVICE_UNAVAILABLE = 2,
  ServerError_ServerErrorType_MAINTENANCE_MODE = 3,
  ServerError_ServerErrorType_OVERLOADED = 4,
  ServerError_ServerErrorType_CONFIGURATION_ERROR = 5,
  ServerError_ServerErrorType_DEPENDENCY_FAILURE = 6,
  ServerError_ServerErrorType_ServerError_ServerErrorType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ServerError_ServerErrorType_ServerError_ServerErrorType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ServerError_ServerErrorType_IsValid(int value);
extern const uint32_t ServerError_ServerErrorType_internal_data_[];
constexpr ServerError_ServerErrorType ServerError_ServerErrorType_ServerErrorType_MIN = static_cast<ServerError_ServerErrorType>(0);
constexpr ServerError_ServerErrorType ServerError_ServerErrorType_ServerErrorType_MAX = static_cast<ServerError_ServerErrorType>(6);
constexpr int ServerError_ServerErrorType_ServerErrorType_ARRAYSIZE = 6 + 1;
const ::google::protobuf::EnumDescriptor*
ServerError_ServerErrorType_descriptor();
template <typename T>
const std::string& ServerError_ServerErrorType_Name(T value) {
  static_assert(std::is_same<T, ServerError_ServerErrorType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ServerErrorType_Name().");
  return ServerError_ServerErrorType_Name(static_cast<ServerError_ServerErrorType>(value));
}
template <>
inline const std::string& ServerError_ServerErrorType_Name(ServerError_ServerErrorType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ServerError_ServerErrorType_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool ServerError_ServerErrorType_Parse(absl::string_view name, ServerError_ServerErrorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServerError_ServerErrorType>(
      ServerError_ServerErrorType_descriptor(), name, value);
}
enum ClientError_ClientErrorType : int {
  ClientError_ClientErrorType_INVALID_REQUEST = 0,
  ClientError_ClientErrorType_UNSUPPORTED_VERSION = 1,
  ClientError_ClientErrorType_MALFORMED_MESSAGE = 2,
  ClientError_ClientErrorType_MISSING_PARAMETERS = 3,
  ClientError_ClientErrorType_PROTOCOL_VIOLATION = 4,
  ClientError_ClientErrorType_CLIENT_TOO_OLD = 5,
  ClientError_ClientErrorType_CLIENT_CONFIGURATION_ERROR = 6,
  ClientError_ClientErrorType_ClientError_ClientErrorType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ClientError_ClientErrorType_ClientError_ClientErrorType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ClientError_ClientErrorType_IsValid(int value);
extern const uint32_t ClientError_ClientErrorType_internal_data_[];
constexpr ClientError_ClientErrorType ClientError_ClientErrorType_ClientErrorType_MIN = static_cast<ClientError_ClientErrorType>(0);
constexpr ClientError_ClientErrorType ClientError_ClientErrorType_ClientErrorType_MAX = static_cast<ClientError_ClientErrorType>(6);
constexpr int ClientError_ClientErrorType_ClientErrorType_ARRAYSIZE = 6 + 1;
const ::google::protobuf::EnumDescriptor*
ClientError_ClientErrorType_descriptor();
template <typename T>
const std::string& ClientError_ClientErrorType_Name(T value) {
  static_assert(std::is_same<T, ClientError_ClientErrorType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ClientErrorType_Name().");
  return ClientError_ClientErrorType_Name(static_cast<ClientError_ClientErrorType>(value));
}
template <>
inline const std::string& ClientError_ClientErrorType_Name(ClientError_ClientErrorType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ClientError_ClientErrorType_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool ClientError_ClientErrorType_Parse(absl::string_view name, ClientError_ClientErrorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ClientError_ClientErrorType>(
      ClientError_ClientErrorType_descriptor(), name, value);
}
enum ConnectionError_ConnectionErrorType : int {
  ConnectionError_ConnectionErrorType_CONNECTION_REFUSED = 0,
  ConnectionError_ConnectionErrorType_CONNECTION_TIMEOUT = 1,
  ConnectionError_ConnectionErrorType_CONNECTION_RESET = 2,
  ConnectionError_ConnectionErrorType_HANDSHAKE_FAILED = 3,
  ConnectionError_ConnectionErrorType_PROTOCOL_MISMATCH = 4,
  ConnectionError_ConnectionErrorType_AUTHENTICATION_FAILED = 5,
  ConnectionError_ConnectionErrorType_SESSION_TERMINATED = 6,
  ConnectionError_ConnectionErrorType_KEEPALIVE_TIMEOUT = 7,
  ConnectionError_ConnectionErrorType_ConnectionError_ConnectionErrorType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ConnectionError_ConnectionErrorType_ConnectionError_ConnectionErrorType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ConnectionError_ConnectionErrorType_IsValid(int value);
extern const uint32_t ConnectionError_ConnectionErrorType_internal_data_[];
constexpr ConnectionError_ConnectionErrorType ConnectionError_ConnectionErrorType_ConnectionErrorType_MIN = static_cast<ConnectionError_ConnectionErrorType>(0);
constexpr ConnectionError_ConnectionErrorType ConnectionError_ConnectionErrorType_ConnectionErrorType_MAX = static_cast<ConnectionError_ConnectionErrorType>(7);
constexpr int ConnectionError_ConnectionErrorType_ConnectionErrorType_ARRAYSIZE = 7 + 1;
const ::google::protobuf::EnumDescriptor*
ConnectionError_ConnectionErrorType_descriptor();
template <typename T>
const std::string& ConnectionError_ConnectionErrorType_Name(T value) {
  static_assert(std::is_same<T, ConnectionError_ConnectionErrorType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ConnectionErrorType_Name().");
  return ConnectionError_ConnectionErrorType_Name(static_cast<ConnectionError_ConnectionErrorType>(value));
}
template <>
inline const std::string& ConnectionError_ConnectionErrorType_Name(ConnectionError_ConnectionErrorType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ConnectionError_ConnectionErrorType_descriptor,
                                                 0, 7>(
      static_cast<int>(value));
}
inline bool ConnectionError_ConnectionErrorType_Parse(absl::string_view name, ConnectionError_ConnectionErrorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConnectionError_ConnectionErrorType>(
      ConnectionError_ConnectionErrorType_descriptor(), name, value);
}
enum ErrorCategory : int {
  ERROR_CATEGORY_UNKNOWN = 0,
  ERROR_CATEGORY_AUTHENTICATION = 1,
  ERROR_CATEGORY_AUTHORIZATION = 2,
  ERROR_CATEGORY_VALIDATION = 3,
  ERROR_CATEGORY_BUSINESS_LOGIC = 4,
  ERROR_CATEGORY_NETWORK = 5,
  ERROR_CATEGORY_DATABASE = 6,
  ERROR_CATEGORY_GAME_LOGIC = 7,
  ERROR_CATEGORY_RATE_LIMIT = 8,
  ERROR_CATEGORY_SERVER_ERROR = 9,
  ERROR_CATEGORY_CLIENT_ERROR = 10,
  ErrorCategory_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ErrorCategory_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ErrorCategory_IsValid(int value);
extern const uint32_t ErrorCategory_internal_data_[];
constexpr ErrorCategory ErrorCategory_MIN = static_cast<ErrorCategory>(0);
constexpr ErrorCategory ErrorCategory_MAX = static_cast<ErrorCategory>(10);
constexpr int ErrorCategory_ARRAYSIZE = 10 + 1;
const ::google::protobuf::EnumDescriptor*
ErrorCategory_descriptor();
template <typename T>
const std::string& ErrorCategory_Name(T value) {
  static_assert(std::is_same<T, ErrorCategory>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ErrorCategory_Name().");
  return ErrorCategory_Name(static_cast<ErrorCategory>(value));
}
template <>
inline const std::string& ErrorCategory_Name(ErrorCategory value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ErrorCategory_descriptor,
                                                 0, 10>(
      static_cast<int>(value));
}
inline bool ErrorCategory_Parse(absl::string_view name, ErrorCategory* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrorCategory>(
      ErrorCategory_descriptor(), name, value);
}
enum ErrorSeverity : int {
  ERROR_SEVERITY_INFO = 0,
  ERROR_SEVERITY_WARNING = 1,
  ERROR_SEVERITY_ERROR = 2,
  ERROR_SEVERITY_CRITICAL = 3,
  ERROR_SEVERITY_FATAL = 4,
  ErrorSeverity_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ErrorSeverity_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ErrorSeverity_IsValid(int value);
extern const uint32_t ErrorSeverity_internal_data_[];
constexpr ErrorSeverity ErrorSeverity_MIN = static_cast<ErrorSeverity>(0);
constexpr ErrorSeverity ErrorSeverity_MAX = static_cast<ErrorSeverity>(4);
constexpr int ErrorSeverity_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
ErrorSeverity_descriptor();
template <typename T>
const std::string& ErrorSeverity_Name(T value) {
  static_assert(std::is_same<T, ErrorSeverity>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ErrorSeverity_Name().");
  return ErrorSeverity_Name(static_cast<ErrorSeverity>(value));
}
template <>
inline const std::string& ErrorSeverity_Name(ErrorSeverity value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ErrorSeverity_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool ErrorSeverity_Parse(absl::string_view name, ErrorSeverity* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrorSeverity>(
      ErrorSeverity_descriptor(), name, value);
}
enum AuthenticationError : int {
  AUTH_ERROR_INVALID_CREDENTIALS = 0,
  AUTH_ERROR_USER_NOT_FOUND = 1,
  AUTH_ERROR_PASSWORD_INCORRECT = 2,
  AUTH_ERROR_ACCOUNT_SUSPENDED = 3,
  AUTH_ERROR_ACCOUNT_BANNED = 4,
  AUTH_ERROR_EMAIL_NOT_VERIFIED = 5,
  AUTH_ERROR_SESSION_EXPIRED = 6,
  AUTH_ERROR_SESSION_INVALID = 7,
  AUTH_ERROR_TOO_MANY_ATTEMPTS = 8,
  AUTH_ERROR_CAPTCHA_REQUIRED = 9,
  AUTH_ERROR_CAPTCHA_INVALID = 10,
  AuthenticationError_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  AuthenticationError_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool AuthenticationError_IsValid(int value);
extern const uint32_t AuthenticationError_internal_data_[];
constexpr AuthenticationError AuthenticationError_MIN = static_cast<AuthenticationError>(0);
constexpr AuthenticationError AuthenticationError_MAX = static_cast<AuthenticationError>(10);
constexpr int AuthenticationError_ARRAYSIZE = 10 + 1;
const ::google::protobuf::EnumDescriptor*
AuthenticationError_descriptor();
template <typename T>
const std::string& AuthenticationError_Name(T value) {
  static_assert(std::is_same<T, AuthenticationError>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to AuthenticationError_Name().");
  return AuthenticationError_Name(static_cast<AuthenticationError>(value));
}
template <>
inline const std::string& AuthenticationError_Name(AuthenticationError value) {
  return ::google::protobuf::internal::NameOfDenseEnum<AuthenticationError_descriptor,
                                                 0, 10>(
      static_cast<int>(value));
}
inline bool AuthenticationError_Parse(absl::string_view name, AuthenticationError* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AuthenticationError>(
      AuthenticationError_descriptor(), name, value);
}
enum ValidationError : int {
  VALIDATION_ERROR_REQUIRED_FIELD = 0,
  VALIDATION_ERROR_INVALID_FORMAT = 1,
  VALIDATION_ERROR_TOO_SHORT = 2,
  VALIDATION_ERROR_TOO_LONG = 3,
  VALIDATION_ERROR_INVALID_CHARACTERS = 4,
  VALIDATION_ERROR_DUPLICATE_VALUE = 5,
  VALIDATION_ERROR_OUT_OF_RANGE = 6,
  VALIDATION_ERROR_INVALID_EMAIL = 7,
  VALIDATION_ERROR_WEAK_PASSWORD = 8,
  VALIDATION_ERROR_INVALID_USERNAME = 9,
  ValidationError_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ValidationError_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ValidationError_IsValid(int value);
extern const uint32_t ValidationError_internal_data_[];
constexpr ValidationError ValidationError_MIN = static_cast<ValidationError>(0);
constexpr ValidationError ValidationError_MAX = static_cast<ValidationError>(9);
constexpr int ValidationError_ARRAYSIZE = 9 + 1;
const ::google::protobuf::EnumDescriptor*
ValidationError_descriptor();
template <typename T>
const std::string& ValidationError_Name(T value) {
  static_assert(std::is_same<T, ValidationError>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ValidationError_Name().");
  return ValidationError_Name(static_cast<ValidationError>(value));
}
template <>
inline const std::string& ValidationError_Name(ValidationError value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ValidationError_descriptor,
                                                 0, 9>(
      static_cast<int>(value));
}
inline bool ValidationError_Parse(absl::string_view name, ValidationError* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ValidationError>(
      ValidationError_descriptor(), name, value);
}
enum GameLogicError : int {
  GAME_ERROR_INVALID_MOVE = 0,
  GAME_ERROR_NOT_YOUR_TURN = 1,
  GAME_ERROR_GAME_NOT_STARTED = 2,
  GAME_ERROR_GAME_ALREADY_ENDED = 3,
  GAME_ERROR_BLOCK_COLLISION = 4,
  GAME_ERROR_INVALID_POSITION = 5,
  GAME_ERROR_BLOCK_ALREADY_USED = 6,
  GAME_ERROR_NO_CORNER_CONNECTION = 7,
  GAME_ERROR_INVALID_FIRST_MOVE = 8,
  GAME_ERROR_EDGE_COLLISION = 9,
  GAME_ERROR_ROOM_FULL = 10,
  GAME_ERROR_ALREADY_IN_ROOM = 11,
  GAME_ERROR_NOT_IN_ROOM = 12,
  GAME_ERROR_INSUFFICIENT_PLAYERS = 13,
  GAME_ERROR_GAME_IN_PROGRESS = 14,
  GameLogicError_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  GameLogicError_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool GameLogicError_IsValid(int value);
extern const uint32_t GameLogicError_internal_data_[];
constexpr GameLogicError GameLogicError_MIN = static_cast<GameLogicError>(0);
constexpr GameLogicError GameLogicError_MAX = static_cast<GameLogicError>(14);
constexpr int GameLogicError_ARRAYSIZE = 14 + 1;
const ::google::protobuf::EnumDescriptor*
GameLogicError_descriptor();
template <typename T>
const std::string& GameLogicError_Name(T value) {
  static_assert(std::is_same<T, GameLogicError>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to GameLogicError_Name().");
  return GameLogicError_Name(static_cast<GameLogicError>(value));
}
template <>
inline const std::string& GameLogicError_Name(GameLogicError value) {
  return ::google::protobuf::internal::NameOfDenseEnum<GameLogicError_descriptor,
                                                 0, 14>(
      static_cast<int>(value));
}
inline bool GameLogicError_Parse(absl::string_view name, GameLogicError* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GameLogicError>(
      GameLogicError_descriptor(), name, value);
}
enum NetworkError : int {
  NETWORK_ERROR_CONNECTION_LOST = 0,
  NETWORK_ERROR_TIMEOUT = 1,
  NETWORK_ERROR_PROTOCOL_ERROR = 2,
  NETWORK_ERROR_MESSAGE_TOO_LARGE = 3,
  NETWORK_ERROR_INVALID_MESSAGE = 4,
  NETWORK_ERROR_COMPRESSION_ERROR = 5,
  NETWORK_ERROR_ENCRYPTION_ERROR = 6,
  NETWORK_ERROR_HANDSHAKE_FAILED = 7,
  NetworkError_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  NetworkError_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool NetworkError_IsValid(int value);
extern const uint32_t NetworkError_internal_data_[];
constexpr NetworkError NetworkError_MIN = static_cast<NetworkError>(0);
constexpr NetworkError NetworkError_MAX = static_cast<NetworkError>(7);
constexpr int NetworkError_ARRAYSIZE = 7 + 1;
const ::google::protobuf::EnumDescriptor*
NetworkError_descriptor();
template <typename T>
const std::string& NetworkError_Name(T value) {
  static_assert(std::is_same<T, NetworkError>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to NetworkError_Name().");
  return NetworkError_Name(static_cast<NetworkError>(value));
}
template <>
inline const std::string& NetworkError_Name(NetworkError value) {
  return ::google::protobuf::internal::NameOfDenseEnum<NetworkError_descriptor,
                                                 0, 7>(
      static_cast<int>(value));
}
inline bool NetworkError_Parse(absl::string_view name, NetworkError* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetworkError>(
      NetworkError_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class RateLimitExceeded_RateLimitInfoEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, ::int32_t,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_INT32> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, ::int32_t,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>;
  RateLimitExceeded_RateLimitInfoEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RateLimitExceeded_RateLimitInfoEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit RateLimitExceeded_RateLimitInfoEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const RateLimitExceeded_RateLimitInfoEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const RateLimitExceeded_RateLimitInfoEntry_DoNotUse*>(
        &_RateLimitExceeded_RateLimitInfoEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_error_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      55, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class FieldError final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.FieldError) */ {
 public:
  inline FieldError() : FieldError(nullptr) {}
  ~FieldError() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(FieldError* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(FieldError));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FieldError(
      ::google::protobuf::internal::ConstantInitialized);

  inline FieldError(const FieldError& from) : FieldError(nullptr, from) {}
  inline FieldError(FieldError&& from) noexcept
      : FieldError(nullptr, std::move(from)) {}
  inline FieldError& operator=(const FieldError& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldError& operator=(FieldError&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FieldError& default_instance() {
    return *internal_default_instance();
  }
  static inline const FieldError* internal_default_instance() {
    return reinterpret_cast<const FieldError*>(
        &_FieldError_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(FieldError& a, FieldError& b) { a.Swap(&b); }
  inline void Swap(FieldError* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FieldError* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FieldError* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<FieldError>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FieldError& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FieldError& from) { FieldError::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(FieldError* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.FieldError"; }

 protected:
  explicit FieldError(::google::protobuf::Arena* arena);
  FieldError(::google::protobuf::Arena* arena, const FieldError& from);
  FieldError(::google::protobuf::Arena* arena, FieldError&& from) noexcept
      : FieldError(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValidValuesFieldNumber = 5,
    kFieldNameFieldNumber = 1,
    kErrorCodeFieldNumber = 2,
    kMessageFieldNumber = 3,
    kCurrentValueFieldNumber = 4,
    kValidationRuleFieldNumber = 6,
  };
  // repeated string valid_values = 5;
  int valid_values_size() const;
  private:
  int _internal_valid_values_size() const;

  public:
  void clear_valid_values() ;
  const std::string& valid_values(int index) const;
  std::string* mutable_valid_values(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_valid_values(int index, Arg_&& value, Args_... args);
  std::string* add_valid_values();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_valid_values(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& valid_values() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_valid_values();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_valid_values() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_valid_values();

  public:
  // string field_name = 1;
  void clear_field_name() ;
  const std::string& field_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_field_name(Arg_&& arg, Args_... args);
  std::string* mutable_field_name();
  PROTOBUF_NODISCARD std::string* release_field_name();
  void set_allocated_field_name(std::string* value);

  private:
  const std::string& _internal_field_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_field_name(
      const std::string& value);
  std::string* _internal_mutable_field_name();

  public:
  // string error_code = 2;
  void clear_error_code() ;
  const std::string& error_code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_code(Arg_&& arg, Args_... args);
  std::string* mutable_error_code();
  PROTOBUF_NODISCARD std::string* release_error_code();
  void set_allocated_error_code(std::string* value);

  private:
  const std::string& _internal_error_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_code(
      const std::string& value);
  std::string* _internal_mutable_error_code();

  public:
  // string message = 3;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // string current_value = 4;
  void clear_current_value() ;
  const std::string& current_value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_current_value(Arg_&& arg, Args_... args);
  std::string* mutable_current_value();
  PROTOBUF_NODISCARD std::string* release_current_value();
  void set_allocated_current_value(std::string* value);

  private:
  const std::string& _internal_current_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_current_value(
      const std::string& value);
  std::string* _internal_mutable_current_value();

  public:
  // string validation_rule = 6;
  void clear_validation_rule() ;
  const std::string& validation_rule() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_validation_rule(Arg_&& arg, Args_... args);
  std::string* mutable_validation_rule();
  PROTOBUF_NODISCARD std::string* release_validation_rule();
  void set_allocated_validation_rule(std::string* value);

  private:
  const std::string& _internal_validation_rule() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_validation_rule(
      const std::string& value);
  std::string* _internal_mutable_validation_rule();

  public:
  // @@protoc_insertion_point(class_scope:blokus.FieldError)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      93, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const FieldError& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> valid_values_;
    ::google::protobuf::internal::ArenaStringPtr field_name_;
    ::google::protobuf::internal::ArenaStringPtr error_code_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::google::protobuf::internal::ArenaStringPtr current_value_;
    ::google::protobuf::internal::ArenaStringPtr validation_rule_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_error_2eproto;
};
// -------------------------------------------------------------------

class ErrorResponse_DetailsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  ErrorResponse_DetailsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ErrorResponse_DetailsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit ErrorResponse_DetailsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const ErrorResponse_DetailsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const ErrorResponse_DetailsEntry_DoNotUse*>(
        &_ErrorResponse_DetailsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_error_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      50, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class ErrorAction final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.ErrorAction) */ {
 public:
  inline ErrorAction() : ErrorAction(nullptr) {}
  ~ErrorAction() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ErrorAction* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ErrorAction));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ErrorAction(
      ::google::protobuf::internal::ConstantInitialized);

  inline ErrorAction(const ErrorAction& from) : ErrorAction(nullptr, from) {}
  inline ErrorAction(ErrorAction&& from) noexcept
      : ErrorAction(nullptr, std::move(from)) {}
  inline ErrorAction& operator=(const ErrorAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline ErrorAction& operator=(ErrorAction&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ErrorAction& default_instance() {
    return *internal_default_instance();
  }
  static inline const ErrorAction* internal_default_instance() {
    return reinterpret_cast<const ErrorAction*>(
        &_ErrorAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(ErrorAction& a, ErrorAction& b) { a.Swap(&b); }
  inline void Swap(ErrorAction* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ErrorAction* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ErrorAction* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ErrorAction>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ErrorAction& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ErrorAction& from) { ErrorAction::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ErrorAction* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.ErrorAction"; }

 protected:
  explicit ErrorAction(::google::protobuf::Arena* arena);
  ErrorAction(::google::protobuf::Arena* arena, const ErrorAction& from);
  ErrorAction(::google::protobuf::Arena* arena, ErrorAction&& from) noexcept
      : ErrorAction(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kActionIdFieldNumber = 1,
    kLabelFieldNumber = 2,
    kActionTypeFieldNumber = 3,
    kActionDataFieldNumber = 4,
    kIsPrimaryFieldNumber = 5,
  };
  // string action_id = 1;
  void clear_action_id() ;
  const std::string& action_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_action_id(Arg_&& arg, Args_... args);
  std::string* mutable_action_id();
  PROTOBUF_NODISCARD std::string* release_action_id();
  void set_allocated_action_id(std::string* value);

  private:
  const std::string& _internal_action_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action_id(
      const std::string& value);
  std::string* _internal_mutable_action_id();

  public:
  // string label = 2;
  void clear_label() ;
  const std::string& label() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_label(Arg_&& arg, Args_... args);
  std::string* mutable_label();
  PROTOBUF_NODISCARD std::string* release_label();
  void set_allocated_label(std::string* value);

  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(
      const std::string& value);
  std::string* _internal_mutable_label();

  public:
  // string action_type = 3;
  void clear_action_type() ;
  const std::string& action_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_action_type(Arg_&& arg, Args_... args);
  std::string* mutable_action_type();
  PROTOBUF_NODISCARD std::string* release_action_type();
  void set_allocated_action_type(std::string* value);

  private:
  const std::string& _internal_action_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action_type(
      const std::string& value);
  std::string* _internal_mutable_action_type();

  public:
  // string action_data = 4;
  void clear_action_data() ;
  const std::string& action_data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_action_data(Arg_&& arg, Args_... args);
  std::string* mutable_action_data();
  PROTOBUF_NODISCARD std::string* release_action_data();
  void set_allocated_action_data(std::string* value);

  private:
  const std::string& _internal_action_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action_data(
      const std::string& value);
  std::string* _internal_mutable_action_data();

  public:
  // bool is_primary = 5;
  void clear_is_primary() ;
  bool is_primary() const;
  void set_is_primary(bool value);

  private:
  bool _internal_is_primary() const;
  void _internal_set_is_primary(bool value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.ErrorAction)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      63, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ErrorAction& from_msg);
    ::google::protobuf::internal::ArenaStringPtr action_id_;
    ::google::protobuf::internal::ArenaStringPtr label_;
    ::google::protobuf::internal::ArenaStringPtr action_type_;
    ::google::protobuf::internal::ArenaStringPtr action_data_;
    bool is_primary_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_error_2eproto;
};
// -------------------------------------------------------------------

class ClientError final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.ClientError) */ {
 public:
  inline ClientError() : ClientError(nullptr) {}
  ~ClientError() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ClientError* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ClientError));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ClientError(
      ::google::protobuf::internal::ConstantInitialized);

  inline ClientError(const ClientError& from) : ClientError(nullptr, from) {}
  inline ClientError(ClientError&& from) noexcept
      : ClientError(nullptr, std::move(from)) {}
  inline ClientError& operator=(const ClientError& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientError& operator=(ClientError&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientError& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientError* internal_default_instance() {
    return reinterpret_cast<const ClientError*>(
        &_ClientError_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(ClientError& a, ClientError& b) { a.Swap(&b); }
  inline void Swap(ClientError* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientError* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientError* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ClientError>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ClientError& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ClientError& from) { ClientError::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ClientError* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.ClientError"; }

 protected:
  explicit ClientError(::google::protobuf::Arena* arena);
  ClientError(::google::protobuf::Arena* arena, const ClientError& from);
  ClientError(::google::protobuf::Arena* arena, ClientError&& from) noexcept
      : ClientError(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using ClientErrorType = ClientError_ClientErrorType;
  static constexpr ClientErrorType INVALID_REQUEST = ClientError_ClientErrorType_INVALID_REQUEST;
  static constexpr ClientErrorType UNSUPPORTED_VERSION = ClientError_ClientErrorType_UNSUPPORTED_VERSION;
  static constexpr ClientErrorType MALFORMED_MESSAGE = ClientError_ClientErrorType_MALFORMED_MESSAGE;
  static constexpr ClientErrorType MISSING_PARAMETERS = ClientError_ClientErrorType_MISSING_PARAMETERS;
  static constexpr ClientErrorType PROTOCOL_VIOLATION = ClientError_ClientErrorType_PROTOCOL_VIOLATION;
  static constexpr ClientErrorType CLIENT_TOO_OLD = ClientError_ClientErrorType_CLIENT_TOO_OLD;
  static constexpr ClientErrorType CLIENT_CONFIGURATION_ERROR = ClientError_ClientErrorType_CLIENT_CONFIGURATION_ERROR;
  static inline bool ClientErrorType_IsValid(int value) {
    return ClientError_ClientErrorType_IsValid(value);
  }
  static constexpr ClientErrorType ClientErrorType_MIN = ClientError_ClientErrorType_ClientErrorType_MIN;
  static constexpr ClientErrorType ClientErrorType_MAX = ClientError_ClientErrorType_ClientErrorType_MAX;
  static constexpr int ClientErrorType_ARRAYSIZE = ClientError_ClientErrorType_ClientErrorType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* ClientErrorType_descriptor() {
    return ClientError_ClientErrorType_descriptor();
  }
  template <typename T>
  static inline const std::string& ClientErrorType_Name(T value) {
    return ClientError_ClientErrorType_Name(value);
  }
  static inline bool ClientErrorType_Parse(absl::string_view name, ClientErrorType* value) {
    return ClientError_ClientErrorType_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kMissingParametersFieldNumber = 5,
    kInvalidParametersFieldNumber = 6,
    kClientVersionFieldNumber = 2,
    kRequiredVersionFieldNumber = 3,
    kUpdateUrlFieldNumber = 4,
    kConfigurationHelpFieldNumber = 7,
    kErrorTypeFieldNumber = 1,
  };
  // repeated string missing_parameters = 5;
  int missing_parameters_size() const;
  private:
  int _internal_missing_parameters_size() const;

  public:
  void clear_missing_parameters() ;
  const std::string& missing_parameters(int index) const;
  std::string* mutable_missing_parameters(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_missing_parameters(int index, Arg_&& value, Args_... args);
  std::string* add_missing_parameters();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_missing_parameters(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& missing_parameters() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_missing_parameters();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_missing_parameters() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_missing_parameters();

  public:
  // repeated string invalid_parameters = 6;
  int invalid_parameters_size() const;
  private:
  int _internal_invalid_parameters_size() const;

  public:
  void clear_invalid_parameters() ;
  const std::string& invalid_parameters(int index) const;
  std::string* mutable_invalid_parameters(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_invalid_parameters(int index, Arg_&& value, Args_... args);
  std::string* add_invalid_parameters();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_invalid_parameters(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& invalid_parameters() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_invalid_parameters();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_invalid_parameters() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_invalid_parameters();

  public:
  // string client_version = 2;
  void clear_client_version() ;
  const std::string& client_version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_client_version(Arg_&& arg, Args_... args);
  std::string* mutable_client_version();
  PROTOBUF_NODISCARD std::string* release_client_version();
  void set_allocated_client_version(std::string* value);

  private:
  const std::string& _internal_client_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_version(
      const std::string& value);
  std::string* _internal_mutable_client_version();

  public:
  // string required_version = 3;
  void clear_required_version() ;
  const std::string& required_version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_required_version(Arg_&& arg, Args_... args);
  std::string* mutable_required_version();
  PROTOBUF_NODISCARD std::string* release_required_version();
  void set_allocated_required_version(std::string* value);

  private:
  const std::string& _internal_required_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_required_version(
      const std::string& value);
  std::string* _internal_mutable_required_version();

  public:
  // string update_url = 4;
  void clear_update_url() ;
  const std::string& update_url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_update_url(Arg_&& arg, Args_... args);
  std::string* mutable_update_url();
  PROTOBUF_NODISCARD std::string* release_update_url();
  void set_allocated_update_url(std::string* value);

  private:
  const std::string& _internal_update_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_update_url(
      const std::string& value);
  std::string* _internal_mutable_update_url();

  public:
  // string configuration_help = 7;
  void clear_configuration_help() ;
  const std::string& configuration_help() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_configuration_help(Arg_&& arg, Args_... args);
  std::string* mutable_configuration_help();
  PROTOBUF_NODISCARD std::string* release_configuration_help();
  void set_allocated_configuration_help(std::string* value);

  private:
  const std::string& _internal_configuration_help() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_configuration_help(
      const std::string& value);
  std::string* _internal_mutable_configuration_help();

  public:
  // .blokus.ClientError.ClientErrorType error_type = 1;
  void clear_error_type() ;
  ::blokus::ClientError_ClientErrorType error_type() const;
  void set_error_type(::blokus::ClientError_ClientErrorType value);

  private:
  ::blokus::ClientError_ClientErrorType _internal_error_type() const;
  void _internal_set_error_type(::blokus::ClientError_ClientErrorType value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.ClientError)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 0,
      121, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ClientError& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> missing_parameters_;
    ::google::protobuf::RepeatedPtrField<std::string> invalid_parameters_;
    ::google::protobuf::internal::ArenaStringPtr client_version_;
    ::google::protobuf::internal::ArenaStringPtr required_version_;
    ::google::protobuf::internal::ArenaStringPtr update_url_;
    ::google::protobuf::internal::ArenaStringPtr configuration_help_;
    int error_type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_error_2eproto;
};
// -------------------------------------------------------------------

class UserFriendlyError final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.UserFriendlyError) */ {
 public:
  inline UserFriendlyError() : UserFriendlyError(nullptr) {}
  ~UserFriendlyError() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(UserFriendlyError* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(UserFriendlyError));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UserFriendlyError(
      ::google::protobuf::internal::ConstantInitialized);

  inline UserFriendlyError(const UserFriendlyError& from) : UserFriendlyError(nullptr, from) {}
  inline UserFriendlyError(UserFriendlyError&& from) noexcept
      : UserFriendlyError(nullptr, std::move(from)) {}
  inline UserFriendlyError& operator=(const UserFriendlyError& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserFriendlyError& operator=(UserFriendlyError&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserFriendlyError& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserFriendlyError* internal_default_instance() {
    return reinterpret_cast<const UserFriendlyError*>(
        &_UserFriendlyError_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(UserFriendlyError& a, UserFriendlyError& b) { a.Swap(&b); }
  inline void Swap(UserFriendlyError* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserFriendlyError* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserFriendlyError* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<UserFriendlyError>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserFriendlyError& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UserFriendlyError& from) { UserFriendlyError::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(UserFriendlyError* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.UserFriendlyError"; }

 protected:
  explicit UserFriendlyError(::google::protobuf::Arena* arena);
  UserFriendlyError(::google::protobuf::Arena* arena, const UserFriendlyError& from);
  UserFriendlyError(::google::protobuf::Arena* arena, UserFriendlyError&& from) noexcept
      : UserFriendlyError(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kActionsFieldNumber = 4,
    kTitleFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kIconFieldNumber = 3,
    kShowTechnicalDetailsFieldNumber = 5,
    kDismissibleFieldNumber = 6,
    kAutoDismissSecondsFieldNumber = 7,
  };
  // repeated .blokus.ErrorAction actions = 4;
  int actions_size() const;
  private:
  int _internal_actions_size() const;

  public:
  void clear_actions() ;
  ::blokus::ErrorAction* mutable_actions(int index);
  ::google::protobuf::RepeatedPtrField<::blokus::ErrorAction>* mutable_actions();

  private:
  const ::google::protobuf::RepeatedPtrField<::blokus::ErrorAction>& _internal_actions() const;
  ::google::protobuf::RepeatedPtrField<::blokus::ErrorAction>* _internal_mutable_actions();
  public:
  const ::blokus::ErrorAction& actions(int index) const;
  ::blokus::ErrorAction* add_actions();
  const ::google::protobuf::RepeatedPtrField<::blokus::ErrorAction>& actions() const;
  // string title = 1;
  void clear_title() ;
  const std::string& title() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* value);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string description = 2;
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* value);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // string icon = 3;
  void clear_icon() ;
  const std::string& icon() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_icon(Arg_&& arg, Args_... args);
  std::string* mutable_icon();
  PROTOBUF_NODISCARD std::string* release_icon();
  void set_allocated_icon(std::string* value);

  private:
  const std::string& _internal_icon() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_icon(
      const std::string& value);
  std::string* _internal_mutable_icon();

  public:
  // bool show_technical_details = 5;
  void clear_show_technical_details() ;
  bool show_technical_details() const;
  void set_show_technical_details(bool value);

  private:
  bool _internal_show_technical_details() const;
  void _internal_set_show_technical_details(bool value);

  public:
  // bool dismissible = 6;
  void clear_dismissible() ;
  bool dismissible() const;
  void set_dismissible(bool value);

  private:
  bool _internal_dismissible() const;
  void _internal_set_dismissible(bool value);

  public:
  // int32 auto_dismiss_seconds = 7;
  void clear_auto_dismiss_seconds() ;
  ::int32_t auto_dismiss_seconds() const;
  void set_auto_dismiss_seconds(::int32_t value);

  private:
  ::int32_t _internal_auto_dismiss_seconds() const;
  void _internal_set_auto_dismiss_seconds(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.UserFriendlyError)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 1,
      53, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UserFriendlyError& from_msg);
    ::google::protobuf::RepeatedPtrField< ::blokus::ErrorAction > actions_;
    ::google::protobuf::internal::ArenaStringPtr title_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    ::google::protobuf::internal::ArenaStringPtr icon_;
    bool show_technical_details_;
    bool dismissible_;
    ::int32_t auto_dismiss_seconds_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_error_2eproto;
};
// -------------------------------------------------------------------

class ServerError final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.ServerError) */ {
 public:
  inline ServerError() : ServerError(nullptr) {}
  ~ServerError() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ServerError* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ServerError));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ServerError(
      ::google::protobuf::internal::ConstantInitialized);

  inline ServerError(const ServerError& from) : ServerError(nullptr, from) {}
  inline ServerError(ServerError&& from) noexcept
      : ServerError(nullptr, std::move(from)) {}
  inline ServerError& operator=(const ServerError& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerError& operator=(ServerError&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerError& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerError* internal_default_instance() {
    return reinterpret_cast<const ServerError*>(
        &_ServerError_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(ServerError& a, ServerError& b) { a.Swap(&b); }
  inline void Swap(ServerError* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerError* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerError* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ServerError>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ServerError& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ServerError& from) { ServerError::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ServerError* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.ServerError"; }

 protected:
  explicit ServerError(::google::protobuf::Arena* arena);
  ServerError(::google::protobuf::Arena* arena, const ServerError& from);
  ServerError(::google::protobuf::Arena* arena, ServerError&& from) noexcept
      : ServerError(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using ServerErrorType = ServerError_ServerErrorType;
  static constexpr ServerErrorType INTERNAL_ERROR = ServerError_ServerErrorType_INTERNAL_ERROR;
  static constexpr ServerErrorType DATABASE_ERROR = ServerError_ServerErrorType_DATABASE_ERROR;
  static constexpr ServerErrorType SERVICE_UNAVAILABLE = ServerError_ServerErrorType_SERVICE_UNAVAILABLE;
  static constexpr ServerErrorType MAINTENANCE_MODE = ServerError_ServerErrorType_MAINTENANCE_MODE;
  static constexpr ServerErrorType OVERLOADED = ServerError_ServerErrorType_OVERLOADED;
  static constexpr ServerErrorType CONFIGURATION_ERROR = ServerError_ServerErrorType_CONFIGURATION_ERROR;
  static constexpr ServerErrorType DEPENDENCY_FAILURE = ServerError_ServerErrorType_DEPENDENCY_FAILURE;
  static inline bool ServerErrorType_IsValid(int value) {
    return ServerError_ServerErrorType_IsValid(value);
  }
  static constexpr ServerErrorType ServerErrorType_MIN = ServerError_ServerErrorType_ServerErrorType_MIN;
  static constexpr ServerErrorType ServerErrorType_MAX = ServerError_ServerErrorType_ServerErrorType_MAX;
  static constexpr int ServerErrorType_ARRAYSIZE = ServerError_ServerErrorType_ServerErrorType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* ServerErrorType_descriptor() {
    return ServerError_ServerErrorType_descriptor();
  }
  template <typename T>
  static inline const std::string& ServerErrorType_Name(T value) {
    return ServerError_ServerErrorType_Name(value);
  }
  static inline bool ServerErrorType_Parse(absl::string_view name, ServerErrorType* value) {
    return ServerError_ServerErrorType_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kAffectedFeaturesFieldNumber = 6,
    kWorkaroundsFieldNumber = 7,
    kServiceNameFieldNumber = 2,
    kErrorMessageFieldNumber = 3,
    kMaintenanceUrlFieldNumber = 5,
    kEstimatedRecoveryFieldNumber = 4,
    kErrorTypeFieldNumber = 1,
    kPartialServiceFieldNumber = 8,
  };
  // repeated string affected_features = 6;
  int affected_features_size() const;
  private:
  int _internal_affected_features_size() const;

  public:
  void clear_affected_features() ;
  const std::string& affected_features(int index) const;
  std::string* mutable_affected_features(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_affected_features(int index, Arg_&& value, Args_... args);
  std::string* add_affected_features();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_affected_features(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& affected_features() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_affected_features();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_affected_features() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_affected_features();

  public:
  // repeated string workarounds = 7;
  int workarounds_size() const;
  private:
  int _internal_workarounds_size() const;

  public:
  void clear_workarounds() ;
  const std::string& workarounds(int index) const;
  std::string* mutable_workarounds(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_workarounds(int index, Arg_&& value, Args_... args);
  std::string* add_workarounds();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_workarounds(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& workarounds() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_workarounds();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_workarounds() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_workarounds();

  public:
  // string service_name = 2;
  void clear_service_name() ;
  const std::string& service_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_service_name(Arg_&& arg, Args_... args);
  std::string* mutable_service_name();
  PROTOBUF_NODISCARD std::string* release_service_name();
  void set_allocated_service_name(std::string* value);

  private:
  const std::string& _internal_service_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_name(
      const std::string& value);
  std::string* _internal_mutable_service_name();

  public:
  // string error_message = 3;
  void clear_error_message() ;
  const std::string& error_message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_message(Arg_&& arg, Args_... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* value);

  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(
      const std::string& value);
  std::string* _internal_mutable_error_message();

  public:
  // string maintenance_url = 5;
  void clear_maintenance_url() ;
  const std::string& maintenance_url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_maintenance_url(Arg_&& arg, Args_... args);
  std::string* mutable_maintenance_url();
  PROTOBUF_NODISCARD std::string* release_maintenance_url();
  void set_allocated_maintenance_url(std::string* value);

  private:
  const std::string& _internal_maintenance_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_maintenance_url(
      const std::string& value);
  std::string* _internal_mutable_maintenance_url();

  public:
  // .google.protobuf.Timestamp estimated_recovery = 4;
  bool has_estimated_recovery() const;
  void clear_estimated_recovery() ;
  const ::google::protobuf::Timestamp& estimated_recovery() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_estimated_recovery();
  ::google::protobuf::Timestamp* mutable_estimated_recovery();
  void set_allocated_estimated_recovery(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_estimated_recovery(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_estimated_recovery();

  private:
  const ::google::protobuf::Timestamp& _internal_estimated_recovery() const;
  ::google::protobuf::Timestamp* _internal_mutable_estimated_recovery();

  public:
  // .blokus.ServerError.ServerErrorType error_type = 1;
  void clear_error_type() ;
  ::blokus::ServerError_ServerErrorType error_type() const;
  void set_error_type(::blokus::ServerError_ServerErrorType value);

  private:
  ::blokus::ServerError_ServerErrorType _internal_error_type() const;
  void _internal_set_error_type(::blokus::ServerError_ServerErrorType value);

  public:
  // bool partial_service = 8;
  void clear_partial_service() ;
  bool partial_service() const;
  void set_partial_service(bool value);

  private:
  bool _internal_partial_service() const;
  void _internal_set_partial_service(bool value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.ServerError)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 1,
      103, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ServerError& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> affected_features_;
    ::google::protobuf::RepeatedPtrField<std::string> workarounds_;
    ::google::protobuf::internal::ArenaStringPtr service_name_;
    ::google::protobuf::internal::ArenaStringPtr error_message_;
    ::google::protobuf::internal::ArenaStringPtr maintenance_url_;
    ::google::protobuf::Timestamp* estimated_recovery_;
    int error_type_;
    bool partial_service_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_error_2eproto;
};
// -------------------------------------------------------------------

class RateLimitExceeded final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.RateLimitExceeded) */ {
 public:
  inline RateLimitExceeded() : RateLimitExceeded(nullptr) {}
  ~RateLimitExceeded() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RateLimitExceeded* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RateLimitExceeded));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RateLimitExceeded(
      ::google::protobuf::internal::ConstantInitialized);

  inline RateLimitExceeded(const RateLimitExceeded& from) : RateLimitExceeded(nullptr, from) {}
  inline RateLimitExceeded(RateLimitExceeded&& from) noexcept
      : RateLimitExceeded(nullptr, std::move(from)) {}
  inline RateLimitExceeded& operator=(const RateLimitExceeded& from) {
    CopyFrom(from);
    return *this;
  }
  inline RateLimitExceeded& operator=(RateLimitExceeded&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RateLimitExceeded& default_instance() {
    return *internal_default_instance();
  }
  static inline const RateLimitExceeded* internal_default_instance() {
    return reinterpret_cast<const RateLimitExceeded*>(
        &_RateLimitExceeded_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(RateLimitExceeded& a, RateLimitExceeded& b) { a.Swap(&b); }
  inline void Swap(RateLimitExceeded* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RateLimitExceeded* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RateLimitExceeded* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RateLimitExceeded>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RateLimitExceeded& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RateLimitExceeded& from) { RateLimitExceeded::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RateLimitExceeded* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.RateLimitExceeded"; }

 protected:
  explicit RateLimitExceeded(::google::protobuf::Arena* arena);
  RateLimitExceeded(::google::protobuf::Arena* arena, const RateLimitExceeded& from);
  RateLimitExceeded(::google::protobuf::Arena* arena, RateLimitExceeded&& from) noexcept
      : RateLimitExceeded(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRateLimitInfoFieldNumber = 8,
    kLimitTypeFieldNumber = 1,
    kClientIpFieldNumber = 6,
    kRateLimitKeyFieldNumber = 7,
    kResetTimeFieldNumber = 5,
    kCurrentCountFieldNumber = 2,
    kLimitCountFieldNumber = 3,
    kResetAfterSecondsFieldNumber = 4,
  };
  // map<string, int32> rate_limit_info = 8;
  int rate_limit_info_size() const;
  private:
  int _internal_rate_limit_info_size() const;

  public:
  void clear_rate_limit_info() ;
  const ::google::protobuf::Map<std::string, ::int32_t>& rate_limit_info() const;
  ::google::protobuf::Map<std::string, ::int32_t>* mutable_rate_limit_info();

  private:
  const ::google::protobuf::Map<std::string, ::int32_t>& _internal_rate_limit_info() const;
  ::google::protobuf::Map<std::string, ::int32_t>* _internal_mutable_rate_limit_info();

  public:
  // string limit_type = 1;
  void clear_limit_type() ;
  const std::string& limit_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_limit_type(Arg_&& arg, Args_... args);
  std::string* mutable_limit_type();
  PROTOBUF_NODISCARD std::string* release_limit_type();
  void set_allocated_limit_type(std::string* value);

  private:
  const std::string& _internal_limit_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_limit_type(
      const std::string& value);
  std::string* _internal_mutable_limit_type();

  public:
  // string client_ip = 6;
  void clear_client_ip() ;
  const std::string& client_ip() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_client_ip(Arg_&& arg, Args_... args);
  std::string* mutable_client_ip();
  PROTOBUF_NODISCARD std::string* release_client_ip();
  void set_allocated_client_ip(std::string* value);

  private:
  const std::string& _internal_client_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_ip(
      const std::string& value);
  std::string* _internal_mutable_client_ip();

  public:
  // string rate_limit_key = 7;
  void clear_rate_limit_key() ;
  const std::string& rate_limit_key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_rate_limit_key(Arg_&& arg, Args_... args);
  std::string* mutable_rate_limit_key();
  PROTOBUF_NODISCARD std::string* release_rate_limit_key();
  void set_allocated_rate_limit_key(std::string* value);

  private:
  const std::string& _internal_rate_limit_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rate_limit_key(
      const std::string& value);
  std::string* _internal_mutable_rate_limit_key();

  public:
  // .google.protobuf.Timestamp reset_time = 5;
  bool has_reset_time() const;
  void clear_reset_time() ;
  const ::google::protobuf::Timestamp& reset_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_reset_time();
  ::google::protobuf::Timestamp* mutable_reset_time();
  void set_allocated_reset_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_reset_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_reset_time();

  private:
  const ::google::protobuf::Timestamp& _internal_reset_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_reset_time();

  public:
  // int32 current_count = 2;
  void clear_current_count() ;
  ::int32_t current_count() const;
  void set_current_count(::int32_t value);

  private:
  ::int32_t _internal_current_count() const;
  void _internal_set_current_count(::int32_t value);

  public:
  // int32 limit_count = 3;
  void clear_limit_count() ;
  ::int32_t limit_count() const;
  void set_limit_count(::int32_t value);

  private:
  ::int32_t _internal_limit_count() const;
  void _internal_set_limit_count(::int32_t value);

  public:
  // int32 reset_after_seconds = 4;
  void clear_reset_after_seconds() ;
  ::int32_t reset_after_seconds() const;
  void set_reset_after_seconds(::int32_t value);

  private:
  ::int32_t _internal_reset_after_seconds() const;
  void _internal_set_reset_after_seconds(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.RateLimitExceeded)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 2,
      89, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RateLimitExceeded& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::MapField<RateLimitExceeded_RateLimitInfoEntry_DoNotUse, std::string, ::int32_t,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>
        rate_limit_info_;
    ::google::protobuf::internal::ArenaStringPtr limit_type_;
    ::google::protobuf::internal::ArenaStringPtr client_ip_;
    ::google::protobuf::internal::ArenaStringPtr rate_limit_key_;
    ::google::protobuf::Timestamp* reset_time_;
    ::int32_t current_count_;
    ::int32_t limit_count_;
    ::int32_t reset_after_seconds_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_error_2eproto;
};
// -------------------------------------------------------------------

class ErrorResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.ErrorResponse) */ {
 public:
  inline ErrorResponse() : ErrorResponse(nullptr) {}
  ~ErrorResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ErrorResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ErrorResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ErrorResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline ErrorResponse(const ErrorResponse& from) : ErrorResponse(nullptr, from) {}
  inline ErrorResponse(ErrorResponse&& from) noexcept
      : ErrorResponse(nullptr, std::move(from)) {}
  inline ErrorResponse& operator=(const ErrorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ErrorResponse& operator=(ErrorResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ErrorResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ErrorResponse* internal_default_instance() {
    return reinterpret_cast<const ErrorResponse*>(
        &_ErrorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ErrorResponse& a, ErrorResponse& b) { a.Swap(&b); }
  inline void Swap(ErrorResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ErrorResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ErrorResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ErrorResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ErrorResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ErrorResponse& from) { ErrorResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ErrorResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.ErrorResponse"; }

 protected:
  explicit ErrorResponse(::google::protobuf::Arena* arena);
  ErrorResponse(::google::protobuf::Arena* arena, const ErrorResponse& from);
  ErrorResponse(::google::protobuf::Arena* arena, ErrorResponse&& from) noexcept
      : ErrorResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFieldErrorsFieldNumber = 7,
    kDetailsFieldNumber = 8,
    kSuggestedActionsFieldNumber = 9,
    kErrorCodeFieldNumber = 4,
    kMessageFieldNumber = 5,
    kTechnicalMessageFieldNumber = 6,
    kHelpUrlFieldNumber = 10,
    kContactSupportFieldNumber = 11,
    kTraceIdFieldNumber = 13,
    kServerIdFieldNumber = 14,
    kTimestampFieldNumber = 12,
    kResultCodeFieldNumber = 1,
    kCategoryFieldNumber = 2,
    kSeverityFieldNumber = 3,
    kRetryableFieldNumber = 15,
    kRetryAfterSecondsFieldNumber = 16,
    kMaxRetriesFieldNumber = 17,
  };
  // repeated .blokus.FieldError field_errors = 7;
  int field_errors_size() const;
  private:
  int _internal_field_errors_size() const;

  public:
  void clear_field_errors() ;
  ::blokus::FieldError* mutable_field_errors(int index);
  ::google::protobuf::RepeatedPtrField<::blokus::FieldError>* mutable_field_errors();

  private:
  const ::google::protobuf::RepeatedPtrField<::blokus::FieldError>& _internal_field_errors() const;
  ::google::protobuf::RepeatedPtrField<::blokus::FieldError>* _internal_mutable_field_errors();
  public:
  const ::blokus::FieldError& field_errors(int index) const;
  ::blokus::FieldError* add_field_errors();
  const ::google::protobuf::RepeatedPtrField<::blokus::FieldError>& field_errors() const;
  // map<string, string> details = 8;
  int details_size() const;
  private:
  int _internal_details_size() const;

  public:
  void clear_details() ;
  const ::google::protobuf::Map<std::string, std::string>& details() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_details();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_details() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_details();

  public:
  // repeated string suggested_actions = 9;
  int suggested_actions_size() const;
  private:
  int _internal_suggested_actions_size() const;

  public:
  void clear_suggested_actions() ;
  const std::string& suggested_actions(int index) const;
  std::string* mutable_suggested_actions(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_suggested_actions(int index, Arg_&& value, Args_... args);
  std::string* add_suggested_actions();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_suggested_actions(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& suggested_actions() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_suggested_actions();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_suggested_actions() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_suggested_actions();

  public:
  // string error_code = 4;
  void clear_error_code() ;
  const std::string& error_code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_code(Arg_&& arg, Args_... args);
  std::string* mutable_error_code();
  PROTOBUF_NODISCARD std::string* release_error_code();
  void set_allocated_error_code(std::string* value);

  private:
  const std::string& _internal_error_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_code(
      const std::string& value);
  std::string* _internal_mutable_error_code();

  public:
  // string message = 5;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // string technical_message = 6;
  void clear_technical_message() ;
  const std::string& technical_message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_technical_message(Arg_&& arg, Args_... args);
  std::string* mutable_technical_message();
  PROTOBUF_NODISCARD std::string* release_technical_message();
  void set_allocated_technical_message(std::string* value);

  private:
  const std::string& _internal_technical_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_technical_message(
      const std::string& value);
  std::string* _internal_mutable_technical_message();

  public:
  // string help_url = 10;
  void clear_help_url() ;
  const std::string& help_url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_help_url(Arg_&& arg, Args_... args);
  std::string* mutable_help_url();
  PROTOBUF_NODISCARD std::string* release_help_url();
  void set_allocated_help_url(std::string* value);

  private:
  const std::string& _internal_help_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_help_url(
      const std::string& value);
  std::string* _internal_mutable_help_url();

  public:
  // string contact_support = 11;
  void clear_contact_support() ;
  const std::string& contact_support() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_contact_support(Arg_&& arg, Args_... args);
  std::string* mutable_contact_support();
  PROTOBUF_NODISCARD std::string* release_contact_support();
  void set_allocated_contact_support(std::string* value);

  private:
  const std::string& _internal_contact_support() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contact_support(
      const std::string& value);
  std::string* _internal_mutable_contact_support();

  public:
  // string trace_id = 13;
  void clear_trace_id() ;
  const std::string& trace_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_trace_id(Arg_&& arg, Args_... args);
  std::string* mutable_trace_id();
  PROTOBUF_NODISCARD std::string* release_trace_id();
  void set_allocated_trace_id(std::string* value);

  private:
  const std::string& _internal_trace_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trace_id(
      const std::string& value);
  std::string* _internal_mutable_trace_id();

  public:
  // string server_id = 14;
  void clear_server_id() ;
  const std::string& server_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_server_id(Arg_&& arg, Args_... args);
  std::string* mutable_server_id();
  PROTOBUF_NODISCARD std::string* release_server_id();
  void set_allocated_server_id(std::string* value);

  private:
  const std::string& _internal_server_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_id(
      const std::string& value);
  std::string* _internal_mutable_server_id();

  public:
  // .google.protobuf.Timestamp timestamp = 12;
  bool has_timestamp() const;
  void clear_timestamp() ;
  const ::google::protobuf::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_timestamp();
  ::google::protobuf::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_timestamp(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_timestamp();

  private:
  const ::google::protobuf::Timestamp& _internal_timestamp() const;
  ::google::protobuf::Timestamp* _internal_mutable_timestamp();

  public:
  // .blokus.ResultCode result_code = 1;
  void clear_result_code() ;
  ::blokus::ResultCode result_code() const;
  void set_result_code(::blokus::ResultCode value);

  private:
  ::blokus::ResultCode _internal_result_code() const;
  void _internal_set_result_code(::blokus::ResultCode value);

  public:
  // .blokus.ErrorCategory category = 2;
  void clear_category() ;
  ::blokus::ErrorCategory category() const;
  void set_category(::blokus::ErrorCategory value);

  private:
  ::blokus::ErrorCategory _internal_category() const;
  void _internal_set_category(::blokus::ErrorCategory value);

  public:
  // .blokus.ErrorSeverity severity = 3;
  void clear_severity() ;
  ::blokus::ErrorSeverity severity() const;
  void set_severity(::blokus::ErrorSeverity value);

  private:
  ::blokus::ErrorSeverity _internal_severity() const;
  void _internal_set_severity(::blokus::ErrorSeverity value);

  public:
  // bool retryable = 15;
  void clear_retryable() ;
  bool retryable() const;
  void set_retryable(bool value);

  private:
  bool _internal_retryable() const;
  void _internal_set_retryable(bool value);

  public:
  // int32 retry_after_seconds = 16;
  void clear_retry_after_seconds() ;
  ::int32_t retry_after_seconds() const;
  void set_retry_after_seconds(::int32_t value);

  private:
  ::int32_t _internal_retry_after_seconds() const;
  void _internal_set_retry_after_seconds(::int32_t value);

  public:
  // int32 max_retries = 17;
  void clear_max_retries() ;
  ::int32_t max_retries() const;
  void set_max_retries(::int32_t value);

  private:
  ::int32_t _internal_max_retries() const;
  void _internal_set_max_retries(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.ErrorResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 17, 3,
      143, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ErrorResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::blokus::FieldError > field_errors_;
    ::google::protobuf::internal::MapField<ErrorResponse_DetailsEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        details_;
    ::google::protobuf::RepeatedPtrField<std::string> suggested_actions_;
    ::google::protobuf::internal::ArenaStringPtr error_code_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::google::protobuf::internal::ArenaStringPtr technical_message_;
    ::google::protobuf::internal::ArenaStringPtr help_url_;
    ::google::protobuf::internal::ArenaStringPtr contact_support_;
    ::google::protobuf::internal::ArenaStringPtr trace_id_;
    ::google::protobuf::internal::ArenaStringPtr server_id_;
    ::google::protobuf::Timestamp* timestamp_;
    int result_code_;
    int category_;
    int severity_;
    bool retryable_;
    ::int32_t retry_after_seconds_;
    ::int32_t max_retries_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_error_2eproto;
};
// -------------------------------------------------------------------

class ConnectionError final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.ConnectionError) */ {
 public:
  inline ConnectionError() : ConnectionError(nullptr) {}
  ~ConnectionError() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ConnectionError* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ConnectionError));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConnectionError(
      ::google::protobuf::internal::ConstantInitialized);

  inline ConnectionError(const ConnectionError& from) : ConnectionError(nullptr, from) {}
  inline ConnectionError(ConnectionError&& from) noexcept
      : ConnectionError(nullptr, std::move(from)) {}
  inline ConnectionError& operator=(const ConnectionError& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectionError& operator=(ConnectionError&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConnectionError& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectionError* internal_default_instance() {
    return reinterpret_cast<const ConnectionError*>(
        &_ConnectionError_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(ConnectionError& a, ConnectionError& b) { a.Swap(&b); }
  inline void Swap(ConnectionError* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectionError* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConnectionError* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ConnectionError>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConnectionError& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ConnectionError& from) { ConnectionError::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ConnectionError* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.ConnectionError"; }

 protected:
  explicit ConnectionError(::google::protobuf::Arena* arena);
  ConnectionError(::google::protobuf::Arena* arena, const ConnectionError& from);
  ConnectionError(::google::protobuf::Arena* arena, ConnectionError&& from) noexcept
      : ConnectionError(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using ConnectionErrorType = ConnectionError_ConnectionErrorType;
  static constexpr ConnectionErrorType CONNECTION_REFUSED = ConnectionError_ConnectionErrorType_CONNECTION_REFUSED;
  static constexpr ConnectionErrorType CONNECTION_TIMEOUT = ConnectionError_ConnectionErrorType_CONNECTION_TIMEOUT;
  static constexpr ConnectionErrorType CONNECTION_RESET = ConnectionError_ConnectionErrorType_CONNECTION_RESET;
  static constexpr ConnectionErrorType HANDSHAKE_FAILED = ConnectionError_ConnectionErrorType_HANDSHAKE_FAILED;
  static constexpr ConnectionErrorType PROTOCOL_MISMATCH = ConnectionError_ConnectionErrorType_PROTOCOL_MISMATCH;
  static constexpr ConnectionErrorType AUTHENTICATION_FAILED = ConnectionError_ConnectionErrorType_AUTHENTICATION_FAILED;
  static constexpr ConnectionErrorType SESSION_TERMINATED = ConnectionError_ConnectionErrorType_SESSION_TERMINATED;
  static constexpr ConnectionErrorType KEEPALIVE_TIMEOUT = ConnectionError_ConnectionErrorType_KEEPALIVE_TIMEOUT;
  static inline bool ConnectionErrorType_IsValid(int value) {
    return ConnectionError_ConnectionErrorType_IsValid(value);
  }
  static constexpr ConnectionErrorType ConnectionErrorType_MIN = ConnectionError_ConnectionErrorType_ConnectionErrorType_MIN;
  static constexpr ConnectionErrorType ConnectionErrorType_MAX = ConnectionError_ConnectionErrorType_ConnectionErrorType_MAX;
  static constexpr int ConnectionErrorType_ARRAYSIZE = ConnectionError_ConnectionErrorType_ConnectionErrorType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* ConnectionErrorType_descriptor() {
    return ConnectionError_ConnectionErrorType_descriptor();
  }
  template <typename T>
  static inline const std::string& ConnectionErrorType_Name(T value) {
    return ConnectionError_ConnectionErrorType_Name(value);
  }
  static inline bool ConnectionErrorType_Parse(absl::string_view name, ConnectionErrorType* value) {
    return ConnectionError_ConnectionErrorType_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kAlternateServersFieldNumber = 7,
    kReasonFieldNumber = 2,
    kDisconnectedAtFieldNumber = 3,
    kErrorTypeFieldNumber = 1,
    kAutoReconnectEnabledFieldNumber = 4,
    kReconnectDelaySecondsFieldNumber = 5,
    kMaxReconnectAttemptsFieldNumber = 6,
  };
  // repeated string alternate_servers = 7;
  int alternate_servers_size() const;
  private:
  int _internal_alternate_servers_size() const;

  public:
  void clear_alternate_servers() ;
  const std::string& alternate_servers(int index) const;
  std::string* mutable_alternate_servers(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_alternate_servers(int index, Arg_&& value, Args_... args);
  std::string* add_alternate_servers();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_alternate_servers(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& alternate_servers() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_alternate_servers();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_alternate_servers() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_alternate_servers();

  public:
  // string reason = 2;
  void clear_reason() ;
  const std::string& reason() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reason(Arg_&& arg, Args_... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* value);

  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(
      const std::string& value);
  std::string* _internal_mutable_reason();

  public:
  // .google.protobuf.Timestamp disconnected_at = 3;
  bool has_disconnected_at() const;
  void clear_disconnected_at() ;
  const ::google::protobuf::Timestamp& disconnected_at() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_disconnected_at();
  ::google::protobuf::Timestamp* mutable_disconnected_at();
  void set_allocated_disconnected_at(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_disconnected_at(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_disconnected_at();

  private:
  const ::google::protobuf::Timestamp& _internal_disconnected_at() const;
  ::google::protobuf::Timestamp* _internal_mutable_disconnected_at();

  public:
  // .blokus.ConnectionError.ConnectionErrorType error_type = 1;
  void clear_error_type() ;
  ::blokus::ConnectionError_ConnectionErrorType error_type() const;
  void set_error_type(::blokus::ConnectionError_ConnectionErrorType value);

  private:
  ::blokus::ConnectionError_ConnectionErrorType _internal_error_type() const;
  void _internal_set_error_type(::blokus::ConnectionError_ConnectionErrorType value);

  public:
  // bool auto_reconnect_enabled = 4;
  void clear_auto_reconnect_enabled() ;
  bool auto_reconnect_enabled() const;
  void set_auto_reconnect_enabled(bool value);

  private:
  bool _internal_auto_reconnect_enabled() const;
  void _internal_set_auto_reconnect_enabled(bool value);

  public:
  // int32 reconnect_delay_seconds = 5;
  void clear_reconnect_delay_seconds() ;
  ::int32_t reconnect_delay_seconds() const;
  void set_reconnect_delay_seconds(::int32_t value);

  private:
  ::int32_t _internal_reconnect_delay_seconds() const;
  void _internal_set_reconnect_delay_seconds(::int32_t value);

  public:
  // int32 max_reconnect_attempts = 6;
  void clear_max_reconnect_attempts() ;
  ::int32_t max_reconnect_attempts() const;
  void set_max_reconnect_attempts(::int32_t value);

  private:
  ::int32_t _internal_max_reconnect_attempts() const;
  void _internal_set_max_reconnect_attempts(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.ConnectionError)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 1,
      54, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ConnectionError& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> alternate_servers_;
    ::google::protobuf::internal::ArenaStringPtr reason_;
    ::google::protobuf::Timestamp* disconnected_at_;
    int error_type_;
    bool auto_reconnect_enabled_;
    ::int32_t reconnect_delay_seconds_;
    ::int32_t max_reconnect_attempts_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_error_2eproto;
};
// -------------------------------------------------------------------

class GameErrorDetails final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.GameErrorDetails) */ {
 public:
  inline GameErrorDetails() : GameErrorDetails(nullptr) {}
  ~GameErrorDetails() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GameErrorDetails* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GameErrorDetails));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameErrorDetails(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameErrorDetails(const GameErrorDetails& from) : GameErrorDetails(nullptr, from) {}
  inline GameErrorDetails(GameErrorDetails&& from) noexcept
      : GameErrorDetails(nullptr, std::move(from)) {}
  inline GameErrorDetails& operator=(const GameErrorDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameErrorDetails& operator=(GameErrorDetails&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameErrorDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameErrorDetails* internal_default_instance() {
    return reinterpret_cast<const GameErrorDetails*>(
        &_GameErrorDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(GameErrorDetails& a, GameErrorDetails& b) { a.Swap(&b); }
  inline void Swap(GameErrorDetails* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameErrorDetails* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameErrorDetails* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GameErrorDetails>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameErrorDetails& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameErrorDetails& from) { GameErrorDetails::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GameErrorDetails* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.GameErrorDetails"; }

 protected:
  explicit GameErrorDetails(::google::protobuf::Arena* arena);
  GameErrorDetails(::google::protobuf::Arena* arena, const GameErrorDetails& from);
  GameErrorDetails(::google::protobuf::Arena* arena, GameErrorDetails&& from) noexcept
      : GameErrorDetails(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValidPositionsFieldNumber = 3,
    kBlockingPositionsFieldNumber = 4,
    kRuleViolatedFieldNumber = 8,
    kRuleDescriptionFieldNumber = 9,
    kSuggestionFieldNumber = 10,
    kAttemptedPlacementFieldNumber = 2,
    kGameErrorFieldNumber = 1,
    kCurrentPlayerFieldNumber = 5,
    kGameStateFieldNumber = 6,
    kTurnNumberFieldNumber = 7,
  };
  // repeated .blokus.Position valid_positions = 3;
  int valid_positions_size() const;
  private:
  int _internal_valid_positions_size() const;

  public:
  void clear_valid_positions() ;
  ::blokus::Position* mutable_valid_positions(int index);
  ::google::protobuf::RepeatedPtrField<::blokus::Position>* mutable_valid_positions();

  private:
  const ::google::protobuf::RepeatedPtrField<::blokus::Position>& _internal_valid_positions() const;
  ::google::protobuf::RepeatedPtrField<::blokus::Position>* _internal_mutable_valid_positions();
  public:
  const ::blokus::Position& valid_positions(int index) const;
  ::blokus::Position* add_valid_positions();
  const ::google::protobuf::RepeatedPtrField<::blokus::Position>& valid_positions() const;
  // repeated .blokus.Position blocking_positions = 4;
  int blocking_positions_size() const;
  private:
  int _internal_blocking_positions_size() const;

  public:
  void clear_blocking_positions() ;
  ::blokus::Position* mutable_blocking_positions(int index);
  ::google::protobuf::RepeatedPtrField<::blokus::Position>* mutable_blocking_positions();

  private:
  const ::google::protobuf::RepeatedPtrField<::blokus::Position>& _internal_blocking_positions() const;
  ::google::protobuf::RepeatedPtrField<::blokus::Position>* _internal_mutable_blocking_positions();
  public:
  const ::blokus::Position& blocking_positions(int index) const;
  ::blokus::Position* add_blocking_positions();
  const ::google::protobuf::RepeatedPtrField<::blokus::Position>& blocking_positions() const;
  // string rule_violated = 8;
  void clear_rule_violated() ;
  const std::string& rule_violated() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_rule_violated(Arg_&& arg, Args_... args);
  std::string* mutable_rule_violated();
  PROTOBUF_NODISCARD std::string* release_rule_violated();
  void set_allocated_rule_violated(std::string* value);

  private:
  const std::string& _internal_rule_violated() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rule_violated(
      const std::string& value);
  std::string* _internal_mutable_rule_violated();

  public:
  // string rule_description = 9;
  void clear_rule_description() ;
  const std::string& rule_description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_rule_description(Arg_&& arg, Args_... args);
  std::string* mutable_rule_description();
  PROTOBUF_NODISCARD std::string* release_rule_description();
  void set_allocated_rule_description(std::string* value);

  private:
  const std::string& _internal_rule_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rule_description(
      const std::string& value);
  std::string* _internal_mutable_rule_description();

  public:
  // string suggestion = 10;
  void clear_suggestion() ;
  const std::string& suggestion() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_suggestion(Arg_&& arg, Args_... args);
  std::string* mutable_suggestion();
  PROTOBUF_NODISCARD std::string* release_suggestion();
  void set_allocated_suggestion(std::string* value);

  private:
  const std::string& _internal_suggestion() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_suggestion(
      const std::string& value);
  std::string* _internal_mutable_suggestion();

  public:
  // .blokus.BlockPlacement attempted_placement = 2;
  bool has_attempted_placement() const;
  void clear_attempted_placement() ;
  const ::blokus::BlockPlacement& attempted_placement() const;
  PROTOBUF_NODISCARD ::blokus::BlockPlacement* release_attempted_placement();
  ::blokus::BlockPlacement* mutable_attempted_placement();
  void set_allocated_attempted_placement(::blokus::BlockPlacement* value);
  void unsafe_arena_set_allocated_attempted_placement(::blokus::BlockPlacement* value);
  ::blokus::BlockPlacement* unsafe_arena_release_attempted_placement();

  private:
  const ::blokus::BlockPlacement& _internal_attempted_placement() const;
  ::blokus::BlockPlacement* _internal_mutable_attempted_placement();

  public:
  // .blokus.GameLogicError game_error = 1;
  void clear_game_error() ;
  ::blokus::GameLogicError game_error() const;
  void set_game_error(::blokus::GameLogicError value);

  private:
  ::blokus::GameLogicError _internal_game_error() const;
  void _internal_set_game_error(::blokus::GameLogicError value);

  public:
  // .blokus.PlayerColor current_player = 5;
  void clear_current_player() ;
  ::blokus::PlayerColor current_player() const;
  void set_current_player(::blokus::PlayerColor value);

  private:
  ::blokus::PlayerColor _internal_current_player() const;
  void _internal_set_current_player(::blokus::PlayerColor value);

  public:
  // .blokus.GameState game_state = 6;
  void clear_game_state() ;
  ::blokus::GameState game_state() const;
  void set_game_state(::blokus::GameState value);

  private:
  ::blokus::GameState _internal_game_state() const;
  void _internal_set_game_state(::blokus::GameState value);

  public:
  // int32 turn_number = 7;
  void clear_turn_number() ;
  ::int32_t turn_number() const;
  void set_turn_number(::int32_t value);

  private:
  ::int32_t _internal_turn_number() const;
  void _internal_set_turn_number(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.GameErrorDetails)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 10, 3,
      79, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameErrorDetails& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::blokus::Position > valid_positions_;
    ::google::protobuf::RepeatedPtrField< ::blokus::Position > blocking_positions_;
    ::google::protobuf::internal::ArenaStringPtr rule_violated_;
    ::google::protobuf::internal::ArenaStringPtr rule_description_;
    ::google::protobuf::internal::ArenaStringPtr suggestion_;
    ::blokus::BlockPlacement* attempted_placement_;
    int game_error_;
    int current_player_;
    int game_state_;
    ::int32_t turn_number_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_error_2eproto;
};
// -------------------------------------------------------------------

class ErrorReport final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.ErrorReport) */ {
 public:
  inline ErrorReport() : ErrorReport(nullptr) {}
  ~ErrorReport() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ErrorReport* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ErrorReport));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ErrorReport(
      ::google::protobuf::internal::ConstantInitialized);

  inline ErrorReport(const ErrorReport& from) : ErrorReport(nullptr, from) {}
  inline ErrorReport(ErrorReport&& from) noexcept
      : ErrorReport(nullptr, std::move(from)) {}
  inline ErrorReport& operator=(const ErrorReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline ErrorReport& operator=(ErrorReport&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ErrorReport& default_instance() {
    return *internal_default_instance();
  }
  static inline const ErrorReport* internal_default_instance() {
    return reinterpret_cast<const ErrorReport*>(
        &_ErrorReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(ErrorReport& a, ErrorReport& b) { a.Swap(&b); }
  inline void Swap(ErrorReport* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ErrorReport* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ErrorReport* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ErrorReport>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ErrorReport& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ErrorReport& from) { ErrorReport::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ErrorReport* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.ErrorReport"; }

 protected:
  explicit ErrorReport(::google::protobuf::Arena* arena);
  ErrorReport(::google::protobuf::Arena* arena, const ErrorReport& from);
  ErrorReport(::google::protobuf::Arena* arena, ErrorReport&& from) noexcept
      : ErrorReport(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBreadcrumbsFieldNumber = 8,
    kClientVersionFieldNumber = 2,
    kPlatformFieldNumber = 3,
    kUserAgentFieldNumber = 4,
    kDeviceInfoFieldNumber = 5,
    kCurrentScreenFieldNumber = 6,
    kLastActionFieldNumber = 7,
    kUserIdHashFieldNumber = 9,
    kNetworkTypeFieldNumber = 12,
    kErrorFieldNumber = 1,
    kReportedAtFieldNumber = 15,
    kUserLevelFieldNumber = 10,
    kSessionDurationFieldNumber = 11,
    kNetworkLatencyFieldNumber = 13,
    kAutoSubmittedFieldNumber = 14,
  };
  // repeated string breadcrumbs = 8;
  int breadcrumbs_size() const;
  private:
  int _internal_breadcrumbs_size() const;

  public:
  void clear_breadcrumbs() ;
  const std::string& breadcrumbs(int index) const;
  std::string* mutable_breadcrumbs(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_breadcrumbs(int index, Arg_&& value, Args_... args);
  std::string* add_breadcrumbs();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_breadcrumbs(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& breadcrumbs() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_breadcrumbs();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_breadcrumbs() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_breadcrumbs();

  public:
  // string client_version = 2;
  void clear_client_version() ;
  const std::string& client_version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_client_version(Arg_&& arg, Args_... args);
  std::string* mutable_client_version();
  PROTOBUF_NODISCARD std::string* release_client_version();
  void set_allocated_client_version(std::string* value);

  private:
  const std::string& _internal_client_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_version(
      const std::string& value);
  std::string* _internal_mutable_client_version();

  public:
  // string platform = 3;
  void clear_platform() ;
  const std::string& platform() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_platform(Arg_&& arg, Args_... args);
  std::string* mutable_platform();
  PROTOBUF_NODISCARD std::string* release_platform();
  void set_allocated_platform(std::string* value);

  private:
  const std::string& _internal_platform() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_platform(
      const std::string& value);
  std::string* _internal_mutable_platform();

  public:
  // string user_agent = 4;
  void clear_user_agent() ;
  const std::string& user_agent() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_agent(Arg_&& arg, Args_... args);
  std::string* mutable_user_agent();
  PROTOBUF_NODISCARD std::string* release_user_agent();
  void set_allocated_user_agent(std::string* value);

  private:
  const std::string& _internal_user_agent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_agent(
      const std::string& value);
  std::string* _internal_mutable_user_agent();

  public:
  // string device_info = 5;
  void clear_device_info() ;
  const std::string& device_info() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_device_info(Arg_&& arg, Args_... args);
  std::string* mutable_device_info();
  PROTOBUF_NODISCARD std::string* release_device_info();
  void set_allocated_device_info(std::string* value);

  private:
  const std::string& _internal_device_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_info(
      const std::string& value);
  std::string* _internal_mutable_device_info();

  public:
  // string current_screen = 6;
  void clear_current_screen() ;
  const std::string& current_screen() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_current_screen(Arg_&& arg, Args_... args);
  std::string* mutable_current_screen();
  PROTOBUF_NODISCARD std::string* release_current_screen();
  void set_allocated_current_screen(std::string* value);

  private:
  const std::string& _internal_current_screen() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_current_screen(
      const std::string& value);
  std::string* _internal_mutable_current_screen();

  public:
  // string last_action = 7;
  void clear_last_action() ;
  const std::string& last_action() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_last_action(Arg_&& arg, Args_... args);
  std::string* mutable_last_action();
  PROTOBUF_NODISCARD std::string* release_last_action();
  void set_allocated_last_action(std::string* value);

  private:
  const std::string& _internal_last_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_action(
      const std::string& value);
  std::string* _internal_mutable_last_action();

  public:
  // string user_id_hash = 9;
  void clear_user_id_hash() ;
  const std::string& user_id_hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id_hash(Arg_&& arg, Args_... args);
  std::string* mutable_user_id_hash();
  PROTOBUF_NODISCARD std::string* release_user_id_hash();
  void set_allocated_user_id_hash(std::string* value);

  private:
  const std::string& _internal_user_id_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id_hash(
      const std::string& value);
  std::string* _internal_mutable_user_id_hash();

  public:
  // string network_type = 12;
  void clear_network_type() ;
  const std::string& network_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_network_type(Arg_&& arg, Args_... args);
  std::string* mutable_network_type();
  PROTOBUF_NODISCARD std::string* release_network_type();
  void set_allocated_network_type(std::string* value);

  private:
  const std::string& _internal_network_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_network_type(
      const std::string& value);
  std::string* _internal_mutable_network_type();

  public:
  // .blokus.ErrorResponse error = 1;
  bool has_error() const;
  void clear_error() ;
  const ::blokus::ErrorResponse& error() const;
  PROTOBUF_NODISCARD ::blokus::ErrorResponse* release_error();
  ::blokus::ErrorResponse* mutable_error();
  void set_allocated_error(::blokus::ErrorResponse* value);
  void unsafe_arena_set_allocated_error(::blokus::ErrorResponse* value);
  ::blokus::ErrorResponse* unsafe_arena_release_error();

  private:
  const ::blokus::ErrorResponse& _internal_error() const;
  ::blokus::ErrorResponse* _internal_mutable_error();

  public:
  // .google.protobuf.Timestamp reported_at = 15;
  bool has_reported_at() const;
  void clear_reported_at() ;
  const ::google::protobuf::Timestamp& reported_at() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_reported_at();
  ::google::protobuf::Timestamp* mutable_reported_at();
  void set_allocated_reported_at(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_reported_at(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_reported_at();

  private:
  const ::google::protobuf::Timestamp& _internal_reported_at() const;
  ::google::protobuf::Timestamp* _internal_mutable_reported_at();

  public:
  // int32 user_level = 10;
  void clear_user_level() ;
  ::int32_t user_level() const;
  void set_user_level(::int32_t value);

  private:
  ::int32_t _internal_user_level() const;
  void _internal_set_user_level(::int32_t value);

  public:
  // int32 session_duration = 11;
  void clear_session_duration() ;
  ::int32_t session_duration() const;
  void set_session_duration(::int32_t value);

  private:
  ::int32_t _internal_session_duration() const;
  void _internal_set_session_duration(::int32_t value);

  public:
  // float network_latency = 13;
  void clear_network_latency() ;
  float network_latency() const;
  void set_network_latency(float value);

  private:
  float _internal_network_latency() const;
  void _internal_set_network_latency(float value);

  public:
  // bool auto_submitted = 14;
  void clear_auto_submitted() ;
  bool auto_submitted() const;
  void set_auto_submitted(bool value);

  private:
  bool _internal_auto_submitted() const;
  void _internal_set_auto_submitted(bool value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.ErrorReport)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 15, 2,
      138, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ErrorReport& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> breadcrumbs_;
    ::google::protobuf::internal::ArenaStringPtr client_version_;
    ::google::protobuf::internal::ArenaStringPtr platform_;
    ::google::protobuf::internal::ArenaStringPtr user_agent_;
    ::google::protobuf::internal::ArenaStringPtr device_info_;
    ::google::protobuf::internal::ArenaStringPtr current_screen_;
    ::google::protobuf::internal::ArenaStringPtr last_action_;
    ::google::protobuf::internal::ArenaStringPtr user_id_hash_;
    ::google::protobuf::internal::ArenaStringPtr network_type_;
    ::blokus::ErrorResponse* error_;
    ::google::protobuf::Timestamp* reported_at_;
    ::int32_t user_level_;
    ::int32_t session_duration_;
    float network_latency_;
    bool auto_submitted_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_error_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ErrorResponse

// .blokus.ResultCode result_code = 1;
inline void ErrorResponse::clear_result_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_code_ = 0;
}
inline ::blokus::ResultCode ErrorResponse::result_code() const {
  // @@protoc_insertion_point(field_get:blokus.ErrorResponse.result_code)
  return _internal_result_code();
}
inline void ErrorResponse::set_result_code(::blokus::ResultCode value) {
  _internal_set_result_code(value);
  // @@protoc_insertion_point(field_set:blokus.ErrorResponse.result_code)
}
inline ::blokus::ResultCode ErrorResponse::_internal_result_code() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::blokus::ResultCode>(_impl_.result_code_);
}
inline void ErrorResponse::_internal_set_result_code(::blokus::ResultCode value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_code_ = value;
}

// .blokus.ErrorCategory category = 2;
inline void ErrorResponse::clear_category() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.category_ = 0;
}
inline ::blokus::ErrorCategory ErrorResponse::category() const {
  // @@protoc_insertion_point(field_get:blokus.ErrorResponse.category)
  return _internal_category();
}
inline void ErrorResponse::set_category(::blokus::ErrorCategory value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:blokus.ErrorResponse.category)
}
inline ::blokus::ErrorCategory ErrorResponse::_internal_category() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::blokus::ErrorCategory>(_impl_.category_);
}
inline void ErrorResponse::_internal_set_category(::blokus::ErrorCategory value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.category_ = value;
}

// .blokus.ErrorSeverity severity = 3;
inline void ErrorResponse::clear_severity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.severity_ = 0;
}
inline ::blokus::ErrorSeverity ErrorResponse::severity() const {
  // @@protoc_insertion_point(field_get:blokus.ErrorResponse.severity)
  return _internal_severity();
}
inline void ErrorResponse::set_severity(::blokus::ErrorSeverity value) {
  _internal_set_severity(value);
  // @@protoc_insertion_point(field_set:blokus.ErrorResponse.severity)
}
inline ::blokus::ErrorSeverity ErrorResponse::_internal_severity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::blokus::ErrorSeverity>(_impl_.severity_);
}
inline void ErrorResponse::_internal_set_severity(::blokus::ErrorSeverity value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.severity_ = value;
}

// string error_code = 4;
inline void ErrorResponse::clear_error_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_code_.ClearToEmpty();
}
inline const std::string& ErrorResponse::error_code() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ErrorResponse.error_code)
  return _internal_error_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ErrorResponse::set_error_code(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_code_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.ErrorResponse.error_code)
}
inline std::string* ErrorResponse::mutable_error_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error_code();
  // @@protoc_insertion_point(field_mutable:blokus.ErrorResponse.error_code)
  return _s;
}
inline const std::string& ErrorResponse::_internal_error_code() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.error_code_.Get();
}
inline void ErrorResponse::_internal_set_error_code(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_code_.Set(value, GetArena());
}
inline std::string* ErrorResponse::_internal_mutable_error_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.error_code_.Mutable( GetArena());
}
inline std::string* ErrorResponse::release_error_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ErrorResponse.error_code)
  return _impl_.error_code_.Release();
}
inline void ErrorResponse::set_allocated_error_code(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_code_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.error_code_.IsDefault()) {
    _impl_.error_code_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.ErrorResponse.error_code)
}

// string message = 5;
inline void ErrorResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& ErrorResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ErrorResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ErrorResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.ErrorResponse.message)
}
inline std::string* ErrorResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:blokus.ErrorResponse.message)
  return _s;
}
inline const std::string& ErrorResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void ErrorResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* ErrorResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* ErrorResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ErrorResponse.message)
  return _impl_.message_.Release();
}
inline void ErrorResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.ErrorResponse.message)
}

// string technical_message = 6;
inline void ErrorResponse::clear_technical_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.technical_message_.ClearToEmpty();
}
inline const std::string& ErrorResponse::technical_message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ErrorResponse.technical_message)
  return _internal_technical_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ErrorResponse::set_technical_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.technical_message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.ErrorResponse.technical_message)
}
inline std::string* ErrorResponse::mutable_technical_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_technical_message();
  // @@protoc_insertion_point(field_mutable:blokus.ErrorResponse.technical_message)
  return _s;
}
inline const std::string& ErrorResponse::_internal_technical_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.technical_message_.Get();
}
inline void ErrorResponse::_internal_set_technical_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.technical_message_.Set(value, GetArena());
}
inline std::string* ErrorResponse::_internal_mutable_technical_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.technical_message_.Mutable( GetArena());
}
inline std::string* ErrorResponse::release_technical_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ErrorResponse.technical_message)
  return _impl_.technical_message_.Release();
}
inline void ErrorResponse::set_allocated_technical_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.technical_message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.technical_message_.IsDefault()) {
    _impl_.technical_message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.ErrorResponse.technical_message)
}

// repeated .blokus.FieldError field_errors = 7;
inline int ErrorResponse::_internal_field_errors_size() const {
  return _internal_field_errors().size();
}
inline int ErrorResponse::field_errors_size() const {
  return _internal_field_errors_size();
}
inline void ErrorResponse::clear_field_errors() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.field_errors_.Clear();
}
inline ::blokus::FieldError* ErrorResponse::mutable_field_errors(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.ErrorResponse.field_errors)
  return _internal_mutable_field_errors()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::blokus::FieldError>* ErrorResponse::mutable_field_errors()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.ErrorResponse.field_errors)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_field_errors();
}
inline const ::blokus::FieldError& ErrorResponse::field_errors(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ErrorResponse.field_errors)
  return _internal_field_errors().Get(index);
}
inline ::blokus::FieldError* ErrorResponse::add_field_errors() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::blokus::FieldError* _add = _internal_mutable_field_errors()->Add();
  // @@protoc_insertion_point(field_add:blokus.ErrorResponse.field_errors)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::blokus::FieldError>& ErrorResponse::field_errors() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.ErrorResponse.field_errors)
  return _internal_field_errors();
}
inline const ::google::protobuf::RepeatedPtrField<::blokus::FieldError>&
ErrorResponse::_internal_field_errors() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.field_errors_;
}
inline ::google::protobuf::RepeatedPtrField<::blokus::FieldError>*
ErrorResponse::_internal_mutable_field_errors() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.field_errors_;
}

// map<string, string> details = 8;
inline int ErrorResponse::_internal_details_size() const {
  return _internal_details().size();
}
inline int ErrorResponse::details_size() const {
  return _internal_details_size();
}
inline void ErrorResponse::clear_details() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.details_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& ErrorResponse::_internal_details() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.details_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& ErrorResponse::details() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:blokus.ErrorResponse.details)
  return _internal_details();
}
inline ::google::protobuf::Map<std::string, std::string>* ErrorResponse::_internal_mutable_details() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.details_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* ErrorResponse::mutable_details() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:blokus.ErrorResponse.details)
  return _internal_mutable_details();
}

// repeated string suggested_actions = 9;
inline int ErrorResponse::_internal_suggested_actions_size() const {
  return _internal_suggested_actions().size();
}
inline int ErrorResponse::suggested_actions_size() const {
  return _internal_suggested_actions_size();
}
inline void ErrorResponse::clear_suggested_actions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.suggested_actions_.Clear();
}
inline std::string* ErrorResponse::add_suggested_actions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_suggested_actions()->Add();
  // @@protoc_insertion_point(field_add_mutable:blokus.ErrorResponse.suggested_actions)
  return _s;
}
inline const std::string& ErrorResponse::suggested_actions(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ErrorResponse.suggested_actions)
  return _internal_suggested_actions().Get(index);
}
inline std::string* ErrorResponse::mutable_suggested_actions(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.ErrorResponse.suggested_actions)
  return _internal_mutable_suggested_actions()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void ErrorResponse::set_suggested_actions(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_suggested_actions()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:blokus.ErrorResponse.suggested_actions)
}
template <typename Arg_, typename... Args_>
inline void ErrorResponse::add_suggested_actions(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_suggested_actions(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:blokus.ErrorResponse.suggested_actions)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ErrorResponse::suggested_actions() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.ErrorResponse.suggested_actions)
  return _internal_suggested_actions();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ErrorResponse::mutable_suggested_actions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.ErrorResponse.suggested_actions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_suggested_actions();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ErrorResponse::_internal_suggested_actions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.suggested_actions_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ErrorResponse::_internal_mutable_suggested_actions() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.suggested_actions_;
}

// string help_url = 10;
inline void ErrorResponse::clear_help_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.help_url_.ClearToEmpty();
}
inline const std::string& ErrorResponse::help_url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ErrorResponse.help_url)
  return _internal_help_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ErrorResponse::set_help_url(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.help_url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.ErrorResponse.help_url)
}
inline std::string* ErrorResponse::mutable_help_url() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_help_url();
  // @@protoc_insertion_point(field_mutable:blokus.ErrorResponse.help_url)
  return _s;
}
inline const std::string& ErrorResponse::_internal_help_url() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.help_url_.Get();
}
inline void ErrorResponse::_internal_set_help_url(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.help_url_.Set(value, GetArena());
}
inline std::string* ErrorResponse::_internal_mutable_help_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.help_url_.Mutable( GetArena());
}
inline std::string* ErrorResponse::release_help_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ErrorResponse.help_url)
  return _impl_.help_url_.Release();
}
inline void ErrorResponse::set_allocated_help_url(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.help_url_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.help_url_.IsDefault()) {
    _impl_.help_url_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.ErrorResponse.help_url)
}

// string contact_support = 11;
inline void ErrorResponse::clear_contact_support() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contact_support_.ClearToEmpty();
}
inline const std::string& ErrorResponse::contact_support() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ErrorResponse.contact_support)
  return _internal_contact_support();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ErrorResponse::set_contact_support(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contact_support_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.ErrorResponse.contact_support)
}
inline std::string* ErrorResponse::mutable_contact_support() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_contact_support();
  // @@protoc_insertion_point(field_mutable:blokus.ErrorResponse.contact_support)
  return _s;
}
inline const std::string& ErrorResponse::_internal_contact_support() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.contact_support_.Get();
}
inline void ErrorResponse::_internal_set_contact_support(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contact_support_.Set(value, GetArena());
}
inline std::string* ErrorResponse::_internal_mutable_contact_support() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.contact_support_.Mutable( GetArena());
}
inline std::string* ErrorResponse::release_contact_support() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ErrorResponse.contact_support)
  return _impl_.contact_support_.Release();
}
inline void ErrorResponse::set_allocated_contact_support(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contact_support_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.contact_support_.IsDefault()) {
    _impl_.contact_support_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.ErrorResponse.contact_support)
}

// .google.protobuf.Timestamp timestamp = 12;
inline bool ErrorResponse::has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.timestamp_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& ErrorResponse::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& ErrorResponse::timestamp() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ErrorResponse.timestamp)
  return _internal_timestamp();
}
inline void ErrorResponse::unsafe_arena_set_allocated_timestamp(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.ErrorResponse.timestamp)
}
inline ::google::protobuf::Timestamp* ErrorResponse::release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* ErrorResponse::unsafe_arena_release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ErrorResponse.timestamp)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* ErrorResponse::_internal_mutable_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.timestamp_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.timestamp_;
}
inline ::google::protobuf::Timestamp* ErrorResponse::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:blokus.ErrorResponse.timestamp)
  return _msg;
}
inline void ErrorResponse::set_allocated_timestamp(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.timestamp_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.ErrorResponse.timestamp)
}

// string trace_id = 13;
inline void ErrorResponse::clear_trace_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.trace_id_.ClearToEmpty();
}
inline const std::string& ErrorResponse::trace_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ErrorResponse.trace_id)
  return _internal_trace_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ErrorResponse::set_trace_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.trace_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.ErrorResponse.trace_id)
}
inline std::string* ErrorResponse::mutable_trace_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_trace_id();
  // @@protoc_insertion_point(field_mutable:blokus.ErrorResponse.trace_id)
  return _s;
}
inline const std::string& ErrorResponse::_internal_trace_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.trace_id_.Get();
}
inline void ErrorResponse::_internal_set_trace_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.trace_id_.Set(value, GetArena());
}
inline std::string* ErrorResponse::_internal_mutable_trace_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.trace_id_.Mutable( GetArena());
}
inline std::string* ErrorResponse::release_trace_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ErrorResponse.trace_id)
  return _impl_.trace_id_.Release();
}
inline void ErrorResponse::set_allocated_trace_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.trace_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.trace_id_.IsDefault()) {
    _impl_.trace_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.ErrorResponse.trace_id)
}

// string server_id = 14;
inline void ErrorResponse::clear_server_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_id_.ClearToEmpty();
}
inline const std::string& ErrorResponse::server_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ErrorResponse.server_id)
  return _internal_server_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ErrorResponse::set_server_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.ErrorResponse.server_id)
}
inline std::string* ErrorResponse::mutable_server_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_server_id();
  // @@protoc_insertion_point(field_mutable:blokus.ErrorResponse.server_id)
  return _s;
}
inline const std::string& ErrorResponse::_internal_server_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.server_id_.Get();
}
inline void ErrorResponse::_internal_set_server_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_id_.Set(value, GetArena());
}
inline std::string* ErrorResponse::_internal_mutable_server_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.server_id_.Mutable( GetArena());
}
inline std::string* ErrorResponse::release_server_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ErrorResponse.server_id)
  return _impl_.server_id_.Release();
}
inline void ErrorResponse::set_allocated_server_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.server_id_.IsDefault()) {
    _impl_.server_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.ErrorResponse.server_id)
}

// bool retryable = 15;
inline void ErrorResponse::clear_retryable() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retryable_ = false;
}
inline bool ErrorResponse::retryable() const {
  // @@protoc_insertion_point(field_get:blokus.ErrorResponse.retryable)
  return _internal_retryable();
}
inline void ErrorResponse::set_retryable(bool value) {
  _internal_set_retryable(value);
  // @@protoc_insertion_point(field_set:blokus.ErrorResponse.retryable)
}
inline bool ErrorResponse::_internal_retryable() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.retryable_;
}
inline void ErrorResponse::_internal_set_retryable(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retryable_ = value;
}

// int32 retry_after_seconds = 16;
inline void ErrorResponse::clear_retry_after_seconds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retry_after_seconds_ = 0;
}
inline ::int32_t ErrorResponse::retry_after_seconds() const {
  // @@protoc_insertion_point(field_get:blokus.ErrorResponse.retry_after_seconds)
  return _internal_retry_after_seconds();
}
inline void ErrorResponse::set_retry_after_seconds(::int32_t value) {
  _internal_set_retry_after_seconds(value);
  // @@protoc_insertion_point(field_set:blokus.ErrorResponse.retry_after_seconds)
}
inline ::int32_t ErrorResponse::_internal_retry_after_seconds() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.retry_after_seconds_;
}
inline void ErrorResponse::_internal_set_retry_after_seconds(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retry_after_seconds_ = value;
}

// int32 max_retries = 17;
inline void ErrorResponse::clear_max_retries() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_retries_ = 0;
}
inline ::int32_t ErrorResponse::max_retries() const {
  // @@protoc_insertion_point(field_get:blokus.ErrorResponse.max_retries)
  return _internal_max_retries();
}
inline void ErrorResponse::set_max_retries(::int32_t value) {
  _internal_set_max_retries(value);
  // @@protoc_insertion_point(field_set:blokus.ErrorResponse.max_retries)
}
inline ::int32_t ErrorResponse::_internal_max_retries() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_retries_;
}
inline void ErrorResponse::_internal_set_max_retries(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_retries_ = value;
}

// -------------------------------------------------------------------

// FieldError

// string field_name = 1;
inline void FieldError::clear_field_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.field_name_.ClearToEmpty();
}
inline const std::string& FieldError::field_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.FieldError.field_name)
  return _internal_field_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FieldError::set_field_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.field_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.FieldError.field_name)
}
inline std::string* FieldError::mutable_field_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_field_name();
  // @@protoc_insertion_point(field_mutable:blokus.FieldError.field_name)
  return _s;
}
inline const std::string& FieldError::_internal_field_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.field_name_.Get();
}
inline void FieldError::_internal_set_field_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.field_name_.Set(value, GetArena());
}
inline std::string* FieldError::_internal_mutable_field_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.field_name_.Mutable( GetArena());
}
inline std::string* FieldError::release_field_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.FieldError.field_name)
  return _impl_.field_name_.Release();
}
inline void FieldError::set_allocated_field_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.field_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.field_name_.IsDefault()) {
    _impl_.field_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.FieldError.field_name)
}

// string error_code = 2;
inline void FieldError::clear_error_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_code_.ClearToEmpty();
}
inline const std::string& FieldError::error_code() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.FieldError.error_code)
  return _internal_error_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FieldError::set_error_code(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_code_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.FieldError.error_code)
}
inline std::string* FieldError::mutable_error_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error_code();
  // @@protoc_insertion_point(field_mutable:blokus.FieldError.error_code)
  return _s;
}
inline const std::string& FieldError::_internal_error_code() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.error_code_.Get();
}
inline void FieldError::_internal_set_error_code(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_code_.Set(value, GetArena());
}
inline std::string* FieldError::_internal_mutable_error_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.error_code_.Mutable( GetArena());
}
inline std::string* FieldError::release_error_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.FieldError.error_code)
  return _impl_.error_code_.Release();
}
inline void FieldError::set_allocated_error_code(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_code_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.error_code_.IsDefault()) {
    _impl_.error_code_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.FieldError.error_code)
}

// string message = 3;
inline void FieldError::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& FieldError::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.FieldError.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FieldError::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.FieldError.message)
}
inline std::string* FieldError::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:blokus.FieldError.message)
  return _s;
}
inline const std::string& FieldError::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void FieldError::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* FieldError::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* FieldError::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.FieldError.message)
  return _impl_.message_.Release();
}
inline void FieldError::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.FieldError.message)
}

// string current_value = 4;
inline void FieldError::clear_current_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_value_.ClearToEmpty();
}
inline const std::string& FieldError::current_value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.FieldError.current_value)
  return _internal_current_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FieldError::set_current_value(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.FieldError.current_value)
}
inline std::string* FieldError::mutable_current_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_current_value();
  // @@protoc_insertion_point(field_mutable:blokus.FieldError.current_value)
  return _s;
}
inline const std::string& FieldError::_internal_current_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.current_value_.Get();
}
inline void FieldError::_internal_set_current_value(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_value_.Set(value, GetArena());
}
inline std::string* FieldError::_internal_mutable_current_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.current_value_.Mutable( GetArena());
}
inline std::string* FieldError::release_current_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.FieldError.current_value)
  return _impl_.current_value_.Release();
}
inline void FieldError::set_allocated_current_value(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_value_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.current_value_.IsDefault()) {
    _impl_.current_value_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.FieldError.current_value)
}

// repeated string valid_values = 5;
inline int FieldError::_internal_valid_values_size() const {
  return _internal_valid_values().size();
}
inline int FieldError::valid_values_size() const {
  return _internal_valid_values_size();
}
inline void FieldError::clear_valid_values() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.valid_values_.Clear();
}
inline std::string* FieldError::add_valid_values() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_valid_values()->Add();
  // @@protoc_insertion_point(field_add_mutable:blokus.FieldError.valid_values)
  return _s;
}
inline const std::string& FieldError::valid_values(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.FieldError.valid_values)
  return _internal_valid_values().Get(index);
}
inline std::string* FieldError::mutable_valid_values(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.FieldError.valid_values)
  return _internal_mutable_valid_values()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void FieldError::set_valid_values(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_valid_values()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:blokus.FieldError.valid_values)
}
template <typename Arg_, typename... Args_>
inline void FieldError::add_valid_values(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_valid_values(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:blokus.FieldError.valid_values)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
FieldError::valid_values() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.FieldError.valid_values)
  return _internal_valid_values();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
FieldError::mutable_valid_values() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.FieldError.valid_values)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_valid_values();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
FieldError::_internal_valid_values() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.valid_values_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
FieldError::_internal_mutable_valid_values() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.valid_values_;
}

// string validation_rule = 6;
inline void FieldError::clear_validation_rule() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validation_rule_.ClearToEmpty();
}
inline const std::string& FieldError::validation_rule() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.FieldError.validation_rule)
  return _internal_validation_rule();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FieldError::set_validation_rule(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validation_rule_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.FieldError.validation_rule)
}
inline std::string* FieldError::mutable_validation_rule() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_validation_rule();
  // @@protoc_insertion_point(field_mutable:blokus.FieldError.validation_rule)
  return _s;
}
inline const std::string& FieldError::_internal_validation_rule() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.validation_rule_.Get();
}
inline void FieldError::_internal_set_validation_rule(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validation_rule_.Set(value, GetArena());
}
inline std::string* FieldError::_internal_mutable_validation_rule() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.validation_rule_.Mutable( GetArena());
}
inline std::string* FieldError::release_validation_rule() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.FieldError.validation_rule)
  return _impl_.validation_rule_.Release();
}
inline void FieldError::set_allocated_validation_rule(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validation_rule_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.validation_rule_.IsDefault()) {
    _impl_.validation_rule_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.FieldError.validation_rule)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RateLimitExceeded

// string limit_type = 1;
inline void RateLimitExceeded::clear_limit_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.limit_type_.ClearToEmpty();
}
inline const std::string& RateLimitExceeded::limit_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.RateLimitExceeded.limit_type)
  return _internal_limit_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RateLimitExceeded::set_limit_type(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.limit_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.RateLimitExceeded.limit_type)
}
inline std::string* RateLimitExceeded::mutable_limit_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_limit_type();
  // @@protoc_insertion_point(field_mutable:blokus.RateLimitExceeded.limit_type)
  return _s;
}
inline const std::string& RateLimitExceeded::_internal_limit_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.limit_type_.Get();
}
inline void RateLimitExceeded::_internal_set_limit_type(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.limit_type_.Set(value, GetArena());
}
inline std::string* RateLimitExceeded::_internal_mutable_limit_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.limit_type_.Mutable( GetArena());
}
inline std::string* RateLimitExceeded::release_limit_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.RateLimitExceeded.limit_type)
  return _impl_.limit_type_.Release();
}
inline void RateLimitExceeded::set_allocated_limit_type(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.limit_type_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.limit_type_.IsDefault()) {
    _impl_.limit_type_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.RateLimitExceeded.limit_type)
}

// int32 current_count = 2;
inline void RateLimitExceeded::clear_current_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_count_ = 0;
}
inline ::int32_t RateLimitExceeded::current_count() const {
  // @@protoc_insertion_point(field_get:blokus.RateLimitExceeded.current_count)
  return _internal_current_count();
}
inline void RateLimitExceeded::set_current_count(::int32_t value) {
  _internal_set_current_count(value);
  // @@protoc_insertion_point(field_set:blokus.RateLimitExceeded.current_count)
}
inline ::int32_t RateLimitExceeded::_internal_current_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.current_count_;
}
inline void RateLimitExceeded::_internal_set_current_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_count_ = value;
}

// int32 limit_count = 3;
inline void RateLimitExceeded::clear_limit_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.limit_count_ = 0;
}
inline ::int32_t RateLimitExceeded::limit_count() const {
  // @@protoc_insertion_point(field_get:blokus.RateLimitExceeded.limit_count)
  return _internal_limit_count();
}
inline void RateLimitExceeded::set_limit_count(::int32_t value) {
  _internal_set_limit_count(value);
  // @@protoc_insertion_point(field_set:blokus.RateLimitExceeded.limit_count)
}
inline ::int32_t RateLimitExceeded::_internal_limit_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.limit_count_;
}
inline void RateLimitExceeded::_internal_set_limit_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.limit_count_ = value;
}

// int32 reset_after_seconds = 4;
inline void RateLimitExceeded::clear_reset_after_seconds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reset_after_seconds_ = 0;
}
inline ::int32_t RateLimitExceeded::reset_after_seconds() const {
  // @@protoc_insertion_point(field_get:blokus.RateLimitExceeded.reset_after_seconds)
  return _internal_reset_after_seconds();
}
inline void RateLimitExceeded::set_reset_after_seconds(::int32_t value) {
  _internal_set_reset_after_seconds(value);
  // @@protoc_insertion_point(field_set:blokus.RateLimitExceeded.reset_after_seconds)
}
inline ::int32_t RateLimitExceeded::_internal_reset_after_seconds() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reset_after_seconds_;
}
inline void RateLimitExceeded::_internal_set_reset_after_seconds(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reset_after_seconds_ = value;
}

// .google.protobuf.Timestamp reset_time = 5;
inline bool RateLimitExceeded::has_reset_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.reset_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& RateLimitExceeded::_internal_reset_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.reset_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& RateLimitExceeded::reset_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.RateLimitExceeded.reset_time)
  return _internal_reset_time();
}
inline void RateLimitExceeded::unsafe_arena_set_allocated_reset_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.reset_time_);
  }
  _impl_.reset_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.RateLimitExceeded.reset_time)
}
inline ::google::protobuf::Timestamp* RateLimitExceeded::release_reset_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.reset_time_;
  _impl_.reset_time_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* RateLimitExceeded::unsafe_arena_release_reset_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.RateLimitExceeded.reset_time)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.reset_time_;
  _impl_.reset_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* RateLimitExceeded::_internal_mutable_reset_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.reset_time_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.reset_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.reset_time_;
}
inline ::google::protobuf::Timestamp* RateLimitExceeded::mutable_reset_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_reset_time();
  // @@protoc_insertion_point(field_mutable:blokus.RateLimitExceeded.reset_time)
  return _msg;
}
inline void RateLimitExceeded::set_allocated_reset_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.reset_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.reset_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.RateLimitExceeded.reset_time)
}

// string client_ip = 6;
inline void RateLimitExceeded::clear_client_ip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_ip_.ClearToEmpty();
}
inline const std::string& RateLimitExceeded::client_ip() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.RateLimitExceeded.client_ip)
  return _internal_client_ip();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RateLimitExceeded::set_client_ip(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_ip_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.RateLimitExceeded.client_ip)
}
inline std::string* RateLimitExceeded::mutable_client_ip() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_client_ip();
  // @@protoc_insertion_point(field_mutable:blokus.RateLimitExceeded.client_ip)
  return _s;
}
inline const std::string& RateLimitExceeded::_internal_client_ip() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.client_ip_.Get();
}
inline void RateLimitExceeded::_internal_set_client_ip(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_ip_.Set(value, GetArena());
}
inline std::string* RateLimitExceeded::_internal_mutable_client_ip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.client_ip_.Mutable( GetArena());
}
inline std::string* RateLimitExceeded::release_client_ip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.RateLimitExceeded.client_ip)
  return _impl_.client_ip_.Release();
}
inline void RateLimitExceeded::set_allocated_client_ip(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_ip_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.client_ip_.IsDefault()) {
    _impl_.client_ip_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.RateLimitExceeded.client_ip)
}

// string rate_limit_key = 7;
inline void RateLimitExceeded::clear_rate_limit_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rate_limit_key_.ClearToEmpty();
}
inline const std::string& RateLimitExceeded::rate_limit_key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.RateLimitExceeded.rate_limit_key)
  return _internal_rate_limit_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RateLimitExceeded::set_rate_limit_key(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rate_limit_key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.RateLimitExceeded.rate_limit_key)
}
inline std::string* RateLimitExceeded::mutable_rate_limit_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_rate_limit_key();
  // @@protoc_insertion_point(field_mutable:blokus.RateLimitExceeded.rate_limit_key)
  return _s;
}
inline const std::string& RateLimitExceeded::_internal_rate_limit_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rate_limit_key_.Get();
}
inline void RateLimitExceeded::_internal_set_rate_limit_key(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rate_limit_key_.Set(value, GetArena());
}
inline std::string* RateLimitExceeded::_internal_mutable_rate_limit_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.rate_limit_key_.Mutable( GetArena());
}
inline std::string* RateLimitExceeded::release_rate_limit_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.RateLimitExceeded.rate_limit_key)
  return _impl_.rate_limit_key_.Release();
}
inline void RateLimitExceeded::set_allocated_rate_limit_key(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rate_limit_key_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.rate_limit_key_.IsDefault()) {
    _impl_.rate_limit_key_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.RateLimitExceeded.rate_limit_key)
}

// map<string, int32> rate_limit_info = 8;
inline int RateLimitExceeded::_internal_rate_limit_info_size() const {
  return _internal_rate_limit_info().size();
}
inline int RateLimitExceeded::rate_limit_info_size() const {
  return _internal_rate_limit_info_size();
}
inline void RateLimitExceeded::clear_rate_limit_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rate_limit_info_.Clear();
}
inline const ::google::protobuf::Map<std::string, ::int32_t>& RateLimitExceeded::_internal_rate_limit_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rate_limit_info_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::int32_t>& RateLimitExceeded::rate_limit_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:blokus.RateLimitExceeded.rate_limit_info)
  return _internal_rate_limit_info();
}
inline ::google::protobuf::Map<std::string, ::int32_t>* RateLimitExceeded::_internal_mutable_rate_limit_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.rate_limit_info_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::int32_t>* RateLimitExceeded::mutable_rate_limit_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:blokus.RateLimitExceeded.rate_limit_info)
  return _internal_mutable_rate_limit_info();
}

// -------------------------------------------------------------------

// ServerError

// .blokus.ServerError.ServerErrorType error_type = 1;
inline void ServerError::clear_error_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_type_ = 0;
}
inline ::blokus::ServerError_ServerErrorType ServerError::error_type() const {
  // @@protoc_insertion_point(field_get:blokus.ServerError.error_type)
  return _internal_error_type();
}
inline void ServerError::set_error_type(::blokus::ServerError_ServerErrorType value) {
  _internal_set_error_type(value);
  // @@protoc_insertion_point(field_set:blokus.ServerError.error_type)
}
inline ::blokus::ServerError_ServerErrorType ServerError::_internal_error_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::blokus::ServerError_ServerErrorType>(_impl_.error_type_);
}
inline void ServerError::_internal_set_error_type(::blokus::ServerError_ServerErrorType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_type_ = value;
}

// string service_name = 2;
inline void ServerError::clear_service_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.service_name_.ClearToEmpty();
}
inline const std::string& ServerError::service_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ServerError.service_name)
  return _internal_service_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServerError::set_service_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.service_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.ServerError.service_name)
}
inline std::string* ServerError::mutable_service_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_service_name();
  // @@protoc_insertion_point(field_mutable:blokus.ServerError.service_name)
  return _s;
}
inline const std::string& ServerError::_internal_service_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.service_name_.Get();
}
inline void ServerError::_internal_set_service_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.service_name_.Set(value, GetArena());
}
inline std::string* ServerError::_internal_mutable_service_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.service_name_.Mutable( GetArena());
}
inline std::string* ServerError::release_service_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ServerError.service_name)
  return _impl_.service_name_.Release();
}
inline void ServerError::set_allocated_service_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.service_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.service_name_.IsDefault()) {
    _impl_.service_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.ServerError.service_name)
}

// string error_message = 3;
inline void ServerError::clear_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& ServerError::error_message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ServerError.error_message)
  return _internal_error_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServerError::set_error_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.ServerError.error_message)
}
inline std::string* ServerError::mutable_error_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:blokus.ServerError.error_message)
  return _s;
}
inline const std::string& ServerError::_internal_error_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.error_message_.Get();
}
inline void ServerError::_internal_set_error_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.Set(value, GetArena());
}
inline std::string* ServerError::_internal_mutable_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.error_message_.Mutable( GetArena());
}
inline std::string* ServerError::release_error_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ServerError.error_message)
  return _impl_.error_message_.Release();
}
inline void ServerError::set_allocated_error_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.ServerError.error_message)
}

// .google.protobuf.Timestamp estimated_recovery = 4;
inline bool ServerError::has_estimated_recovery() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.estimated_recovery_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& ServerError::_internal_estimated_recovery() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.estimated_recovery_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& ServerError::estimated_recovery() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ServerError.estimated_recovery)
  return _internal_estimated_recovery();
}
inline void ServerError::unsafe_arena_set_allocated_estimated_recovery(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.estimated_recovery_);
  }
  _impl_.estimated_recovery_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.ServerError.estimated_recovery)
}
inline ::google::protobuf::Timestamp* ServerError::release_estimated_recovery() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.estimated_recovery_;
  _impl_.estimated_recovery_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* ServerError::unsafe_arena_release_estimated_recovery() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ServerError.estimated_recovery)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.estimated_recovery_;
  _impl_.estimated_recovery_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* ServerError::_internal_mutable_estimated_recovery() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.estimated_recovery_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.estimated_recovery_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.estimated_recovery_;
}
inline ::google::protobuf::Timestamp* ServerError::mutable_estimated_recovery() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_estimated_recovery();
  // @@protoc_insertion_point(field_mutable:blokus.ServerError.estimated_recovery)
  return _msg;
}
inline void ServerError::set_allocated_estimated_recovery(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.estimated_recovery_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.estimated_recovery_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.ServerError.estimated_recovery)
}

// string maintenance_url = 5;
inline void ServerError::clear_maintenance_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.maintenance_url_.ClearToEmpty();
}
inline const std::string& ServerError::maintenance_url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ServerError.maintenance_url)
  return _internal_maintenance_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServerError::set_maintenance_url(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.maintenance_url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.ServerError.maintenance_url)
}
inline std::string* ServerError::mutable_maintenance_url() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_maintenance_url();
  // @@protoc_insertion_point(field_mutable:blokus.ServerError.maintenance_url)
  return _s;
}
inline const std::string& ServerError::_internal_maintenance_url() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.maintenance_url_.Get();
}
inline void ServerError::_internal_set_maintenance_url(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.maintenance_url_.Set(value, GetArena());
}
inline std::string* ServerError::_internal_mutable_maintenance_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.maintenance_url_.Mutable( GetArena());
}
inline std::string* ServerError::release_maintenance_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ServerError.maintenance_url)
  return _impl_.maintenance_url_.Release();
}
inline void ServerError::set_allocated_maintenance_url(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.maintenance_url_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.maintenance_url_.IsDefault()) {
    _impl_.maintenance_url_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.ServerError.maintenance_url)
}

// repeated string affected_features = 6;
inline int ServerError::_internal_affected_features_size() const {
  return _internal_affected_features().size();
}
inline int ServerError::affected_features_size() const {
  return _internal_affected_features_size();
}
inline void ServerError::clear_affected_features() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.affected_features_.Clear();
}
inline std::string* ServerError::add_affected_features() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_affected_features()->Add();
  // @@protoc_insertion_point(field_add_mutable:blokus.ServerError.affected_features)
  return _s;
}
inline const std::string& ServerError::affected_features(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ServerError.affected_features)
  return _internal_affected_features().Get(index);
}
inline std::string* ServerError::mutable_affected_features(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.ServerError.affected_features)
  return _internal_mutable_affected_features()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void ServerError::set_affected_features(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_affected_features()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:blokus.ServerError.affected_features)
}
template <typename Arg_, typename... Args_>
inline void ServerError::add_affected_features(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_affected_features(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:blokus.ServerError.affected_features)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ServerError::affected_features() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.ServerError.affected_features)
  return _internal_affected_features();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ServerError::mutable_affected_features() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.ServerError.affected_features)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_affected_features();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ServerError::_internal_affected_features() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.affected_features_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ServerError::_internal_mutable_affected_features() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.affected_features_;
}

// repeated string workarounds = 7;
inline int ServerError::_internal_workarounds_size() const {
  return _internal_workarounds().size();
}
inline int ServerError::workarounds_size() const {
  return _internal_workarounds_size();
}
inline void ServerError::clear_workarounds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.workarounds_.Clear();
}
inline std::string* ServerError::add_workarounds() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_workarounds()->Add();
  // @@protoc_insertion_point(field_add_mutable:blokus.ServerError.workarounds)
  return _s;
}
inline const std::string& ServerError::workarounds(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ServerError.workarounds)
  return _internal_workarounds().Get(index);
}
inline std::string* ServerError::mutable_workarounds(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.ServerError.workarounds)
  return _internal_mutable_workarounds()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void ServerError::set_workarounds(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_workarounds()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:blokus.ServerError.workarounds)
}
template <typename Arg_, typename... Args_>
inline void ServerError::add_workarounds(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_workarounds(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:blokus.ServerError.workarounds)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ServerError::workarounds() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.ServerError.workarounds)
  return _internal_workarounds();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ServerError::mutable_workarounds() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.ServerError.workarounds)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_workarounds();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ServerError::_internal_workarounds() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.workarounds_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ServerError::_internal_mutable_workarounds() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.workarounds_;
}

// bool partial_service = 8;
inline void ServerError::clear_partial_service() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.partial_service_ = false;
}
inline bool ServerError::partial_service() const {
  // @@protoc_insertion_point(field_get:blokus.ServerError.partial_service)
  return _internal_partial_service();
}
inline void ServerError::set_partial_service(bool value) {
  _internal_set_partial_service(value);
  // @@protoc_insertion_point(field_set:blokus.ServerError.partial_service)
}
inline bool ServerError::_internal_partial_service() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.partial_service_;
}
inline void ServerError::_internal_set_partial_service(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.partial_service_ = value;
}

// -------------------------------------------------------------------

// ClientError

// .blokus.ClientError.ClientErrorType error_type = 1;
inline void ClientError::clear_error_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_type_ = 0;
}
inline ::blokus::ClientError_ClientErrorType ClientError::error_type() const {
  // @@protoc_insertion_point(field_get:blokus.ClientError.error_type)
  return _internal_error_type();
}
inline void ClientError::set_error_type(::blokus::ClientError_ClientErrorType value) {
  _internal_set_error_type(value);
  // @@protoc_insertion_point(field_set:blokus.ClientError.error_type)
}
inline ::blokus::ClientError_ClientErrorType ClientError::_internal_error_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::blokus::ClientError_ClientErrorType>(_impl_.error_type_);
}
inline void ClientError::_internal_set_error_type(::blokus::ClientError_ClientErrorType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_type_ = value;
}

// string client_version = 2;
inline void ClientError::clear_client_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_version_.ClearToEmpty();
}
inline const std::string& ClientError::client_version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ClientError.client_version)
  return _internal_client_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ClientError::set_client_version(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.ClientError.client_version)
}
inline std::string* ClientError::mutable_client_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_client_version();
  // @@protoc_insertion_point(field_mutable:blokus.ClientError.client_version)
  return _s;
}
inline const std::string& ClientError::_internal_client_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.client_version_.Get();
}
inline void ClientError::_internal_set_client_version(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_version_.Set(value, GetArena());
}
inline std::string* ClientError::_internal_mutable_client_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.client_version_.Mutable( GetArena());
}
inline std::string* ClientError::release_client_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ClientError.client_version)
  return _impl_.client_version_.Release();
}
inline void ClientError::set_allocated_client_version(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_version_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.client_version_.IsDefault()) {
    _impl_.client_version_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.ClientError.client_version)
}

// string required_version = 3;
inline void ClientError::clear_required_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.required_version_.ClearToEmpty();
}
inline const std::string& ClientError::required_version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ClientError.required_version)
  return _internal_required_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ClientError::set_required_version(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.required_version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.ClientError.required_version)
}
inline std::string* ClientError::mutable_required_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_required_version();
  // @@protoc_insertion_point(field_mutable:blokus.ClientError.required_version)
  return _s;
}
inline const std::string& ClientError::_internal_required_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.required_version_.Get();
}
inline void ClientError::_internal_set_required_version(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.required_version_.Set(value, GetArena());
}
inline std::string* ClientError::_internal_mutable_required_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.required_version_.Mutable( GetArena());
}
inline std::string* ClientError::release_required_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ClientError.required_version)
  return _impl_.required_version_.Release();
}
inline void ClientError::set_allocated_required_version(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.required_version_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.required_version_.IsDefault()) {
    _impl_.required_version_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.ClientError.required_version)
}

// string update_url = 4;
inline void ClientError::clear_update_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.update_url_.ClearToEmpty();
}
inline const std::string& ClientError::update_url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ClientError.update_url)
  return _internal_update_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ClientError::set_update_url(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.update_url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.ClientError.update_url)
}
inline std::string* ClientError::mutable_update_url() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_update_url();
  // @@protoc_insertion_point(field_mutable:blokus.ClientError.update_url)
  return _s;
}
inline const std::string& ClientError::_internal_update_url() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.update_url_.Get();
}
inline void ClientError::_internal_set_update_url(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.update_url_.Set(value, GetArena());
}
inline std::string* ClientError::_internal_mutable_update_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.update_url_.Mutable( GetArena());
}
inline std::string* ClientError::release_update_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ClientError.update_url)
  return _impl_.update_url_.Release();
}
inline void ClientError::set_allocated_update_url(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.update_url_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.update_url_.IsDefault()) {
    _impl_.update_url_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.ClientError.update_url)
}

// repeated string missing_parameters = 5;
inline int ClientError::_internal_missing_parameters_size() const {
  return _internal_missing_parameters().size();
}
inline int ClientError::missing_parameters_size() const {
  return _internal_missing_parameters_size();
}
inline void ClientError::clear_missing_parameters() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.missing_parameters_.Clear();
}
inline std::string* ClientError::add_missing_parameters() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_missing_parameters()->Add();
  // @@protoc_insertion_point(field_add_mutable:blokus.ClientError.missing_parameters)
  return _s;
}
inline const std::string& ClientError::missing_parameters(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ClientError.missing_parameters)
  return _internal_missing_parameters().Get(index);
}
inline std::string* ClientError::mutable_missing_parameters(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.ClientError.missing_parameters)
  return _internal_mutable_missing_parameters()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void ClientError::set_missing_parameters(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_missing_parameters()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:blokus.ClientError.missing_parameters)
}
template <typename Arg_, typename... Args_>
inline void ClientError::add_missing_parameters(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_missing_parameters(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:blokus.ClientError.missing_parameters)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ClientError::missing_parameters() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.ClientError.missing_parameters)
  return _internal_missing_parameters();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ClientError::mutable_missing_parameters() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.ClientError.missing_parameters)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_missing_parameters();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ClientError::_internal_missing_parameters() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.missing_parameters_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ClientError::_internal_mutable_missing_parameters() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.missing_parameters_;
}

// repeated string invalid_parameters = 6;
inline int ClientError::_internal_invalid_parameters_size() const {
  return _internal_invalid_parameters().size();
}
inline int ClientError::invalid_parameters_size() const {
  return _internal_invalid_parameters_size();
}
inline void ClientError::clear_invalid_parameters() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.invalid_parameters_.Clear();
}
inline std::string* ClientError::add_invalid_parameters() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_invalid_parameters()->Add();
  // @@protoc_insertion_point(field_add_mutable:blokus.ClientError.invalid_parameters)
  return _s;
}
inline const std::string& ClientError::invalid_parameters(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ClientError.invalid_parameters)
  return _internal_invalid_parameters().Get(index);
}
inline std::string* ClientError::mutable_invalid_parameters(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.ClientError.invalid_parameters)
  return _internal_mutable_invalid_parameters()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void ClientError::set_invalid_parameters(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_invalid_parameters()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:blokus.ClientError.invalid_parameters)
}
template <typename Arg_, typename... Args_>
inline void ClientError::add_invalid_parameters(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_invalid_parameters(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:blokus.ClientError.invalid_parameters)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ClientError::invalid_parameters() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.ClientError.invalid_parameters)
  return _internal_invalid_parameters();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ClientError::mutable_invalid_parameters() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.ClientError.invalid_parameters)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_invalid_parameters();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ClientError::_internal_invalid_parameters() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.invalid_parameters_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ClientError::_internal_mutable_invalid_parameters() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.invalid_parameters_;
}

// string configuration_help = 7;
inline void ClientError::clear_configuration_help() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.configuration_help_.ClearToEmpty();
}
inline const std::string& ClientError::configuration_help() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ClientError.configuration_help)
  return _internal_configuration_help();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ClientError::set_configuration_help(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.configuration_help_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.ClientError.configuration_help)
}
inline std::string* ClientError::mutable_configuration_help() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_configuration_help();
  // @@protoc_insertion_point(field_mutable:blokus.ClientError.configuration_help)
  return _s;
}
inline const std::string& ClientError::_internal_configuration_help() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.configuration_help_.Get();
}
inline void ClientError::_internal_set_configuration_help(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.configuration_help_.Set(value, GetArena());
}
inline std::string* ClientError::_internal_mutable_configuration_help() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.configuration_help_.Mutable( GetArena());
}
inline std::string* ClientError::release_configuration_help() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ClientError.configuration_help)
  return _impl_.configuration_help_.Release();
}
inline void ClientError::set_allocated_configuration_help(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.configuration_help_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.configuration_help_.IsDefault()) {
    _impl_.configuration_help_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.ClientError.configuration_help)
}

// -------------------------------------------------------------------

// ConnectionError

// .blokus.ConnectionError.ConnectionErrorType error_type = 1;
inline void ConnectionError::clear_error_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_type_ = 0;
}
inline ::blokus::ConnectionError_ConnectionErrorType ConnectionError::error_type() const {
  // @@protoc_insertion_point(field_get:blokus.ConnectionError.error_type)
  return _internal_error_type();
}
inline void ConnectionError::set_error_type(::blokus::ConnectionError_ConnectionErrorType value) {
  _internal_set_error_type(value);
  // @@protoc_insertion_point(field_set:blokus.ConnectionError.error_type)
}
inline ::blokus::ConnectionError_ConnectionErrorType ConnectionError::_internal_error_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::blokus::ConnectionError_ConnectionErrorType>(_impl_.error_type_);
}
inline void ConnectionError::_internal_set_error_type(::blokus::ConnectionError_ConnectionErrorType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.error_type_ = value;
}

// string reason = 2;
inline void ConnectionError::clear_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.ClearToEmpty();
}
inline const std::string& ConnectionError::reason() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ConnectionError.reason)
  return _internal_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ConnectionError::set_reason(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.ConnectionError.reason)
}
inline std::string* ConnectionError::mutable_reason() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:blokus.ConnectionError.reason)
  return _s;
}
inline const std::string& ConnectionError::_internal_reason() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reason_.Get();
}
inline void ConnectionError::_internal_set_reason(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.Set(value, GetArena());
}
inline std::string* ConnectionError::_internal_mutable_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.reason_.Mutable( GetArena());
}
inline std::string* ConnectionError::release_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ConnectionError.reason)
  return _impl_.reason_.Release();
}
inline void ConnectionError::set_allocated_reason(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.reason_.IsDefault()) {
    _impl_.reason_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.ConnectionError.reason)
}

// .google.protobuf.Timestamp disconnected_at = 3;
inline bool ConnectionError::has_disconnected_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.disconnected_at_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& ConnectionError::_internal_disconnected_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.disconnected_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& ConnectionError::disconnected_at() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ConnectionError.disconnected_at)
  return _internal_disconnected_at();
}
inline void ConnectionError::unsafe_arena_set_allocated_disconnected_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.disconnected_at_);
  }
  _impl_.disconnected_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.ConnectionError.disconnected_at)
}
inline ::google::protobuf::Timestamp* ConnectionError::release_disconnected_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.disconnected_at_;
  _impl_.disconnected_at_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* ConnectionError::unsafe_arena_release_disconnected_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ConnectionError.disconnected_at)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.disconnected_at_;
  _impl_.disconnected_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* ConnectionError::_internal_mutable_disconnected_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.disconnected_at_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.disconnected_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.disconnected_at_;
}
inline ::google::protobuf::Timestamp* ConnectionError::mutable_disconnected_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_disconnected_at();
  // @@protoc_insertion_point(field_mutable:blokus.ConnectionError.disconnected_at)
  return _msg;
}
inline void ConnectionError::set_allocated_disconnected_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.disconnected_at_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.disconnected_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.ConnectionError.disconnected_at)
}

// bool auto_reconnect_enabled = 4;
inline void ConnectionError::clear_auto_reconnect_enabled() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auto_reconnect_enabled_ = false;
}
inline bool ConnectionError::auto_reconnect_enabled() const {
  // @@protoc_insertion_point(field_get:blokus.ConnectionError.auto_reconnect_enabled)
  return _internal_auto_reconnect_enabled();
}
inline void ConnectionError::set_auto_reconnect_enabled(bool value) {
  _internal_set_auto_reconnect_enabled(value);
  // @@protoc_insertion_point(field_set:blokus.ConnectionError.auto_reconnect_enabled)
}
inline bool ConnectionError::_internal_auto_reconnect_enabled() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.auto_reconnect_enabled_;
}
inline void ConnectionError::_internal_set_auto_reconnect_enabled(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auto_reconnect_enabled_ = value;
}

// int32 reconnect_delay_seconds = 5;
inline void ConnectionError::clear_reconnect_delay_seconds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reconnect_delay_seconds_ = 0;
}
inline ::int32_t ConnectionError::reconnect_delay_seconds() const {
  // @@protoc_insertion_point(field_get:blokus.ConnectionError.reconnect_delay_seconds)
  return _internal_reconnect_delay_seconds();
}
inline void ConnectionError::set_reconnect_delay_seconds(::int32_t value) {
  _internal_set_reconnect_delay_seconds(value);
  // @@protoc_insertion_point(field_set:blokus.ConnectionError.reconnect_delay_seconds)
}
inline ::int32_t ConnectionError::_internal_reconnect_delay_seconds() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reconnect_delay_seconds_;
}
inline void ConnectionError::_internal_set_reconnect_delay_seconds(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reconnect_delay_seconds_ = value;
}

// int32 max_reconnect_attempts = 6;
inline void ConnectionError::clear_max_reconnect_attempts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_reconnect_attempts_ = 0;
}
inline ::int32_t ConnectionError::max_reconnect_attempts() const {
  // @@protoc_insertion_point(field_get:blokus.ConnectionError.max_reconnect_attempts)
  return _internal_max_reconnect_attempts();
}
inline void ConnectionError::set_max_reconnect_attempts(::int32_t value) {
  _internal_set_max_reconnect_attempts(value);
  // @@protoc_insertion_point(field_set:blokus.ConnectionError.max_reconnect_attempts)
}
inline ::int32_t ConnectionError::_internal_max_reconnect_attempts() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_reconnect_attempts_;
}
inline void ConnectionError::_internal_set_max_reconnect_attempts(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_reconnect_attempts_ = value;
}

// repeated string alternate_servers = 7;
inline int ConnectionError::_internal_alternate_servers_size() const {
  return _internal_alternate_servers().size();
}
inline int ConnectionError::alternate_servers_size() const {
  return _internal_alternate_servers_size();
}
inline void ConnectionError::clear_alternate_servers() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alternate_servers_.Clear();
}
inline std::string* ConnectionError::add_alternate_servers() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_alternate_servers()->Add();
  // @@protoc_insertion_point(field_add_mutable:blokus.ConnectionError.alternate_servers)
  return _s;
}
inline const std::string& ConnectionError::alternate_servers(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ConnectionError.alternate_servers)
  return _internal_alternate_servers().Get(index);
}
inline std::string* ConnectionError::mutable_alternate_servers(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.ConnectionError.alternate_servers)
  return _internal_mutable_alternate_servers()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void ConnectionError::set_alternate_servers(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_alternate_servers()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:blokus.ConnectionError.alternate_servers)
}
template <typename Arg_, typename... Args_>
inline void ConnectionError::add_alternate_servers(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_alternate_servers(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:blokus.ConnectionError.alternate_servers)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ConnectionError::alternate_servers() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.ConnectionError.alternate_servers)
  return _internal_alternate_servers();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ConnectionError::mutable_alternate_servers() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.ConnectionError.alternate_servers)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_alternate_servers();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ConnectionError::_internal_alternate_servers() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.alternate_servers_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ConnectionError::_internal_mutable_alternate_servers() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.alternate_servers_;
}

// -------------------------------------------------------------------

// GameErrorDetails

// .blokus.GameLogicError game_error = 1;
inline void GameErrorDetails::clear_game_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.game_error_ = 0;
}
inline ::blokus::GameLogicError GameErrorDetails::game_error() const {
  // @@protoc_insertion_point(field_get:blokus.GameErrorDetails.game_error)
  return _internal_game_error();
}
inline void GameErrorDetails::set_game_error(::blokus::GameLogicError value) {
  _internal_set_game_error(value);
  // @@protoc_insertion_point(field_set:blokus.GameErrorDetails.game_error)
}
inline ::blokus::GameLogicError GameErrorDetails::_internal_game_error() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::blokus::GameLogicError>(_impl_.game_error_);
}
inline void GameErrorDetails::_internal_set_game_error(::blokus::GameLogicError value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.game_error_ = value;
}

// .blokus.BlockPlacement attempted_placement = 2;
inline bool GameErrorDetails::has_attempted_placement() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.attempted_placement_ != nullptr);
  return value;
}
inline const ::blokus::BlockPlacement& GameErrorDetails::_internal_attempted_placement() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::BlockPlacement* p = _impl_.attempted_placement_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::BlockPlacement&>(::blokus::_BlockPlacement_default_instance_);
}
inline const ::blokus::BlockPlacement& GameErrorDetails::attempted_placement() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.GameErrorDetails.attempted_placement)
  return _internal_attempted_placement();
}
inline void GameErrorDetails::unsafe_arena_set_allocated_attempted_placement(::blokus::BlockPlacement* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.attempted_placement_);
  }
  _impl_.attempted_placement_ = reinterpret_cast<::blokus::BlockPlacement*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.GameErrorDetails.attempted_placement)
}
inline ::blokus::BlockPlacement* GameErrorDetails::release_attempted_placement() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::BlockPlacement* released = _impl_.attempted_placement_;
  _impl_.attempted_placement_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::BlockPlacement* GameErrorDetails::unsafe_arena_release_attempted_placement() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.GameErrorDetails.attempted_placement)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::BlockPlacement* temp = _impl_.attempted_placement_;
  _impl_.attempted_placement_ = nullptr;
  return temp;
}
inline ::blokus::BlockPlacement* GameErrorDetails::_internal_mutable_attempted_placement() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.attempted_placement_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::BlockPlacement>(GetArena());
    _impl_.attempted_placement_ = reinterpret_cast<::blokus::BlockPlacement*>(p);
  }
  return _impl_.attempted_placement_;
}
inline ::blokus::BlockPlacement* GameErrorDetails::mutable_attempted_placement() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::blokus::BlockPlacement* _msg = _internal_mutable_attempted_placement();
  // @@protoc_insertion_point(field_mutable:blokus.GameErrorDetails.attempted_placement)
  return _msg;
}
inline void GameErrorDetails::set_allocated_attempted_placement(::blokus::BlockPlacement* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.attempted_placement_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.attempted_placement_ = reinterpret_cast<::blokus::BlockPlacement*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.GameErrorDetails.attempted_placement)
}

// repeated .blokus.Position valid_positions = 3;
inline int GameErrorDetails::_internal_valid_positions_size() const {
  return _internal_valid_positions().size();
}
inline int GameErrorDetails::valid_positions_size() const {
  return _internal_valid_positions_size();
}
inline ::blokus::Position* GameErrorDetails::mutable_valid_positions(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.GameErrorDetails.valid_positions)
  return _internal_mutable_valid_positions()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::blokus::Position>* GameErrorDetails::mutable_valid_positions()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.GameErrorDetails.valid_positions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_valid_positions();
}
inline const ::blokus::Position& GameErrorDetails::valid_positions(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.GameErrorDetails.valid_positions)
  return _internal_valid_positions().Get(index);
}
inline ::blokus::Position* GameErrorDetails::add_valid_positions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::blokus::Position* _add = _internal_mutable_valid_positions()->Add();
  // @@protoc_insertion_point(field_add:blokus.GameErrorDetails.valid_positions)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::blokus::Position>& GameErrorDetails::valid_positions() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.GameErrorDetails.valid_positions)
  return _internal_valid_positions();
}
inline const ::google::protobuf::RepeatedPtrField<::blokus::Position>&
GameErrorDetails::_internal_valid_positions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.valid_positions_;
}
inline ::google::protobuf::RepeatedPtrField<::blokus::Position>*
GameErrorDetails::_internal_mutable_valid_positions() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.valid_positions_;
}

// repeated .blokus.Position blocking_positions = 4;
inline int GameErrorDetails::_internal_blocking_positions_size() const {
  return _internal_blocking_positions().size();
}
inline int GameErrorDetails::blocking_positions_size() const {
  return _internal_blocking_positions_size();
}
inline ::blokus::Position* GameErrorDetails::mutable_blocking_positions(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.GameErrorDetails.blocking_positions)
  return _internal_mutable_blocking_positions()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::blokus::Position>* GameErrorDetails::mutable_blocking_positions()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.GameErrorDetails.blocking_positions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_blocking_positions();
}
inline const ::blokus::Position& GameErrorDetails::blocking_positions(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.GameErrorDetails.blocking_positions)
  return _internal_blocking_positions().Get(index);
}
inline ::blokus::Position* GameErrorDetails::add_blocking_positions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::blokus::Position* _add = _internal_mutable_blocking_positions()->Add();
  // @@protoc_insertion_point(field_add:blokus.GameErrorDetails.blocking_positions)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::blokus::Position>& GameErrorDetails::blocking_positions() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.GameErrorDetails.blocking_positions)
  return _internal_blocking_positions();
}
inline const ::google::protobuf::RepeatedPtrField<::blokus::Position>&
GameErrorDetails::_internal_blocking_positions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.blocking_positions_;
}
inline ::google::protobuf::RepeatedPtrField<::blokus::Position>*
GameErrorDetails::_internal_mutable_blocking_positions() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.blocking_positions_;
}

// .blokus.PlayerColor current_player = 5;
inline void GameErrorDetails::clear_current_player() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_player_ = 0;
}
inline ::blokus::PlayerColor GameErrorDetails::current_player() const {
  // @@protoc_insertion_point(field_get:blokus.GameErrorDetails.current_player)
  return _internal_current_player();
}
inline void GameErrorDetails::set_current_player(::blokus::PlayerColor value) {
  _internal_set_current_player(value);
  // @@protoc_insertion_point(field_set:blokus.GameErrorDetails.current_player)
}
inline ::blokus::PlayerColor GameErrorDetails::_internal_current_player() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::blokus::PlayerColor>(_impl_.current_player_);
}
inline void GameErrorDetails::_internal_set_current_player(::blokus::PlayerColor value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_player_ = value;
}

// .blokus.GameState game_state = 6;
inline void GameErrorDetails::clear_game_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.game_state_ = 0;
}
inline ::blokus::GameState GameErrorDetails::game_state() const {
  // @@protoc_insertion_point(field_get:blokus.GameErrorDetails.game_state)
  return _internal_game_state();
}
inline void GameErrorDetails::set_game_state(::blokus::GameState value) {
  _internal_set_game_state(value);
  // @@protoc_insertion_point(field_set:blokus.GameErrorDetails.game_state)
}
inline ::blokus::GameState GameErrorDetails::_internal_game_state() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::blokus::GameState>(_impl_.game_state_);
}
inline void GameErrorDetails::_internal_set_game_state(::blokus::GameState value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.game_state_ = value;
}

// int32 turn_number = 7;
inline void GameErrorDetails::clear_turn_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.turn_number_ = 0;
}
inline ::int32_t GameErrorDetails::turn_number() const {
  // @@protoc_insertion_point(field_get:blokus.GameErrorDetails.turn_number)
  return _internal_turn_number();
}
inline void GameErrorDetails::set_turn_number(::int32_t value) {
  _internal_set_turn_number(value);
  // @@protoc_insertion_point(field_set:blokus.GameErrorDetails.turn_number)
}
inline ::int32_t GameErrorDetails::_internal_turn_number() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.turn_number_;
}
inline void GameErrorDetails::_internal_set_turn_number(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.turn_number_ = value;
}

// string rule_violated = 8;
inline void GameErrorDetails::clear_rule_violated() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rule_violated_.ClearToEmpty();
}
inline const std::string& GameErrorDetails::rule_violated() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.GameErrorDetails.rule_violated)
  return _internal_rule_violated();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GameErrorDetails::set_rule_violated(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rule_violated_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.GameErrorDetails.rule_violated)
}
inline std::string* GameErrorDetails::mutable_rule_violated() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_rule_violated();
  // @@protoc_insertion_point(field_mutable:blokus.GameErrorDetails.rule_violated)
  return _s;
}
inline const std::string& GameErrorDetails::_internal_rule_violated() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rule_violated_.Get();
}
inline void GameErrorDetails::_internal_set_rule_violated(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rule_violated_.Set(value, GetArena());
}
inline std::string* GameErrorDetails::_internal_mutable_rule_violated() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.rule_violated_.Mutable( GetArena());
}
inline std::string* GameErrorDetails::release_rule_violated() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.GameErrorDetails.rule_violated)
  return _impl_.rule_violated_.Release();
}
inline void GameErrorDetails::set_allocated_rule_violated(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rule_violated_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.rule_violated_.IsDefault()) {
    _impl_.rule_violated_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.GameErrorDetails.rule_violated)
}

// string rule_description = 9;
inline void GameErrorDetails::clear_rule_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rule_description_.ClearToEmpty();
}
inline const std::string& GameErrorDetails::rule_description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.GameErrorDetails.rule_description)
  return _internal_rule_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GameErrorDetails::set_rule_description(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rule_description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.GameErrorDetails.rule_description)
}
inline std::string* GameErrorDetails::mutable_rule_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_rule_description();
  // @@protoc_insertion_point(field_mutable:blokus.GameErrorDetails.rule_description)
  return _s;
}
inline const std::string& GameErrorDetails::_internal_rule_description() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rule_description_.Get();
}
inline void GameErrorDetails::_internal_set_rule_description(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rule_description_.Set(value, GetArena());
}
inline std::string* GameErrorDetails::_internal_mutable_rule_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.rule_description_.Mutable( GetArena());
}
inline std::string* GameErrorDetails::release_rule_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.GameErrorDetails.rule_description)
  return _impl_.rule_description_.Release();
}
inline void GameErrorDetails::set_allocated_rule_description(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rule_description_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.rule_description_.IsDefault()) {
    _impl_.rule_description_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.GameErrorDetails.rule_description)
}

// string suggestion = 10;
inline void GameErrorDetails::clear_suggestion() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.suggestion_.ClearToEmpty();
}
inline const std::string& GameErrorDetails::suggestion() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.GameErrorDetails.suggestion)
  return _internal_suggestion();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GameErrorDetails::set_suggestion(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.suggestion_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.GameErrorDetails.suggestion)
}
inline std::string* GameErrorDetails::mutable_suggestion() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_suggestion();
  // @@protoc_insertion_point(field_mutable:blokus.GameErrorDetails.suggestion)
  return _s;
}
inline const std::string& GameErrorDetails::_internal_suggestion() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.suggestion_.Get();
}
inline void GameErrorDetails::_internal_set_suggestion(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.suggestion_.Set(value, GetArena());
}
inline std::string* GameErrorDetails::_internal_mutable_suggestion() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.suggestion_.Mutable( GetArena());
}
inline std::string* GameErrorDetails::release_suggestion() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.GameErrorDetails.suggestion)
  return _impl_.suggestion_.Release();
}
inline void GameErrorDetails::set_allocated_suggestion(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.suggestion_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.suggestion_.IsDefault()) {
    _impl_.suggestion_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.GameErrorDetails.suggestion)
}

// -------------------------------------------------------------------

// UserFriendlyError

// string title = 1;
inline void UserFriendlyError::clear_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.ClearToEmpty();
}
inline const std::string& UserFriendlyError::title() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.UserFriendlyError.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserFriendlyError::set_title(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.UserFriendlyError.title)
}
inline std::string* UserFriendlyError::mutable_title() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:blokus.UserFriendlyError.title)
  return _s;
}
inline const std::string& UserFriendlyError::_internal_title() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.title_.Get();
}
inline void UserFriendlyError::_internal_set_title(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.Set(value, GetArena());
}
inline std::string* UserFriendlyError::_internal_mutable_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.title_.Mutable( GetArena());
}
inline std::string* UserFriendlyError::release_title() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.UserFriendlyError.title)
  return _impl_.title_.Release();
}
inline void UserFriendlyError::set_allocated_title(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.title_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.UserFriendlyError.title)
}

// string description = 2;
inline void UserFriendlyError::clear_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.ClearToEmpty();
}
inline const std::string& UserFriendlyError::description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.UserFriendlyError.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserFriendlyError::set_description(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.UserFriendlyError.description)
}
inline std::string* UserFriendlyError::mutable_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:blokus.UserFriendlyError.description)
  return _s;
}
inline const std::string& UserFriendlyError::_internal_description() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.description_.Get();
}
inline void UserFriendlyError::_internal_set_description(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.Set(value, GetArena());
}
inline std::string* UserFriendlyError::_internal_mutable_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.description_.Mutable( GetArena());
}
inline std::string* UserFriendlyError::release_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.UserFriendlyError.description)
  return _impl_.description_.Release();
}
inline void UserFriendlyError::set_allocated_description(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.UserFriendlyError.description)
}

// string icon = 3;
inline void UserFriendlyError::clear_icon() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.icon_.ClearToEmpty();
}
inline const std::string& UserFriendlyError::icon() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.UserFriendlyError.icon)
  return _internal_icon();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserFriendlyError::set_icon(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.icon_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.UserFriendlyError.icon)
}
inline std::string* UserFriendlyError::mutable_icon() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_icon();
  // @@protoc_insertion_point(field_mutable:blokus.UserFriendlyError.icon)
  return _s;
}
inline const std::string& UserFriendlyError::_internal_icon() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.icon_.Get();
}
inline void UserFriendlyError::_internal_set_icon(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.icon_.Set(value, GetArena());
}
inline std::string* UserFriendlyError::_internal_mutable_icon() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.icon_.Mutable( GetArena());
}
inline std::string* UserFriendlyError::release_icon() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.UserFriendlyError.icon)
  return _impl_.icon_.Release();
}
inline void UserFriendlyError::set_allocated_icon(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.icon_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.icon_.IsDefault()) {
    _impl_.icon_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.UserFriendlyError.icon)
}

// repeated .blokus.ErrorAction actions = 4;
inline int UserFriendlyError::_internal_actions_size() const {
  return _internal_actions().size();
}
inline int UserFriendlyError::actions_size() const {
  return _internal_actions_size();
}
inline void UserFriendlyError::clear_actions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.actions_.Clear();
}
inline ::blokus::ErrorAction* UserFriendlyError::mutable_actions(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.UserFriendlyError.actions)
  return _internal_mutable_actions()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::blokus::ErrorAction>* UserFriendlyError::mutable_actions()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.UserFriendlyError.actions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_actions();
}
inline const ::blokus::ErrorAction& UserFriendlyError::actions(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.UserFriendlyError.actions)
  return _internal_actions().Get(index);
}
inline ::blokus::ErrorAction* UserFriendlyError::add_actions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::blokus::ErrorAction* _add = _internal_mutable_actions()->Add();
  // @@protoc_insertion_point(field_add:blokus.UserFriendlyError.actions)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::blokus::ErrorAction>& UserFriendlyError::actions() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.UserFriendlyError.actions)
  return _internal_actions();
}
inline const ::google::protobuf::RepeatedPtrField<::blokus::ErrorAction>&
UserFriendlyError::_internal_actions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.actions_;
}
inline ::google::protobuf::RepeatedPtrField<::blokus::ErrorAction>*
UserFriendlyError::_internal_mutable_actions() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.actions_;
}

// bool show_technical_details = 5;
inline void UserFriendlyError::clear_show_technical_details() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.show_technical_details_ = false;
}
inline bool UserFriendlyError::show_technical_details() const {
  // @@protoc_insertion_point(field_get:blokus.UserFriendlyError.show_technical_details)
  return _internal_show_technical_details();
}
inline void UserFriendlyError::set_show_technical_details(bool value) {
  _internal_set_show_technical_details(value);
  // @@protoc_insertion_point(field_set:blokus.UserFriendlyError.show_technical_details)
}
inline bool UserFriendlyError::_internal_show_technical_details() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.show_technical_details_;
}
inline void UserFriendlyError::_internal_set_show_technical_details(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.show_technical_details_ = value;
}

// bool dismissible = 6;
inline void UserFriendlyError::clear_dismissible() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dismissible_ = false;
}
inline bool UserFriendlyError::dismissible() const {
  // @@protoc_insertion_point(field_get:blokus.UserFriendlyError.dismissible)
  return _internal_dismissible();
}
inline void UserFriendlyError::set_dismissible(bool value) {
  _internal_set_dismissible(value);
  // @@protoc_insertion_point(field_set:blokus.UserFriendlyError.dismissible)
}
inline bool UserFriendlyError::_internal_dismissible() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dismissible_;
}
inline void UserFriendlyError::_internal_set_dismissible(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dismissible_ = value;
}

// int32 auto_dismiss_seconds = 7;
inline void UserFriendlyError::clear_auto_dismiss_seconds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auto_dismiss_seconds_ = 0;
}
inline ::int32_t UserFriendlyError::auto_dismiss_seconds() const {
  // @@protoc_insertion_point(field_get:blokus.UserFriendlyError.auto_dismiss_seconds)
  return _internal_auto_dismiss_seconds();
}
inline void UserFriendlyError::set_auto_dismiss_seconds(::int32_t value) {
  _internal_set_auto_dismiss_seconds(value);
  // @@protoc_insertion_point(field_set:blokus.UserFriendlyError.auto_dismiss_seconds)
}
inline ::int32_t UserFriendlyError::_internal_auto_dismiss_seconds() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.auto_dismiss_seconds_;
}
inline void UserFriendlyError::_internal_set_auto_dismiss_seconds(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auto_dismiss_seconds_ = value;
}

// -------------------------------------------------------------------

// ErrorAction

// string action_id = 1;
inline void ErrorAction::clear_action_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_id_.ClearToEmpty();
}
inline const std::string& ErrorAction::action_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ErrorAction.action_id)
  return _internal_action_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ErrorAction::set_action_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.ErrorAction.action_id)
}
inline std::string* ErrorAction::mutable_action_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_action_id();
  // @@protoc_insertion_point(field_mutable:blokus.ErrorAction.action_id)
  return _s;
}
inline const std::string& ErrorAction::_internal_action_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.action_id_.Get();
}
inline void ErrorAction::_internal_set_action_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_id_.Set(value, GetArena());
}
inline std::string* ErrorAction::_internal_mutable_action_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.action_id_.Mutable( GetArena());
}
inline std::string* ErrorAction::release_action_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ErrorAction.action_id)
  return _impl_.action_id_.Release();
}
inline void ErrorAction::set_allocated_action_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.action_id_.IsDefault()) {
    _impl_.action_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.ErrorAction.action_id)
}

// string label = 2;
inline void ErrorAction::clear_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_.ClearToEmpty();
}
inline const std::string& ErrorAction::label() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ErrorAction.label)
  return _internal_label();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ErrorAction::set_label(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.ErrorAction.label)
}
inline std::string* ErrorAction::mutable_label() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:blokus.ErrorAction.label)
  return _s;
}
inline const std::string& ErrorAction::_internal_label() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.label_.Get();
}
inline void ErrorAction::_internal_set_label(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_.Set(value, GetArena());
}
inline std::string* ErrorAction::_internal_mutable_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.label_.Mutable( GetArena());
}
inline std::string* ErrorAction::release_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ErrorAction.label)
  return _impl_.label_.Release();
}
inline void ErrorAction::set_allocated_label(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.label_.IsDefault()) {
    _impl_.label_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.ErrorAction.label)
}

// string action_type = 3;
inline void ErrorAction::clear_action_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_type_.ClearToEmpty();
}
inline const std::string& ErrorAction::action_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ErrorAction.action_type)
  return _internal_action_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ErrorAction::set_action_type(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.ErrorAction.action_type)
}
inline std::string* ErrorAction::mutable_action_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_action_type();
  // @@protoc_insertion_point(field_mutable:blokus.ErrorAction.action_type)
  return _s;
}
inline const std::string& ErrorAction::_internal_action_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.action_type_.Get();
}
inline void ErrorAction::_internal_set_action_type(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_type_.Set(value, GetArena());
}
inline std::string* ErrorAction::_internal_mutable_action_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.action_type_.Mutable( GetArena());
}
inline std::string* ErrorAction::release_action_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ErrorAction.action_type)
  return _impl_.action_type_.Release();
}
inline void ErrorAction::set_allocated_action_type(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_type_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.action_type_.IsDefault()) {
    _impl_.action_type_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.ErrorAction.action_type)
}

// string action_data = 4;
inline void ErrorAction::clear_action_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_data_.ClearToEmpty();
}
inline const std::string& ErrorAction::action_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ErrorAction.action_data)
  return _internal_action_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ErrorAction::set_action_data(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_data_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.ErrorAction.action_data)
}
inline std::string* ErrorAction::mutable_action_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_action_data();
  // @@protoc_insertion_point(field_mutable:blokus.ErrorAction.action_data)
  return _s;
}
inline const std::string& ErrorAction::_internal_action_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.action_data_.Get();
}
inline void ErrorAction::_internal_set_action_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_data_.Set(value, GetArena());
}
inline std::string* ErrorAction::_internal_mutable_action_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.action_data_.Mutable( GetArena());
}
inline std::string* ErrorAction::release_action_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ErrorAction.action_data)
  return _impl_.action_data_.Release();
}
inline void ErrorAction::set_allocated_action_data(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.action_data_.IsDefault()) {
    _impl_.action_data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.ErrorAction.action_data)
}

// bool is_primary = 5;
inline void ErrorAction::clear_is_primary() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_primary_ = false;
}
inline bool ErrorAction::is_primary() const {
  // @@protoc_insertion_point(field_get:blokus.ErrorAction.is_primary)
  return _internal_is_primary();
}
inline void ErrorAction::set_is_primary(bool value) {
  _internal_set_is_primary(value);
  // @@protoc_insertion_point(field_set:blokus.ErrorAction.is_primary)
}
inline bool ErrorAction::_internal_is_primary() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_primary_;
}
inline void ErrorAction::_internal_set_is_primary(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_primary_ = value;
}

// -------------------------------------------------------------------

// ErrorReport

// .blokus.ErrorResponse error = 1;
inline bool ErrorReport::has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.error_ != nullptr);
  return value;
}
inline void ErrorReport::clear_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.error_ != nullptr) _impl_.error_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::blokus::ErrorResponse& ErrorReport::_internal_error() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::ErrorResponse* p = _impl_.error_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::ErrorResponse&>(::blokus::_ErrorResponse_default_instance_);
}
inline const ::blokus::ErrorResponse& ErrorReport::error() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ErrorReport.error)
  return _internal_error();
}
inline void ErrorReport::unsafe_arena_set_allocated_error(::blokus::ErrorResponse* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.error_);
  }
  _impl_.error_ = reinterpret_cast<::blokus::ErrorResponse*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.ErrorReport.error)
}
inline ::blokus::ErrorResponse* ErrorReport::release_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::ErrorResponse* released = _impl_.error_;
  _impl_.error_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::ErrorResponse* ErrorReport::unsafe_arena_release_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ErrorReport.error)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::ErrorResponse* temp = _impl_.error_;
  _impl_.error_ = nullptr;
  return temp;
}
inline ::blokus::ErrorResponse* ErrorReport::_internal_mutable_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.error_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::ErrorResponse>(GetArena());
    _impl_.error_ = reinterpret_cast<::blokus::ErrorResponse*>(p);
  }
  return _impl_.error_;
}
inline ::blokus::ErrorResponse* ErrorReport::mutable_error() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::blokus::ErrorResponse* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:blokus.ErrorReport.error)
  return _msg;
}
inline void ErrorReport::set_allocated_error(::blokus::ErrorResponse* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.error_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.error_ = reinterpret_cast<::blokus::ErrorResponse*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.ErrorReport.error)
}

// string client_version = 2;
inline void ErrorReport::clear_client_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_version_.ClearToEmpty();
}
inline const std::string& ErrorReport::client_version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ErrorReport.client_version)
  return _internal_client_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ErrorReport::set_client_version(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.ErrorReport.client_version)
}
inline std::string* ErrorReport::mutable_client_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_client_version();
  // @@protoc_insertion_point(field_mutable:blokus.ErrorReport.client_version)
  return _s;
}
inline const std::string& ErrorReport::_internal_client_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.client_version_.Get();
}
inline void ErrorReport::_internal_set_client_version(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_version_.Set(value, GetArena());
}
inline std::string* ErrorReport::_internal_mutable_client_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.client_version_.Mutable( GetArena());
}
inline std::string* ErrorReport::release_client_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ErrorReport.client_version)
  return _impl_.client_version_.Release();
}
inline void ErrorReport::set_allocated_client_version(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_version_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.client_version_.IsDefault()) {
    _impl_.client_version_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.ErrorReport.client_version)
}

// string platform = 3;
inline void ErrorReport::clear_platform() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.platform_.ClearToEmpty();
}
inline const std::string& ErrorReport::platform() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ErrorReport.platform)
  return _internal_platform();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ErrorReport::set_platform(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.platform_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.ErrorReport.platform)
}
inline std::string* ErrorReport::mutable_platform() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_platform();
  // @@protoc_insertion_point(field_mutable:blokus.ErrorReport.platform)
  return _s;
}
inline const std::string& ErrorReport::_internal_platform() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.platform_.Get();
}
inline void ErrorReport::_internal_set_platform(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.platform_.Set(value, GetArena());
}
inline std::string* ErrorReport::_internal_mutable_platform() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.platform_.Mutable( GetArena());
}
inline std::string* ErrorReport::release_platform() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ErrorReport.platform)
  return _impl_.platform_.Release();
}
inline void ErrorReport::set_allocated_platform(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.platform_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.platform_.IsDefault()) {
    _impl_.platform_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.ErrorReport.platform)
}

// string user_agent = 4;
inline void ErrorReport::clear_user_agent() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_agent_.ClearToEmpty();
}
inline const std::string& ErrorReport::user_agent() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ErrorReport.user_agent)
  return _internal_user_agent();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ErrorReport::set_user_agent(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_agent_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.ErrorReport.user_agent)
}
inline std::string* ErrorReport::mutable_user_agent() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_agent();
  // @@protoc_insertion_point(field_mutable:blokus.ErrorReport.user_agent)
  return _s;
}
inline const std::string& ErrorReport::_internal_user_agent() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_agent_.Get();
}
inline void ErrorReport::_internal_set_user_agent(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_agent_.Set(value, GetArena());
}
inline std::string* ErrorReport::_internal_mutable_user_agent() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_agent_.Mutable( GetArena());
}
inline std::string* ErrorReport::release_user_agent() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ErrorReport.user_agent)
  return _impl_.user_agent_.Release();
}
inline void ErrorReport::set_allocated_user_agent(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_agent_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_agent_.IsDefault()) {
    _impl_.user_agent_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.ErrorReport.user_agent)
}

// string device_info = 5;
inline void ErrorReport::clear_device_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_info_.ClearToEmpty();
}
inline const std::string& ErrorReport::device_info() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ErrorReport.device_info)
  return _internal_device_info();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ErrorReport::set_device_info(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_info_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.ErrorReport.device_info)
}
inline std::string* ErrorReport::mutable_device_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_device_info();
  // @@protoc_insertion_point(field_mutable:blokus.ErrorReport.device_info)
  return _s;
}
inline const std::string& ErrorReport::_internal_device_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.device_info_.Get();
}
inline void ErrorReport::_internal_set_device_info(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_info_.Set(value, GetArena());
}
inline std::string* ErrorReport::_internal_mutable_device_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.device_info_.Mutable( GetArena());
}
inline std::string* ErrorReport::release_device_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ErrorReport.device_info)
  return _impl_.device_info_.Release();
}
inline void ErrorReport::set_allocated_device_info(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_info_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.device_info_.IsDefault()) {
    _impl_.device_info_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.ErrorReport.device_info)
}

// string current_screen = 6;
inline void ErrorReport::clear_current_screen() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_screen_.ClearToEmpty();
}
inline const std::string& ErrorReport::current_screen() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ErrorReport.current_screen)
  return _internal_current_screen();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ErrorReport::set_current_screen(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_screen_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.ErrorReport.current_screen)
}
inline std::string* ErrorReport::mutable_current_screen() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_current_screen();
  // @@protoc_insertion_point(field_mutable:blokus.ErrorReport.current_screen)
  return _s;
}
inline const std::string& ErrorReport::_internal_current_screen() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.current_screen_.Get();
}
inline void ErrorReport::_internal_set_current_screen(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_screen_.Set(value, GetArena());
}
inline std::string* ErrorReport::_internal_mutable_current_screen() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.current_screen_.Mutable( GetArena());
}
inline std::string* ErrorReport::release_current_screen() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ErrorReport.current_screen)
  return _impl_.current_screen_.Release();
}
inline void ErrorReport::set_allocated_current_screen(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_screen_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.current_screen_.IsDefault()) {
    _impl_.current_screen_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.ErrorReport.current_screen)
}

// string last_action = 7;
inline void ErrorReport::clear_last_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_action_.ClearToEmpty();
}
inline const std::string& ErrorReport::last_action() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ErrorReport.last_action)
  return _internal_last_action();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ErrorReport::set_last_action(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_action_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.ErrorReport.last_action)
}
inline std::string* ErrorReport::mutable_last_action() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_last_action();
  // @@protoc_insertion_point(field_mutable:blokus.ErrorReport.last_action)
  return _s;
}
inline const std::string& ErrorReport::_internal_last_action() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_action_.Get();
}
inline void ErrorReport::_internal_set_last_action(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_action_.Set(value, GetArena());
}
inline std::string* ErrorReport::_internal_mutable_last_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.last_action_.Mutable( GetArena());
}
inline std::string* ErrorReport::release_last_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ErrorReport.last_action)
  return _impl_.last_action_.Release();
}
inline void ErrorReport::set_allocated_last_action(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_action_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.last_action_.IsDefault()) {
    _impl_.last_action_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.ErrorReport.last_action)
}

// repeated string breadcrumbs = 8;
inline int ErrorReport::_internal_breadcrumbs_size() const {
  return _internal_breadcrumbs().size();
}
inline int ErrorReport::breadcrumbs_size() const {
  return _internal_breadcrumbs_size();
}
inline void ErrorReport::clear_breadcrumbs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.breadcrumbs_.Clear();
}
inline std::string* ErrorReport::add_breadcrumbs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_breadcrumbs()->Add();
  // @@protoc_insertion_point(field_add_mutable:blokus.ErrorReport.breadcrumbs)
  return _s;
}
inline const std::string& ErrorReport::breadcrumbs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ErrorReport.breadcrumbs)
  return _internal_breadcrumbs().Get(index);
}
inline std::string* ErrorReport::mutable_breadcrumbs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.ErrorReport.breadcrumbs)
  return _internal_mutable_breadcrumbs()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void ErrorReport::set_breadcrumbs(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_breadcrumbs()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:blokus.ErrorReport.breadcrumbs)
}
template <typename Arg_, typename... Args_>
inline void ErrorReport::add_breadcrumbs(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_breadcrumbs(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:blokus.ErrorReport.breadcrumbs)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ErrorReport::breadcrumbs() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.ErrorReport.breadcrumbs)
  return _internal_breadcrumbs();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ErrorReport::mutable_breadcrumbs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.ErrorReport.breadcrumbs)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_breadcrumbs();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ErrorReport::_internal_breadcrumbs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.breadcrumbs_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ErrorReport::_internal_mutable_breadcrumbs() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.breadcrumbs_;
}

// string user_id_hash = 9;
inline void ErrorReport::clear_user_id_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_hash_.ClearToEmpty();
}
inline const std::string& ErrorReport::user_id_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ErrorReport.user_id_hash)
  return _internal_user_id_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ErrorReport::set_user_id_hash(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_hash_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.ErrorReport.user_id_hash)
}
inline std::string* ErrorReport::mutable_user_id_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_id_hash();
  // @@protoc_insertion_point(field_mutable:blokus.ErrorReport.user_id_hash)
  return _s;
}
inline const std::string& ErrorReport::_internal_user_id_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_id_hash_.Get();
}
inline void ErrorReport::_internal_set_user_id_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_hash_.Set(value, GetArena());
}
inline std::string* ErrorReport::_internal_mutable_user_id_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_id_hash_.Mutable( GetArena());
}
inline std::string* ErrorReport::release_user_id_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ErrorReport.user_id_hash)
  return _impl_.user_id_hash_.Release();
}
inline void ErrorReport::set_allocated_user_id_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_id_hash_.IsDefault()) {
    _impl_.user_id_hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.ErrorReport.user_id_hash)
}

// int32 user_level = 10;
inline void ErrorReport::clear_user_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_level_ = 0;
}
inline ::int32_t ErrorReport::user_level() const {
  // @@protoc_insertion_point(field_get:blokus.ErrorReport.user_level)
  return _internal_user_level();
}
inline void ErrorReport::set_user_level(::int32_t value) {
  _internal_set_user_level(value);
  // @@protoc_insertion_point(field_set:blokus.ErrorReport.user_level)
}
inline ::int32_t ErrorReport::_internal_user_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_level_;
}
inline void ErrorReport::_internal_set_user_level(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_level_ = value;
}

// int32 session_duration = 11;
inline void ErrorReport::clear_session_duration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_duration_ = 0;
}
inline ::int32_t ErrorReport::session_duration() const {
  // @@protoc_insertion_point(field_get:blokus.ErrorReport.session_duration)
  return _internal_session_duration();
}
inline void ErrorReport::set_session_duration(::int32_t value) {
  _internal_set_session_duration(value);
  // @@protoc_insertion_point(field_set:blokus.ErrorReport.session_duration)
}
inline ::int32_t ErrorReport::_internal_session_duration() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.session_duration_;
}
inline void ErrorReport::_internal_set_session_duration(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_duration_ = value;
}

// string network_type = 12;
inline void ErrorReport::clear_network_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.network_type_.ClearToEmpty();
}
inline const std::string& ErrorReport::network_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ErrorReport.network_type)
  return _internal_network_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ErrorReport::set_network_type(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.network_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.ErrorReport.network_type)
}
inline std::string* ErrorReport::mutable_network_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_network_type();
  // @@protoc_insertion_point(field_mutable:blokus.ErrorReport.network_type)
  return _s;
}
inline const std::string& ErrorReport::_internal_network_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.network_type_.Get();
}
inline void ErrorReport::_internal_set_network_type(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.network_type_.Set(value, GetArena());
}
inline std::string* ErrorReport::_internal_mutable_network_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.network_type_.Mutable( GetArena());
}
inline std::string* ErrorReport::release_network_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ErrorReport.network_type)
  return _impl_.network_type_.Release();
}
inline void ErrorReport::set_allocated_network_type(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.network_type_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.network_type_.IsDefault()) {
    _impl_.network_type_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.ErrorReport.network_type)
}

// float network_latency = 13;
inline void ErrorReport::clear_network_latency() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.network_latency_ = 0;
}
inline float ErrorReport::network_latency() const {
  // @@protoc_insertion_point(field_get:blokus.ErrorReport.network_latency)
  return _internal_network_latency();
}
inline void ErrorReport::set_network_latency(float value) {
  _internal_set_network_latency(value);
  // @@protoc_insertion_point(field_set:blokus.ErrorReport.network_latency)
}
inline float ErrorReport::_internal_network_latency() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.network_latency_;
}
inline void ErrorReport::_internal_set_network_latency(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.network_latency_ = value;
}

// bool auto_submitted = 14;
inline void ErrorReport::clear_auto_submitted() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auto_submitted_ = false;
}
inline bool ErrorReport::auto_submitted() const {
  // @@protoc_insertion_point(field_get:blokus.ErrorReport.auto_submitted)
  return _internal_auto_submitted();
}
inline void ErrorReport::set_auto_submitted(bool value) {
  _internal_set_auto_submitted(value);
  // @@protoc_insertion_point(field_set:blokus.ErrorReport.auto_submitted)
}
inline bool ErrorReport::_internal_auto_submitted() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.auto_submitted_;
}
inline void ErrorReport::_internal_set_auto_submitted(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.auto_submitted_ = value;
}

// .google.protobuf.Timestamp reported_at = 15;
inline bool ErrorReport::has_reported_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.reported_at_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& ErrorReport::_internal_reported_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.reported_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& ErrorReport::reported_at() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.ErrorReport.reported_at)
  return _internal_reported_at();
}
inline void ErrorReport::unsafe_arena_set_allocated_reported_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.reported_at_);
  }
  _impl_.reported_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.ErrorReport.reported_at)
}
inline ::google::protobuf::Timestamp* ErrorReport::release_reported_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.reported_at_;
  _impl_.reported_at_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* ErrorReport::unsafe_arena_release_reported_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.ErrorReport.reported_at)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.reported_at_;
  _impl_.reported_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* ErrorReport::_internal_mutable_reported_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.reported_at_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.reported_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.reported_at_;
}
inline ::google::protobuf::Timestamp* ErrorReport::mutable_reported_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_reported_at();
  // @@protoc_insertion_point(field_mutable:blokus.ErrorReport.reported_at)
  return _msg;
}
inline void ErrorReport::set_allocated_reported_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.reported_at_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.reported_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.ErrorReport.reported_at)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace blokus


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::blokus::ServerError_ServerErrorType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::blokus::ServerError_ServerErrorType>() {
  return ::blokus::ServerError_ServerErrorType_descriptor();
}
template <>
struct is_proto_enum<::blokus::ClientError_ClientErrorType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::blokus::ClientError_ClientErrorType>() {
  return ::blokus::ClientError_ClientErrorType_descriptor();
}
template <>
struct is_proto_enum<::blokus::ConnectionError_ConnectionErrorType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::blokus::ConnectionError_ConnectionErrorType>() {
  return ::blokus::ConnectionError_ConnectionErrorType_descriptor();
}
template <>
struct is_proto_enum<::blokus::ErrorCategory> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::blokus::ErrorCategory>() {
  return ::blokus::ErrorCategory_descriptor();
}
template <>
struct is_proto_enum<::blokus::ErrorSeverity> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::blokus::ErrorSeverity>() {
  return ::blokus::ErrorSeverity_descriptor();
}
template <>
struct is_proto_enum<::blokus::AuthenticationError> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::blokus::AuthenticationError>() {
  return ::blokus::AuthenticationError_descriptor();
}
template <>
struct is_proto_enum<::blokus::ValidationError> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::blokus::ValidationError>() {
  return ::blokus::ValidationError_descriptor();
}
template <>
struct is_proto_enum<::blokus::GameLogicError> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::blokus::GameLogicError>() {
  return ::blokus::GameLogicError_descriptor();
}
template <>
struct is_proto_enum<::blokus::NetworkError> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::blokus::NetworkError>() {
  return ::blokus::NetworkError_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // error_2eproto_2epb_2eh
