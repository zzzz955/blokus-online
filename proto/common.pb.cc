// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: common.proto
// Protobuf C++ Version: 5.29.3

#include "common.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace blokus {
              template <typename>
PROTOBUF_CONSTEXPR Result_DetailsEntry_DoNotUse::Result_DetailsEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : Result_DetailsEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : Result_DetailsEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct Result_DetailsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Result_DetailsEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Result_DetailsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Result_DetailsEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Result_DetailsEntry_DoNotUseDefaultTypeInternal _Result_DetailsEntry_DoNotUse_default_instance_;

inline constexpr Position::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : row_{0},
        col_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Position::Position(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionDefaultTypeInternal() {}
  union {
    Position _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionDefaultTypeInternal _Position_default_instance_;

inline constexpr PlayerSlot::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : used_blocks_{},
        _used_blocks_cached_byte_size_{0},
        username_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        color_{static_cast< ::blokus::PlayerColor >(0)},
        ai_difficulty_{0},
        is_ai_{false},
        is_host_{false},
        is_ready_{false},
        score_{0},
        remaining_blocks_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PlayerSlot::PlayerSlot(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PlayerSlotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerSlotDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerSlotDefaultTypeInternal() {}
  union {
    PlayerSlot _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerSlotDefaultTypeInternal _PlayerSlot_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR GameStats_PlayerScoresEntry_DoNotUse::GameStats_PlayerScoresEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : GameStats_PlayerScoresEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : GameStats_PlayerScoresEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct GameStats_PlayerScoresEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameStats_PlayerScoresEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameStats_PlayerScoresEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GameStats_PlayerScoresEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameStats_PlayerScoresEntry_DoNotUseDefaultTypeInternal _GameStats_PlayerScoresEntry_DoNotUse_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR GameStats_BlocksUsedEntry_DoNotUse::GameStats_BlocksUsedEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : GameStats_BlocksUsedEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : GameStats_BlocksUsedEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct GameStats_BlocksUsedEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameStats_BlocksUsedEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameStats_BlocksUsedEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GameStats_BlocksUsedEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameStats_BlocksUsedEntry_DoNotUseDefaultTypeInternal _GameStats_BlocksUsedEntry_DoNotUse_default_instance_;

inline constexpr BoardState::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : compressed_board_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        board_version_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR BoardState::BoardState(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct BoardStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BoardStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BoardStateDefaultTypeInternal() {}
  union {
    BoardState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BoardStateDefaultTypeInternal _BoardState_default_instance_;

inline constexpr UserInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        username_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        last_seen_{nullptr},
        level_{0},
        total_games_{0},
        wins_{0},
        losses_{0},
        rating_{0},
        status_{static_cast< ::blokus::UserStatus >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR UserInfo::UserInfo(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct UserInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserInfoDefaultTypeInternal() {}
  union {
    UserInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserInfoDefaultTypeInternal _UserInfo_default_instance_;

inline constexpr ServerInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        server_version_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        server_time_{nullptr},
        online_users_{0},
        active_rooms_{0},
        ongoing_games_{0},
        server_load_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ServerInfo::ServerInfo(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ServerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerInfoDefaultTypeInternal() {}
  union {
    ServerInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerInfoDefaultTypeInternal _ServerInfo_default_instance_;

inline constexpr RoomInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        room_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        host_username_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        game_mode_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        created_at_{nullptr},
        room_id_{0},
        current_players_{0},
        max_players_{0},
        is_private_{false},
        is_playing_{false} {}

template <typename>
PROTOBUF_CONSTEXPR RoomInfo::RoomInfo(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RoomInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoomInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoomInfoDefaultTypeInternal() {}
  union {
    RoomInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoomInfoDefaultTypeInternal _RoomInfo_default_instance_;

inline constexpr Result::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : details_{},
        message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        code_{static_cast< ::blokus::ResultCode >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Result::Result(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResultDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResultDefaultTypeInternal() {}
  union {
    Result _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResultDefaultTypeInternal _Result_default_instance_;

inline constexpr GameStats::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : player_scores_{},
        blocks_used_{},
        winner_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        total_moves_{0},
        game_duration_seconds_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GameStats::GameStats(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GameStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameStatsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameStatsDefaultTypeInternal() {}
  union {
    GameStats _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameStatsDefaultTypeInternal _GameStats_default_instance_;

inline constexpr BlockPlacement::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        position_{nullptr},
        type_{static_cast< ::blokus::BlockType >(0)},
        rotation_{static_cast< ::blokus::Rotation >(0)},
        flip_{static_cast< ::blokus::FlipState >(0)},
        player_{static_cast< ::blokus::PlayerColor >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR BlockPlacement::BlockPlacement(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct BlockPlacementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockPlacementDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockPlacementDefaultTypeInternal() {}
  union {
    BlockPlacement _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockPlacementDefaultTypeInternal _BlockPlacement_default_instance_;
}  // namespace blokus
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_common_2eproto[7];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_common_2eproto = nullptr;
const ::uint32_t
    TableStruct_common_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::blokus::Position, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::Position, _impl_.row_),
        PROTOBUF_FIELD_OFFSET(::blokus::Position, _impl_.col_),
        PROTOBUF_FIELD_OFFSET(::blokus::BlockPlacement, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::BlockPlacement, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::BlockPlacement, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::blokus::BlockPlacement, _impl_.position_),
        PROTOBUF_FIELD_OFFSET(::blokus::BlockPlacement, _impl_.rotation_),
        PROTOBUF_FIELD_OFFSET(::blokus::BlockPlacement, _impl_.flip_),
        PROTOBUF_FIELD_OFFSET(::blokus::BlockPlacement, _impl_.player_),
        ~0u,
        0,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::blokus::UserInfo, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::UserInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::UserInfo, _impl_.username_),
        PROTOBUF_FIELD_OFFSET(::blokus::UserInfo, _impl_.level_),
        PROTOBUF_FIELD_OFFSET(::blokus::UserInfo, _impl_.total_games_),
        PROTOBUF_FIELD_OFFSET(::blokus::UserInfo, _impl_.wins_),
        PROTOBUF_FIELD_OFFSET(::blokus::UserInfo, _impl_.losses_),
        PROTOBUF_FIELD_OFFSET(::blokus::UserInfo, _impl_.rating_),
        PROTOBUF_FIELD_OFFSET(::blokus::UserInfo, _impl_.status_),
        PROTOBUF_FIELD_OFFSET(::blokus::UserInfo, _impl_.last_seen_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::blokus::PlayerSlot, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::PlayerSlot, _impl_.color_),
        PROTOBUF_FIELD_OFFSET(::blokus::PlayerSlot, _impl_.username_),
        PROTOBUF_FIELD_OFFSET(::blokus::PlayerSlot, _impl_.is_ai_),
        PROTOBUF_FIELD_OFFSET(::blokus::PlayerSlot, _impl_.ai_difficulty_),
        PROTOBUF_FIELD_OFFSET(::blokus::PlayerSlot, _impl_.is_host_),
        PROTOBUF_FIELD_OFFSET(::blokus::PlayerSlot, _impl_.is_ready_),
        PROTOBUF_FIELD_OFFSET(::blokus::PlayerSlot, _impl_.score_),
        PROTOBUF_FIELD_OFFSET(::blokus::PlayerSlot, _impl_.remaining_blocks_),
        PROTOBUF_FIELD_OFFSET(::blokus::PlayerSlot, _impl_.used_blocks_),
        PROTOBUF_FIELD_OFFSET(::blokus::RoomInfo, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::RoomInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::RoomInfo, _impl_.room_id_),
        PROTOBUF_FIELD_OFFSET(::blokus::RoomInfo, _impl_.room_name_),
        PROTOBUF_FIELD_OFFSET(::blokus::RoomInfo, _impl_.host_username_),
        PROTOBUF_FIELD_OFFSET(::blokus::RoomInfo, _impl_.current_players_),
        PROTOBUF_FIELD_OFFSET(::blokus::RoomInfo, _impl_.max_players_),
        PROTOBUF_FIELD_OFFSET(::blokus::RoomInfo, _impl_.is_private_),
        PROTOBUF_FIELD_OFFSET(::blokus::RoomInfo, _impl_.is_playing_),
        PROTOBUF_FIELD_OFFSET(::blokus::RoomInfo, _impl_.game_mode_),
        PROTOBUF_FIELD_OFFSET(::blokus::RoomInfo, _impl_.created_at_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::blokus::BoardState, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::BoardState, _impl_.compressed_board_),
        PROTOBUF_FIELD_OFFSET(::blokus::BoardState, _impl_.board_version_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameStats_PlayerScoresEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameStats_PlayerScoresEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::GameStats_PlayerScoresEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameStats_PlayerScoresEntry_DoNotUse, _impl_.value_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::blokus::GameStats_BlocksUsedEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameStats_BlocksUsedEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::GameStats_BlocksUsedEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameStats_BlocksUsedEntry_DoNotUse, _impl_.value_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::blokus::GameStats, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::GameStats, _impl_.total_moves_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameStats, _impl_.game_duration_seconds_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameStats, _impl_.player_scores_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameStats, _impl_.blocks_used_),
        PROTOBUF_FIELD_OFFSET(::blokus::GameStats, _impl_.winner_),
        PROTOBUF_FIELD_OFFSET(::blokus::ServerInfo, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::ServerInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::ServerInfo, _impl_.online_users_),
        PROTOBUF_FIELD_OFFSET(::blokus::ServerInfo, _impl_.active_rooms_),
        PROTOBUF_FIELD_OFFSET(::blokus::ServerInfo, _impl_.ongoing_games_),
        PROTOBUF_FIELD_OFFSET(::blokus::ServerInfo, _impl_.server_load_),
        PROTOBUF_FIELD_OFFSET(::blokus::ServerInfo, _impl_.server_version_),
        PROTOBUF_FIELD_OFFSET(::blokus::ServerInfo, _impl_.server_time_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        PROTOBUF_FIELD_OFFSET(::blokus::Result_DetailsEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::blokus::Result_DetailsEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::Result_DetailsEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::blokus::Result_DetailsEntry_DoNotUse, _impl_.value_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::blokus::Result, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::blokus::Result, _impl_.code_),
        PROTOBUF_FIELD_OFFSET(::blokus::Result, _impl_.message_),
        PROTOBUF_FIELD_OFFSET(::blokus::Result, _impl_.details_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::blokus::Position)},
        {10, 23, -1, sizeof(::blokus::BlockPlacement)},
        {28, 44, -1, sizeof(::blokus::UserInfo)},
        {52, -1, -1, sizeof(::blokus::PlayerSlot)},
        {69, 86, -1, sizeof(::blokus::RoomInfo)},
        {95, -1, -1, sizeof(::blokus::BoardState)},
        {105, 115, -1, sizeof(::blokus::GameStats_PlayerScoresEntry_DoNotUse)},
        {117, 127, -1, sizeof(::blokus::GameStats_BlocksUsedEntry_DoNotUse)},
        {129, -1, -1, sizeof(::blokus::GameStats)},
        {142, 156, -1, sizeof(::blokus::ServerInfo)},
        {162, 172, -1, sizeof(::blokus::Result_DetailsEntry_DoNotUse)},
        {174, -1, -1, sizeof(::blokus::Result)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::blokus::_Position_default_instance_._instance,
    &::blokus::_BlockPlacement_default_instance_._instance,
    &::blokus::_UserInfo_default_instance_._instance,
    &::blokus::_PlayerSlot_default_instance_._instance,
    &::blokus::_RoomInfo_default_instance_._instance,
    &::blokus::_BoardState_default_instance_._instance,
    &::blokus::_GameStats_PlayerScoresEntry_DoNotUse_default_instance_._instance,
    &::blokus::_GameStats_BlocksUsedEntry_DoNotUse_default_instance_._instance,
    &::blokus::_GameStats_default_instance_._instance,
    &::blokus::_ServerInfo_default_instance_._instance,
    &::blokus::_Result_DetailsEntry_DoNotUse_default_instance_._instance,
    &::blokus::_Result_default_instance_._instance,
};
const char descriptor_table_protodef_common_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\014common.proto\022\006blokus\032\037google/protobuf/"
    "timestamp.proto\"$\n\010Position\022\013\n\003row\030\001 \001(\005"
    "\022\013\n\003col\030\002 \001(\005\"\277\001\n\016BlockPlacement\022\037\n\004type"
    "\030\001 \001(\0162\021.blokus.BlockType\022\"\n\010position\030\002 "
    "\001(\0132\020.blokus.Position\022\"\n\010rotation\030\003 \001(\0162"
    "\020.blokus.Rotation\022\037\n\004flip\030\004 \001(\0162\021.blokus"
    ".FlipState\022#\n\006player\030\005 \001(\0162\023.blokus.Play"
    "erColor\"\301\001\n\010UserInfo\022\020\n\010username\030\001 \001(\t\022\r"
    "\n\005level\030\002 \001(\005\022\023\n\013total_games\030\003 \001(\005\022\014\n\004wi"
    "ns\030\004 \001(\005\022\016\n\006losses\030\005 \001(\005\022\016\n\006rating\030\006 \001(\005"
    "\022\"\n\006status\030\007 \001(\0162\022.blokus.UserStatus\022-\n\t"
    "last_seen\030\010 \001(\0132\032.google.protobuf.Timest"
    "amp\"\334\001\n\nPlayerSlot\022\"\n\005color\030\001 \001(\0162\023.blok"
    "us.PlayerColor\022\020\n\010username\030\002 \001(\t\022\r\n\005is_a"
    "i\030\003 \001(\010\022\025\n\rai_difficulty\030\004 \001(\005\022\017\n\007is_hos"
    "t\030\005 \001(\010\022\020\n\010is_ready\030\006 \001(\010\022\r\n\005score\030\007 \001(\005"
    "\022\030\n\020remaining_blocks\030\010 \001(\005\022&\n\013used_block"
    "s\030\t \003(\0162\021.blokus.BlockType\"\336\001\n\010RoomInfo\022"
    "\017\n\007room_id\030\001 \001(\005\022\021\n\troom_name\030\002 \001(\t\022\025\n\rh"
    "ost_username\030\003 \001(\t\022\027\n\017current_players\030\004 "
    "\001(\005\022\023\n\013max_players\030\005 \001(\005\022\022\n\nis_private\030\006"
    " \001(\010\022\022\n\nis_playing\030\007 \001(\010\022\021\n\tgame_mode\030\010 "
    "\001(\t\022.\n\ncreated_at\030\t \001(\0132\032.google.protobu"
    "f.Timestamp\"=\n\nBoardState\022\030\n\020compressed_"
    "board\030\001 \001(\014\022\025\n\rboard_version\030\002 \001(\005\"\253\002\n\tG"
    "ameStats\022\023\n\013total_moves\030\001 \001(\005\022\035\n\025game_du"
    "ration_seconds\030\002 \001(\005\022:\n\rplayer_scores\030\003 "
    "\003(\0132#.blokus.GameStats.PlayerScoresEntry"
    "\0226\n\013blocks_used\030\004 \003(\0132!.blokus.GameStats"
    ".BlocksUsedEntry\022\016\n\006winner\030\005 \001(\t\0323\n\021Play"
    "erScoresEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001("
    "\005:\0028\001\0321\n\017BlocksUsedEntry\022\013\n\003key\030\001 \001(\t\022\r\n"
    "\005value\030\002 \001(\005:\0028\001\"\255\001\n\nServerInfo\022\024\n\014onlin"
    "e_users\030\001 \001(\005\022\024\n\014active_rooms\030\002 \001(\005\022\025\n\ro"
    "ngoing_games\030\003 \001(\005\022\023\n\013server_load\030\004 \001(\002\022"
    "\026\n\016server_version\030\005 \001(\t\022/\n\013server_time\030\006"
    " \001(\0132\032.google.protobuf.Timestamp\"\231\001\n\006Res"
    "ult\022 \n\004code\030\001 \001(\0162\022.blokus.ResultCode\022\017\n"
    "\007message\030\002 \001(\t\022,\n\007details\030\003 \003(\0132\033.blokus"
    ".Result.DetailsEntry\032.\n\014DetailsEntry\022\013\n\003"
    "key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001*\202\001\n\013PlayerC"
    "olor\022\025\n\021PLAYER_COLOR_NONE\020\000\022\025\n\021PLAYER_CO"
    "LOR_BLUE\020\001\022\027\n\023PLAYER_COLOR_YELLOW\020\002\022\024\n\020P"
    "LAYER_COLOR_RED\020\003\022\026\n\022PLAYER_COLOR_GREEN\020"
    "\004*\206\004\n\tBlockType\022\025\n\021BLOCK_TYPE_SINGLE\020\000\022\025"
    "\n\021BLOCK_TYPE_DOMINO\020\001\022\030\n\024BLOCK_TYPE_TRIO"
    "_LINE\020\002\022\031\n\025BLOCK_TYPE_TRIO_ANGLE\020\003\022\026\n\022BL"
    "OCK_TYPE_TETRO_I\020\004\022\026\n\022BLOCK_TYPE_TETRO_O"
    "\020\005\022\026\n\022BLOCK_TYPE_TETRO_T\020\006\022\026\n\022BLOCK_TYPE"
    "_TETRO_L\020\007\022\026\n\022BLOCK_TYPE_TETRO_S\020\010\022\026\n\022BL"
    "OCK_TYPE_PENTO_F\020\t\022\026\n\022BLOCK_TYPE_PENTO_I"
    "\020\n\022\026\n\022BLOCK_TYPE_PENTO_L\020\013\022\026\n\022BLOCK_TYPE"
    "_PENTO_N\020\014\022\026\n\022BLOCK_TYPE_PENTO_P\020\r\022\026\n\022BL"
    "OCK_TYPE_PENTO_T\020\016\022\026\n\022BLOCK_TYPE_PENTO_U"
    "\020\017\022\026\n\022BLOCK_TYPE_PENTO_V\020\020\022\026\n\022BLOCK_TYPE"
    "_PENTO_W\020\021\022\026\n\022BLOCK_TYPE_PENTO_X\020\022\022\026\n\022BL"
    "OCK_TYPE_PENTO_Y\020\023\022\026\n\022BLOCK_TYPE_PENTO_Z"
    "\020\024*O\n\010Rotation\022\016\n\nROTATION_0\020\000\022\017\n\013ROTATI"
    "ON_90\020\001\022\020\n\014ROTATION_180\020\002\022\020\n\014ROTATION_27"
    "0\020\003*S\n\tFlipState\022\017\n\013FLIP_NORMAL\020\000\022\023\n\017FLI"
    "P_HORIZONTAL\020\001\022\021\n\rFLIP_VERTICAL\020\002\022\r\n\tFLI"
    "P_BOTH\020\003*k\n\tGameState\022\026\n\022GAME_STATE_WAIT"
    "ING\020\000\022\026\n\022GAME_STATE_PLAYING\020\001\022\027\n\023GAME_ST"
    "ATE_FINISHED\020\002\022\025\n\021GAME_STATE_PAUSED\020\003*\206\001"
    "\n\nUserStatus\022\027\n\023USER_STATUS_OFFLINE\020\000\022\026\n"
    "\022USER_STATUS_ONLINE\020\001\022\030\n\024USER_STATUS_IN_"
    "LOBBY\020\002\022\027\n\023USER_STATUS_IN_GAME\020\003\022\024\n\020USER"
    "_STATUS_AWAY\020\004*\361\001\n\nResultCode\022\022\n\016RESULT_"
    "SUCCESS\020\000\022\030\n\024RESULT_UNKNOWN_ERROR\020\001\022\032\n\026R"
    "ESULT_INVALID_REQUEST\020\002\022\034\n\030RESULT_PERMIS"
    "SION_DENIED\020\003\022\024\n\020RESULT_NOT_FOUND\020\004\022\031\n\025R"
    "ESULT_ALREADY_EXISTS\020\005\022\036\n\032RESULT_GAME_RU"
    "LE_VIOLATION\020\006\022\022\n\016RESULT_TIMEOUT\020\007\022\026\n\022RE"
    "SULT_SERVER_BUSY\020\010b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_common_2eproto_deps[1] =
    {
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_common_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_common_2eproto = {
    false,
    false,
    2946,
    descriptor_table_protodef_common_2eproto,
    "common.proto",
    &descriptor_table_common_2eproto_once,
    descriptor_table_common_2eproto_deps,
    1,
    12,
    schemas,
    file_default_instances,
    TableStruct_common_2eproto::offsets,
    file_level_enum_descriptors_common_2eproto,
    file_level_service_descriptors_common_2eproto,
};
namespace blokus {
const ::google::protobuf::EnumDescriptor* PlayerColor_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t PlayerColor_internal_data_[] = {
    327680u, 0u, };
bool PlayerColor_IsValid(int value) {
  return 0 <= value && value <= 4;
}
const ::google::protobuf::EnumDescriptor* BlockType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t BlockType_internal_data_[] = {
    1376256u, 0u, };
bool BlockType_IsValid(int value) {
  return 0 <= value && value <= 20;
}
const ::google::protobuf::EnumDescriptor* Rotation_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t Rotation_internal_data_[] = {
    262144u, 0u, };
bool Rotation_IsValid(int value) {
  return 0 <= value && value <= 3;
}
const ::google::protobuf::EnumDescriptor* FlipState_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[3];
}
PROTOBUF_CONSTINIT const uint32_t FlipState_internal_data_[] = {
    262144u, 0u, };
bool FlipState_IsValid(int value) {
  return 0 <= value && value <= 3;
}
const ::google::protobuf::EnumDescriptor* GameState_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[4];
}
PROTOBUF_CONSTINIT const uint32_t GameState_internal_data_[] = {
    262144u, 0u, };
bool GameState_IsValid(int value) {
  return 0 <= value && value <= 3;
}
const ::google::protobuf::EnumDescriptor* UserStatus_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[5];
}
PROTOBUF_CONSTINIT const uint32_t UserStatus_internal_data_[] = {
    327680u, 0u, };
bool UserStatus_IsValid(int value) {
  return 0 <= value && value <= 4;
}
const ::google::protobuf::EnumDescriptor* ResultCode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[6];
}
PROTOBUF_CONSTINIT const uint32_t ResultCode_internal_data_[] = {
    589824u, 0u, };
bool ResultCode_IsValid(int value) {
  return 0 <= value && value <= 8;
}
// ===================================================================

class Position::_Internal {
 public:
};

Position::Position(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.Position)
}
Position::Position(
    ::google::protobuf::Arena* arena, const Position& from)
    : Position(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Position::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Position::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, row_),
           0,
           offsetof(Impl_, col_) -
               offsetof(Impl_, row_) +
               sizeof(Impl_::col_));
}
Position::~Position() {
  // @@protoc_insertion_point(destructor:blokus.Position)
  SharedDtor(*this);
}
inline void Position::SharedDtor(MessageLite& self) {
  Position& this_ = static_cast<Position&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* Position::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Position(arena);
}
constexpr auto Position::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Position),
                                            alignof(Position));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Position::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Position_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Position::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Position>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Position::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Position>(), &Position::ByteSizeLong,
            &Position::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Position, _impl_._cached_size_),
        false,
    },
    &Position::kDescriptorMethods,
    &descriptor_table_common_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Position::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> Position::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::Position>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 col = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Position, _impl_.col_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Position, _impl_.col_)}},
    // int32 row = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Position, _impl_.row_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Position, _impl_.row_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 row = 1;
    {PROTOBUF_FIELD_OFFSET(Position, _impl_.row_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 col = 2;
    {PROTOBUF_FIELD_OFFSET(Position, _impl_.col_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.Position)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.row_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.col_) -
      reinterpret_cast<char*>(&_impl_.row_)) + sizeof(_impl_.col_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Position::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Position& this_ = static_cast<const Position&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Position::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Position& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.Position)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 row = 1;
          if (this_._internal_row() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_row(), target);
          }

          // int32 col = 2;
          if (this_._internal_col() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_col(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.Position)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Position::ByteSizeLong(const MessageLite& base) {
          const Position& this_ = static_cast<const Position&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Position::ByteSizeLong() const {
          const Position& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.Position)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // int32 row = 1;
            if (this_._internal_row() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_row());
            }
            // int32 col = 2;
            if (this_._internal_col() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_col());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Position::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Position*>(&to_msg);
  auto& from = static_cast<const Position&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.Position)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_row() != 0) {
    _this->_impl_.row_ = from._impl_.row_;
  }
  if (from._internal_col() != 0) {
    _this->_impl_.col_ = from._impl_.col_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Position::InternalSwap(Position* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Position, _impl_.col_)
      + sizeof(Position::_impl_.col_)
      - PROTOBUF_FIELD_OFFSET(Position, _impl_.row_)>(
          reinterpret_cast<char*>(&_impl_.row_),
          reinterpret_cast<char*>(&other->_impl_.row_));
}

::google::protobuf::Metadata Position::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class BlockPlacement::_Internal {
 public:
  using HasBits =
      decltype(std::declval<BlockPlacement>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(BlockPlacement, _impl_._has_bits_);
};

BlockPlacement::BlockPlacement(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.BlockPlacement)
}
inline PROTOBUF_NDEBUG_INLINE BlockPlacement::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::BlockPlacement& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

BlockPlacement::BlockPlacement(
    ::google::protobuf::Arena* arena,
    const BlockPlacement& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  BlockPlacement* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.position_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::blokus::Position>(
                              arena, *from._impl_.position_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, type_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, type_),
           offsetof(Impl_, player_) -
               offsetof(Impl_, type_) +
               sizeof(Impl_::player_));

  // @@protoc_insertion_point(copy_constructor:blokus.BlockPlacement)
}
inline PROTOBUF_NDEBUG_INLINE BlockPlacement::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void BlockPlacement::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, position_),
           0,
           offsetof(Impl_, player_) -
               offsetof(Impl_, position_) +
               sizeof(Impl_::player_));
}
BlockPlacement::~BlockPlacement() {
  // @@protoc_insertion_point(destructor:blokus.BlockPlacement)
  SharedDtor(*this);
}
inline void BlockPlacement::SharedDtor(MessageLite& self) {
  BlockPlacement& this_ = static_cast<BlockPlacement&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.position_;
  this_._impl_.~Impl_();
}

inline void* BlockPlacement::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) BlockPlacement(arena);
}
constexpr auto BlockPlacement::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(BlockPlacement),
                                            alignof(BlockPlacement));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull BlockPlacement::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_BlockPlacement_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &BlockPlacement::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<BlockPlacement>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &BlockPlacement::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<BlockPlacement>(), &BlockPlacement::ByteSizeLong,
            &BlockPlacement::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(BlockPlacement, _impl_._cached_size_),
        false,
    },
    &BlockPlacement::kDescriptorMethods,
    &descriptor_table_common_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* BlockPlacement::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 1, 0, 2> BlockPlacement::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(BlockPlacement, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::BlockPlacement>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .blokus.BlockType type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BlockPlacement, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(BlockPlacement, _impl_.type_)}},
    // .blokus.Position position = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(BlockPlacement, _impl_.position_)}},
    // .blokus.Rotation rotation = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BlockPlacement, _impl_.rotation_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(BlockPlacement, _impl_.rotation_)}},
    // .blokus.FlipState flip = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BlockPlacement, _impl_.flip_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(BlockPlacement, _impl_.flip_)}},
    // .blokus.PlayerColor player = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BlockPlacement, _impl_.player_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(BlockPlacement, _impl_.player_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .blokus.BlockType type = 1;
    {PROTOBUF_FIELD_OFFSET(BlockPlacement, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .blokus.Position position = 2;
    {PROTOBUF_FIELD_OFFSET(BlockPlacement, _impl_.position_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .blokus.Rotation rotation = 3;
    {PROTOBUF_FIELD_OFFSET(BlockPlacement, _impl_.rotation_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .blokus.FlipState flip = 4;
    {PROTOBUF_FIELD_OFFSET(BlockPlacement, _impl_.flip_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .blokus.PlayerColor player = 5;
    {PROTOBUF_FIELD_OFFSET(BlockPlacement, _impl_.player_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }}, {{
    {::_pbi::TcParser::GetTable<::blokus::Position>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void BlockPlacement::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.BlockPlacement)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.position_ != nullptr);
    _impl_.position_->Clear();
  }
  ::memset(&_impl_.type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.player_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.player_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* BlockPlacement::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const BlockPlacement& this_ = static_cast<const BlockPlacement&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* BlockPlacement::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const BlockPlacement& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.BlockPlacement)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .blokus.BlockType type = 1;
          if (this_._internal_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_type(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .blokus.Position position = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.position_, this_._impl_.position_->GetCachedSize(), target,
                stream);
          }

          // .blokus.Rotation rotation = 3;
          if (this_._internal_rotation() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                3, this_._internal_rotation(), target);
          }

          // .blokus.FlipState flip = 4;
          if (this_._internal_flip() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                4, this_._internal_flip(), target);
          }

          // .blokus.PlayerColor player = 5;
          if (this_._internal_player() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                5, this_._internal_player(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.BlockPlacement)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t BlockPlacement::ByteSizeLong(const MessageLite& base) {
          const BlockPlacement& this_ = static_cast<const BlockPlacement&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t BlockPlacement::ByteSizeLong() const {
          const BlockPlacement& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.BlockPlacement)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .blokus.Position position = 2;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.position_);
            }
          }
           {
            // .blokus.BlockType type = 1;
            if (this_._internal_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
            }
            // .blokus.Rotation rotation = 3;
            if (this_._internal_rotation() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_rotation());
            }
            // .blokus.FlipState flip = 4;
            if (this_._internal_flip() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_flip());
            }
            // .blokus.PlayerColor player = 5;
            if (this_._internal_player() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_player());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void BlockPlacement::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<BlockPlacement*>(&to_msg);
  auto& from = static_cast<const BlockPlacement&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.BlockPlacement)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.position_ != nullptr);
    if (_this->_impl_.position_ == nullptr) {
      _this->_impl_.position_ =
          ::google::protobuf::Message::CopyConstruct<::blokus::Position>(arena, *from._impl_.position_);
    } else {
      _this->_impl_.position_->MergeFrom(*from._impl_.position_);
    }
  }
  if (from._internal_type() != 0) {
    _this->_impl_.type_ = from._impl_.type_;
  }
  if (from._internal_rotation() != 0) {
    _this->_impl_.rotation_ = from._impl_.rotation_;
  }
  if (from._internal_flip() != 0) {
    _this->_impl_.flip_ = from._impl_.flip_;
  }
  if (from._internal_player() != 0) {
    _this->_impl_.player_ = from._impl_.player_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BlockPlacement::CopyFrom(const BlockPlacement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.BlockPlacement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void BlockPlacement::InternalSwap(BlockPlacement* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockPlacement, _impl_.player_)
      + sizeof(BlockPlacement::_impl_.player_)
      - PROTOBUF_FIELD_OFFSET(BlockPlacement, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::google::protobuf::Metadata BlockPlacement::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class UserInfo::_Internal {
 public:
  using HasBits =
      decltype(std::declval<UserInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(UserInfo, _impl_._has_bits_);
};

void UserInfo::clear_last_seen() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.last_seen_ != nullptr) _impl_.last_seen_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
UserInfo::UserInfo(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.UserInfo)
}
inline PROTOBUF_NDEBUG_INLINE UserInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::UserInfo& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        username_(arena, from.username_) {}

UserInfo::UserInfo(
    ::google::protobuf::Arena* arena,
    const UserInfo& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  UserInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.last_seen_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.last_seen_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, level_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, level_),
           offsetof(Impl_, status_) -
               offsetof(Impl_, level_) +
               sizeof(Impl_::status_));

  // @@protoc_insertion_point(copy_constructor:blokus.UserInfo)
}
inline PROTOBUF_NDEBUG_INLINE UserInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        username_(arena) {}

inline void UserInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, last_seen_),
           0,
           offsetof(Impl_, status_) -
               offsetof(Impl_, last_seen_) +
               sizeof(Impl_::status_));
}
UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:blokus.UserInfo)
  SharedDtor(*this);
}
inline void UserInfo::SharedDtor(MessageLite& self) {
  UserInfo& this_ = static_cast<UserInfo&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.username_.Destroy();
  delete this_._impl_.last_seen_;
  this_._impl_.~Impl_();
}

inline void* UserInfo::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) UserInfo(arena);
}
constexpr auto UserInfo::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(UserInfo),
                                            alignof(UserInfo));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull UserInfo::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_UserInfo_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &UserInfo::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<UserInfo>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &UserInfo::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<UserInfo>(), &UserInfo::ByteSizeLong,
            &UserInfo::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(UserInfo, _impl_._cached_size_),
        false,
    },
    &UserInfo::kDescriptorMethods,
    &descriptor_table_common_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* UserInfo::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 1, 40, 2> UserInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(UserInfo, _impl_._has_bits_),
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::UserInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .google.protobuf.Timestamp last_seen = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 0, 0, PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.last_seen_)}},
    // string username = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.username_)}},
    // int32 level = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(UserInfo, _impl_.level_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.level_)}},
    // int32 total_games = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(UserInfo, _impl_.total_games_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.total_games_)}},
    // int32 wins = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(UserInfo, _impl_.wins_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.wins_)}},
    // int32 losses = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(UserInfo, _impl_.losses_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.losses_)}},
    // int32 rating = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(UserInfo, _impl_.rating_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.rating_)}},
    // .blokus.UserStatus status = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(UserInfo, _impl_.status_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.status_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string username = 1;
    {PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.username_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 level = 2;
    {PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.level_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 total_games = 3;
    {PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.total_games_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 wins = 4;
    {PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.wins_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 losses = 5;
    {PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.losses_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 rating = 6;
    {PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.rating_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .blokus.UserStatus status = 7;
    {PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.status_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .google.protobuf.Timestamp last_seen = 8;
    {PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.last_seen_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\17\10\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "blokus.UserInfo"
    "username"
  }},
};

PROTOBUF_NOINLINE void UserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.UserInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.username_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.last_seen_ != nullptr);
    _impl_.last_seen_->Clear();
  }
  ::memset(&_impl_.level_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.level_)) + sizeof(_impl_.status_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* UserInfo::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const UserInfo& this_ = static_cast<const UserInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* UserInfo::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const UserInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.UserInfo)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string username = 1;
          if (!this_._internal_username().empty()) {
            const std::string& _s = this_._internal_username();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.UserInfo.username");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // int32 level = 2;
          if (this_._internal_level() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_level(), target);
          }

          // int32 total_games = 3;
          if (this_._internal_total_games() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_total_games(), target);
          }

          // int32 wins = 4;
          if (this_._internal_wins() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_wins(), target);
          }

          // int32 losses = 5;
          if (this_._internal_losses() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<5>(
                    stream, this_._internal_losses(), target);
          }

          // int32 rating = 6;
          if (this_._internal_rating() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<6>(
                    stream, this_._internal_rating(), target);
          }

          // .blokus.UserStatus status = 7;
          if (this_._internal_status() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                7, this_._internal_status(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp last_seen = 8;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                8, *this_._impl_.last_seen_, this_._impl_.last_seen_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.UserInfo)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t UserInfo::ByteSizeLong(const MessageLite& base) {
          const UserInfo& this_ = static_cast<const UserInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t UserInfo::ByteSizeLong() const {
          const UserInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.UserInfo)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string username = 1;
            if (!this_._internal_username().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_username());
            }
          }
           {
            // .google.protobuf.Timestamp last_seen = 8;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.last_seen_);
            }
          }
           {
            // int32 level = 2;
            if (this_._internal_level() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_level());
            }
            // int32 total_games = 3;
            if (this_._internal_total_games() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_total_games());
            }
            // int32 wins = 4;
            if (this_._internal_wins() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_wins());
            }
            // int32 losses = 5;
            if (this_._internal_losses() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_losses());
            }
            // int32 rating = 6;
            if (this_._internal_rating() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_rating());
            }
            // .blokus.UserStatus status = 7;
            if (this_._internal_status() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_status());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void UserInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<UserInfo*>(&to_msg);
  auto& from = static_cast<const UserInfo&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.UserInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.last_seen_ != nullptr);
    if (_this->_impl_.last_seen_ == nullptr) {
      _this->_impl_.last_seen_ =
          ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.last_seen_);
    } else {
      _this->_impl_.last_seen_->MergeFrom(*from._impl_.last_seen_);
    }
  }
  if (from._internal_level() != 0) {
    _this->_impl_.level_ = from._impl_.level_;
  }
  if (from._internal_total_games() != 0) {
    _this->_impl_.total_games_ = from._impl_.total_games_;
  }
  if (from._internal_wins() != 0) {
    _this->_impl_.wins_ = from._impl_.wins_;
  }
  if (from._internal_losses() != 0) {
    _this->_impl_.losses_ = from._impl_.losses_;
  }
  if (from._internal_rating() != 0) {
    _this->_impl_.rating_ = from._impl_.rating_;
  }
  if (from._internal_status() != 0) {
    _this->_impl_.status_ = from._impl_.status_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UserInfo::CopyFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void UserInfo::InternalSwap(UserInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.username_, &other->_impl_.username_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.status_)
      + sizeof(UserInfo::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.last_seen_)>(
          reinterpret_cast<char*>(&_impl_.last_seen_),
          reinterpret_cast<char*>(&other->_impl_.last_seen_));
}

::google::protobuf::Metadata UserInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PlayerSlot::_Internal {
 public:
};

PlayerSlot::PlayerSlot(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.PlayerSlot)
}
inline PROTOBUF_NDEBUG_INLINE PlayerSlot::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::PlayerSlot& from_msg)
      : used_blocks_{visibility, arena, from.used_blocks_},
        _used_blocks_cached_byte_size_{0},
        username_(arena, from.username_),
        _cached_size_{0} {}

PlayerSlot::PlayerSlot(
    ::google::protobuf::Arena* arena,
    const PlayerSlot& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PlayerSlot* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, color_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, color_),
           offsetof(Impl_, remaining_blocks_) -
               offsetof(Impl_, color_) +
               sizeof(Impl_::remaining_blocks_));

  // @@protoc_insertion_point(copy_constructor:blokus.PlayerSlot)
}
inline PROTOBUF_NDEBUG_INLINE PlayerSlot::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : used_blocks_{visibility, arena},
        _used_blocks_cached_byte_size_{0},
        username_(arena),
        _cached_size_{0} {}

inline void PlayerSlot::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, color_),
           0,
           offsetof(Impl_, remaining_blocks_) -
               offsetof(Impl_, color_) +
               sizeof(Impl_::remaining_blocks_));
}
PlayerSlot::~PlayerSlot() {
  // @@protoc_insertion_point(destructor:blokus.PlayerSlot)
  SharedDtor(*this);
}
inline void PlayerSlot::SharedDtor(MessageLite& self) {
  PlayerSlot& this_ = static_cast<PlayerSlot&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.username_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PlayerSlot::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PlayerSlot(arena);
}
constexpr auto PlayerSlot::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(PlayerSlot, _impl_.used_blocks_) +
          decltype(PlayerSlot::_impl_.used_blocks_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(PlayerSlot), alignof(PlayerSlot), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&PlayerSlot::PlacementNew_,
                                 sizeof(PlayerSlot),
                                 alignof(PlayerSlot));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PlayerSlot::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PlayerSlot_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PlayerSlot::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PlayerSlot>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PlayerSlot::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PlayerSlot>(), &PlayerSlot::ByteSizeLong,
            &PlayerSlot::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PlayerSlot, _impl_._cached_size_),
        false,
    },
    &PlayerSlot::kDescriptorMethods,
    &descriptor_table_common_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PlayerSlot::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 0, 42, 2> PlayerSlot::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::PlayerSlot>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .blokus.PlayerColor color = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PlayerSlot, _impl_.color_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerSlot, _impl_.color_)}},
    // string username = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerSlot, _impl_.username_)}},
    // bool is_ai = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(PlayerSlot, _impl_.is_ai_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerSlot, _impl_.is_ai_)}},
    // int32 ai_difficulty = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PlayerSlot, _impl_.ai_difficulty_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerSlot, _impl_.ai_difficulty_)}},
    // bool is_host = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(PlayerSlot, _impl_.is_host_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerSlot, _impl_.is_host_)}},
    // bool is_ready = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(PlayerSlot, _impl_.is_ready_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerSlot, _impl_.is_ready_)}},
    // int32 score = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PlayerSlot, _impl_.score_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerSlot, _impl_.score_)}},
    // int32 remaining_blocks = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PlayerSlot, _impl_.remaining_blocks_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerSlot, _impl_.remaining_blocks_)}},
    // repeated .blokus.BlockType used_blocks = 9;
    {::_pbi::TcParser::FastV32P1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerSlot, _impl_.used_blocks_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .blokus.PlayerColor color = 1;
    {PROTOBUF_FIELD_OFFSET(PlayerSlot, _impl_.color_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string username = 2;
    {PROTOBUF_FIELD_OFFSET(PlayerSlot, _impl_.username_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool is_ai = 3;
    {PROTOBUF_FIELD_OFFSET(PlayerSlot, _impl_.is_ai_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 ai_difficulty = 4;
    {PROTOBUF_FIELD_OFFSET(PlayerSlot, _impl_.ai_difficulty_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool is_host = 5;
    {PROTOBUF_FIELD_OFFSET(PlayerSlot, _impl_.is_host_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool is_ready = 6;
    {PROTOBUF_FIELD_OFFSET(PlayerSlot, _impl_.is_ready_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 score = 7;
    {PROTOBUF_FIELD_OFFSET(PlayerSlot, _impl_.score_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 remaining_blocks = 8;
    {PROTOBUF_FIELD_OFFSET(PlayerSlot, _impl_.remaining_blocks_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated .blokus.BlockType used_blocks = 9;
    {PROTOBUF_FIELD_OFFSET(PlayerSlot, _impl_.used_blocks_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedOpenEnum)},
  }},
  // no aux_entries
  {{
    "\21\0\10\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "blokus.PlayerSlot"
    "username"
  }},
};

PROTOBUF_NOINLINE void PlayerSlot::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.PlayerSlot)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.used_blocks_.Clear();
  _impl_.username_.ClearToEmpty();
  ::memset(&_impl_.color_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.remaining_blocks_) -
      reinterpret_cast<char*>(&_impl_.color_)) + sizeof(_impl_.remaining_blocks_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PlayerSlot::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PlayerSlot& this_ = static_cast<const PlayerSlot&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PlayerSlot::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PlayerSlot& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.PlayerSlot)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .blokus.PlayerColor color = 1;
          if (this_._internal_color() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_color(), target);
          }

          // string username = 2;
          if (!this_._internal_username().empty()) {
            const std::string& _s = this_._internal_username();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.PlayerSlot.username");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // bool is_ai = 3;
          if (this_._internal_is_ai() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                3, this_._internal_is_ai(), target);
          }

          // int32 ai_difficulty = 4;
          if (this_._internal_ai_difficulty() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_ai_difficulty(), target);
          }

          // bool is_host = 5;
          if (this_._internal_is_host() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                5, this_._internal_is_host(), target);
          }

          // bool is_ready = 6;
          if (this_._internal_is_ready() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                6, this_._internal_is_ready(), target);
          }

          // int32 score = 7;
          if (this_._internal_score() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<7>(
                    stream, this_._internal_score(), target);
          }

          // int32 remaining_blocks = 8;
          if (this_._internal_remaining_blocks() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<8>(
                    stream, this_._internal_remaining_blocks(), target);
          }

          // repeated .blokus.BlockType used_blocks = 9;
          {
            std::size_t byte_size =
                                              this_._impl_._used_blocks_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteEnumPacked(
                  9, this_._internal_used_blocks(), byte_size, target);
            }
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.PlayerSlot)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PlayerSlot::ByteSizeLong(const MessageLite& base) {
          const PlayerSlot& this_ = static_cast<const PlayerSlot&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PlayerSlot::ByteSizeLong() const {
          const PlayerSlot& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.PlayerSlot)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .blokus.BlockType used_blocks = 9;
            {
              total_size += ::_pbi::WireFormatLite::EnumSizeWithPackedTagSize(
                  this_._internal_used_blocks(), 1, this_._impl_._used_blocks_cached_byte_size_);
            }
          }
           {
            // string username = 2;
            if (!this_._internal_username().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_username());
            }
            // .blokus.PlayerColor color = 1;
            if (this_._internal_color() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_color());
            }
            // int32 ai_difficulty = 4;
            if (this_._internal_ai_difficulty() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_ai_difficulty());
            }
            // bool is_ai = 3;
            if (this_._internal_is_ai() != 0) {
              total_size += 2;
            }
            // bool is_host = 5;
            if (this_._internal_is_host() != 0) {
              total_size += 2;
            }
            // bool is_ready = 6;
            if (this_._internal_is_ready() != 0) {
              total_size += 2;
            }
            // int32 score = 7;
            if (this_._internal_score() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_score());
            }
            // int32 remaining_blocks = 8;
            if (this_._internal_remaining_blocks() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_remaining_blocks());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PlayerSlot::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PlayerSlot*>(&to_msg);
  auto& from = static_cast<const PlayerSlot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.PlayerSlot)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_used_blocks()->MergeFrom(from._internal_used_blocks());
  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (from._internal_color() != 0) {
    _this->_impl_.color_ = from._impl_.color_;
  }
  if (from._internal_ai_difficulty() != 0) {
    _this->_impl_.ai_difficulty_ = from._impl_.ai_difficulty_;
  }
  if (from._internal_is_ai() != 0) {
    _this->_impl_.is_ai_ = from._impl_.is_ai_;
  }
  if (from._internal_is_host() != 0) {
    _this->_impl_.is_host_ = from._impl_.is_host_;
  }
  if (from._internal_is_ready() != 0) {
    _this->_impl_.is_ready_ = from._impl_.is_ready_;
  }
  if (from._internal_score() != 0) {
    _this->_impl_.score_ = from._impl_.score_;
  }
  if (from._internal_remaining_blocks() != 0) {
    _this->_impl_.remaining_blocks_ = from._impl_.remaining_blocks_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerSlot::CopyFrom(const PlayerSlot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.PlayerSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PlayerSlot::InternalSwap(PlayerSlot* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.used_blocks_.InternalSwap(&other->_impl_.used_blocks_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.username_, &other->_impl_.username_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerSlot, _impl_.remaining_blocks_)
      + sizeof(PlayerSlot::_impl_.remaining_blocks_)
      - PROTOBUF_FIELD_OFFSET(PlayerSlot, _impl_.color_)>(
          reinterpret_cast<char*>(&_impl_.color_),
          reinterpret_cast<char*>(&other->_impl_.color_));
}

::google::protobuf::Metadata PlayerSlot::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RoomInfo::_Internal {
 public:
  using HasBits =
      decltype(std::declval<RoomInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(RoomInfo, _impl_._has_bits_);
};

void RoomInfo::clear_created_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.created_at_ != nullptr) _impl_.created_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
RoomInfo::RoomInfo(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.RoomInfo)
}
inline PROTOBUF_NDEBUG_INLINE RoomInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::RoomInfo& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        room_name_(arena, from.room_name_),
        host_username_(arena, from.host_username_),
        game_mode_(arena, from.game_mode_) {}

RoomInfo::RoomInfo(
    ::google::protobuf::Arena* arena,
    const RoomInfo& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  RoomInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.created_at_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.created_at_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, room_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, room_id_),
           offsetof(Impl_, is_playing_) -
               offsetof(Impl_, room_id_) +
               sizeof(Impl_::is_playing_));

  // @@protoc_insertion_point(copy_constructor:blokus.RoomInfo)
}
inline PROTOBUF_NDEBUG_INLINE RoomInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        room_name_(arena),
        host_username_(arena),
        game_mode_(arena) {}

inline void RoomInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, created_at_),
           0,
           offsetof(Impl_, is_playing_) -
               offsetof(Impl_, created_at_) +
               sizeof(Impl_::is_playing_));
}
RoomInfo::~RoomInfo() {
  // @@protoc_insertion_point(destructor:blokus.RoomInfo)
  SharedDtor(*this);
}
inline void RoomInfo::SharedDtor(MessageLite& self) {
  RoomInfo& this_ = static_cast<RoomInfo&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.room_name_.Destroy();
  this_._impl_.host_username_.Destroy();
  this_._impl_.game_mode_.Destroy();
  delete this_._impl_.created_at_;
  this_._impl_.~Impl_();
}

inline void* RoomInfo::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) RoomInfo(arena);
}
constexpr auto RoomInfo::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(RoomInfo),
                                            alignof(RoomInfo));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull RoomInfo::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_RoomInfo_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &RoomInfo::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<RoomInfo>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &RoomInfo::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<RoomInfo>(), &RoomInfo::ByteSizeLong,
            &RoomInfo::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(RoomInfo, _impl_._cached_size_),
        false,
    },
    &RoomInfo::kDescriptorMethods,
    &descriptor_table_common_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* RoomInfo::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 1, 63, 2> RoomInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RoomInfo, _impl_._has_bits_),
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::RoomInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 room_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RoomInfo, _impl_.room_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(RoomInfo, _impl_.room_id_)}},
    // string room_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(RoomInfo, _impl_.room_name_)}},
    // string host_username = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(RoomInfo, _impl_.host_username_)}},
    // int32 current_players = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RoomInfo, _impl_.current_players_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(RoomInfo, _impl_.current_players_)}},
    // int32 max_players = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RoomInfo, _impl_.max_players_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(RoomInfo, _impl_.max_players_)}},
    // bool is_private = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(RoomInfo, _impl_.is_private_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(RoomInfo, _impl_.is_private_)}},
    // bool is_playing = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(RoomInfo, _impl_.is_playing_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(RoomInfo, _impl_.is_playing_)}},
    // string game_mode = 8;
    {::_pbi::TcParser::FastUS1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(RoomInfo, _impl_.game_mode_)}},
    // .google.protobuf.Timestamp created_at = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 0, 0, PROTOBUF_FIELD_OFFSET(RoomInfo, _impl_.created_at_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 room_id = 1;
    {PROTOBUF_FIELD_OFFSET(RoomInfo, _impl_.room_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string room_name = 2;
    {PROTOBUF_FIELD_OFFSET(RoomInfo, _impl_.room_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string host_username = 3;
    {PROTOBUF_FIELD_OFFSET(RoomInfo, _impl_.host_username_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 current_players = 4;
    {PROTOBUF_FIELD_OFFSET(RoomInfo, _impl_.current_players_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 max_players = 5;
    {PROTOBUF_FIELD_OFFSET(RoomInfo, _impl_.max_players_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool is_private = 6;
    {PROTOBUF_FIELD_OFFSET(RoomInfo, _impl_.is_private_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool is_playing = 7;
    {PROTOBUF_FIELD_OFFSET(RoomInfo, _impl_.is_playing_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string game_mode = 8;
    {PROTOBUF_FIELD_OFFSET(RoomInfo, _impl_.game_mode_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp created_at = 9;
    {PROTOBUF_FIELD_OFFSET(RoomInfo, _impl_.created_at_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\17\0\11\15\0\0\0\0\11\0\0\0\0\0\0\0"
    "blokus.RoomInfo"
    "room_name"
    "host_username"
    "game_mode"
  }},
};

PROTOBUF_NOINLINE void RoomInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.RoomInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.room_name_.ClearToEmpty();
  _impl_.host_username_.ClearToEmpty();
  _impl_.game_mode_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.created_at_ != nullptr);
    _impl_.created_at_->Clear();
  }
  ::memset(&_impl_.room_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.is_playing_) -
      reinterpret_cast<char*>(&_impl_.room_id_)) + sizeof(_impl_.is_playing_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* RoomInfo::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const RoomInfo& this_ = static_cast<const RoomInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* RoomInfo::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const RoomInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.RoomInfo)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 room_id = 1;
          if (this_._internal_room_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_room_id(), target);
          }

          // string room_name = 2;
          if (!this_._internal_room_name().empty()) {
            const std::string& _s = this_._internal_room_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.RoomInfo.room_name");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string host_username = 3;
          if (!this_._internal_host_username().empty()) {
            const std::string& _s = this_._internal_host_username();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.RoomInfo.host_username");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // int32 current_players = 4;
          if (this_._internal_current_players() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_current_players(), target);
          }

          // int32 max_players = 5;
          if (this_._internal_max_players() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<5>(
                    stream, this_._internal_max_players(), target);
          }

          // bool is_private = 6;
          if (this_._internal_is_private() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                6, this_._internal_is_private(), target);
          }

          // bool is_playing = 7;
          if (this_._internal_is_playing() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                7, this_._internal_is_playing(), target);
          }

          // string game_mode = 8;
          if (!this_._internal_game_mode().empty()) {
            const std::string& _s = this_._internal_game_mode();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.RoomInfo.game_mode");
            target = stream->WriteStringMaybeAliased(8, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp created_at = 9;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                9, *this_._impl_.created_at_, this_._impl_.created_at_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.RoomInfo)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t RoomInfo::ByteSizeLong(const MessageLite& base) {
          const RoomInfo& this_ = static_cast<const RoomInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t RoomInfo::ByteSizeLong() const {
          const RoomInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.RoomInfo)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string room_name = 2;
            if (!this_._internal_room_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_room_name());
            }
            // string host_username = 3;
            if (!this_._internal_host_username().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_host_username());
            }
            // string game_mode = 8;
            if (!this_._internal_game_mode().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_game_mode());
            }
          }
           {
            // .google.protobuf.Timestamp created_at = 9;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.created_at_);
            }
          }
           {
            // int32 room_id = 1;
            if (this_._internal_room_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_room_id());
            }
            // int32 current_players = 4;
            if (this_._internal_current_players() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_current_players());
            }
            // int32 max_players = 5;
            if (this_._internal_max_players() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_max_players());
            }
            // bool is_private = 6;
            if (this_._internal_is_private() != 0) {
              total_size += 2;
            }
            // bool is_playing = 7;
            if (this_._internal_is_playing() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void RoomInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RoomInfo*>(&to_msg);
  auto& from = static_cast<const RoomInfo&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.RoomInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_room_name().empty()) {
    _this->_internal_set_room_name(from._internal_room_name());
  }
  if (!from._internal_host_username().empty()) {
    _this->_internal_set_host_username(from._internal_host_username());
  }
  if (!from._internal_game_mode().empty()) {
    _this->_internal_set_game_mode(from._internal_game_mode());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.created_at_ != nullptr);
    if (_this->_impl_.created_at_ == nullptr) {
      _this->_impl_.created_at_ =
          ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.created_at_);
    } else {
      _this->_impl_.created_at_->MergeFrom(*from._impl_.created_at_);
    }
  }
  if (from._internal_room_id() != 0) {
    _this->_impl_.room_id_ = from._impl_.room_id_;
  }
  if (from._internal_current_players() != 0) {
    _this->_impl_.current_players_ = from._impl_.current_players_;
  }
  if (from._internal_max_players() != 0) {
    _this->_impl_.max_players_ = from._impl_.max_players_;
  }
  if (from._internal_is_private() != 0) {
    _this->_impl_.is_private_ = from._impl_.is_private_;
  }
  if (from._internal_is_playing() != 0) {
    _this->_impl_.is_playing_ = from._impl_.is_playing_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RoomInfo::CopyFrom(const RoomInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.RoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RoomInfo::InternalSwap(RoomInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.room_name_, &other->_impl_.room_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.host_username_, &other->_impl_.host_username_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.game_mode_, &other->_impl_.game_mode_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoomInfo, _impl_.is_playing_)
      + sizeof(RoomInfo::_impl_.is_playing_)
      - PROTOBUF_FIELD_OFFSET(RoomInfo, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::google::protobuf::Metadata RoomInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class BoardState::_Internal {
 public:
};

BoardState::BoardState(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.BoardState)
}
inline PROTOBUF_NDEBUG_INLINE BoardState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::BoardState& from_msg)
      : compressed_board_(arena, from.compressed_board_),
        _cached_size_{0} {}

BoardState::BoardState(
    ::google::protobuf::Arena* arena,
    const BoardState& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  BoardState* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.board_version_ = from._impl_.board_version_;

  // @@protoc_insertion_point(copy_constructor:blokus.BoardState)
}
inline PROTOBUF_NDEBUG_INLINE BoardState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : compressed_board_(arena),
        _cached_size_{0} {}

inline void BoardState::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.board_version_ = {};
}
BoardState::~BoardState() {
  // @@protoc_insertion_point(destructor:blokus.BoardState)
  SharedDtor(*this);
}
inline void BoardState::SharedDtor(MessageLite& self) {
  BoardState& this_ = static_cast<BoardState&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.compressed_board_.Destroy();
  this_._impl_.~Impl_();
}

inline void* BoardState::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) BoardState(arena);
}
constexpr auto BoardState::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(BoardState),
                                            alignof(BoardState));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull BoardState::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_BoardState_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &BoardState::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<BoardState>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &BoardState::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<BoardState>(), &BoardState::ByteSizeLong,
            &BoardState::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(BoardState, _impl_._cached_size_),
        false,
    },
    &BoardState::kDescriptorMethods,
    &descriptor_table_common_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* BoardState::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> BoardState::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::BoardState>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 board_version = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BoardState, _impl_.board_version_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(BoardState, _impl_.board_version_)}},
    // bytes compressed_board = 1;
    {::_pbi::TcParser::FastBS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(BoardState, _impl_.compressed_board_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bytes compressed_board = 1;
    {PROTOBUF_FIELD_OFFSET(BoardState, _impl_.compressed_board_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // int32 board_version = 2;
    {PROTOBUF_FIELD_OFFSET(BoardState, _impl_.board_version_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void BoardState::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.BoardState)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.compressed_board_.ClearToEmpty();
  _impl_.board_version_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* BoardState::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const BoardState& this_ = static_cast<const BoardState&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* BoardState::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const BoardState& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.BoardState)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bytes compressed_board = 1;
          if (!this_._internal_compressed_board().empty()) {
            const std::string& _s = this_._internal_compressed_board();
            target = stream->WriteBytesMaybeAliased(1, _s, target);
          }

          // int32 board_version = 2;
          if (this_._internal_board_version() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_board_version(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.BoardState)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t BoardState::ByteSizeLong(const MessageLite& base) {
          const BoardState& this_ = static_cast<const BoardState&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t BoardState::ByteSizeLong() const {
          const BoardState& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.BoardState)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // bytes compressed_board = 1;
            if (!this_._internal_compressed_board().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_compressed_board());
            }
            // int32 board_version = 2;
            if (this_._internal_board_version() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_board_version());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void BoardState::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<BoardState*>(&to_msg);
  auto& from = static_cast<const BoardState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.BoardState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_compressed_board().empty()) {
    _this->_internal_set_compressed_board(from._internal_compressed_board());
  }
  if (from._internal_board_version() != 0) {
    _this->_impl_.board_version_ = from._impl_.board_version_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BoardState::CopyFrom(const BoardState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.BoardState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void BoardState::InternalSwap(BoardState* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.compressed_board_, &other->_impl_.compressed_board_, arena);
        swap(_impl_.board_version_, other->_impl_.board_version_);
}

::google::protobuf::Metadata BoardState::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              GameStats_PlayerScoresEntry_DoNotUse::GameStats_PlayerScoresEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              GameStats_PlayerScoresEntry_DoNotUse::GameStats_PlayerScoresEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              GameStats_PlayerScoresEntry_DoNotUse::GameStats_PlayerScoresEntry_DoNotUse() : SuperType() {}
              GameStats_PlayerScoresEntry_DoNotUse::GameStats_PlayerScoresEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* GameStats_PlayerScoresEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) GameStats_PlayerScoresEntry_DoNotUse(arena);
              }
              constexpr auto GameStats_PlayerScoresEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(GameStats_PlayerScoresEntry_DoNotUse),
                                                          alignof(GameStats_PlayerScoresEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull GameStats_PlayerScoresEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_GameStats_PlayerScoresEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &GameStats_PlayerScoresEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<GameStats_PlayerScoresEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &GameStats_PlayerScoresEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &GameStats_PlayerScoresEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(GameStats_PlayerScoresEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &GameStats_PlayerScoresEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_common_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* GameStats_PlayerScoresEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 46, 2> GameStats_PlayerScoresEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameStats_PlayerScoresEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::GameStats_PlayerScoresEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 value = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameStats_PlayerScoresEntry_DoNotUse, _impl_.value_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(GameStats_PlayerScoresEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GameStats_PlayerScoresEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(GameStats_PlayerScoresEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 value = 2;
    {PROTOBUF_FIELD_OFFSET(GameStats_PlayerScoresEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\42\3\0\0\0\0\0\0"
    "blokus.GameStats.PlayerScoresEntry"
    "key"
  }},
};

// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              GameStats_BlocksUsedEntry_DoNotUse::GameStats_BlocksUsedEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              GameStats_BlocksUsedEntry_DoNotUse::GameStats_BlocksUsedEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              GameStats_BlocksUsedEntry_DoNotUse::GameStats_BlocksUsedEntry_DoNotUse() : SuperType() {}
              GameStats_BlocksUsedEntry_DoNotUse::GameStats_BlocksUsedEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* GameStats_BlocksUsedEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) GameStats_BlocksUsedEntry_DoNotUse(arena);
              }
              constexpr auto GameStats_BlocksUsedEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(GameStats_BlocksUsedEntry_DoNotUse),
                                                          alignof(GameStats_BlocksUsedEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull GameStats_BlocksUsedEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_GameStats_BlocksUsedEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &GameStats_BlocksUsedEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<GameStats_BlocksUsedEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &GameStats_BlocksUsedEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &GameStats_BlocksUsedEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(GameStats_BlocksUsedEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &GameStats_BlocksUsedEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_common_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* GameStats_BlocksUsedEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 44, 2> GameStats_BlocksUsedEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameStats_BlocksUsedEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::GameStats_BlocksUsedEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 value = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameStats_BlocksUsedEntry_DoNotUse, _impl_.value_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(GameStats_BlocksUsedEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GameStats_BlocksUsedEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(GameStats_BlocksUsedEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 value = 2;
    {PROTOBUF_FIELD_OFFSET(GameStats_BlocksUsedEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\40\3\0\0\0\0\0\0"
    "blokus.GameStats.BlocksUsedEntry"
    "key"
  }},
};

// ===================================================================

class GameStats::_Internal {
 public:
};

GameStats::GameStats(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.GameStats)
}
inline PROTOBUF_NDEBUG_INLINE GameStats::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::GameStats& from_msg)
      : player_scores_{visibility, arena, from.player_scores_},
        blocks_used_{visibility, arena, from.blocks_used_},
        winner_(arena, from.winner_),
        _cached_size_{0} {}

GameStats::GameStats(
    ::google::protobuf::Arena* arena,
    const GameStats& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GameStats* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, total_moves_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, total_moves_),
           offsetof(Impl_, game_duration_seconds_) -
               offsetof(Impl_, total_moves_) +
               sizeof(Impl_::game_duration_seconds_));

  // @@protoc_insertion_point(copy_constructor:blokus.GameStats)
}
inline PROTOBUF_NDEBUG_INLINE GameStats::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : player_scores_{visibility, arena},
        blocks_used_{visibility, arena},
        winner_(arena),
        _cached_size_{0} {}

inline void GameStats::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, total_moves_),
           0,
           offsetof(Impl_, game_duration_seconds_) -
               offsetof(Impl_, total_moves_) +
               sizeof(Impl_::game_duration_seconds_));
}
GameStats::~GameStats() {
  // @@protoc_insertion_point(destructor:blokus.GameStats)
  SharedDtor(*this);
}
inline void GameStats::SharedDtor(MessageLite& self) {
  GameStats& this_ = static_cast<GameStats&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.winner_.Destroy();
  this_._impl_.~Impl_();
}

inline void* GameStats::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GameStats(arena);
}
constexpr auto GameStats::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(GameStats, _impl_.player_scores_) +
          decltype(GameStats::_impl_.player_scores_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(GameStats, _impl_.player_scores_) +
          decltype(GameStats::_impl_.player_scores_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(GameStats, _impl_.blocks_used_) +
          decltype(GameStats::_impl_.blocks_used_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(GameStats, _impl_.blocks_used_) +
          decltype(GameStats::_impl_.blocks_used_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(GameStats), alignof(GameStats), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&GameStats::PlacementNew_,
                                 sizeof(GameStats),
                                 alignof(GameStats));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GameStats::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GameStats_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GameStats::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GameStats>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GameStats::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GameStats>(), &GameStats::ByteSizeLong,
            &GameStats::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GameStats, _impl_._cached_size_),
        false,
    },
    &GameStats::kDescriptorMethods,
    &descriptor_table_common_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GameStats::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 2, 55, 2> GameStats::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::GameStats>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 total_moves = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameStats, _impl_.total_moves_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(GameStats, _impl_.total_moves_)}},
    // int32 game_duration_seconds = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameStats, _impl_.game_duration_seconds_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(GameStats, _impl_.game_duration_seconds_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // string winner = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(GameStats, _impl_.winner_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 total_moves = 1;
    {PROTOBUF_FIELD_OFFSET(GameStats, _impl_.total_moves_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 game_duration_seconds = 2;
    {PROTOBUF_FIELD_OFFSET(GameStats, _impl_.game_duration_seconds_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // map<string, int32> player_scores = 3;
    {PROTOBUF_FIELD_OFFSET(GameStats, _impl_.player_scores_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // map<string, int32> blocks_used = 4;
    {PROTOBUF_FIELD_OFFSET(GameStats, _impl_.blocks_used_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // string winner = 5;
    {PROTOBUF_FIELD_OFFSET(GameStats, _impl_.winner_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(GameStats()._impl_.player_scores_)>(
        1, 0, 0, 9,
        5)},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(GameStats()._impl_.blocks_used_)>(
        1, 0, 0, 9,
        5)},
  }}, {{
    "\20\0\0\15\13\6\0\0"
    "blokus.GameStats"
    "player_scores"
    "blocks_used"
    "winner"
  }},
};

PROTOBUF_NOINLINE void GameStats::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.GameStats)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_scores_.Clear();
  _impl_.blocks_used_.Clear();
  _impl_.winner_.ClearToEmpty();
  ::memset(&_impl_.total_moves_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.game_duration_seconds_) -
      reinterpret_cast<char*>(&_impl_.total_moves_)) + sizeof(_impl_.game_duration_seconds_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GameStats::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GameStats& this_ = static_cast<const GameStats&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GameStats::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GameStats& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.GameStats)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 total_moves = 1;
          if (this_._internal_total_moves() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_total_moves(), target);
          }

          // int32 game_duration_seconds = 2;
          if (this_._internal_game_duration_seconds() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_game_duration_seconds(), target);
          }

          // map<string, int32> player_scores = 3;
          if (!this_._internal_player_scores().empty()) {
            using MapType = ::google::protobuf::Map<std::string, ::int32_t>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, ::int32_t,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_INT32>;
            const auto& field = this_._internal_player_scores();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    3, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.GameStats.player_scores");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    3, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.GameStats.player_scores");
              }
            }
          }

          // map<string, int32> blocks_used = 4;
          if (!this_._internal_blocks_used().empty()) {
            using MapType = ::google::protobuf::Map<std::string, ::int32_t>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, ::int32_t,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_INT32>;
            const auto& field = this_._internal_blocks_used();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    4, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.GameStats.blocks_used");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    4, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.GameStats.blocks_used");
              }
            }
          }

          // string winner = 5;
          if (!this_._internal_winner().empty()) {
            const std::string& _s = this_._internal_winner();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.GameStats.winner");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.GameStats)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GameStats::ByteSizeLong(const MessageLite& base) {
          const GameStats& this_ = static_cast<const GameStats&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GameStats::ByteSizeLong() const {
          const GameStats& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.GameStats)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // map<string, int32> player_scores = 3;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_player_scores_size());
              for (const auto& entry : this_._internal_player_scores()) {
                total_size += _pbi::MapEntryFuncs<std::string, ::int32_t,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_INT32>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // map<string, int32> blocks_used = 4;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_blocks_used_size());
              for (const auto& entry : this_._internal_blocks_used()) {
                total_size += _pbi::MapEntryFuncs<std::string, ::int32_t,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_INT32>::ByteSizeLong(entry.first, entry.second);
              }
            }
          }
           {
            // string winner = 5;
            if (!this_._internal_winner().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_winner());
            }
            // int32 total_moves = 1;
            if (this_._internal_total_moves() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_total_moves());
            }
            // int32 game_duration_seconds = 2;
            if (this_._internal_game_duration_seconds() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_game_duration_seconds());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GameStats::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameStats*>(&to_msg);
  auto& from = static_cast<const GameStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.GameStats)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.player_scores_.MergeFrom(from._impl_.player_scores_);
  _this->_impl_.blocks_used_.MergeFrom(from._impl_.blocks_used_);
  if (!from._internal_winner().empty()) {
    _this->_internal_set_winner(from._internal_winner());
  }
  if (from._internal_total_moves() != 0) {
    _this->_impl_.total_moves_ = from._impl_.total_moves_;
  }
  if (from._internal_game_duration_seconds() != 0) {
    _this->_impl_.game_duration_seconds_ = from._impl_.game_duration_seconds_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameStats::CopyFrom(const GameStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.GameStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GameStats::InternalSwap(GameStats* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.player_scores_.InternalSwap(&other->_impl_.player_scores_);
  _impl_.blocks_used_.InternalSwap(&other->_impl_.blocks_used_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.winner_, &other->_impl_.winner_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameStats, _impl_.game_duration_seconds_)
      + sizeof(GameStats::_impl_.game_duration_seconds_)
      - PROTOBUF_FIELD_OFFSET(GameStats, _impl_.total_moves_)>(
          reinterpret_cast<char*>(&_impl_.total_moves_),
          reinterpret_cast<char*>(&other->_impl_.total_moves_));
}

::google::protobuf::Metadata GameStats::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ServerInfo::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ServerInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ServerInfo, _impl_._has_bits_);
};

void ServerInfo::clear_server_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.server_time_ != nullptr) _impl_.server_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ServerInfo::ServerInfo(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.ServerInfo)
}
inline PROTOBUF_NDEBUG_INLINE ServerInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::ServerInfo& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        server_version_(arena, from.server_version_) {}

ServerInfo::ServerInfo(
    ::google::protobuf::Arena* arena,
    const ServerInfo& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ServerInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.server_time_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.server_time_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, online_users_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, online_users_),
           offsetof(Impl_, server_load_) -
               offsetof(Impl_, online_users_) +
               sizeof(Impl_::server_load_));

  // @@protoc_insertion_point(copy_constructor:blokus.ServerInfo)
}
inline PROTOBUF_NDEBUG_INLINE ServerInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        server_version_(arena) {}

inline void ServerInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, server_time_),
           0,
           offsetof(Impl_, server_load_) -
               offsetof(Impl_, server_time_) +
               sizeof(Impl_::server_load_));
}
ServerInfo::~ServerInfo() {
  // @@protoc_insertion_point(destructor:blokus.ServerInfo)
  SharedDtor(*this);
}
inline void ServerInfo::SharedDtor(MessageLite& self) {
  ServerInfo& this_ = static_cast<ServerInfo&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.server_version_.Destroy();
  delete this_._impl_.server_time_;
  this_._impl_.~Impl_();
}

inline void* ServerInfo::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ServerInfo(arena);
}
constexpr auto ServerInfo::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ServerInfo),
                                            alignof(ServerInfo));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ServerInfo::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ServerInfo_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ServerInfo::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ServerInfo>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ServerInfo::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ServerInfo>(), &ServerInfo::ByteSizeLong,
            &ServerInfo::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ServerInfo, _impl_._cached_size_),
        false,
    },
    &ServerInfo::kDescriptorMethods,
    &descriptor_table_common_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ServerInfo::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 1, 40, 2> ServerInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ServerInfo, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::ServerInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 online_users = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ServerInfo, _impl_.online_users_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ServerInfo, _impl_.online_users_)}},
    // int32 active_rooms = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ServerInfo, _impl_.active_rooms_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ServerInfo, _impl_.active_rooms_)}},
    // int32 ongoing_games = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ServerInfo, _impl_.ongoing_games_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(ServerInfo, _impl_.ongoing_games_)}},
    // float server_load = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(ServerInfo, _impl_.server_load_)}},
    // string server_version = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(ServerInfo, _impl_.server_version_)}},
    // .google.protobuf.Timestamp server_time = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 0, 0, PROTOBUF_FIELD_OFFSET(ServerInfo, _impl_.server_time_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 online_users = 1;
    {PROTOBUF_FIELD_OFFSET(ServerInfo, _impl_.online_users_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 active_rooms = 2;
    {PROTOBUF_FIELD_OFFSET(ServerInfo, _impl_.active_rooms_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 ongoing_games = 3;
    {PROTOBUF_FIELD_OFFSET(ServerInfo, _impl_.ongoing_games_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // float server_load = 4;
    {PROTOBUF_FIELD_OFFSET(ServerInfo, _impl_.server_load_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // string server_version = 5;
    {PROTOBUF_FIELD_OFFSET(ServerInfo, _impl_.server_version_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp server_time = 6;
    {PROTOBUF_FIELD_OFFSET(ServerInfo, _impl_.server_time_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\21\0\0\0\0\16\0\0"
    "blokus.ServerInfo"
    "server_version"
  }},
};

PROTOBUF_NOINLINE void ServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.ServerInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.server_version_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.server_time_ != nullptr);
    _impl_.server_time_->Clear();
  }
  ::memset(&_impl_.online_users_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.server_load_) -
      reinterpret_cast<char*>(&_impl_.online_users_)) + sizeof(_impl_.server_load_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ServerInfo::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ServerInfo& this_ = static_cast<const ServerInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ServerInfo::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ServerInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.ServerInfo)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 online_users = 1;
          if (this_._internal_online_users() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_online_users(), target);
          }

          // int32 active_rooms = 2;
          if (this_._internal_active_rooms() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_active_rooms(), target);
          }

          // int32 ongoing_games = 3;
          if (this_._internal_ongoing_games() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_ongoing_games(), target);
          }

          // float server_load = 4;
          if (::absl::bit_cast<::uint32_t>(this_._internal_server_load()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_server_load(), target);
          }

          // string server_version = 5;
          if (!this_._internal_server_version().empty()) {
            const std::string& _s = this_._internal_server_version();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.ServerInfo.server_version");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp server_time = 6;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                6, *this_._impl_.server_time_, this_._impl_.server_time_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.ServerInfo)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ServerInfo::ByteSizeLong(const MessageLite& base) {
          const ServerInfo& this_ = static_cast<const ServerInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ServerInfo::ByteSizeLong() const {
          const ServerInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.ServerInfo)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string server_version = 5;
            if (!this_._internal_server_version().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_server_version());
            }
          }
           {
            // .google.protobuf.Timestamp server_time = 6;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.server_time_);
            }
          }
           {
            // int32 online_users = 1;
            if (this_._internal_online_users() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_online_users());
            }
            // int32 active_rooms = 2;
            if (this_._internal_active_rooms() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_active_rooms());
            }
            // int32 ongoing_games = 3;
            if (this_._internal_ongoing_games() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_ongoing_games());
            }
            // float server_load = 4;
            if (::absl::bit_cast<::uint32_t>(this_._internal_server_load()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ServerInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ServerInfo*>(&to_msg);
  auto& from = static_cast<const ServerInfo&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.ServerInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_server_version().empty()) {
    _this->_internal_set_server_version(from._internal_server_version());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.server_time_ != nullptr);
    if (_this->_impl_.server_time_ == nullptr) {
      _this->_impl_.server_time_ =
          ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.server_time_);
    } else {
      _this->_impl_.server_time_->MergeFrom(*from._impl_.server_time_);
    }
  }
  if (from._internal_online_users() != 0) {
    _this->_impl_.online_users_ = from._impl_.online_users_;
  }
  if (from._internal_active_rooms() != 0) {
    _this->_impl_.active_rooms_ = from._impl_.active_rooms_;
  }
  if (from._internal_ongoing_games() != 0) {
    _this->_impl_.ongoing_games_ = from._impl_.ongoing_games_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_server_load()) != 0) {
    _this->_impl_.server_load_ = from._impl_.server_load_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ServerInfo::CopyFrom(const ServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ServerInfo::InternalSwap(ServerInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.server_version_, &other->_impl_.server_version_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerInfo, _impl_.server_load_)
      + sizeof(ServerInfo::_impl_.server_load_)
      - PROTOBUF_FIELD_OFFSET(ServerInfo, _impl_.server_time_)>(
          reinterpret_cast<char*>(&_impl_.server_time_),
          reinterpret_cast<char*>(&other->_impl_.server_time_));
}

::google::protobuf::Metadata ServerInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              Result_DetailsEntry_DoNotUse::Result_DetailsEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              Result_DetailsEntry_DoNotUse::Result_DetailsEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              Result_DetailsEntry_DoNotUse::Result_DetailsEntry_DoNotUse() : SuperType() {}
              Result_DetailsEntry_DoNotUse::Result_DetailsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* Result_DetailsEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) Result_DetailsEntry_DoNotUse(arena);
              }
              constexpr auto Result_DetailsEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Result_DetailsEntry_DoNotUse),
                                                          alignof(Result_DetailsEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull Result_DetailsEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_Result_DetailsEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &Result_DetailsEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<Result_DetailsEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &Result_DetailsEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &Result_DetailsEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(Result_DetailsEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &Result_DetailsEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_common_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* Result_DetailsEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 43, 2> Result_DetailsEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Result_DetailsEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::Result_DetailsEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Result_DetailsEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Result_DetailsEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(Result_DetailsEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2;
    {PROTOBUF_FIELD_OFFSET(Result_DetailsEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\32\3\5\0\0\0\0\0"
    "blokus.Result.DetailsEntry"
    "key"
    "value"
  }},
};

// ===================================================================

class Result::_Internal {
 public:
};

Result::Result(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:blokus.Result)
}
inline PROTOBUF_NDEBUG_INLINE Result::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::blokus::Result& from_msg)
      : details_{visibility, arena, from.details_},
        message_(arena, from.message_),
        _cached_size_{0} {}

Result::Result(
    ::google::protobuf::Arena* arena,
    const Result& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Result* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.code_ = from._impl_.code_;

  // @@protoc_insertion_point(copy_constructor:blokus.Result)
}
inline PROTOBUF_NDEBUG_INLINE Result::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : details_{visibility, arena},
        message_(arena),
        _cached_size_{0} {}

inline void Result::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.code_ = {};
}
Result::~Result() {
  // @@protoc_insertion_point(destructor:blokus.Result)
  SharedDtor(*this);
}
inline void Result::SharedDtor(MessageLite& self) {
  Result& this_ = static_cast<Result&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.message_.Destroy();
  this_._impl_.~Impl_();
}

inline void* Result::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Result(arena);
}
constexpr auto Result::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(Result, _impl_.details_) +
          decltype(Result::_impl_.details_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(Result, _impl_.details_) +
          decltype(Result::_impl_.details_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(Result), alignof(Result), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&Result::PlacementNew_,
                                 sizeof(Result),
                                 alignof(Result));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Result::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Result_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Result::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Result>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Result::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Result>(), &Result::ByteSizeLong,
            &Result::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Result, _impl_._cached_size_),
        false,
    },
    &Result::kDescriptorMethods,
    &descriptor_table_common_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Result::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 3, 1, 36, 2> Result::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::blokus::Result>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string message = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Result, _impl_.message_)}},
    // .blokus.ResultCode code = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Result, _impl_.code_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Result, _impl_.code_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .blokus.ResultCode code = 1;
    {PROTOBUF_FIELD_OFFSET(Result, _impl_.code_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string message = 2;
    {PROTOBUF_FIELD_OFFSET(Result, _impl_.message_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // map<string, string> details = 3;
    {PROTOBUF_FIELD_OFFSET(Result, _impl_.details_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
  }}, {{
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(Result()._impl_.details_)>(
        1, 0, 0, 9,
        9)},
  }}, {{
    "\15\0\7\7\0\0\0\0"
    "blokus.Result"
    "message"
    "details"
  }},
};

PROTOBUF_NOINLINE void Result::Clear() {
// @@protoc_insertion_point(message_clear_start:blokus.Result)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.details_.Clear();
  _impl_.message_.ClearToEmpty();
  _impl_.code_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Result::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Result& this_ = static_cast<const Result&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Result::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Result& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:blokus.Result)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .blokus.ResultCode code = 1;
          if (this_._internal_code() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_code(), target);
          }

          // string message = 2;
          if (!this_._internal_message().empty()) {
            const std::string& _s = this_._internal_message();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.Result.message");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // map<string, string> details = 3;
          if (!this_._internal_details().empty()) {
            using MapType = ::google::protobuf::Map<std::string, std::string>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_STRING>;
            const auto& field = this_._internal_details();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    3, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.Result.details");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.Result.details");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    3, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.Result.details");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "blokus.Result.details");
              }
            }
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:blokus.Result)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Result::ByteSizeLong(const MessageLite& base) {
          const Result& this_ = static_cast<const Result&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Result::ByteSizeLong() const {
          const Result& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:blokus.Result)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // map<string, string> details = 3;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_details_size());
              for (const auto& entry : this_._internal_details()) {
                total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
              }
            }
          }
           {
            // string message = 2;
            if (!this_._internal_message().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_message());
            }
            // .blokus.ResultCode code = 1;
            if (this_._internal_code() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_code());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Result::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Result*>(&to_msg);
  auto& from = static_cast<const Result&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:blokus.Result)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.details_.MergeFrom(from._impl_.details_);
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_code() != 0) {
    _this->_impl_.code_ = from._impl_.code_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Result::CopyFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blokus.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Result::InternalSwap(Result* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.details_.InternalSwap(&other->_impl_.details_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
  swap(_impl_.code_, other->_impl_.code_);
}

::google::protobuf::Metadata Result::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace blokus
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_common_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
