// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: game.proto
// Protobuf C++ Version: 5.29.3

#ifndef game_2eproto_2epb_2eh
#define game_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
#include "common.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_game_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_game_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_game_2eproto;
namespace blokus {
class AddAIPlayerRequest;
struct AddAIPlayerRequestDefaultTypeInternal;
extern AddAIPlayerRequestDefaultTypeInternal _AddAIPlayerRequest_default_instance_;
class AddAIPlayerResponse;
struct AddAIPlayerResponseDefaultTypeInternal;
extern AddAIPlayerResponseDefaultTypeInternal _AddAIPlayerResponse_default_instance_;
class BlockPlacedNotification;
struct BlockPlacedNotificationDefaultTypeInternal;
extern BlockPlacedNotificationDefaultTypeInternal _BlockPlacedNotification_default_instance_;
class GameEndedNotification;
struct GameEndedNotificationDefaultTypeInternal;
extern GameEndedNotificationDefaultTypeInternal _GameEndedNotification_default_instance_;
class GameEndedNotification_AchievementsEntry_DoNotUse;
struct GameEndedNotification_AchievementsEntry_DoNotUseDefaultTypeInternal;
extern GameEndedNotification_AchievementsEntry_DoNotUseDefaultTypeInternal _GameEndedNotification_AchievementsEntry_DoNotUse_default_instance_;
class GameEndedNotification_ExperienceGainedEntry_DoNotUse;
struct GameEndedNotification_ExperienceGainedEntry_DoNotUseDefaultTypeInternal;
extern GameEndedNotification_ExperienceGainedEntry_DoNotUseDefaultTypeInternal _GameEndedNotification_ExperienceGainedEntry_DoNotUse_default_instance_;
class GameEndedNotification_RatingChangesEntry_DoNotUse;
struct GameEndedNotification_RatingChangesEntry_DoNotUseDefaultTypeInternal;
extern GameEndedNotification_RatingChangesEntry_DoNotUseDefaultTypeInternal _GameEndedNotification_RatingChangesEntry_DoNotUse_default_instance_;
class GameMove;
struct GameMoveDefaultTypeInternal;
extern GameMoveDefaultTypeInternal _GameMove_default_instance_;
class GameStartedNotification;
struct GameStartedNotificationDefaultTypeInternal;
extern GameStartedNotificationDefaultTypeInternal _GameStartedNotification_default_instance_;
class GameStateResponse;
struct GameStateResponseDefaultTypeInternal;
extern GameStateResponseDefaultTypeInternal _GameStateResponse_default_instance_;
class GameStateUpdate;
struct GameStateUpdateDefaultTypeInternal;
extern GameStateUpdateDefaultTypeInternal _GameStateUpdate_default_instance_;
class GetGameStateRequest;
struct GetGameStateRequestDefaultTypeInternal;
extern GetGameStateRequestDefaultTypeInternal _GetGameStateRequest_default_instance_;
class GetHintRequest;
struct GetHintRequestDefaultTypeInternal;
extern GetHintRequestDefaultTypeInternal _GetHintRequest_default_instance_;
class GetHintResponse;
struct GetHintResponseDefaultTypeInternal;
extern GetHintResponseDefaultTypeInternal _GetHintResponse_default_instance_;
class PlaceBlockRequest;
struct PlaceBlockRequestDefaultTypeInternal;
extern PlaceBlockRequestDefaultTypeInternal _PlaceBlockRequest_default_instance_;
class PlaceBlockResponse;
struct PlaceBlockResponseDefaultTypeInternal;
extern PlaceBlockResponseDefaultTypeInternal _PlaceBlockResponse_default_instance_;
class PlayerResult;
struct PlayerResultDefaultTypeInternal;
extern PlayerResultDefaultTypeInternal _PlayerResult_default_instance_;
class RemovePlayerRequest;
struct RemovePlayerRequestDefaultTypeInternal;
extern RemovePlayerRequestDefaultTypeInternal _RemovePlayerRequest_default_instance_;
class RemovePlayerResponse;
struct RemovePlayerResponseDefaultTypeInternal;
extern RemovePlayerResponseDefaultTypeInternal _RemovePlayerResponse_default_instance_;
class RoomStateUpdate;
struct RoomStateUpdateDefaultTypeInternal;
extern RoomStateUpdateDefaultTypeInternal _RoomStateUpdate_default_instance_;
class SkipTurnRequest;
struct SkipTurnRequestDefaultTypeInternal;
extern SkipTurnRequestDefaultTypeInternal _SkipTurnRequest_default_instance_;
class SkipTurnResponse;
struct SkipTurnResponseDefaultTypeInternal;
extern SkipTurnResponseDefaultTypeInternal _SkipTurnResponse_default_instance_;
class SpectatorJoinRequest;
struct SpectatorJoinRequestDefaultTypeInternal;
extern SpectatorJoinRequestDefaultTypeInternal _SpectatorJoinRequest_default_instance_;
class SpectatorJoinResponse;
struct SpectatorJoinResponseDefaultTypeInternal;
extern SpectatorJoinResponseDefaultTypeInternal _SpectatorJoinResponse_default_instance_;
class SpectatorNotification;
struct SpectatorNotificationDefaultTypeInternal;
extern SpectatorNotificationDefaultTypeInternal _SpectatorNotification_default_instance_;
class StartGameRequest;
struct StartGameRequestDefaultTypeInternal;
extern StartGameRequestDefaultTypeInternal _StartGameRequest_default_instance_;
class StartGameResponse;
struct StartGameResponseDefaultTypeInternal;
extern StartGameResponseDefaultTypeInternal _StartGameResponse_default_instance_;
class TurnChangedNotification;
struct TurnChangedNotificationDefaultTypeInternal;
extern TurnChangedNotificationDefaultTypeInternal _TurnChangedNotification_default_instance_;
class UndoMoveRequest;
struct UndoMoveRequestDefaultTypeInternal;
extern UndoMoveRequestDefaultTypeInternal _UndoMoveRequest_default_instance_;
class UndoMoveResponse;
struct UndoMoveResponseDefaultTypeInternal;
extern UndoMoveResponseDefaultTypeInternal _UndoMoveResponse_default_instance_;
}  // namespace blokus
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace blokus {
enum TurnAction : int {
  TURN_ACTION_PLACE_BLOCK = 0,
  TURN_ACTION_SKIP = 1,
  TURN_ACTION_UNDO = 2,
  TURN_ACTION_TIMEOUT = 3,
  TurnAction_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TurnAction_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TurnAction_IsValid(int value);
extern const uint32_t TurnAction_internal_data_[];
constexpr TurnAction TurnAction_MIN = static_cast<TurnAction>(0);
constexpr TurnAction TurnAction_MAX = static_cast<TurnAction>(3);
constexpr int TurnAction_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
TurnAction_descriptor();
template <typename T>
const std::string& TurnAction_Name(T value) {
  static_assert(std::is_same<T, TurnAction>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TurnAction_Name().");
  return TurnAction_Name(static_cast<TurnAction>(value));
}
template <>
inline const std::string& TurnAction_Name(TurnAction value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TurnAction_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool TurnAction_Parse(absl::string_view name, TurnAction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TurnAction>(
      TurnAction_descriptor(), name, value);
}
enum GameEndReason : int {
  GAME_END_NORMAL = 0,
  GAME_END_FORFEIT = 1,
  GAME_END_DISCONNECT = 2,
  GAME_END_TIMEOUT = 3,
  GAME_END_SERVER_ERROR = 4,
  GAME_END_ADMIN_STOP = 5,
  GameEndReason_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  GameEndReason_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool GameEndReason_IsValid(int value);
extern const uint32_t GameEndReason_internal_data_[];
constexpr GameEndReason GameEndReason_MIN = static_cast<GameEndReason>(0);
constexpr GameEndReason GameEndReason_MAX = static_cast<GameEndReason>(5);
constexpr int GameEndReason_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
GameEndReason_descriptor();
template <typename T>
const std::string& GameEndReason_Name(T value) {
  static_assert(std::is_same<T, GameEndReason>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to GameEndReason_Name().");
  return GameEndReason_Name(static_cast<GameEndReason>(value));
}
template <>
inline const std::string& GameEndReason_Name(GameEndReason value) {
  return ::google::protobuf::internal::NameOfDenseEnum<GameEndReason_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool GameEndReason_Parse(absl::string_view name, GameEndReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GameEndReason>(
      GameEndReason_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class UndoMoveRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.UndoMoveRequest) */ {
 public:
  inline UndoMoveRequest() : UndoMoveRequest(nullptr) {}
  ~UndoMoveRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(UndoMoveRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(UndoMoveRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UndoMoveRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline UndoMoveRequest(const UndoMoveRequest& from) : UndoMoveRequest(nullptr, from) {}
  inline UndoMoveRequest(UndoMoveRequest&& from) noexcept
      : UndoMoveRequest(nullptr, std::move(from)) {}
  inline UndoMoveRequest& operator=(const UndoMoveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UndoMoveRequest& operator=(UndoMoveRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UndoMoveRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UndoMoveRequest* internal_default_instance() {
    return reinterpret_cast<const UndoMoveRequest*>(
        &_UndoMoveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 19;
  friend void swap(UndoMoveRequest& a, UndoMoveRequest& b) { a.Swap(&b); }
  inline void Swap(UndoMoveRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UndoMoveRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UndoMoveRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<UndoMoveRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UndoMoveRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UndoMoveRequest& from) { UndoMoveRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(UndoMoveRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.UndoMoveRequest"; }

 protected:
  explicit UndoMoveRequest(::google::protobuf::Arena* arena);
  UndoMoveRequest(::google::protobuf::Arena* arena, const UndoMoveRequest& from);
  UndoMoveRequest(::google::protobuf::Arena* arena, UndoMoveRequest&& from) noexcept
      : UndoMoveRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kReasonFieldNumber = 3,
    kRoomIdFieldNumber = 1,
    kMovesToUndoFieldNumber = 2,
  };
  // string reason = 3;
  void clear_reason() ;
  const std::string& reason() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reason(Arg_&& arg, Args_... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* value);

  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(
      const std::string& value);
  std::string* _internal_mutable_reason();

  public:
  // int32 room_id = 1;
  void clear_room_id() ;
  ::int32_t room_id() const;
  void set_room_id(::int32_t value);

  private:
  ::int32_t _internal_room_id() const;
  void _internal_set_room_id(::int32_t value);

  public:
  // int32 moves_to_undo = 2;
  void clear_moves_to_undo() ;
  ::int32_t moves_to_undo() const;
  void set_moves_to_undo(::int32_t value);

  private:
  ::int32_t _internal_moves_to_undo() const;
  void _internal_set_moves_to_undo(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.UndoMoveRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      37, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UndoMoveRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr reason_;
    ::int32_t room_id_;
    ::int32_t moves_to_undo_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class StartGameRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.StartGameRequest) */ {
 public:
  inline StartGameRequest() : StartGameRequest(nullptr) {}
  ~StartGameRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(StartGameRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(StartGameRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StartGameRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline StartGameRequest(const StartGameRequest& from) : StartGameRequest(nullptr, from) {}
  inline StartGameRequest(StartGameRequest&& from) noexcept
      : StartGameRequest(nullptr, std::move(from)) {}
  inline StartGameRequest& operator=(const StartGameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartGameRequest& operator=(StartGameRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartGameRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartGameRequest* internal_default_instance() {
    return reinterpret_cast<const StartGameRequest*>(
        &_StartGameRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(StartGameRequest& a, StartGameRequest& b) { a.Swap(&b); }
  inline void Swap(StartGameRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartGameRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartGameRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<StartGameRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StartGameRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StartGameRequest& from) { StartGameRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(StartGameRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.StartGameRequest"; }

 protected:
  explicit StartGameRequest(::google::protobuf::Arena* arena);
  StartGameRequest(::google::protobuf::Arena* arena, const StartGameRequest& from);
  StartGameRequest(::google::protobuf::Arena* arena, StartGameRequest&& from) noexcept
      : StartGameRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRoomIdFieldNumber = 1,
    kForceStartFieldNumber = 2,
  };
  // int32 room_id = 1;
  void clear_room_id() ;
  ::int32_t room_id() const;
  void set_room_id(::int32_t value);

  private:
  ::int32_t _internal_room_id() const;
  void _internal_set_room_id(::int32_t value);

  public:
  // bool force_start = 2;
  void clear_force_start() ;
  bool force_start() const;
  void set_force_start(bool value);

  private:
  bool _internal_force_start() const;
  void _internal_set_force_start(bool value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.StartGameRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StartGameRequest& from_msg);
    ::int32_t room_id_;
    bool force_start_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class SpectatorNotification final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.SpectatorNotification) */ {
 public:
  inline SpectatorNotification() : SpectatorNotification(nullptr) {}
  ~SpectatorNotification() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SpectatorNotification* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SpectatorNotification));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SpectatorNotification(
      ::google::protobuf::internal::ConstantInitialized);

  inline SpectatorNotification(const SpectatorNotification& from) : SpectatorNotification(nullptr, from) {}
  inline SpectatorNotification(SpectatorNotification&& from) noexcept
      : SpectatorNotification(nullptr, std::move(from)) {}
  inline SpectatorNotification& operator=(const SpectatorNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpectatorNotification& operator=(SpectatorNotification&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpectatorNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpectatorNotification* internal_default_instance() {
    return reinterpret_cast<const SpectatorNotification*>(
        &_SpectatorNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 29;
  friend void swap(SpectatorNotification& a, SpectatorNotification& b) { a.Swap(&b); }
  inline void Swap(SpectatorNotification* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpectatorNotification* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpectatorNotification* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SpectatorNotification>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SpectatorNotification& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SpectatorNotification& from) { SpectatorNotification::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SpectatorNotification* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.SpectatorNotification"; }

 protected:
  explicit SpectatorNotification(::google::protobuf::Arena* arena);
  SpectatorNotification(::google::protobuf::Arena* arena, const SpectatorNotification& from);
  SpectatorNotification(::google::protobuf::Arena* arena, SpectatorNotification&& from) noexcept
      : SpectatorNotification(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSpectatorUsernameFieldNumber = 2,
    kRoomIdFieldNumber = 1,
    kJoinedFieldNumber = 3,
    kTotalSpectatorsFieldNumber = 4,
  };
  // string spectator_username = 2;
  void clear_spectator_username() ;
  const std::string& spectator_username() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_spectator_username(Arg_&& arg, Args_... args);
  std::string* mutable_spectator_username();
  PROTOBUF_NODISCARD std::string* release_spectator_username();
  void set_allocated_spectator_username(std::string* value);

  private:
  const std::string& _internal_spectator_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_spectator_username(
      const std::string& value);
  std::string* _internal_mutable_spectator_username();

  public:
  // int32 room_id = 1;
  void clear_room_id() ;
  ::int32_t room_id() const;
  void set_room_id(::int32_t value);

  private:
  ::int32_t _internal_room_id() const;
  void _internal_set_room_id(::int32_t value);

  public:
  // bool joined = 3;
  void clear_joined() ;
  bool joined() const;
  void set_joined(bool value);

  private:
  bool _internal_joined() const;
  void _internal_set_joined(bool value);

  public:
  // int32 total_spectators = 4;
  void clear_total_spectators() ;
  ::int32_t total_spectators() const;
  void set_total_spectators(::int32_t value);

  private:
  ::int32_t _internal_total_spectators() const;
  void _internal_set_total_spectators(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.SpectatorNotification)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      55, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SpectatorNotification& from_msg);
    ::google::protobuf::internal::ArenaStringPtr spectator_username_;
    ::int32_t room_id_;
    bool joined_;
    ::int32_t total_spectators_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class SpectatorJoinRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.SpectatorJoinRequest) */ {
 public:
  inline SpectatorJoinRequest() : SpectatorJoinRequest(nullptr) {}
  ~SpectatorJoinRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SpectatorJoinRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SpectatorJoinRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SpectatorJoinRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline SpectatorJoinRequest(const SpectatorJoinRequest& from) : SpectatorJoinRequest(nullptr, from) {}
  inline SpectatorJoinRequest(SpectatorJoinRequest&& from) noexcept
      : SpectatorJoinRequest(nullptr, std::move(from)) {}
  inline SpectatorJoinRequest& operator=(const SpectatorJoinRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpectatorJoinRequest& operator=(SpectatorJoinRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpectatorJoinRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpectatorJoinRequest* internal_default_instance() {
    return reinterpret_cast<const SpectatorJoinRequest*>(
        &_SpectatorJoinRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 27;
  friend void swap(SpectatorJoinRequest& a, SpectatorJoinRequest& b) { a.Swap(&b); }
  inline void Swap(SpectatorJoinRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpectatorJoinRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpectatorJoinRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SpectatorJoinRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SpectatorJoinRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SpectatorJoinRequest& from) { SpectatorJoinRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SpectatorJoinRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.SpectatorJoinRequest"; }

 protected:
  explicit SpectatorJoinRequest(::google::protobuf::Arena* arena);
  SpectatorJoinRequest(::google::protobuf::Arena* arena, const SpectatorJoinRequest& from);
  SpectatorJoinRequest(::google::protobuf::Arena* arena, SpectatorJoinRequest&& from) noexcept
      : SpectatorJoinRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRoomIdFieldNumber = 1,
    kSilentJoinFieldNumber = 2,
  };
  // int32 room_id = 1;
  void clear_room_id() ;
  ::int32_t room_id() const;
  void set_room_id(::int32_t value);

  private:
  ::int32_t _internal_room_id() const;
  void _internal_set_room_id(::int32_t value);

  public:
  // bool silent_join = 2;
  void clear_silent_join() ;
  bool silent_join() const;
  void set_silent_join(bool value);

  private:
  bool _internal_silent_join() const;
  void _internal_set_silent_join(bool value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.SpectatorJoinRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SpectatorJoinRequest& from_msg);
    ::int32_t room_id_;
    bool silent_join_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class SkipTurnRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.SkipTurnRequest) */ {
 public:
  inline SkipTurnRequest() : SkipTurnRequest(nullptr) {}
  ~SkipTurnRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SkipTurnRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SkipTurnRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SkipTurnRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline SkipTurnRequest(const SkipTurnRequest& from) : SkipTurnRequest(nullptr, from) {}
  inline SkipTurnRequest(SkipTurnRequest&& from) noexcept
      : SkipTurnRequest(nullptr, std::move(from)) {}
  inline SkipTurnRequest& operator=(const SkipTurnRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SkipTurnRequest& operator=(SkipTurnRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SkipTurnRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SkipTurnRequest* internal_default_instance() {
    return reinterpret_cast<const SkipTurnRequest*>(
        &_SkipTurnRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 17;
  friend void swap(SkipTurnRequest& a, SkipTurnRequest& b) { a.Swap(&b); }
  inline void Swap(SkipTurnRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SkipTurnRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SkipTurnRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SkipTurnRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SkipTurnRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SkipTurnRequest& from) { SkipTurnRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SkipTurnRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.SkipTurnRequest"; }

 protected:
  explicit SkipTurnRequest(::google::protobuf::Arena* arena);
  SkipTurnRequest(::google::protobuf::Arena* arena, const SkipTurnRequest& from);
  SkipTurnRequest(::google::protobuf::Arena* arena, SkipTurnRequest&& from) noexcept
      : SkipTurnRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kReasonFieldNumber = 2,
    kRoomIdFieldNumber = 1,
    kForcedFieldNumber = 3,
  };
  // string reason = 2;
  void clear_reason() ;
  const std::string& reason() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reason(Arg_&& arg, Args_... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* value);

  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(
      const std::string& value);
  std::string* _internal_mutable_reason();

  public:
  // int32 room_id = 1;
  void clear_room_id() ;
  ::int32_t room_id() const;
  void set_room_id(::int32_t value);

  private:
  ::int32_t _internal_room_id() const;
  void _internal_set_room_id(::int32_t value);

  public:
  // bool forced = 3;
  void clear_forced() ;
  bool forced() const;
  void set_forced(bool value);

  private:
  bool _internal_forced() const;
  void _internal_set_forced(bool value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.SkipTurnRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      37, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SkipTurnRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr reason_;
    ::int32_t room_id_;
    bool forced_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class RemovePlayerRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.RemovePlayerRequest) */ {
 public:
  inline RemovePlayerRequest() : RemovePlayerRequest(nullptr) {}
  ~RemovePlayerRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RemovePlayerRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RemovePlayerRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RemovePlayerRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline RemovePlayerRequest(const RemovePlayerRequest& from) : RemovePlayerRequest(nullptr, from) {}
  inline RemovePlayerRequest(RemovePlayerRequest&& from) noexcept
      : RemovePlayerRequest(nullptr, std::move(from)) {}
  inline RemovePlayerRequest& operator=(const RemovePlayerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemovePlayerRequest& operator=(RemovePlayerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemovePlayerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemovePlayerRequest* internal_default_instance() {
    return reinterpret_cast<const RemovePlayerRequest*>(
        &_RemovePlayerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(RemovePlayerRequest& a, RemovePlayerRequest& b) { a.Swap(&b); }
  inline void Swap(RemovePlayerRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemovePlayerRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemovePlayerRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RemovePlayerRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RemovePlayerRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RemovePlayerRequest& from) { RemovePlayerRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RemovePlayerRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.RemovePlayerRequest"; }

 protected:
  explicit RemovePlayerRequest(::google::protobuf::Arena* arena);
  RemovePlayerRequest(::google::protobuf::Arena* arena, const RemovePlayerRequest& from);
  RemovePlayerRequest(::google::protobuf::Arena* arena, RemovePlayerRequest&& from) noexcept
      : RemovePlayerRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kReasonFieldNumber = 3,
    kRoomIdFieldNumber = 1,
    kColorFieldNumber = 2,
    kIsKickFieldNumber = 4,
  };
  // string reason = 3;
  void clear_reason() ;
  const std::string& reason() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reason(Arg_&& arg, Args_... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* value);

  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(
      const std::string& value);
  std::string* _internal_mutable_reason();

  public:
  // int32 room_id = 1;
  void clear_room_id() ;
  ::int32_t room_id() const;
  void set_room_id(::int32_t value);

  private:
  ::int32_t _internal_room_id() const;
  void _internal_set_room_id(::int32_t value);

  public:
  // .blokus.PlayerColor color = 2;
  void clear_color() ;
  ::blokus::PlayerColor color() const;
  void set_color(::blokus::PlayerColor value);

  private:
  ::blokus::PlayerColor _internal_color() const;
  void _internal_set_color(::blokus::PlayerColor value);

  public:
  // bool is_kick = 4;
  void clear_is_kick() ;
  bool is_kick() const;
  void set_is_kick(bool value);

  private:
  bool _internal_is_kick() const;
  void _internal_set_is_kick(bool value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.RemovePlayerRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      41, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RemovePlayerRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr reason_;
    ::int32_t room_id_;
    int color_;
    bool is_kick_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class PlayerResult final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.PlayerResult) */ {
 public:
  inline PlayerResult() : PlayerResult(nullptr) {}
  ~PlayerResult() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PlayerResult* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PlayerResult));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PlayerResult(
      ::google::protobuf::internal::ConstantInitialized);

  inline PlayerResult(const PlayerResult& from) : PlayerResult(nullptr, from) {}
  inline PlayerResult(PlayerResult&& from) noexcept
      : PlayerResult(nullptr, std::move(from)) {}
  inline PlayerResult& operator=(const PlayerResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerResult& operator=(PlayerResult&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerResult* internal_default_instance() {
    return reinterpret_cast<const PlayerResult*>(
        &_PlayerResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(PlayerResult& a, PlayerResult& b) { a.Swap(&b); }
  inline void Swap(PlayerResult* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerResult* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PlayerResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PlayerResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PlayerResult& from) { PlayerResult::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PlayerResult* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.PlayerResult"; }

 protected:
  explicit PlayerResult(::google::protobuf::Arena* arena);
  PlayerResult(::google::protobuf::Arena* arena, const PlayerResult& from);
  PlayerResult(::google::protobuf::Arena* arena, PlayerResult&& from) noexcept
      : PlayerResult(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUsernameFieldNumber = 1,
    kColorFieldNumber = 2,
    kFinalScoreFieldNumber = 3,
    kBlocksPlacedFieldNumber = 4,
    kRemainingBlocksFieldNumber = 5,
    kTotalMovesFieldNumber = 7,
    kUndoCountFieldNumber = 8,
    kFinishedAllBlocksFieldNumber = 6,
    kDisconnectedFieldNumber = 11,
    kAverageThinkTimeFieldNumber = 9,
    kLongestThinkTimeFieldNumber = 10,
  };
  // string username = 1;
  void clear_username() ;
  const std::string& username() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_username(Arg_&& arg, Args_... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* value);

  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(
      const std::string& value);
  std::string* _internal_mutable_username();

  public:
  // .blokus.PlayerColor color = 2;
  void clear_color() ;
  ::blokus::PlayerColor color() const;
  void set_color(::blokus::PlayerColor value);

  private:
  ::blokus::PlayerColor _internal_color() const;
  void _internal_set_color(::blokus::PlayerColor value);

  public:
  // int32 final_score = 3;
  void clear_final_score() ;
  ::int32_t final_score() const;
  void set_final_score(::int32_t value);

  private:
  ::int32_t _internal_final_score() const;
  void _internal_set_final_score(::int32_t value);

  public:
  // int32 blocks_placed = 4;
  void clear_blocks_placed() ;
  ::int32_t blocks_placed() const;
  void set_blocks_placed(::int32_t value);

  private:
  ::int32_t _internal_blocks_placed() const;
  void _internal_set_blocks_placed(::int32_t value);

  public:
  // int32 remaining_blocks = 5;
  void clear_remaining_blocks() ;
  ::int32_t remaining_blocks() const;
  void set_remaining_blocks(::int32_t value);

  private:
  ::int32_t _internal_remaining_blocks() const;
  void _internal_set_remaining_blocks(::int32_t value);

  public:
  // int32 total_moves = 7;
  void clear_total_moves() ;
  ::int32_t total_moves() const;
  void set_total_moves(::int32_t value);

  private:
  ::int32_t _internal_total_moves() const;
  void _internal_set_total_moves(::int32_t value);

  public:
  // int32 undo_count = 8;
  void clear_undo_count() ;
  ::int32_t undo_count() const;
  void set_undo_count(::int32_t value);

  private:
  ::int32_t _internal_undo_count() const;
  void _internal_set_undo_count(::int32_t value);

  public:
  // bool finished_all_blocks = 6;
  void clear_finished_all_blocks() ;
  bool finished_all_blocks() const;
  void set_finished_all_blocks(bool value);

  private:
  bool _internal_finished_all_blocks() const;
  void _internal_set_finished_all_blocks(bool value);

  public:
  // bool disconnected = 11;
  void clear_disconnected() ;
  bool disconnected() const;
  void set_disconnected(bool value);

  private:
  bool _internal_disconnected() const;
  void _internal_set_disconnected(bool value);

  public:
  // float average_think_time = 9;
  void clear_average_think_time() ;
  float average_think_time() const;
  void set_average_think_time(float value);

  private:
  float _internal_average_think_time() const;
  void _internal_set_average_think_time(float value);

  public:
  // int32 longest_think_time = 10;
  void clear_longest_think_time() ;
  ::int32_t longest_think_time() const;
  void set_longest_think_time(::int32_t value);

  private:
  ::int32_t _internal_longest_think_time() const;
  void _internal_set_longest_think_time(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.PlayerResult)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 11, 0,
      44, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PlayerResult& from_msg);
    ::google::protobuf::internal::ArenaStringPtr username_;
    int color_;
    ::int32_t final_score_;
    ::int32_t blocks_placed_;
    ::int32_t remaining_blocks_;
    ::int32_t total_moves_;
    ::int32_t undo_count_;
    bool finished_all_blocks_;
    bool disconnected_;
    float average_think_time_;
    ::int32_t longest_think_time_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class GetHintRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.GetHintRequest) */ {
 public:
  inline GetHintRequest() : GetHintRequest(nullptr) {}
  ~GetHintRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetHintRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetHintRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetHintRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetHintRequest(const GetHintRequest& from) : GetHintRequest(nullptr, from) {}
  inline GetHintRequest(GetHintRequest&& from) noexcept
      : GetHintRequest(nullptr, std::move(from)) {}
  inline GetHintRequest& operator=(const GetHintRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetHintRequest& operator=(GetHintRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetHintRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetHintRequest* internal_default_instance() {
    return reinterpret_cast<const GetHintRequest*>(
        &_GetHintRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 25;
  friend void swap(GetHintRequest& a, GetHintRequest& b) { a.Swap(&b); }
  inline void Swap(GetHintRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetHintRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetHintRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetHintRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetHintRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetHintRequest& from) { GetHintRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetHintRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.GetHintRequest"; }

 protected:
  explicit GetHintRequest(::google::protobuf::Arena* arena);
  GetHintRequest(::google::protobuf::Arena* arena, const GetHintRequest& from);
  GetHintRequest(::google::protobuf::Arena* arena, GetHintRequest&& from) noexcept
      : GetHintRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRoomIdFieldNumber = 1,
    kPlayerFieldNumber = 2,
    kHintLevelFieldNumber = 3,
  };
  // int32 room_id = 1;
  void clear_room_id() ;
  ::int32_t room_id() const;
  void set_room_id(::int32_t value);

  private:
  ::int32_t _internal_room_id() const;
  void _internal_set_room_id(::int32_t value);

  public:
  // .blokus.PlayerColor player = 2;
  void clear_player() ;
  ::blokus::PlayerColor player() const;
  void set_player(::blokus::PlayerColor value);

  private:
  ::blokus::PlayerColor _internal_player() const;
  void _internal_set_player(::blokus::PlayerColor value);

  public:
  // int32 hint_level = 3;
  void clear_hint_level() ;
  ::int32_t hint_level() const;
  void set_hint_level(::int32_t value);

  private:
  ::int32_t _internal_hint_level() const;
  void _internal_set_hint_level(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.GetHintRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetHintRequest& from_msg);
    ::int32_t room_id_;
    int player_;
    ::int32_t hint_level_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class GetGameStateRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.GetGameStateRequest) */ {
 public:
  inline GetGameStateRequest() : GetGameStateRequest(nullptr) {}
  ~GetGameStateRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetGameStateRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetGameStateRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetGameStateRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetGameStateRequest(const GetGameStateRequest& from) : GetGameStateRequest(nullptr, from) {}
  inline GetGameStateRequest(GetGameStateRequest&& from) noexcept
      : GetGameStateRequest(nullptr, std::move(from)) {}
  inline GetGameStateRequest& operator=(const GetGameStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGameStateRequest& operator=(GetGameStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGameStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGameStateRequest* internal_default_instance() {
    return reinterpret_cast<const GetGameStateRequest*>(
        &_GetGameStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 21;
  friend void swap(GetGameStateRequest& a, GetGameStateRequest& b) { a.Swap(&b); }
  inline void Swap(GetGameStateRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGameStateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGameStateRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetGameStateRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetGameStateRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetGameStateRequest& from) { GetGameStateRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetGameStateRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.GetGameStateRequest"; }

 protected:
  explicit GetGameStateRequest(::google::protobuf::Arena* arena);
  GetGameStateRequest(::google::protobuf::Arena* arena, const GetGameStateRequest& from);
  GetGameStateRequest(::google::protobuf::Arena* arena, GetGameStateRequest&& from) noexcept
      : GetGameStateRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRoomIdFieldNumber = 1,
    kIncludeBoardFieldNumber = 2,
    kIncludePlayerDetailsFieldNumber = 3,
    kIncludeMoveHistoryFieldNumber = 4,
  };
  // int32 room_id = 1;
  void clear_room_id() ;
  ::int32_t room_id() const;
  void set_room_id(::int32_t value);

  private:
  ::int32_t _internal_room_id() const;
  void _internal_set_room_id(::int32_t value);

  public:
  // bool include_board = 2;
  void clear_include_board() ;
  bool include_board() const;
  void set_include_board(bool value);

  private:
  bool _internal_include_board() const;
  void _internal_set_include_board(bool value);

  public:
  // bool include_player_details = 3;
  void clear_include_player_details() ;
  bool include_player_details() const;
  void set_include_player_details(bool value);

  private:
  bool _internal_include_player_details() const;
  void _internal_set_include_player_details(bool value);

  public:
  // bool include_move_history = 4;
  void clear_include_move_history() ;
  bool include_move_history() const;
  void set_include_move_history(bool value);

  private:
  bool _internal_include_move_history() const;
  void _internal_set_include_move_history(bool value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.GetGameStateRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetGameStateRequest& from_msg);
    ::int32_t room_id_;
    bool include_board_;
    bool include_player_details_;
    bool include_move_history_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class GameEndedNotification_RatingChangesEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, ::int32_t,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_INT32> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, ::int32_t,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>;
  GameEndedNotification_RatingChangesEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameEndedNotification_RatingChangesEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit GameEndedNotification_RatingChangesEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const GameEndedNotification_RatingChangesEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const GameEndedNotification_RatingChangesEntry_DoNotUse*>(
        &_GameEndedNotification_RatingChangesEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_game_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      59, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class GameEndedNotification_ExperienceGainedEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, ::int32_t,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_INT32> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, ::int32_t,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>;
  GameEndedNotification_ExperienceGainedEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameEndedNotification_ExperienceGainedEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit GameEndedNotification_ExperienceGainedEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const GameEndedNotification_ExperienceGainedEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const GameEndedNotification_ExperienceGainedEntry_DoNotUse*>(
        &_GameEndedNotification_ExperienceGainedEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_game_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      62, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class GameEndedNotification_AchievementsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  GameEndedNotification_AchievementsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameEndedNotification_AchievementsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit GameEndedNotification_AchievementsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const GameEndedNotification_AchievementsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const GameEndedNotification_AchievementsEntry_DoNotUse*>(
        &_GameEndedNotification_AchievementsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_game_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      63, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class AddAIPlayerRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.AddAIPlayerRequest) */ {
 public:
  inline AddAIPlayerRequest() : AddAIPlayerRequest(nullptr) {}
  ~AddAIPlayerRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AddAIPlayerRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AddAIPlayerRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AddAIPlayerRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline AddAIPlayerRequest(const AddAIPlayerRequest& from) : AddAIPlayerRequest(nullptr, from) {}
  inline AddAIPlayerRequest(AddAIPlayerRequest&& from) noexcept
      : AddAIPlayerRequest(nullptr, std::move(from)) {}
  inline AddAIPlayerRequest& operator=(const AddAIPlayerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddAIPlayerRequest& operator=(AddAIPlayerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddAIPlayerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddAIPlayerRequest* internal_default_instance() {
    return reinterpret_cast<const AddAIPlayerRequest*>(
        &_AddAIPlayerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(AddAIPlayerRequest& a, AddAIPlayerRequest& b) { a.Swap(&b); }
  inline void Swap(AddAIPlayerRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddAIPlayerRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddAIPlayerRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AddAIPlayerRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AddAIPlayerRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AddAIPlayerRequest& from) { AddAIPlayerRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AddAIPlayerRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.AddAIPlayerRequest"; }

 protected:
  explicit AddAIPlayerRequest(::google::protobuf::Arena* arena);
  AddAIPlayerRequest(::google::protobuf::Arena* arena, const AddAIPlayerRequest& from);
  AddAIPlayerRequest(::google::protobuf::Arena* arena, AddAIPlayerRequest&& from) noexcept
      : AddAIPlayerRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAiNameFieldNumber = 4,
    kAiPersonalityFieldNumber = 5,
    kRoomIdFieldNumber = 1,
    kColorFieldNumber = 2,
    kDifficultyFieldNumber = 3,
  };
  // string ai_name = 4;
  void clear_ai_name() ;
  const std::string& ai_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ai_name(Arg_&& arg, Args_... args);
  std::string* mutable_ai_name();
  PROTOBUF_NODISCARD std::string* release_ai_name();
  void set_allocated_ai_name(std::string* value);

  private:
  const std::string& _internal_ai_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ai_name(
      const std::string& value);
  std::string* _internal_mutable_ai_name();

  public:
  // string ai_personality = 5;
  void clear_ai_personality() ;
  const std::string& ai_personality() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ai_personality(Arg_&& arg, Args_... args);
  std::string* mutable_ai_personality();
  PROTOBUF_NODISCARD std::string* release_ai_personality();
  void set_allocated_ai_personality(std::string* value);

  private:
  const std::string& _internal_ai_personality() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ai_personality(
      const std::string& value);
  std::string* _internal_mutable_ai_personality();

  public:
  // int32 room_id = 1;
  void clear_room_id() ;
  ::int32_t room_id() const;
  void set_room_id(::int32_t value);

  private:
  ::int32_t _internal_room_id() const;
  void _internal_set_room_id(::int32_t value);

  public:
  // .blokus.PlayerColor color = 2;
  void clear_color() ;
  ::blokus::PlayerColor color() const;
  void set_color(::blokus::PlayerColor value);

  private:
  ::blokus::PlayerColor _internal_color() const;
  void _internal_set_color(::blokus::PlayerColor value);

  public:
  // int32 difficulty = 3;
  void clear_difficulty() ;
  ::int32_t difficulty() const;
  void set_difficulty(::int32_t value);

  private:
  ::int32_t _internal_difficulty() const;
  void _internal_set_difficulty(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.AddAIPlayerRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      55, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AddAIPlayerRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr ai_name_;
    ::google::protobuf::internal::ArenaStringPtr ai_personality_;
    ::int32_t room_id_;
    int color_;
    ::int32_t difficulty_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class TurnChangedNotification final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.TurnChangedNotification) */ {
 public:
  inline TurnChangedNotification() : TurnChangedNotification(nullptr) {}
  ~TurnChangedNotification() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TurnChangedNotification* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TurnChangedNotification));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TurnChangedNotification(
      ::google::protobuf::internal::ConstantInitialized);

  inline TurnChangedNotification(const TurnChangedNotification& from) : TurnChangedNotification(nullptr, from) {}
  inline TurnChangedNotification(TurnChangedNotification&& from) noexcept
      : TurnChangedNotification(nullptr, std::move(from)) {}
  inline TurnChangedNotification& operator=(const TurnChangedNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline TurnChangedNotification& operator=(TurnChangedNotification&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TurnChangedNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const TurnChangedNotification* internal_default_instance() {
    return reinterpret_cast<const TurnChangedNotification*>(
        &_TurnChangedNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(TurnChangedNotification& a, TurnChangedNotification& b) { a.Swap(&b); }
  inline void Swap(TurnChangedNotification* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TurnChangedNotification* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TurnChangedNotification* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TurnChangedNotification>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TurnChangedNotification& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TurnChangedNotification& from) { TurnChangedNotification::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TurnChangedNotification* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.TurnChangedNotification"; }

 protected:
  explicit TurnChangedNotification(::google::protobuf::Arena* arena);
  TurnChangedNotification(::google::protobuf::Arena* arena, const TurnChangedNotification& from);
  TurnChangedNotification(::google::protobuf::Arena* arena, TurnChangedNotification&& from) noexcept
      : TurnChangedNotification(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPreviousActionDetailsFieldNumber = 10,
    kTurnStartedAtFieldNumber = 6,
    kRoomIdFieldNumber = 1,
    kCurrentPlayerFieldNumber = 2,
    kPreviousPlayerFieldNumber = 3,
    kTurnNumberFieldNumber = 4,
    kTurnTimeSecondsFieldNumber = 5,
    kMovesMadeFieldNumber = 7,
    kGameNearlyFinishedFieldNumber = 8,
    kPreviousActionFieldNumber = 9,
  };
  // string previous_action_details = 10;
  void clear_previous_action_details() ;
  const std::string& previous_action_details() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_previous_action_details(Arg_&& arg, Args_... args);
  std::string* mutable_previous_action_details();
  PROTOBUF_NODISCARD std::string* release_previous_action_details();
  void set_allocated_previous_action_details(std::string* value);

  private:
  const std::string& _internal_previous_action_details() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_previous_action_details(
      const std::string& value);
  std::string* _internal_mutable_previous_action_details();

  public:
  // .google.protobuf.Timestamp turn_started_at = 6;
  bool has_turn_started_at() const;
  void clear_turn_started_at() ;
  const ::google::protobuf::Timestamp& turn_started_at() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_turn_started_at();
  ::google::protobuf::Timestamp* mutable_turn_started_at();
  void set_allocated_turn_started_at(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_turn_started_at(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_turn_started_at();

  private:
  const ::google::protobuf::Timestamp& _internal_turn_started_at() const;
  ::google::protobuf::Timestamp* _internal_mutable_turn_started_at();

  public:
  // int32 room_id = 1;
  void clear_room_id() ;
  ::int32_t room_id() const;
  void set_room_id(::int32_t value);

  private:
  ::int32_t _internal_room_id() const;
  void _internal_set_room_id(::int32_t value);

  public:
  // .blokus.PlayerColor current_player = 2;
  void clear_current_player() ;
  ::blokus::PlayerColor current_player() const;
  void set_current_player(::blokus::PlayerColor value);

  private:
  ::blokus::PlayerColor _internal_current_player() const;
  void _internal_set_current_player(::blokus::PlayerColor value);

  public:
  // .blokus.PlayerColor previous_player = 3;
  void clear_previous_player() ;
  ::blokus::PlayerColor previous_player() const;
  void set_previous_player(::blokus::PlayerColor value);

  private:
  ::blokus::PlayerColor _internal_previous_player() const;
  void _internal_set_previous_player(::blokus::PlayerColor value);

  public:
  // int32 turn_number = 4;
  void clear_turn_number() ;
  ::int32_t turn_number() const;
  void set_turn_number(::int32_t value);

  private:
  ::int32_t _internal_turn_number() const;
  void _internal_set_turn_number(::int32_t value);

  public:
  // int32 turn_time_seconds = 5;
  void clear_turn_time_seconds() ;
  ::int32_t turn_time_seconds() const;
  void set_turn_time_seconds(::int32_t value);

  private:
  ::int32_t _internal_turn_time_seconds() const;
  void _internal_set_turn_time_seconds(::int32_t value);

  public:
  // int32 moves_made = 7;
  void clear_moves_made() ;
  ::int32_t moves_made() const;
  void set_moves_made(::int32_t value);

  private:
  ::int32_t _internal_moves_made() const;
  void _internal_set_moves_made(::int32_t value);

  public:
  // bool game_nearly_finished = 8;
  void clear_game_nearly_finished() ;
  bool game_nearly_finished() const;
  void set_game_nearly_finished(bool value);

  private:
  bool _internal_game_nearly_finished() const;
  void _internal_set_game_nearly_finished(bool value);

  public:
  // .blokus.TurnAction previous_action = 9;
  void clear_previous_action() ;
  ::blokus::TurnAction previous_action() const;
  void set_previous_action(::blokus::TurnAction value);

  private:
  ::blokus::TurnAction _internal_previous_action() const;
  void _internal_set_previous_action(::blokus::TurnAction value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.TurnChangedNotification)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 10, 1,
      70, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TurnChangedNotification& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr previous_action_details_;
    ::google::protobuf::Timestamp* turn_started_at_;
    ::int32_t room_id_;
    int current_player_;
    int previous_player_;
    ::int32_t turn_number_;
    ::int32_t turn_time_seconds_;
    ::int32_t moves_made_;
    bool game_nearly_finished_;
    int previous_action_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class RoomStateUpdate final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.RoomStateUpdate) */ {
 public:
  inline RoomStateUpdate() : RoomStateUpdate(nullptr) {}
  ~RoomStateUpdate() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RoomStateUpdate* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RoomStateUpdate));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RoomStateUpdate(
      ::google::protobuf::internal::ConstantInitialized);

  inline RoomStateUpdate(const RoomStateUpdate& from) : RoomStateUpdate(nullptr, from) {}
  inline RoomStateUpdate(RoomStateUpdate&& from) noexcept
      : RoomStateUpdate(nullptr, std::move(from)) {}
  inline RoomStateUpdate& operator=(const RoomStateUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomStateUpdate& operator=(RoomStateUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomStateUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoomStateUpdate* internal_default_instance() {
    return reinterpret_cast<const RoomStateUpdate*>(
        &_RoomStateUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(RoomStateUpdate& a, RoomStateUpdate& b) { a.Swap(&b); }
  inline void Swap(RoomStateUpdate* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomStateUpdate* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoomStateUpdate* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RoomStateUpdate>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RoomStateUpdate& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RoomStateUpdate& from) { RoomStateUpdate::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RoomStateUpdate* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.RoomStateUpdate"; }

 protected:
  explicit RoomStateUpdate(::google::protobuf::Arena* arena);
  RoomStateUpdate(::google::protobuf::Arena* arena, const RoomStateUpdate& from);
  RoomStateUpdate(::google::protobuf::Arena* arena, RoomStateUpdate&& from) noexcept
      : RoomStateUpdate(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPlayerSlotsFieldNumber = 2,
    kGameModeFieldNumber = 4,
    kLastUpdatedFieldNumber = 11,
    kRoomIdFieldNumber = 1,
    kGameStateFieldNumber = 3,
    kTurnTimeSecondsFieldNumber = 5,
    kAllowUndoFieldNumber = 6,
    kSpectatorsAllowedFieldNumber = 7,
    kCurrentPlayerFieldNumber = 8,
    kTurnNumberFieldNumber = 9,
    kRemainingTimeSecondsFieldNumber = 10,
    kVersionFieldNumber = 12,
  };
  // repeated .blokus.PlayerSlot player_slots = 2;
  int player_slots_size() const;
  private:
  int _internal_player_slots_size() const;

  public:
  void clear_player_slots() ;
  ::blokus::PlayerSlot* mutable_player_slots(int index);
  ::google::protobuf::RepeatedPtrField<::blokus::PlayerSlot>* mutable_player_slots();

  private:
  const ::google::protobuf::RepeatedPtrField<::blokus::PlayerSlot>& _internal_player_slots() const;
  ::google::protobuf::RepeatedPtrField<::blokus::PlayerSlot>* _internal_mutable_player_slots();
  public:
  const ::blokus::PlayerSlot& player_slots(int index) const;
  ::blokus::PlayerSlot* add_player_slots();
  const ::google::protobuf::RepeatedPtrField<::blokus::PlayerSlot>& player_slots() const;
  // string game_mode = 4;
  void clear_game_mode() ;
  const std::string& game_mode() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_game_mode(Arg_&& arg, Args_... args);
  std::string* mutable_game_mode();
  PROTOBUF_NODISCARD std::string* release_game_mode();
  void set_allocated_game_mode(std::string* value);

  private:
  const std::string& _internal_game_mode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_game_mode(
      const std::string& value);
  std::string* _internal_mutable_game_mode();

  public:
  // .google.protobuf.Timestamp last_updated = 11;
  bool has_last_updated() const;
  void clear_last_updated() ;
  const ::google::protobuf::Timestamp& last_updated() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_last_updated();
  ::google::protobuf::Timestamp* mutable_last_updated();
  void set_allocated_last_updated(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_last_updated(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_last_updated();

  private:
  const ::google::protobuf::Timestamp& _internal_last_updated() const;
  ::google::protobuf::Timestamp* _internal_mutable_last_updated();

  public:
  // int32 room_id = 1;
  void clear_room_id() ;
  ::int32_t room_id() const;
  void set_room_id(::int32_t value);

  private:
  ::int32_t _internal_room_id() const;
  void _internal_set_room_id(::int32_t value);

  public:
  // .blokus.GameState game_state = 3;
  void clear_game_state() ;
  ::blokus::GameState game_state() const;
  void set_game_state(::blokus::GameState value);

  private:
  ::blokus::GameState _internal_game_state() const;
  void _internal_set_game_state(::blokus::GameState value);

  public:
  // int32 turn_time_seconds = 5;
  void clear_turn_time_seconds() ;
  ::int32_t turn_time_seconds() const;
  void set_turn_time_seconds(::int32_t value);

  private:
  ::int32_t _internal_turn_time_seconds() const;
  void _internal_set_turn_time_seconds(::int32_t value);

  public:
  // bool allow_undo = 6;
  void clear_allow_undo() ;
  bool allow_undo() const;
  void set_allow_undo(bool value);

  private:
  bool _internal_allow_undo() const;
  void _internal_set_allow_undo(bool value);

  public:
  // bool spectators_allowed = 7;
  void clear_spectators_allowed() ;
  bool spectators_allowed() const;
  void set_spectators_allowed(bool value);

  private:
  bool _internal_spectators_allowed() const;
  void _internal_set_spectators_allowed(bool value);

  public:
  // .blokus.PlayerColor current_player = 8;
  void clear_current_player() ;
  ::blokus::PlayerColor current_player() const;
  void set_current_player(::blokus::PlayerColor value);

  private:
  ::blokus::PlayerColor _internal_current_player() const;
  void _internal_set_current_player(::blokus::PlayerColor value);

  public:
  // int32 turn_number = 9;
  void clear_turn_number() ;
  ::int32_t turn_number() const;
  void set_turn_number(::int32_t value);

  private:
  ::int32_t _internal_turn_number() const;
  void _internal_set_turn_number(::int32_t value);

  public:
  // int32 remaining_time_seconds = 10;
  void clear_remaining_time_seconds() ;
  ::int32_t remaining_time_seconds() const;
  void set_remaining_time_seconds(::int32_t value);

  private:
  ::int32_t _internal_remaining_time_seconds() const;
  void _internal_set_remaining_time_seconds(::int32_t value);

  public:
  // int32 version = 12;
  void clear_version() ;
  ::int32_t version() const;
  void set_version(::int32_t value);

  private:
  ::int32_t _internal_version() const;
  void _internal_set_version(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.RoomStateUpdate)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 12, 2,
      48, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RoomStateUpdate& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::blokus::PlayerSlot > player_slots_;
    ::google::protobuf::internal::ArenaStringPtr game_mode_;
    ::google::protobuf::Timestamp* last_updated_;
    ::int32_t room_id_;
    int game_state_;
    ::int32_t turn_time_seconds_;
    bool allow_undo_;
    bool spectators_allowed_;
    int current_player_;
    ::int32_t turn_number_;
    ::int32_t remaining_time_seconds_;
    ::int32_t version_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class GameStateUpdate final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.GameStateUpdate) */ {
 public:
  inline GameStateUpdate() : GameStateUpdate(nullptr) {}
  ~GameStateUpdate() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GameStateUpdate* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GameStateUpdate));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameStateUpdate(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameStateUpdate(const GameStateUpdate& from) : GameStateUpdate(nullptr, from) {}
  inline GameStateUpdate(GameStateUpdate&& from) noexcept
      : GameStateUpdate(nullptr, std::move(from)) {}
  inline GameStateUpdate& operator=(const GameStateUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameStateUpdate& operator=(GameStateUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameStateUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameStateUpdate* internal_default_instance() {
    return reinterpret_cast<const GameStateUpdate*>(
        &_GameStateUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 24;
  friend void swap(GameStateUpdate& a, GameStateUpdate& b) { a.Swap(&b); }
  inline void Swap(GameStateUpdate* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameStateUpdate* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameStateUpdate* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GameStateUpdate>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameStateUpdate& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameStateUpdate& from) { GameStateUpdate::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GameStateUpdate* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.GameStateUpdate"; }

 protected:
  explicit GameStateUpdate(::google::protobuf::Arena* arena);
  GameStateUpdate(::google::protobuf::Arena* arena, const GameStateUpdate& from);
  GameStateUpdate(::google::protobuf::Arena* arena, GameStateUpdate&& from) noexcept
      : GameStateUpdate(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUpdatedPlayersFieldNumber = 6,
    kUpdateReasonFieldNumber = 8,
    kBoardChangesFieldNumber = 5,
    kUpdatedAtFieldNumber = 7,
    kRoomIdFieldNumber = 1,
    kUpdateVersionFieldNumber = 2,
    kCurrentPlayerFieldNumber = 3,
    kRemainingTimeFieldNumber = 4,
  };
  // repeated .blokus.PlayerSlot updated_players = 6;
  int updated_players_size() const;
  private:
  int _internal_updated_players_size() const;

  public:
  void clear_updated_players() ;
  ::blokus::PlayerSlot* mutable_updated_players(int index);
  ::google::protobuf::RepeatedPtrField<::blokus::PlayerSlot>* mutable_updated_players();

  private:
  const ::google::protobuf::RepeatedPtrField<::blokus::PlayerSlot>& _internal_updated_players() const;
  ::google::protobuf::RepeatedPtrField<::blokus::PlayerSlot>* _internal_mutable_updated_players();
  public:
  const ::blokus::PlayerSlot& updated_players(int index) const;
  ::blokus::PlayerSlot* add_updated_players();
  const ::google::protobuf::RepeatedPtrField<::blokus::PlayerSlot>& updated_players() const;
  // string update_reason = 8;
  void clear_update_reason() ;
  const std::string& update_reason() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_update_reason(Arg_&& arg, Args_... args);
  std::string* mutable_update_reason();
  PROTOBUF_NODISCARD std::string* release_update_reason();
  void set_allocated_update_reason(std::string* value);

  private:
  const std::string& _internal_update_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_update_reason(
      const std::string& value);
  std::string* _internal_mutable_update_reason();

  public:
  // optional .blokus.BoardState board_changes = 5;
  bool has_board_changes() const;
  void clear_board_changes() ;
  const ::blokus::BoardState& board_changes() const;
  PROTOBUF_NODISCARD ::blokus::BoardState* release_board_changes();
  ::blokus::BoardState* mutable_board_changes();
  void set_allocated_board_changes(::blokus::BoardState* value);
  void unsafe_arena_set_allocated_board_changes(::blokus::BoardState* value);
  ::blokus::BoardState* unsafe_arena_release_board_changes();

  private:
  const ::blokus::BoardState& _internal_board_changes() const;
  ::blokus::BoardState* _internal_mutable_board_changes();

  public:
  // .google.protobuf.Timestamp updated_at = 7;
  bool has_updated_at() const;
  void clear_updated_at() ;
  const ::google::protobuf::Timestamp& updated_at() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_updated_at();
  ::google::protobuf::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_updated_at(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_updated_at();

  private:
  const ::google::protobuf::Timestamp& _internal_updated_at() const;
  ::google::protobuf::Timestamp* _internal_mutable_updated_at();

  public:
  // int32 room_id = 1;
  void clear_room_id() ;
  ::int32_t room_id() const;
  void set_room_id(::int32_t value);

  private:
  ::int32_t _internal_room_id() const;
  void _internal_set_room_id(::int32_t value);

  public:
  // int32 update_version = 2;
  void clear_update_version() ;
  ::int32_t update_version() const;
  void set_update_version(::int32_t value);

  private:
  ::int32_t _internal_update_version() const;
  void _internal_set_update_version(::int32_t value);

  public:
  // optional .blokus.PlayerColor current_player = 3;
  bool has_current_player() const;
  void clear_current_player() ;
  ::blokus::PlayerColor current_player() const;
  void set_current_player(::blokus::PlayerColor value);

  private:
  ::blokus::PlayerColor _internal_current_player() const;
  void _internal_set_current_player(::blokus::PlayerColor value);

  public:
  // optional int32 remaining_time = 4;
  bool has_remaining_time() const;
  void clear_remaining_time() ;
  ::int32_t remaining_time() const;
  void set_remaining_time(::int32_t value);

  private:
  ::int32_t _internal_remaining_time() const;
  void _internal_set_remaining_time(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.GameStateUpdate)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 3,
      52, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameStateUpdate& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::blokus::PlayerSlot > updated_players_;
    ::google::protobuf::internal::ArenaStringPtr update_reason_;
    ::blokus::BoardState* board_changes_;
    ::google::protobuf::Timestamp* updated_at_;
    ::int32_t room_id_;
    ::int32_t update_version_;
    int current_player_;
    ::int32_t remaining_time_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class GameStartedNotification final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.GameStartedNotification) */ {
 public:
  inline GameStartedNotification() : GameStartedNotification(nullptr) {}
  ~GameStartedNotification() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GameStartedNotification* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GameStartedNotification));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameStartedNotification(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameStartedNotification(const GameStartedNotification& from) : GameStartedNotification(nullptr, from) {}
  inline GameStartedNotification(GameStartedNotification&& from) noexcept
      : GameStartedNotification(nullptr, std::move(from)) {}
  inline GameStartedNotification& operator=(const GameStartedNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameStartedNotification& operator=(GameStartedNotification&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameStartedNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameStartedNotification* internal_default_instance() {
    return reinterpret_cast<const GameStartedNotification*>(
        &_GameStartedNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(GameStartedNotification& a, GameStartedNotification& b) { a.Swap(&b); }
  inline void Swap(GameStartedNotification* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameStartedNotification* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameStartedNotification* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GameStartedNotification>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameStartedNotification& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameStartedNotification& from) { GameStartedNotification::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GameStartedNotification* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.GameStartedNotification"; }

 protected:
  explicit GameStartedNotification(::google::protobuf::Arena* arena);
  GameStartedNotification(::google::protobuf::Arena* arena, const GameStartedNotification& from);
  GameStartedNotification(::google::protobuf::Arena* arena, GameStartedNotification&& from) noexcept
      : GameStartedNotification(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPlayersFieldNumber = 2,
    kGameModeFieldNumber = 4,
    kGameIdFieldNumber = 10,
    kInitialBoardFieldNumber = 8,
    kStartedAtFieldNumber = 9,
    kRoomIdFieldNumber = 1,
    kFirstPlayerFieldNumber = 3,
    kTurnTimeSecondsFieldNumber = 5,
    kAllowUndoFieldNumber = 6,
    kMaxUndoCountFieldNumber = 7,
  };
  // repeated .blokus.PlayerSlot players = 2;
  int players_size() const;
  private:
  int _internal_players_size() const;

  public:
  void clear_players() ;
  ::blokus::PlayerSlot* mutable_players(int index);
  ::google::protobuf::RepeatedPtrField<::blokus::PlayerSlot>* mutable_players();

  private:
  const ::google::protobuf::RepeatedPtrField<::blokus::PlayerSlot>& _internal_players() const;
  ::google::protobuf::RepeatedPtrField<::blokus::PlayerSlot>* _internal_mutable_players();
  public:
  const ::blokus::PlayerSlot& players(int index) const;
  ::blokus::PlayerSlot* add_players();
  const ::google::protobuf::RepeatedPtrField<::blokus::PlayerSlot>& players() const;
  // string game_mode = 4;
  void clear_game_mode() ;
  const std::string& game_mode() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_game_mode(Arg_&& arg, Args_... args);
  std::string* mutable_game_mode();
  PROTOBUF_NODISCARD std::string* release_game_mode();
  void set_allocated_game_mode(std::string* value);

  private:
  const std::string& _internal_game_mode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_game_mode(
      const std::string& value);
  std::string* _internal_mutable_game_mode();

  public:
  // string game_id = 10;
  void clear_game_id() ;
  const std::string& game_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_game_id(Arg_&& arg, Args_... args);
  std::string* mutable_game_id();
  PROTOBUF_NODISCARD std::string* release_game_id();
  void set_allocated_game_id(std::string* value);

  private:
  const std::string& _internal_game_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_game_id(
      const std::string& value);
  std::string* _internal_mutable_game_id();

  public:
  // .blokus.BoardState initial_board = 8;
  bool has_initial_board() const;
  void clear_initial_board() ;
  const ::blokus::BoardState& initial_board() const;
  PROTOBUF_NODISCARD ::blokus::BoardState* release_initial_board();
  ::blokus::BoardState* mutable_initial_board();
  void set_allocated_initial_board(::blokus::BoardState* value);
  void unsafe_arena_set_allocated_initial_board(::blokus::BoardState* value);
  ::blokus::BoardState* unsafe_arena_release_initial_board();

  private:
  const ::blokus::BoardState& _internal_initial_board() const;
  ::blokus::BoardState* _internal_mutable_initial_board();

  public:
  // .google.protobuf.Timestamp started_at = 9;
  bool has_started_at() const;
  void clear_started_at() ;
  const ::google::protobuf::Timestamp& started_at() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_started_at();
  ::google::protobuf::Timestamp* mutable_started_at();
  void set_allocated_started_at(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_started_at(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_started_at();

  private:
  const ::google::protobuf::Timestamp& _internal_started_at() const;
  ::google::protobuf::Timestamp* _internal_mutable_started_at();

  public:
  // int32 room_id = 1;
  void clear_room_id() ;
  ::int32_t room_id() const;
  void set_room_id(::int32_t value);

  private:
  ::int32_t _internal_room_id() const;
  void _internal_set_room_id(::int32_t value);

  public:
  // .blokus.PlayerColor first_player = 3;
  void clear_first_player() ;
  ::blokus::PlayerColor first_player() const;
  void set_first_player(::blokus::PlayerColor value);

  private:
  ::blokus::PlayerColor _internal_first_player() const;
  void _internal_set_first_player(::blokus::PlayerColor value);

  public:
  // int32 turn_time_seconds = 5;
  void clear_turn_time_seconds() ;
  ::int32_t turn_time_seconds() const;
  void set_turn_time_seconds(::int32_t value);

  private:
  ::int32_t _internal_turn_time_seconds() const;
  void _internal_set_turn_time_seconds(::int32_t value);

  public:
  // bool allow_undo = 6;
  void clear_allow_undo() ;
  bool allow_undo() const;
  void set_allow_undo(bool value);

  private:
  bool _internal_allow_undo() const;
  void _internal_set_allow_undo(bool value);

  public:
  // int32 max_undo_count = 7;
  void clear_max_undo_count() ;
  ::int32_t max_undo_count() const;
  void set_max_undo_count(::int32_t value);

  private:
  ::int32_t _internal_max_undo_count() const;
  void _internal_set_max_undo_count(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.GameStartedNotification)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 10, 3,
      63, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameStartedNotification& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::blokus::PlayerSlot > players_;
    ::google::protobuf::internal::ArenaStringPtr game_mode_;
    ::google::protobuf::internal::ArenaStringPtr game_id_;
    ::blokus::BoardState* initial_board_;
    ::google::protobuf::Timestamp* started_at_;
    ::int32_t room_id_;
    int first_player_;
    ::int32_t turn_time_seconds_;
    bool allow_undo_;
    ::int32_t max_undo_count_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class UndoMoveResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.UndoMoveResponse) */ {
 public:
  inline UndoMoveResponse() : UndoMoveResponse(nullptr) {}
  ~UndoMoveResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(UndoMoveResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(UndoMoveResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UndoMoveResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline UndoMoveResponse(const UndoMoveResponse& from) : UndoMoveResponse(nullptr, from) {}
  inline UndoMoveResponse(UndoMoveResponse&& from) noexcept
      : UndoMoveResponse(nullptr, std::move(from)) {}
  inline UndoMoveResponse& operator=(const UndoMoveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UndoMoveResponse& operator=(UndoMoveResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UndoMoveResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UndoMoveResponse* internal_default_instance() {
    return reinterpret_cast<const UndoMoveResponse*>(
        &_UndoMoveResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 20;
  friend void swap(UndoMoveResponse& a, UndoMoveResponse& b) { a.Swap(&b); }
  inline void Swap(UndoMoveResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UndoMoveResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UndoMoveResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<UndoMoveResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UndoMoveResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UndoMoveResponse& from) { UndoMoveResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(UndoMoveResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.UndoMoveResponse"; }

 protected:
  explicit UndoMoveResponse(::google::protobuf::Arena* arena);
  UndoMoveResponse(::google::protobuf::Arena* arena, const UndoMoveResponse& from);
  UndoMoveResponse(::google::protobuf::Arena* arena, UndoMoveResponse&& from) noexcept
      : UndoMoveResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 5,
    kResultFieldNumber = 1,
    kRevertedBoardFieldNumber = 2,
    kCurrentPlayerFieldNumber = 3,
    kUndoCountRemainingFieldNumber = 4,
  };
  // string message = 5;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // .blokus.Result result = 1;
  bool has_result() const;
  void clear_result() ;
  const ::blokus::Result& result() const;
  PROTOBUF_NODISCARD ::blokus::Result* release_result();
  ::blokus::Result* mutable_result();
  void set_allocated_result(::blokus::Result* value);
  void unsafe_arena_set_allocated_result(::blokus::Result* value);
  ::blokus::Result* unsafe_arena_release_result();

  private:
  const ::blokus::Result& _internal_result() const;
  ::blokus::Result* _internal_mutable_result();

  public:
  // .blokus.BoardState reverted_board = 2;
  bool has_reverted_board() const;
  void clear_reverted_board() ;
  const ::blokus::BoardState& reverted_board() const;
  PROTOBUF_NODISCARD ::blokus::BoardState* release_reverted_board();
  ::blokus::BoardState* mutable_reverted_board();
  void set_allocated_reverted_board(::blokus::BoardState* value);
  void unsafe_arena_set_allocated_reverted_board(::blokus::BoardState* value);
  ::blokus::BoardState* unsafe_arena_release_reverted_board();

  private:
  const ::blokus::BoardState& _internal_reverted_board() const;
  ::blokus::BoardState* _internal_mutable_reverted_board();

  public:
  // .blokus.PlayerColor current_player = 3;
  void clear_current_player() ;
  ::blokus::PlayerColor current_player() const;
  void set_current_player(::blokus::PlayerColor value);

  private:
  ::blokus::PlayerColor _internal_current_player() const;
  void _internal_set_current_player(::blokus::PlayerColor value);

  public:
  // int32 undo_count_remaining = 4;
  void clear_undo_count_remaining() ;
  ::int32_t undo_count_remaining() const;
  void set_undo_count_remaining(::int32_t value);

  private:
  ::int32_t _internal_undo_count_remaining() const;
  void _internal_set_undo_count_remaining(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.UndoMoveResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 2,
      39, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UndoMoveResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::blokus::Result* result_;
    ::blokus::BoardState* reverted_board_;
    int current_player_;
    ::int32_t undo_count_remaining_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class StartGameResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.StartGameResponse) */ {
 public:
  inline StartGameResponse() : StartGameResponse(nullptr) {}
  ~StartGameResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(StartGameResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(StartGameResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StartGameResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline StartGameResponse(const StartGameResponse& from) : StartGameResponse(nullptr, from) {}
  inline StartGameResponse(StartGameResponse&& from) noexcept
      : StartGameResponse(nullptr, std::move(from)) {}
  inline StartGameResponse& operator=(const StartGameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartGameResponse& operator=(StartGameResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartGameResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartGameResponse* internal_default_instance() {
    return reinterpret_cast<const StartGameResponse*>(
        &_StartGameResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(StartGameResponse& a, StartGameResponse& b) { a.Swap(&b); }
  inline void Swap(StartGameResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartGameResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartGameResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<StartGameResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StartGameResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StartGameResponse& from) { StartGameResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(StartGameResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.StartGameResponse"; }

 protected:
  explicit StartGameResponse(::google::protobuf::Arena* arena);
  StartGameResponse(::google::protobuf::Arena* arena, const StartGameResponse& from);
  StartGameResponse(::google::protobuf::Arena* arena, StartGameResponse&& from) noexcept
      : StartGameResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kResultFieldNumber = 1,
    kGameStartTimeFieldNumber = 3,
    kEstimatedDurationMinutesFieldNumber = 4,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // .blokus.Result result = 1;
  bool has_result() const;
  void clear_result() ;
  const ::blokus::Result& result() const;
  PROTOBUF_NODISCARD ::blokus::Result* release_result();
  ::blokus::Result* mutable_result();
  void set_allocated_result(::blokus::Result* value);
  void unsafe_arena_set_allocated_result(::blokus::Result* value);
  ::blokus::Result* unsafe_arena_release_result();

  private:
  const ::blokus::Result& _internal_result() const;
  ::blokus::Result* _internal_mutable_result();

  public:
  // .google.protobuf.Timestamp game_start_time = 3;
  bool has_game_start_time() const;
  void clear_game_start_time() ;
  const ::google::protobuf::Timestamp& game_start_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_game_start_time();
  ::google::protobuf::Timestamp* mutable_game_start_time();
  void set_allocated_game_start_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_game_start_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_game_start_time();

  private:
  const ::google::protobuf::Timestamp& _internal_game_start_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_game_start_time();

  public:
  // int32 estimated_duration_minutes = 4;
  void clear_estimated_duration_minutes() ;
  ::int32_t estimated_duration_minutes() const;
  void set_estimated_duration_minutes(::int32_t value);

  private:
  ::int32_t _internal_estimated_duration_minutes() const;
  void _internal_set_estimated_duration_minutes(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.StartGameResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 2,
      40, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StartGameResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::blokus::Result* result_;
    ::google::protobuf::Timestamp* game_start_time_;
    ::int32_t estimated_duration_minutes_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class SkipTurnResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.SkipTurnResponse) */ {
 public:
  inline SkipTurnResponse() : SkipTurnResponse(nullptr) {}
  ~SkipTurnResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SkipTurnResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SkipTurnResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SkipTurnResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline SkipTurnResponse(const SkipTurnResponse& from) : SkipTurnResponse(nullptr, from) {}
  inline SkipTurnResponse(SkipTurnResponse&& from) noexcept
      : SkipTurnResponse(nullptr, std::move(from)) {}
  inline SkipTurnResponse& operator=(const SkipTurnResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SkipTurnResponse& operator=(SkipTurnResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SkipTurnResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SkipTurnResponse* internal_default_instance() {
    return reinterpret_cast<const SkipTurnResponse*>(
        &_SkipTurnResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 18;
  friend void swap(SkipTurnResponse& a, SkipTurnResponse& b) { a.Swap(&b); }
  inline void Swap(SkipTurnResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SkipTurnResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SkipTurnResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SkipTurnResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SkipTurnResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SkipTurnResponse& from) { SkipTurnResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SkipTurnResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.SkipTurnResponse"; }

 protected:
  explicit SkipTurnResponse(::google::protobuf::Arena* arena);
  SkipTurnResponse(::google::protobuf::Arena* arena, const SkipTurnResponse& from);
  SkipTurnResponse(::google::protobuf::Arena* arena, SkipTurnResponse&& from) noexcept
      : SkipTurnResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kResultFieldNumber = 1,
    kNextPlayerFieldNumber = 3,
    kGameEndedFieldNumber = 4,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // .blokus.Result result = 1;
  bool has_result() const;
  void clear_result() ;
  const ::blokus::Result& result() const;
  PROTOBUF_NODISCARD ::blokus::Result* release_result();
  ::blokus::Result* mutable_result();
  void set_allocated_result(::blokus::Result* value);
  void unsafe_arena_set_allocated_result(::blokus::Result* value);
  ::blokus::Result* unsafe_arena_release_result();

  private:
  const ::blokus::Result& _internal_result() const;
  ::blokus::Result* _internal_mutable_result();

  public:
  // .blokus.PlayerColor next_player = 3;
  void clear_next_player() ;
  ::blokus::PlayerColor next_player() const;
  void set_next_player(::blokus::PlayerColor value);

  private:
  ::blokus::PlayerColor _internal_next_player() const;
  void _internal_set_next_player(::blokus::PlayerColor value);

  public:
  // bool game_ended = 4;
  void clear_game_ended() ;
  bool game_ended() const;
  void set_game_ended(bool value);

  private:
  bool _internal_game_ended() const;
  void _internal_set_game_ended(bool value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.SkipTurnResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      39, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SkipTurnResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::blokus::Result* result_;
    int next_player_;
    bool game_ended_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class RemovePlayerResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.RemovePlayerResponse) */ {
 public:
  inline RemovePlayerResponse() : RemovePlayerResponse(nullptr) {}
  ~RemovePlayerResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RemovePlayerResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RemovePlayerResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RemovePlayerResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline RemovePlayerResponse(const RemovePlayerResponse& from) : RemovePlayerResponse(nullptr, from) {}
  inline RemovePlayerResponse(RemovePlayerResponse&& from) noexcept
      : RemovePlayerResponse(nullptr, std::move(from)) {}
  inline RemovePlayerResponse& operator=(const RemovePlayerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemovePlayerResponse& operator=(RemovePlayerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemovePlayerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemovePlayerResponse* internal_default_instance() {
    return reinterpret_cast<const RemovePlayerResponse*>(
        &_RemovePlayerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(RemovePlayerResponse& a, RemovePlayerResponse& b) { a.Swap(&b); }
  inline void Swap(RemovePlayerResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemovePlayerResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemovePlayerResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RemovePlayerResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RemovePlayerResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RemovePlayerResponse& from) { RemovePlayerResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RemovePlayerResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.RemovePlayerResponse"; }

 protected:
  explicit RemovePlayerResponse(::google::protobuf::Arena* arena);
  RemovePlayerResponse(::google::protobuf::Arena* arena, const RemovePlayerResponse& from);
  RemovePlayerResponse(::google::protobuf::Arena* arena, RemovePlayerResponse&& from) noexcept
      : RemovePlayerResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kResultFieldNumber = 1,
    kRoomDisbandedFieldNumber = 3,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // .blokus.Result result = 1;
  bool has_result() const;
  void clear_result() ;
  const ::blokus::Result& result() const;
  PROTOBUF_NODISCARD ::blokus::Result* release_result();
  ::blokus::Result* mutable_result();
  void set_allocated_result(::blokus::Result* value);
  void unsafe_arena_set_allocated_result(::blokus::Result* value);
  ::blokus::Result* unsafe_arena_release_result();

  private:
  const ::blokus::Result& _internal_result() const;
  ::blokus::Result* _internal_mutable_result();

  public:
  // bool room_disbanded = 3;
  void clear_room_disbanded() ;
  bool room_disbanded() const;
  void set_room_disbanded(bool value);

  private:
  bool _internal_room_disbanded() const;
  void _internal_set_room_disbanded(bool value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.RemovePlayerResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      43, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RemovePlayerResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::blokus::Result* result_;
    bool room_disbanded_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class PlaceBlockResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.PlaceBlockResponse) */ {
 public:
  inline PlaceBlockResponse() : PlaceBlockResponse(nullptr) {}
  ~PlaceBlockResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PlaceBlockResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PlaceBlockResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PlaceBlockResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline PlaceBlockResponse(const PlaceBlockResponse& from) : PlaceBlockResponse(nullptr, from) {}
  inline PlaceBlockResponse(PlaceBlockResponse&& from) noexcept
      : PlaceBlockResponse(nullptr, std::move(from)) {}
  inline PlaceBlockResponse& operator=(const PlaceBlockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaceBlockResponse& operator=(PlaceBlockResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlaceBlockResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlaceBlockResponse* internal_default_instance() {
    return reinterpret_cast<const PlaceBlockResponse*>(
        &_PlaceBlockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(PlaceBlockResponse& a, PlaceBlockResponse& b) { a.Swap(&b); }
  inline void Swap(PlaceBlockResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlaceBlockResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlaceBlockResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PlaceBlockResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PlaceBlockResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PlaceBlockResponse& from) { PlaceBlockResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PlaceBlockResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.PlaceBlockResponse"; }

 protected:
  explicit PlaceBlockResponse(::google::protobuf::Arena* arena);
  PlaceBlockResponse(::google::protobuf::Arena* arena, const PlaceBlockResponse& from);
  PlaceBlockResponse(::google::protobuf::Arena* arena, PlaceBlockResponse&& from) noexcept
      : PlaceBlockResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValidationErrorsFieldNumber = 7,
    kSuggestedPositionsFieldNumber = 8,
    kMoveIdFieldNumber = 12,
    kResultFieldNumber = 1,
    kConfirmedPlacementFieldNumber = 2,
    kNewBoardStateFieldNumber = 4,
    kScoreGainedFieldNumber = 3,
    kMoveAcceptedFieldNumber = 5,
    kValidPlacementFieldNumber = 6,
    kTurnEndedFieldNumber = 9,
    kGameEndedFieldNumber = 11,
    kNextPlayerFieldNumber = 10,
    kServerBoardVersionFieldNumber = 13,
  };
  // repeated string validation_errors = 7;
  int validation_errors_size() const;
  private:
  int _internal_validation_errors_size() const;

  public:
  void clear_validation_errors() ;
  const std::string& validation_errors(int index) const;
  std::string* mutable_validation_errors(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_validation_errors(int index, Arg_&& value, Args_... args);
  std::string* add_validation_errors();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_validation_errors(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& validation_errors() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_validation_errors();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_validation_errors() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_validation_errors();

  public:
  // repeated .blokus.Position suggested_positions = 8;
  int suggested_positions_size() const;
  private:
  int _internal_suggested_positions_size() const;

  public:
  void clear_suggested_positions() ;
  ::blokus::Position* mutable_suggested_positions(int index);
  ::google::protobuf::RepeatedPtrField<::blokus::Position>* mutable_suggested_positions();

  private:
  const ::google::protobuf::RepeatedPtrField<::blokus::Position>& _internal_suggested_positions() const;
  ::google::protobuf::RepeatedPtrField<::blokus::Position>* _internal_mutable_suggested_positions();
  public:
  const ::blokus::Position& suggested_positions(int index) const;
  ::blokus::Position* add_suggested_positions();
  const ::google::protobuf::RepeatedPtrField<::blokus::Position>& suggested_positions() const;
  // string move_id = 12;
  void clear_move_id() ;
  const std::string& move_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_move_id(Arg_&& arg, Args_... args);
  std::string* mutable_move_id();
  PROTOBUF_NODISCARD std::string* release_move_id();
  void set_allocated_move_id(std::string* value);

  private:
  const std::string& _internal_move_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_move_id(
      const std::string& value);
  std::string* _internal_mutable_move_id();

  public:
  // .blokus.Result result = 1;
  bool has_result() const;
  void clear_result() ;
  const ::blokus::Result& result() const;
  PROTOBUF_NODISCARD ::blokus::Result* release_result();
  ::blokus::Result* mutable_result();
  void set_allocated_result(::blokus::Result* value);
  void unsafe_arena_set_allocated_result(::blokus::Result* value);
  ::blokus::Result* unsafe_arena_release_result();

  private:
  const ::blokus::Result& _internal_result() const;
  ::blokus::Result* _internal_mutable_result();

  public:
  // .blokus.BlockPlacement confirmed_placement = 2;
  bool has_confirmed_placement() const;
  void clear_confirmed_placement() ;
  const ::blokus::BlockPlacement& confirmed_placement() const;
  PROTOBUF_NODISCARD ::blokus::BlockPlacement* release_confirmed_placement();
  ::blokus::BlockPlacement* mutable_confirmed_placement();
  void set_allocated_confirmed_placement(::blokus::BlockPlacement* value);
  void unsafe_arena_set_allocated_confirmed_placement(::blokus::BlockPlacement* value);
  ::blokus::BlockPlacement* unsafe_arena_release_confirmed_placement();

  private:
  const ::blokus::BlockPlacement& _internal_confirmed_placement() const;
  ::blokus::BlockPlacement* _internal_mutable_confirmed_placement();

  public:
  // .blokus.BoardState new_board_state = 4;
  bool has_new_board_state() const;
  void clear_new_board_state() ;
  const ::blokus::BoardState& new_board_state() const;
  PROTOBUF_NODISCARD ::blokus::BoardState* release_new_board_state();
  ::blokus::BoardState* mutable_new_board_state();
  void set_allocated_new_board_state(::blokus::BoardState* value);
  void unsafe_arena_set_allocated_new_board_state(::blokus::BoardState* value);
  ::blokus::BoardState* unsafe_arena_release_new_board_state();

  private:
  const ::blokus::BoardState& _internal_new_board_state() const;
  ::blokus::BoardState* _internal_mutable_new_board_state();

  public:
  // int32 score_gained = 3;
  void clear_score_gained() ;
  ::int32_t score_gained() const;
  void set_score_gained(::int32_t value);

  private:
  ::int32_t _internal_score_gained() const;
  void _internal_set_score_gained(::int32_t value);

  public:
  // bool move_accepted = 5;
  void clear_move_accepted() ;
  bool move_accepted() const;
  void set_move_accepted(bool value);

  private:
  bool _internal_move_accepted() const;
  void _internal_set_move_accepted(bool value);

  public:
  // bool valid_placement = 6;
  void clear_valid_placement() ;
  bool valid_placement() const;
  void set_valid_placement(bool value);

  private:
  bool _internal_valid_placement() const;
  void _internal_set_valid_placement(bool value);

  public:
  // bool turn_ended = 9;
  void clear_turn_ended() ;
  bool turn_ended() const;
  void set_turn_ended(bool value);

  private:
  bool _internal_turn_ended() const;
  void _internal_set_turn_ended(bool value);

  public:
  // bool game_ended = 11;
  void clear_game_ended() ;
  bool game_ended() const;
  void set_game_ended(bool value);

  private:
  bool _internal_game_ended() const;
  void _internal_set_game_ended(bool value);

  public:
  // .blokus.PlayerColor next_player = 10;
  void clear_next_player() ;
  ::blokus::PlayerColor next_player() const;
  void set_next_player(::blokus::PlayerColor value);

  private:
  ::blokus::PlayerColor _internal_next_player() const;
  void _internal_set_next_player(::blokus::PlayerColor value);

  public:
  // int32 server_board_version = 13;
  void clear_server_board_version() ;
  ::int32_t server_board_version() const;
  void set_server_board_version(::int32_t value);

  private:
  ::int32_t _internal_server_board_version() const;
  void _internal_set_server_board_version(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.PlaceBlockResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 13, 4,
      66, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PlaceBlockResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> validation_errors_;
    ::google::protobuf::RepeatedPtrField< ::blokus::Position > suggested_positions_;
    ::google::protobuf::internal::ArenaStringPtr move_id_;
    ::blokus::Result* result_;
    ::blokus::BlockPlacement* confirmed_placement_;
    ::blokus::BoardState* new_board_state_;
    ::int32_t score_gained_;
    bool move_accepted_;
    bool valid_placement_;
    bool turn_ended_;
    bool game_ended_;
    int next_player_;
    ::int32_t server_board_version_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class PlaceBlockRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.PlaceBlockRequest) */ {
 public:
  inline PlaceBlockRequest() : PlaceBlockRequest(nullptr) {}
  ~PlaceBlockRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PlaceBlockRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PlaceBlockRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PlaceBlockRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline PlaceBlockRequest(const PlaceBlockRequest& from) : PlaceBlockRequest(nullptr, from) {}
  inline PlaceBlockRequest(PlaceBlockRequest&& from) noexcept
      : PlaceBlockRequest(nullptr, std::move(from)) {}
  inline PlaceBlockRequest& operator=(const PlaceBlockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaceBlockRequest& operator=(PlaceBlockRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlaceBlockRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlaceBlockRequest* internal_default_instance() {
    return reinterpret_cast<const PlaceBlockRequest*>(
        &_PlaceBlockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(PlaceBlockRequest& a, PlaceBlockRequest& b) { a.Swap(&b); }
  inline void Swap(PlaceBlockRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlaceBlockRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlaceBlockRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PlaceBlockRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PlaceBlockRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PlaceBlockRequest& from) { PlaceBlockRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PlaceBlockRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.PlaceBlockRequest"; }

 protected:
  explicit PlaceBlockRequest(::google::protobuf::Arena* arena);
  PlaceBlockRequest(::google::protobuf::Arena* arena, const PlaceBlockRequest& from);
  PlaceBlockRequest(::google::protobuf::Arena* arena, PlaceBlockRequest&& from) noexcept
      : PlaceBlockRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMoveIdFieldNumber = 6,
    kBlockPlacementFieldNumber = 2,
    kRoomIdFieldNumber = 1,
    kConfirmPlacementFieldNumber = 3,
    kUseHintFieldNumber = 4,
    kClientBoardVersionFieldNumber = 5,
  };
  // string move_id = 6;
  void clear_move_id() ;
  const std::string& move_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_move_id(Arg_&& arg, Args_... args);
  std::string* mutable_move_id();
  PROTOBUF_NODISCARD std::string* release_move_id();
  void set_allocated_move_id(std::string* value);

  private:
  const std::string& _internal_move_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_move_id(
      const std::string& value);
  std::string* _internal_mutable_move_id();

  public:
  // .blokus.BlockPlacement block_placement = 2;
  bool has_block_placement() const;
  void clear_block_placement() ;
  const ::blokus::BlockPlacement& block_placement() const;
  PROTOBUF_NODISCARD ::blokus::BlockPlacement* release_block_placement();
  ::blokus::BlockPlacement* mutable_block_placement();
  void set_allocated_block_placement(::blokus::BlockPlacement* value);
  void unsafe_arena_set_allocated_block_placement(::blokus::BlockPlacement* value);
  ::blokus::BlockPlacement* unsafe_arena_release_block_placement();

  private:
  const ::blokus::BlockPlacement& _internal_block_placement() const;
  ::blokus::BlockPlacement* _internal_mutable_block_placement();

  public:
  // int32 room_id = 1;
  void clear_room_id() ;
  ::int32_t room_id() const;
  void set_room_id(::int32_t value);

  private:
  ::int32_t _internal_room_id() const;
  void _internal_set_room_id(::int32_t value);

  public:
  // bool confirm_placement = 3;
  void clear_confirm_placement() ;
  bool confirm_placement() const;
  void set_confirm_placement(bool value);

  private:
  bool _internal_confirm_placement() const;
  void _internal_set_confirm_placement(bool value);

  public:
  // bool use_hint = 4;
  void clear_use_hint() ;
  bool use_hint() const;
  void set_use_hint(bool value);

  private:
  bool _internal_use_hint() const;
  void _internal_set_use_hint(bool value);

  public:
  // int32 client_board_version = 5;
  void clear_client_board_version() ;
  ::int32_t client_board_version() const;
  void set_client_board_version(::int32_t value);

  private:
  ::int32_t _internal_client_board_version() const;
  void _internal_set_client_board_version(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.PlaceBlockRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 1,
      40, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PlaceBlockRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr move_id_;
    ::blokus::BlockPlacement* block_placement_;
    ::int32_t room_id_;
    bool confirm_placement_;
    bool use_hint_;
    ::int32_t client_board_version_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class GetHintResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.GetHintResponse) */ {
 public:
  inline GetHintResponse() : GetHintResponse(nullptr) {}
  ~GetHintResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetHintResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetHintResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetHintResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetHintResponse(const GetHintResponse& from) : GetHintResponse(nullptr, from) {}
  inline GetHintResponse(GetHintResponse&& from) noexcept
      : GetHintResponse(nullptr, std::move(from)) {}
  inline GetHintResponse& operator=(const GetHintResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetHintResponse& operator=(GetHintResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetHintResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetHintResponse* internal_default_instance() {
    return reinterpret_cast<const GetHintResponse*>(
        &_GetHintResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 26;
  friend void swap(GetHintResponse& a, GetHintResponse& b) { a.Swap(&b); }
  inline void Swap(GetHintResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetHintResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetHintResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetHintResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetHintResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetHintResponse& from) { GetHintResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetHintResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.GetHintResponse"; }

 protected:
  explicit GetHintResponse(::google::protobuf::Arena* arena);
  GetHintResponse(::google::protobuf::Arena* arena, const GetHintResponse& from);
  GetHintResponse(::google::protobuf::Arena* arena, GetHintResponse&& from) noexcept
      : GetHintResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSuggestedMovesFieldNumber = 2,
    kExplanationsFieldNumber = 3,
    kStrategyAdviceFieldNumber = 7,
    kResultFieldNumber = 1,
    kHintQualityFieldNumber = 4,
    kPossibleMovesCountFieldNumber = 5,
    kWinProbabilityFieldNumber = 6,
  };
  // repeated .blokus.BlockPlacement suggested_moves = 2;
  int suggested_moves_size() const;
  private:
  int _internal_suggested_moves_size() const;

  public:
  void clear_suggested_moves() ;
  ::blokus::BlockPlacement* mutable_suggested_moves(int index);
  ::google::protobuf::RepeatedPtrField<::blokus::BlockPlacement>* mutable_suggested_moves();

  private:
  const ::google::protobuf::RepeatedPtrField<::blokus::BlockPlacement>& _internal_suggested_moves() const;
  ::google::protobuf::RepeatedPtrField<::blokus::BlockPlacement>* _internal_mutable_suggested_moves();
  public:
  const ::blokus::BlockPlacement& suggested_moves(int index) const;
  ::blokus::BlockPlacement* add_suggested_moves();
  const ::google::protobuf::RepeatedPtrField<::blokus::BlockPlacement>& suggested_moves() const;
  // repeated string explanations = 3;
  int explanations_size() const;
  private:
  int _internal_explanations_size() const;

  public:
  void clear_explanations() ;
  const std::string& explanations(int index) const;
  std::string* mutable_explanations(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_explanations(int index, Arg_&& value, Args_... args);
  std::string* add_explanations();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_explanations(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& explanations() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_explanations();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_explanations() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_explanations();

  public:
  // string strategy_advice = 7;
  void clear_strategy_advice() ;
  const std::string& strategy_advice() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_strategy_advice(Arg_&& arg, Args_... args);
  std::string* mutable_strategy_advice();
  PROTOBUF_NODISCARD std::string* release_strategy_advice();
  void set_allocated_strategy_advice(std::string* value);

  private:
  const std::string& _internal_strategy_advice() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strategy_advice(
      const std::string& value);
  std::string* _internal_mutable_strategy_advice();

  public:
  // .blokus.Result result = 1;
  bool has_result() const;
  void clear_result() ;
  const ::blokus::Result& result() const;
  PROTOBUF_NODISCARD ::blokus::Result* release_result();
  ::blokus::Result* mutable_result();
  void set_allocated_result(::blokus::Result* value);
  void unsafe_arena_set_allocated_result(::blokus::Result* value);
  ::blokus::Result* unsafe_arena_release_result();

  private:
  const ::blokus::Result& _internal_result() const;
  ::blokus::Result* _internal_mutable_result();

  public:
  // int32 hint_quality = 4;
  void clear_hint_quality() ;
  ::int32_t hint_quality() const;
  void set_hint_quality(::int32_t value);

  private:
  ::int32_t _internal_hint_quality() const;
  void _internal_set_hint_quality(::int32_t value);

  public:
  // int32 possible_moves_count = 5;
  void clear_possible_moves_count() ;
  ::int32_t possible_moves_count() const;
  void set_possible_moves_count(::int32_t value);

  private:
  ::int32_t _internal_possible_moves_count() const;
  void _internal_set_possible_moves_count(::int32_t value);

  public:
  // float win_probability = 6;
  void clear_win_probability() ;
  float win_probability() const;
  void set_win_probability(float value);

  private:
  float _internal_win_probability() const;
  void _internal_set_win_probability(float value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.GetHintResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 2,
      58, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetHintResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::blokus::BlockPlacement > suggested_moves_;
    ::google::protobuf::RepeatedPtrField<std::string> explanations_;
    ::google::protobuf::internal::ArenaStringPtr strategy_advice_;
    ::blokus::Result* result_;
    ::int32_t hint_quality_;
    ::int32_t possible_moves_count_;
    float win_probability_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class GameMove final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.GameMove) */ {
 public:
  inline GameMove() : GameMove(nullptr) {}
  ~GameMove() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GameMove* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GameMove));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameMove(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameMove(const GameMove& from) : GameMove(nullptr, from) {}
  inline GameMove(GameMove&& from) noexcept
      : GameMove(nullptr, std::move(from)) {}
  inline GameMove& operator=(const GameMove& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameMove& operator=(GameMove&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameMove& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameMove* internal_default_instance() {
    return reinterpret_cast<const GameMove*>(
        &_GameMove_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 23;
  friend void swap(GameMove& a, GameMove& b) { a.Swap(&b); }
  inline void Swap(GameMove* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameMove* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameMove* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GameMove>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameMove& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameMove& from) { GameMove::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GameMove* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.GameMove"; }

 protected:
  explicit GameMove(::google::protobuf::Arena* arena);
  GameMove(::google::protobuf::Arena* arena, const GameMove& from);
  GameMove(::google::protobuf::Arena* arena, GameMove&& from) noexcept
      : GameMove(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPlayerUsernameFieldNumber = 2,
    kBlockPlacementFieldNumber = 5,
    kTimestampFieldNumber = 6,
    kMoveNumberFieldNumber = 1,
    kPlayerColorFieldNumber = 3,
    kActionFieldNumber = 4,
    kThinkTimeSecondsFieldNumber = 7,
    kScoreBeforeFieldNumber = 8,
    kScoreAfterFieldNumber = 9,
  };
  // string player_username = 2;
  void clear_player_username() ;
  const std::string& player_username() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_player_username(Arg_&& arg, Args_... args);
  std::string* mutable_player_username();
  PROTOBUF_NODISCARD std::string* release_player_username();
  void set_allocated_player_username(std::string* value);

  private:
  const std::string& _internal_player_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_username(
      const std::string& value);
  std::string* _internal_mutable_player_username();

  public:
  // .blokus.BlockPlacement block_placement = 5;
  bool has_block_placement() const;
  void clear_block_placement() ;
  const ::blokus::BlockPlacement& block_placement() const;
  PROTOBUF_NODISCARD ::blokus::BlockPlacement* release_block_placement();
  ::blokus::BlockPlacement* mutable_block_placement();
  void set_allocated_block_placement(::blokus::BlockPlacement* value);
  void unsafe_arena_set_allocated_block_placement(::blokus::BlockPlacement* value);
  ::blokus::BlockPlacement* unsafe_arena_release_block_placement();

  private:
  const ::blokus::BlockPlacement& _internal_block_placement() const;
  ::blokus::BlockPlacement* _internal_mutable_block_placement();

  public:
  // .google.protobuf.Timestamp timestamp = 6;
  bool has_timestamp() const;
  void clear_timestamp() ;
  const ::google::protobuf::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_timestamp();
  ::google::protobuf::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_timestamp(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_timestamp();

  private:
  const ::google::protobuf::Timestamp& _internal_timestamp() const;
  ::google::protobuf::Timestamp* _internal_mutable_timestamp();

  public:
  // int32 move_number = 1;
  void clear_move_number() ;
  ::int32_t move_number() const;
  void set_move_number(::int32_t value);

  private:
  ::int32_t _internal_move_number() const;
  void _internal_set_move_number(::int32_t value);

  public:
  // .blokus.PlayerColor player_color = 3;
  void clear_player_color() ;
  ::blokus::PlayerColor player_color() const;
  void set_player_color(::blokus::PlayerColor value);

  private:
  ::blokus::PlayerColor _internal_player_color() const;
  void _internal_set_player_color(::blokus::PlayerColor value);

  public:
  // .blokus.TurnAction action = 4;
  void clear_action() ;
  ::blokus::TurnAction action() const;
  void set_action(::blokus::TurnAction value);

  private:
  ::blokus::TurnAction _internal_action() const;
  void _internal_set_action(::blokus::TurnAction value);

  public:
  // int32 think_time_seconds = 7;
  void clear_think_time_seconds() ;
  ::int32_t think_time_seconds() const;
  void set_think_time_seconds(::int32_t value);

  private:
  ::int32_t _internal_think_time_seconds() const;
  void _internal_set_think_time_seconds(::int32_t value);

  public:
  // int32 score_before = 8;
  void clear_score_before() ;
  ::int32_t score_before() const;
  void set_score_before(::int32_t value);

  private:
  ::int32_t _internal_score_before() const;
  void _internal_set_score_before(::int32_t value);

  public:
  // int32 score_after = 9;
  void clear_score_after() ;
  ::int32_t score_after() const;
  void set_score_after(::int32_t value);

  private:
  ::int32_t _internal_score_after() const;
  void _internal_set_score_after(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.GameMove)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 2,
      47, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameMove& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr player_username_;
    ::blokus::BlockPlacement* block_placement_;
    ::google::protobuf::Timestamp* timestamp_;
    ::int32_t move_number_;
    int player_color_;
    int action_;
    ::int32_t think_time_seconds_;
    ::int32_t score_before_;
    ::int32_t score_after_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class GameEndedNotification final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.GameEndedNotification) */ {
 public:
  inline GameEndedNotification() : GameEndedNotification(nullptr) {}
  ~GameEndedNotification() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GameEndedNotification* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GameEndedNotification));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameEndedNotification(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameEndedNotification(const GameEndedNotification& from) : GameEndedNotification(nullptr, from) {}
  inline GameEndedNotification(GameEndedNotification&& from) noexcept
      : GameEndedNotification(nullptr, std::move(from)) {}
  inline GameEndedNotification& operator=(const GameEndedNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameEndedNotification& operator=(GameEndedNotification&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameEndedNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameEndedNotification* internal_default_instance() {
    return reinterpret_cast<const GameEndedNotification*>(
        &_GameEndedNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(GameEndedNotification& a, GameEndedNotification& b) { a.Swap(&b); }
  inline void Swap(GameEndedNotification* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameEndedNotification* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameEndedNotification* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GameEndedNotification>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameEndedNotification& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameEndedNotification& from) { GameEndedNotification::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GameEndedNotification* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.GameEndedNotification"; }

 protected:
  explicit GameEndedNotification(::google::protobuf::Arena* arena);
  GameEndedNotification(::google::protobuf::Arena* arena, const GameEndedNotification& from);
  GameEndedNotification(::google::protobuf::Arena* arena, GameEndedNotification&& from) noexcept
      : GameEndedNotification(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFinalResultsFieldNumber = 4,
    kRatingChangesFieldNumber = 9,
    kAchievementsFieldNumber = 10,
    kExperienceGainedFieldNumber = 11,
    kGameIdFieldNumber = 2,
    kWinnerFieldNumber = 5,
    kGameStatsFieldNumber = 6,
    kEndedAtFieldNumber = 7,
    kRoomIdFieldNumber = 1,
    kEndReasonFieldNumber = 3,
    kGameDurationSecondsFieldNumber = 8,
  };
  // repeated .blokus.PlayerResult final_results = 4;
  int final_results_size() const;
  private:
  int _internal_final_results_size() const;

  public:
  void clear_final_results() ;
  ::blokus::PlayerResult* mutable_final_results(int index);
  ::google::protobuf::RepeatedPtrField<::blokus::PlayerResult>* mutable_final_results();

  private:
  const ::google::protobuf::RepeatedPtrField<::blokus::PlayerResult>& _internal_final_results() const;
  ::google::protobuf::RepeatedPtrField<::blokus::PlayerResult>* _internal_mutable_final_results();
  public:
  const ::blokus::PlayerResult& final_results(int index) const;
  ::blokus::PlayerResult* add_final_results();
  const ::google::protobuf::RepeatedPtrField<::blokus::PlayerResult>& final_results() const;
  // map<string, int32> rating_changes = 9;
  int rating_changes_size() const;
  private:
  int _internal_rating_changes_size() const;

  public:
  void clear_rating_changes() ;
  const ::google::protobuf::Map<std::string, ::int32_t>& rating_changes() const;
  ::google::protobuf::Map<std::string, ::int32_t>* mutable_rating_changes();

  private:
  const ::google::protobuf::Map<std::string, ::int32_t>& _internal_rating_changes() const;
  ::google::protobuf::Map<std::string, ::int32_t>* _internal_mutable_rating_changes();

  public:
  // map<string, string> achievements = 10;
  int achievements_size() const;
  private:
  int _internal_achievements_size() const;

  public:
  void clear_achievements() ;
  const ::google::protobuf::Map<std::string, std::string>& achievements() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_achievements();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_achievements() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_achievements();

  public:
  // map<string, int32> experience_gained = 11;
  int experience_gained_size() const;
  private:
  int _internal_experience_gained_size() const;

  public:
  void clear_experience_gained() ;
  const ::google::protobuf::Map<std::string, ::int32_t>& experience_gained() const;
  ::google::protobuf::Map<std::string, ::int32_t>* mutable_experience_gained();

  private:
  const ::google::protobuf::Map<std::string, ::int32_t>& _internal_experience_gained() const;
  ::google::protobuf::Map<std::string, ::int32_t>* _internal_mutable_experience_gained();

  public:
  // string game_id = 2;
  void clear_game_id() ;
  const std::string& game_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_game_id(Arg_&& arg, Args_... args);
  std::string* mutable_game_id();
  PROTOBUF_NODISCARD std::string* release_game_id();
  void set_allocated_game_id(std::string* value);

  private:
  const std::string& _internal_game_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_game_id(
      const std::string& value);
  std::string* _internal_mutable_game_id();

  public:
  // string winner = 5;
  void clear_winner() ;
  const std::string& winner() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_winner(Arg_&& arg, Args_... args);
  std::string* mutable_winner();
  PROTOBUF_NODISCARD std::string* release_winner();
  void set_allocated_winner(std::string* value);

  private:
  const std::string& _internal_winner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_winner(
      const std::string& value);
  std::string* _internal_mutable_winner();

  public:
  // .blokus.GameStats game_stats = 6;
  bool has_game_stats() const;
  void clear_game_stats() ;
  const ::blokus::GameStats& game_stats() const;
  PROTOBUF_NODISCARD ::blokus::GameStats* release_game_stats();
  ::blokus::GameStats* mutable_game_stats();
  void set_allocated_game_stats(::blokus::GameStats* value);
  void unsafe_arena_set_allocated_game_stats(::blokus::GameStats* value);
  ::blokus::GameStats* unsafe_arena_release_game_stats();

  private:
  const ::blokus::GameStats& _internal_game_stats() const;
  ::blokus::GameStats* _internal_mutable_game_stats();

  public:
  // .google.protobuf.Timestamp ended_at = 7;
  bool has_ended_at() const;
  void clear_ended_at() ;
  const ::google::protobuf::Timestamp& ended_at() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_ended_at();
  ::google::protobuf::Timestamp* mutable_ended_at();
  void set_allocated_ended_at(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_ended_at(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_ended_at();

  private:
  const ::google::protobuf::Timestamp& _internal_ended_at() const;
  ::google::protobuf::Timestamp* _internal_mutable_ended_at();

  public:
  // int32 room_id = 1;
  void clear_room_id() ;
  ::int32_t room_id() const;
  void set_room_id(::int32_t value);

  private:
  ::int32_t _internal_room_id() const;
  void _internal_set_room_id(::int32_t value);

  public:
  // .blokus.GameEndReason end_reason = 3;
  void clear_end_reason() ;
  ::blokus::GameEndReason end_reason() const;
  void set_end_reason(::blokus::GameEndReason value);

  private:
  ::blokus::GameEndReason _internal_end_reason() const;
  void _internal_set_end_reason(::blokus::GameEndReason value);

  public:
  // int32 game_duration_seconds = 8;
  void clear_game_duration_seconds() ;
  ::int32_t game_duration_seconds() const;
  void set_game_duration_seconds(::int32_t value);

  private:
  ::int32_t _internal_game_duration_seconds() const;
  void _internal_set_game_duration_seconds(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.GameEndedNotification)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 11, 6,
      101, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameEndedNotification& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::blokus::PlayerResult > final_results_;
    ::google::protobuf::internal::MapField<GameEndedNotification_RatingChangesEntry_DoNotUse, std::string, ::int32_t,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>
        rating_changes_;
    ::google::protobuf::internal::MapField<GameEndedNotification_AchievementsEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        achievements_;
    ::google::protobuf::internal::MapField<GameEndedNotification_ExperienceGainedEntry_DoNotUse, std::string, ::int32_t,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>
        experience_gained_;
    ::google::protobuf::internal::ArenaStringPtr game_id_;
    ::google::protobuf::internal::ArenaStringPtr winner_;
    ::blokus::GameStats* game_stats_;
    ::google::protobuf::Timestamp* ended_at_;
    ::int32_t room_id_;
    int end_reason_;
    ::int32_t game_duration_seconds_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class BlockPlacedNotification final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.BlockPlacedNotification) */ {
 public:
  inline BlockPlacedNotification() : BlockPlacedNotification(nullptr) {}
  ~BlockPlacedNotification() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(BlockPlacedNotification* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(BlockPlacedNotification));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BlockPlacedNotification(
      ::google::protobuf::internal::ConstantInitialized);

  inline BlockPlacedNotification(const BlockPlacedNotification& from) : BlockPlacedNotification(nullptr, from) {}
  inline BlockPlacedNotification(BlockPlacedNotification&& from) noexcept
      : BlockPlacedNotification(nullptr, std::move(from)) {}
  inline BlockPlacedNotification& operator=(const BlockPlacedNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockPlacedNotification& operator=(BlockPlacedNotification&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockPlacedNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockPlacedNotification* internal_default_instance() {
    return reinterpret_cast<const BlockPlacedNotification*>(
        &_BlockPlacedNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;
  friend void swap(BlockPlacedNotification& a, BlockPlacedNotification& b) { a.Swap(&b); }
  inline void Swap(BlockPlacedNotification* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockPlacedNotification* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockPlacedNotification* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<BlockPlacedNotification>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BlockPlacedNotification& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const BlockPlacedNotification& from) { BlockPlacedNotification::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(BlockPlacedNotification* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.BlockPlacedNotification"; }

 protected:
  explicit BlockPlacedNotification(::google::protobuf::Arena* arena);
  BlockPlacedNotification(::google::protobuf::Arena* arena, const BlockPlacedNotification& from);
  BlockPlacedNotification(::google::protobuf::Arena* arena, BlockPlacedNotification&& from) noexcept
      : BlockPlacedNotification(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTriggeredAchievementsFieldNumber = 14,
    kPlayerUsernameFieldNumber = 2,
    kBlockPlacementFieldNumber = 4,
    kUpdatedBoardFieldNumber = 8,
    kPlacedAtFieldNumber = 11,
    kRoomIdFieldNumber = 1,
    kPlayerColorFieldNumber = 3,
    kScoreGainedFieldNumber = 5,
    kNewTotalScoreFieldNumber = 6,
    kRemainingBlocksFieldNumber = 7,
    kNextPlayerFieldNumber = 10,
    kTurnEndedFieldNumber = 9,
    kPerfectGameFieldNumber = 12,
    kGameWinningMoveFieldNumber = 13,
  };
  // repeated string triggered_achievements = 14;
  int triggered_achievements_size() const;
  private:
  int _internal_triggered_achievements_size() const;

  public:
  void clear_triggered_achievements() ;
  const std::string& triggered_achievements(int index) const;
  std::string* mutable_triggered_achievements(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_triggered_achievements(int index, Arg_&& value, Args_... args);
  std::string* add_triggered_achievements();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_triggered_achievements(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& triggered_achievements() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_triggered_achievements();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_triggered_achievements() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_triggered_achievements();

  public:
  // string player_username = 2;
  void clear_player_username() ;
  const std::string& player_username() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_player_username(Arg_&& arg, Args_... args);
  std::string* mutable_player_username();
  PROTOBUF_NODISCARD std::string* release_player_username();
  void set_allocated_player_username(std::string* value);

  private:
  const std::string& _internal_player_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_username(
      const std::string& value);
  std::string* _internal_mutable_player_username();

  public:
  // .blokus.BlockPlacement block_placement = 4;
  bool has_block_placement() const;
  void clear_block_placement() ;
  const ::blokus::BlockPlacement& block_placement() const;
  PROTOBUF_NODISCARD ::blokus::BlockPlacement* release_block_placement();
  ::blokus::BlockPlacement* mutable_block_placement();
  void set_allocated_block_placement(::blokus::BlockPlacement* value);
  void unsafe_arena_set_allocated_block_placement(::blokus::BlockPlacement* value);
  ::blokus::BlockPlacement* unsafe_arena_release_block_placement();

  private:
  const ::blokus::BlockPlacement& _internal_block_placement() const;
  ::blokus::BlockPlacement* _internal_mutable_block_placement();

  public:
  // .blokus.BoardState updated_board = 8;
  bool has_updated_board() const;
  void clear_updated_board() ;
  const ::blokus::BoardState& updated_board() const;
  PROTOBUF_NODISCARD ::blokus::BoardState* release_updated_board();
  ::blokus::BoardState* mutable_updated_board();
  void set_allocated_updated_board(::blokus::BoardState* value);
  void unsafe_arena_set_allocated_updated_board(::blokus::BoardState* value);
  ::blokus::BoardState* unsafe_arena_release_updated_board();

  private:
  const ::blokus::BoardState& _internal_updated_board() const;
  ::blokus::BoardState* _internal_mutable_updated_board();

  public:
  // .google.protobuf.Timestamp placed_at = 11;
  bool has_placed_at() const;
  void clear_placed_at() ;
  const ::google::protobuf::Timestamp& placed_at() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_placed_at();
  ::google::protobuf::Timestamp* mutable_placed_at();
  void set_allocated_placed_at(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_placed_at(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_placed_at();

  private:
  const ::google::protobuf::Timestamp& _internal_placed_at() const;
  ::google::protobuf::Timestamp* _internal_mutable_placed_at();

  public:
  // int32 room_id = 1;
  void clear_room_id() ;
  ::int32_t room_id() const;
  void set_room_id(::int32_t value);

  private:
  ::int32_t _internal_room_id() const;
  void _internal_set_room_id(::int32_t value);

  public:
  // .blokus.PlayerColor player_color = 3;
  void clear_player_color() ;
  ::blokus::PlayerColor player_color() const;
  void set_player_color(::blokus::PlayerColor value);

  private:
  ::blokus::PlayerColor _internal_player_color() const;
  void _internal_set_player_color(::blokus::PlayerColor value);

  public:
  // int32 score_gained = 5;
  void clear_score_gained() ;
  ::int32_t score_gained() const;
  void set_score_gained(::int32_t value);

  private:
  ::int32_t _internal_score_gained() const;
  void _internal_set_score_gained(::int32_t value);

  public:
  // int32 new_total_score = 6;
  void clear_new_total_score() ;
  ::int32_t new_total_score() const;
  void set_new_total_score(::int32_t value);

  private:
  ::int32_t _internal_new_total_score() const;
  void _internal_set_new_total_score(::int32_t value);

  public:
  // int32 remaining_blocks = 7;
  void clear_remaining_blocks() ;
  ::int32_t remaining_blocks() const;
  void set_remaining_blocks(::int32_t value);

  private:
  ::int32_t _internal_remaining_blocks() const;
  void _internal_set_remaining_blocks(::int32_t value);

  public:
  // .blokus.PlayerColor next_player = 10;
  void clear_next_player() ;
  ::blokus::PlayerColor next_player() const;
  void set_next_player(::blokus::PlayerColor value);

  private:
  ::blokus::PlayerColor _internal_next_player() const;
  void _internal_set_next_player(::blokus::PlayerColor value);

  public:
  // bool turn_ended = 9;
  void clear_turn_ended() ;
  bool turn_ended() const;
  void set_turn_ended(bool value);

  private:
  bool _internal_turn_ended() const;
  void _internal_set_turn_ended(bool value);

  public:
  // bool perfect_game = 12;
  void clear_perfect_game() ;
  bool perfect_game() const;
  void set_perfect_game(bool value);

  private:
  bool _internal_perfect_game() const;
  void _internal_set_perfect_game(bool value);

  public:
  // bool game_winning_move = 13;
  void clear_game_winning_move() ;
  bool game_winning_move() const;
  void set_game_winning_move(bool value);

  private:
  bool _internal_game_winning_move() const;
  void _internal_set_game_winning_move(bool value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.BlockPlacedNotification)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 14, 3,
      84, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const BlockPlacedNotification& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> triggered_achievements_;
    ::google::protobuf::internal::ArenaStringPtr player_username_;
    ::blokus::BlockPlacement* block_placement_;
    ::blokus::BoardState* updated_board_;
    ::google::protobuf::Timestamp* placed_at_;
    ::int32_t room_id_;
    int player_color_;
    ::int32_t score_gained_;
    ::int32_t new_total_score_;
    ::int32_t remaining_blocks_;
    int next_player_;
    bool turn_ended_;
    bool perfect_game_;
    bool game_winning_move_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class AddAIPlayerResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.AddAIPlayerResponse) */ {
 public:
  inline AddAIPlayerResponse() : AddAIPlayerResponse(nullptr) {}
  ~AddAIPlayerResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AddAIPlayerResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AddAIPlayerResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AddAIPlayerResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline AddAIPlayerResponse(const AddAIPlayerResponse& from) : AddAIPlayerResponse(nullptr, from) {}
  inline AddAIPlayerResponse(AddAIPlayerResponse&& from) noexcept
      : AddAIPlayerResponse(nullptr, std::move(from)) {}
  inline AddAIPlayerResponse& operator=(const AddAIPlayerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddAIPlayerResponse& operator=(AddAIPlayerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddAIPlayerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddAIPlayerResponse* internal_default_instance() {
    return reinterpret_cast<const AddAIPlayerResponse*>(
        &_AddAIPlayerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(AddAIPlayerResponse& a, AddAIPlayerResponse& b) { a.Swap(&b); }
  inline void Swap(AddAIPlayerResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddAIPlayerResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddAIPlayerResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AddAIPlayerResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AddAIPlayerResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AddAIPlayerResponse& from) { AddAIPlayerResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AddAIPlayerResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.AddAIPlayerResponse"; }

 protected:
  explicit AddAIPlayerResponse(::google::protobuf::Arena* arena);
  AddAIPlayerResponse(::google::protobuf::Arena* arena, const AddAIPlayerResponse& from);
  AddAIPlayerResponse(::google::protobuf::Arena* arena, AddAIPlayerResponse&& from) noexcept
      : AddAIPlayerResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 3,
    kResultFieldNumber = 1,
    kAiPlayerSlotFieldNumber = 2,
  };
  // string message = 3;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // .blokus.Result result = 1;
  bool has_result() const;
  void clear_result() ;
  const ::blokus::Result& result() const;
  PROTOBUF_NODISCARD ::blokus::Result* release_result();
  ::blokus::Result* mutable_result();
  void set_allocated_result(::blokus::Result* value);
  void unsafe_arena_set_allocated_result(::blokus::Result* value);
  ::blokus::Result* unsafe_arena_release_result();

  private:
  const ::blokus::Result& _internal_result() const;
  ::blokus::Result* _internal_mutable_result();

  public:
  // .blokus.PlayerSlot ai_player_slot = 2;
  bool has_ai_player_slot() const;
  void clear_ai_player_slot() ;
  const ::blokus::PlayerSlot& ai_player_slot() const;
  PROTOBUF_NODISCARD ::blokus::PlayerSlot* release_ai_player_slot();
  ::blokus::PlayerSlot* mutable_ai_player_slot();
  void set_allocated_ai_player_slot(::blokus::PlayerSlot* value);
  void unsafe_arena_set_allocated_ai_player_slot(::blokus::PlayerSlot* value);
  ::blokus::PlayerSlot* unsafe_arena_release_ai_player_slot();

  private:
  const ::blokus::PlayerSlot& _internal_ai_player_slot() const;
  ::blokus::PlayerSlot* _internal_mutable_ai_player_slot();

  public:
  // @@protoc_insertion_point(class_scope:blokus.AddAIPlayerResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      42, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AddAIPlayerResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::blokus::Result* result_;
    ::blokus::PlayerSlot* ai_player_slot_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class GameStateResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.GameStateResponse) */ {
 public:
  inline GameStateResponse() : GameStateResponse(nullptr) {}
  ~GameStateResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GameStateResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GameStateResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameStateResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameStateResponse(const GameStateResponse& from) : GameStateResponse(nullptr, from) {}
  inline GameStateResponse(GameStateResponse&& from) noexcept
      : GameStateResponse(nullptr, std::move(from)) {}
  inline GameStateResponse& operator=(const GameStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameStateResponse& operator=(GameStateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameStateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameStateResponse* internal_default_instance() {
    return reinterpret_cast<const GameStateResponse*>(
        &_GameStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 22;
  friend void swap(GameStateResponse& a, GameStateResponse& b) { a.Swap(&b); }
  inline void Swap(GameStateResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameStateResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameStateResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GameStateResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameStateResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameStateResponse& from) { GameStateResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GameStateResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.GameStateResponse"; }

 protected:
  explicit GameStateResponse(::google::protobuf::Arena* arena);
  GameStateResponse(::google::protobuf::Arena* arena, const GameStateResponse& from);
  GameStateResponse(::google::protobuf::Arena* arena, GameStateResponse&& from) noexcept
      : GameStateResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPlayersFieldNumber = 6,
    kMoveHistoryFieldNumber = 8,
    kGameIdFieldNumber = 10,
    kGameModeFieldNumber = 11,
    kResultFieldNumber = 1,
    kBoardStateFieldNumber = 7,
    kGameStartedAtFieldNumber = 9,
    kGameStateFieldNumber = 2,
    kCurrentPlayerFieldNumber = 3,
    kTurnNumberFieldNumber = 4,
    kRemainingTimeSecondsFieldNumber = 5,
  };
  // repeated .blokus.PlayerSlot players = 6;
  int players_size() const;
  private:
  int _internal_players_size() const;

  public:
  void clear_players() ;
  ::blokus::PlayerSlot* mutable_players(int index);
  ::google::protobuf::RepeatedPtrField<::blokus::PlayerSlot>* mutable_players();

  private:
  const ::google::protobuf::RepeatedPtrField<::blokus::PlayerSlot>& _internal_players() const;
  ::google::protobuf::RepeatedPtrField<::blokus::PlayerSlot>* _internal_mutable_players();
  public:
  const ::blokus::PlayerSlot& players(int index) const;
  ::blokus::PlayerSlot* add_players();
  const ::google::protobuf::RepeatedPtrField<::blokus::PlayerSlot>& players() const;
  // repeated .blokus.GameMove move_history = 8;
  int move_history_size() const;
  private:
  int _internal_move_history_size() const;

  public:
  void clear_move_history() ;
  ::blokus::GameMove* mutable_move_history(int index);
  ::google::protobuf::RepeatedPtrField<::blokus::GameMove>* mutable_move_history();

  private:
  const ::google::protobuf::RepeatedPtrField<::blokus::GameMove>& _internal_move_history() const;
  ::google::protobuf::RepeatedPtrField<::blokus::GameMove>* _internal_mutable_move_history();
  public:
  const ::blokus::GameMove& move_history(int index) const;
  ::blokus::GameMove* add_move_history();
  const ::google::protobuf::RepeatedPtrField<::blokus::GameMove>& move_history() const;
  // string game_id = 10;
  void clear_game_id() ;
  const std::string& game_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_game_id(Arg_&& arg, Args_... args);
  std::string* mutable_game_id();
  PROTOBUF_NODISCARD std::string* release_game_id();
  void set_allocated_game_id(std::string* value);

  private:
  const std::string& _internal_game_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_game_id(
      const std::string& value);
  std::string* _internal_mutable_game_id();

  public:
  // string game_mode = 11;
  void clear_game_mode() ;
  const std::string& game_mode() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_game_mode(Arg_&& arg, Args_... args);
  std::string* mutable_game_mode();
  PROTOBUF_NODISCARD std::string* release_game_mode();
  void set_allocated_game_mode(std::string* value);

  private:
  const std::string& _internal_game_mode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_game_mode(
      const std::string& value);
  std::string* _internal_mutable_game_mode();

  public:
  // .blokus.Result result = 1;
  bool has_result() const;
  void clear_result() ;
  const ::blokus::Result& result() const;
  PROTOBUF_NODISCARD ::blokus::Result* release_result();
  ::blokus::Result* mutable_result();
  void set_allocated_result(::blokus::Result* value);
  void unsafe_arena_set_allocated_result(::blokus::Result* value);
  ::blokus::Result* unsafe_arena_release_result();

  private:
  const ::blokus::Result& _internal_result() const;
  ::blokus::Result* _internal_mutable_result();

  public:
  // .blokus.BoardState board_state = 7;
  bool has_board_state() const;
  void clear_board_state() ;
  const ::blokus::BoardState& board_state() const;
  PROTOBUF_NODISCARD ::blokus::BoardState* release_board_state();
  ::blokus::BoardState* mutable_board_state();
  void set_allocated_board_state(::blokus::BoardState* value);
  void unsafe_arena_set_allocated_board_state(::blokus::BoardState* value);
  ::blokus::BoardState* unsafe_arena_release_board_state();

  private:
  const ::blokus::BoardState& _internal_board_state() const;
  ::blokus::BoardState* _internal_mutable_board_state();

  public:
  // .google.protobuf.Timestamp game_started_at = 9;
  bool has_game_started_at() const;
  void clear_game_started_at() ;
  const ::google::protobuf::Timestamp& game_started_at() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_game_started_at();
  ::google::protobuf::Timestamp* mutable_game_started_at();
  void set_allocated_game_started_at(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_game_started_at(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_game_started_at();

  private:
  const ::google::protobuf::Timestamp& _internal_game_started_at() const;
  ::google::protobuf::Timestamp* _internal_mutable_game_started_at();

  public:
  // .blokus.GameState game_state = 2;
  void clear_game_state() ;
  ::blokus::GameState game_state() const;
  void set_game_state(::blokus::GameState value);

  private:
  ::blokus::GameState _internal_game_state() const;
  void _internal_set_game_state(::blokus::GameState value);

  public:
  // .blokus.PlayerColor current_player = 3;
  void clear_current_player() ;
  ::blokus::PlayerColor current_player() const;
  void set_current_player(::blokus::PlayerColor value);

  private:
  ::blokus::PlayerColor _internal_current_player() const;
  void _internal_set_current_player(::blokus::PlayerColor value);

  public:
  // int32 turn_number = 4;
  void clear_turn_number() ;
  ::int32_t turn_number() const;
  void set_turn_number(::int32_t value);

  private:
  ::int32_t _internal_turn_number() const;
  void _internal_set_turn_number(::int32_t value);

  public:
  // int32 remaining_time_seconds = 5;
  void clear_remaining_time_seconds() ;
  ::int32_t remaining_time_seconds() const;
  void set_remaining_time_seconds(::int32_t value);

  private:
  ::int32_t _internal_remaining_time_seconds() const;
  void _internal_set_remaining_time_seconds(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.GameStateResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 11, 5,
      57, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameStateResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::blokus::PlayerSlot > players_;
    ::google::protobuf::RepeatedPtrField< ::blokus::GameMove > move_history_;
    ::google::protobuf::internal::ArenaStringPtr game_id_;
    ::google::protobuf::internal::ArenaStringPtr game_mode_;
    ::blokus::Result* result_;
    ::blokus::BoardState* board_state_;
    ::google::protobuf::Timestamp* game_started_at_;
    int game_state_;
    int current_player_;
    ::int32_t turn_number_;
    ::int32_t remaining_time_seconds_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class SpectatorJoinResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.SpectatorJoinResponse) */ {
 public:
  inline SpectatorJoinResponse() : SpectatorJoinResponse(nullptr) {}
  ~SpectatorJoinResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SpectatorJoinResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SpectatorJoinResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SpectatorJoinResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline SpectatorJoinResponse(const SpectatorJoinResponse& from) : SpectatorJoinResponse(nullptr, from) {}
  inline SpectatorJoinResponse(SpectatorJoinResponse&& from) noexcept
      : SpectatorJoinResponse(nullptr, std::move(from)) {}
  inline SpectatorJoinResponse& operator=(const SpectatorJoinResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpectatorJoinResponse& operator=(SpectatorJoinResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpectatorJoinResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpectatorJoinResponse* internal_default_instance() {
    return reinterpret_cast<const SpectatorJoinResponse*>(
        &_SpectatorJoinResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 28;
  friend void swap(SpectatorJoinResponse& a, SpectatorJoinResponse& b) { a.Swap(&b); }
  inline void Swap(SpectatorJoinResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpectatorJoinResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpectatorJoinResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SpectatorJoinResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SpectatorJoinResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SpectatorJoinResponse& from) { SpectatorJoinResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SpectatorJoinResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.SpectatorJoinResponse"; }

 protected:
  explicit SpectatorJoinResponse(::google::protobuf::Arena* arena);
  SpectatorJoinResponse(::google::protobuf::Arena* arena, const SpectatorJoinResponse& from);
  SpectatorJoinResponse(::google::protobuf::Arena* arena, SpectatorJoinResponse&& from) noexcept
      : SpectatorJoinResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kWelcomeMessageFieldNumber = 4,
    kResultFieldNumber = 1,
    kCurrentStateFieldNumber = 2,
    kSpectatorCountFieldNumber = 3,
  };
  // string welcome_message = 4;
  void clear_welcome_message() ;
  const std::string& welcome_message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_welcome_message(Arg_&& arg, Args_... args);
  std::string* mutable_welcome_message();
  PROTOBUF_NODISCARD std::string* release_welcome_message();
  void set_allocated_welcome_message(std::string* value);

  private:
  const std::string& _internal_welcome_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_welcome_message(
      const std::string& value);
  std::string* _internal_mutable_welcome_message();

  public:
  // .blokus.Result result = 1;
  bool has_result() const;
  void clear_result() ;
  const ::blokus::Result& result() const;
  PROTOBUF_NODISCARD ::blokus::Result* release_result();
  ::blokus::Result* mutable_result();
  void set_allocated_result(::blokus::Result* value);
  void unsafe_arena_set_allocated_result(::blokus::Result* value);
  ::blokus::Result* unsafe_arena_release_result();

  private:
  const ::blokus::Result& _internal_result() const;
  ::blokus::Result* _internal_mutable_result();

  public:
  // .blokus.GameStateResponse current_state = 2;
  bool has_current_state() const;
  void clear_current_state() ;
  const ::blokus::GameStateResponse& current_state() const;
  PROTOBUF_NODISCARD ::blokus::GameStateResponse* release_current_state();
  ::blokus::GameStateResponse* mutable_current_state();
  void set_allocated_current_state(::blokus::GameStateResponse* value);
  void unsafe_arena_set_allocated_current_state(::blokus::GameStateResponse* value);
  ::blokus::GameStateResponse* unsafe_arena_release_current_state();

  private:
  const ::blokus::GameStateResponse& _internal_current_state() const;
  ::blokus::GameStateResponse* _internal_mutable_current_state();

  public:
  // int32 spectator_count = 3;
  void clear_spectator_count() ;
  ::int32_t spectator_count() const;
  void set_spectator_count(::int32_t value);

  private:
  ::int32_t _internal_spectator_count() const;
  void _internal_set_spectator_count(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.SpectatorJoinResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 2,
      52, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SpectatorJoinResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr welcome_message_;
    ::blokus::Result* result_;
    ::blokus::GameStateResponse* current_state_;
    ::int32_t spectator_count_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_game_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// RoomStateUpdate

// int32 room_id = 1;
inline void RoomStateUpdate::clear_room_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_id_ = 0;
}
inline ::int32_t RoomStateUpdate::room_id() const {
  // @@protoc_insertion_point(field_get:blokus.RoomStateUpdate.room_id)
  return _internal_room_id();
}
inline void RoomStateUpdate::set_room_id(::int32_t value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:blokus.RoomStateUpdate.room_id)
}
inline ::int32_t RoomStateUpdate::_internal_room_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.room_id_;
}
inline void RoomStateUpdate::_internal_set_room_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_id_ = value;
}

// repeated .blokus.PlayerSlot player_slots = 2;
inline int RoomStateUpdate::_internal_player_slots_size() const {
  return _internal_player_slots().size();
}
inline int RoomStateUpdate::player_slots_size() const {
  return _internal_player_slots_size();
}
inline ::blokus::PlayerSlot* RoomStateUpdate::mutable_player_slots(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.RoomStateUpdate.player_slots)
  return _internal_mutable_player_slots()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::blokus::PlayerSlot>* RoomStateUpdate::mutable_player_slots()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.RoomStateUpdate.player_slots)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_player_slots();
}
inline const ::blokus::PlayerSlot& RoomStateUpdate::player_slots(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.RoomStateUpdate.player_slots)
  return _internal_player_slots().Get(index);
}
inline ::blokus::PlayerSlot* RoomStateUpdate::add_player_slots() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::blokus::PlayerSlot* _add = _internal_mutable_player_slots()->Add();
  // @@protoc_insertion_point(field_add:blokus.RoomStateUpdate.player_slots)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::blokus::PlayerSlot>& RoomStateUpdate::player_slots() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.RoomStateUpdate.player_slots)
  return _internal_player_slots();
}
inline const ::google::protobuf::RepeatedPtrField<::blokus::PlayerSlot>&
RoomStateUpdate::_internal_player_slots() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.player_slots_;
}
inline ::google::protobuf::RepeatedPtrField<::blokus::PlayerSlot>*
RoomStateUpdate::_internal_mutable_player_slots() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.player_slots_;
}

// .blokus.GameState game_state = 3;
inline void RoomStateUpdate::clear_game_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.game_state_ = 0;
}
inline ::blokus::GameState RoomStateUpdate::game_state() const {
  // @@protoc_insertion_point(field_get:blokus.RoomStateUpdate.game_state)
  return _internal_game_state();
}
inline void RoomStateUpdate::set_game_state(::blokus::GameState value) {
  _internal_set_game_state(value);
  // @@protoc_insertion_point(field_set:blokus.RoomStateUpdate.game_state)
}
inline ::blokus::GameState RoomStateUpdate::_internal_game_state() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::blokus::GameState>(_impl_.game_state_);
}
inline void RoomStateUpdate::_internal_set_game_state(::blokus::GameState value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.game_state_ = value;
}

// string game_mode = 4;
inline void RoomStateUpdate::clear_game_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.game_mode_.ClearToEmpty();
}
inline const std::string& RoomStateUpdate::game_mode() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.RoomStateUpdate.game_mode)
  return _internal_game_mode();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RoomStateUpdate::set_game_mode(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.game_mode_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.RoomStateUpdate.game_mode)
}
inline std::string* RoomStateUpdate::mutable_game_mode() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_game_mode();
  // @@protoc_insertion_point(field_mutable:blokus.RoomStateUpdate.game_mode)
  return _s;
}
inline const std::string& RoomStateUpdate::_internal_game_mode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.game_mode_.Get();
}
inline void RoomStateUpdate::_internal_set_game_mode(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.game_mode_.Set(value, GetArena());
}
inline std::string* RoomStateUpdate::_internal_mutable_game_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.game_mode_.Mutable( GetArena());
}
inline std::string* RoomStateUpdate::release_game_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.RoomStateUpdate.game_mode)
  return _impl_.game_mode_.Release();
}
inline void RoomStateUpdate::set_allocated_game_mode(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.game_mode_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.game_mode_.IsDefault()) {
    _impl_.game_mode_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.RoomStateUpdate.game_mode)
}

// int32 turn_time_seconds = 5;
inline void RoomStateUpdate::clear_turn_time_seconds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.turn_time_seconds_ = 0;
}
inline ::int32_t RoomStateUpdate::turn_time_seconds() const {
  // @@protoc_insertion_point(field_get:blokus.RoomStateUpdate.turn_time_seconds)
  return _internal_turn_time_seconds();
}
inline void RoomStateUpdate::set_turn_time_seconds(::int32_t value) {
  _internal_set_turn_time_seconds(value);
  // @@protoc_insertion_point(field_set:blokus.RoomStateUpdate.turn_time_seconds)
}
inline ::int32_t RoomStateUpdate::_internal_turn_time_seconds() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.turn_time_seconds_;
}
inline void RoomStateUpdate::_internal_set_turn_time_seconds(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.turn_time_seconds_ = value;
}

// bool allow_undo = 6;
inline void RoomStateUpdate::clear_allow_undo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allow_undo_ = false;
}
inline bool RoomStateUpdate::allow_undo() const {
  // @@protoc_insertion_point(field_get:blokus.RoomStateUpdate.allow_undo)
  return _internal_allow_undo();
}
inline void RoomStateUpdate::set_allow_undo(bool value) {
  _internal_set_allow_undo(value);
  // @@protoc_insertion_point(field_set:blokus.RoomStateUpdate.allow_undo)
}
inline bool RoomStateUpdate::_internal_allow_undo() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.allow_undo_;
}
inline void RoomStateUpdate::_internal_set_allow_undo(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allow_undo_ = value;
}

// bool spectators_allowed = 7;
inline void RoomStateUpdate::clear_spectators_allowed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.spectators_allowed_ = false;
}
inline bool RoomStateUpdate::spectators_allowed() const {
  // @@protoc_insertion_point(field_get:blokus.RoomStateUpdate.spectators_allowed)
  return _internal_spectators_allowed();
}
inline void RoomStateUpdate::set_spectators_allowed(bool value) {
  _internal_set_spectators_allowed(value);
  // @@protoc_insertion_point(field_set:blokus.RoomStateUpdate.spectators_allowed)
}
inline bool RoomStateUpdate::_internal_spectators_allowed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.spectators_allowed_;
}
inline void RoomStateUpdate::_internal_set_spectators_allowed(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.spectators_allowed_ = value;
}

// .blokus.PlayerColor current_player = 8;
inline void RoomStateUpdate::clear_current_player() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_player_ = 0;
}
inline ::blokus::PlayerColor RoomStateUpdate::current_player() const {
  // @@protoc_insertion_point(field_get:blokus.RoomStateUpdate.current_player)
  return _internal_current_player();
}
inline void RoomStateUpdate::set_current_player(::blokus::PlayerColor value) {
  _internal_set_current_player(value);
  // @@protoc_insertion_point(field_set:blokus.RoomStateUpdate.current_player)
}
inline ::blokus::PlayerColor RoomStateUpdate::_internal_current_player() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::blokus::PlayerColor>(_impl_.current_player_);
}
inline void RoomStateUpdate::_internal_set_current_player(::blokus::PlayerColor value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_player_ = value;
}

// int32 turn_number = 9;
inline void RoomStateUpdate::clear_turn_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.turn_number_ = 0;
}
inline ::int32_t RoomStateUpdate::turn_number() const {
  // @@protoc_insertion_point(field_get:blokus.RoomStateUpdate.turn_number)
  return _internal_turn_number();
}
inline void RoomStateUpdate::set_turn_number(::int32_t value) {
  _internal_set_turn_number(value);
  // @@protoc_insertion_point(field_set:blokus.RoomStateUpdate.turn_number)
}
inline ::int32_t RoomStateUpdate::_internal_turn_number() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.turn_number_;
}
inline void RoomStateUpdate::_internal_set_turn_number(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.turn_number_ = value;
}

// int32 remaining_time_seconds = 10;
inline void RoomStateUpdate::clear_remaining_time_seconds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.remaining_time_seconds_ = 0;
}
inline ::int32_t RoomStateUpdate::remaining_time_seconds() const {
  // @@protoc_insertion_point(field_get:blokus.RoomStateUpdate.remaining_time_seconds)
  return _internal_remaining_time_seconds();
}
inline void RoomStateUpdate::set_remaining_time_seconds(::int32_t value) {
  _internal_set_remaining_time_seconds(value);
  // @@protoc_insertion_point(field_set:blokus.RoomStateUpdate.remaining_time_seconds)
}
inline ::int32_t RoomStateUpdate::_internal_remaining_time_seconds() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.remaining_time_seconds_;
}
inline void RoomStateUpdate::_internal_set_remaining_time_seconds(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.remaining_time_seconds_ = value;
}

// .google.protobuf.Timestamp last_updated = 11;
inline bool RoomStateUpdate::has_last_updated() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.last_updated_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& RoomStateUpdate::_internal_last_updated() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.last_updated_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& RoomStateUpdate::last_updated() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.RoomStateUpdate.last_updated)
  return _internal_last_updated();
}
inline void RoomStateUpdate::unsafe_arena_set_allocated_last_updated(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.last_updated_);
  }
  _impl_.last_updated_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.RoomStateUpdate.last_updated)
}
inline ::google::protobuf::Timestamp* RoomStateUpdate::release_last_updated() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.last_updated_;
  _impl_.last_updated_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* RoomStateUpdate::unsafe_arena_release_last_updated() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.RoomStateUpdate.last_updated)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.last_updated_;
  _impl_.last_updated_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* RoomStateUpdate::_internal_mutable_last_updated() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.last_updated_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.last_updated_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.last_updated_;
}
inline ::google::protobuf::Timestamp* RoomStateUpdate::mutable_last_updated() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_last_updated();
  // @@protoc_insertion_point(field_mutable:blokus.RoomStateUpdate.last_updated)
  return _msg;
}
inline void RoomStateUpdate::set_allocated_last_updated(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.last_updated_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.last_updated_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.RoomStateUpdate.last_updated)
}

// int32 version = 12;
inline void RoomStateUpdate::clear_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_ = 0;
}
inline ::int32_t RoomStateUpdate::version() const {
  // @@protoc_insertion_point(field_get:blokus.RoomStateUpdate.version)
  return _internal_version();
}
inline void RoomStateUpdate::set_version(::int32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:blokus.RoomStateUpdate.version)
}
inline ::int32_t RoomStateUpdate::_internal_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.version_;
}
inline void RoomStateUpdate::_internal_set_version(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_ = value;
}

// -------------------------------------------------------------------

// AddAIPlayerRequest

// int32 room_id = 1;
inline void AddAIPlayerRequest::clear_room_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_id_ = 0;
}
inline ::int32_t AddAIPlayerRequest::room_id() const {
  // @@protoc_insertion_point(field_get:blokus.AddAIPlayerRequest.room_id)
  return _internal_room_id();
}
inline void AddAIPlayerRequest::set_room_id(::int32_t value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:blokus.AddAIPlayerRequest.room_id)
}
inline ::int32_t AddAIPlayerRequest::_internal_room_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.room_id_;
}
inline void AddAIPlayerRequest::_internal_set_room_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_id_ = value;
}

// .blokus.PlayerColor color = 2;
inline void AddAIPlayerRequest::clear_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.color_ = 0;
}
inline ::blokus::PlayerColor AddAIPlayerRequest::color() const {
  // @@protoc_insertion_point(field_get:blokus.AddAIPlayerRequest.color)
  return _internal_color();
}
inline void AddAIPlayerRequest::set_color(::blokus::PlayerColor value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:blokus.AddAIPlayerRequest.color)
}
inline ::blokus::PlayerColor AddAIPlayerRequest::_internal_color() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::blokus::PlayerColor>(_impl_.color_);
}
inline void AddAIPlayerRequest::_internal_set_color(::blokus::PlayerColor value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.color_ = value;
}

// int32 difficulty = 3;
inline void AddAIPlayerRequest::clear_difficulty() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.difficulty_ = 0;
}
inline ::int32_t AddAIPlayerRequest::difficulty() const {
  // @@protoc_insertion_point(field_get:blokus.AddAIPlayerRequest.difficulty)
  return _internal_difficulty();
}
inline void AddAIPlayerRequest::set_difficulty(::int32_t value) {
  _internal_set_difficulty(value);
  // @@protoc_insertion_point(field_set:blokus.AddAIPlayerRequest.difficulty)
}
inline ::int32_t AddAIPlayerRequest::_internal_difficulty() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.difficulty_;
}
inline void AddAIPlayerRequest::_internal_set_difficulty(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.difficulty_ = value;
}

// string ai_name = 4;
inline void AddAIPlayerRequest::clear_ai_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ai_name_.ClearToEmpty();
}
inline const std::string& AddAIPlayerRequest::ai_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.AddAIPlayerRequest.ai_name)
  return _internal_ai_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AddAIPlayerRequest::set_ai_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ai_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.AddAIPlayerRequest.ai_name)
}
inline std::string* AddAIPlayerRequest::mutable_ai_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ai_name();
  // @@protoc_insertion_point(field_mutable:blokus.AddAIPlayerRequest.ai_name)
  return _s;
}
inline const std::string& AddAIPlayerRequest::_internal_ai_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ai_name_.Get();
}
inline void AddAIPlayerRequest::_internal_set_ai_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ai_name_.Set(value, GetArena());
}
inline std::string* AddAIPlayerRequest::_internal_mutable_ai_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.ai_name_.Mutable( GetArena());
}
inline std::string* AddAIPlayerRequest::release_ai_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.AddAIPlayerRequest.ai_name)
  return _impl_.ai_name_.Release();
}
inline void AddAIPlayerRequest::set_allocated_ai_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ai_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.ai_name_.IsDefault()) {
    _impl_.ai_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.AddAIPlayerRequest.ai_name)
}

// string ai_personality = 5;
inline void AddAIPlayerRequest::clear_ai_personality() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ai_personality_.ClearToEmpty();
}
inline const std::string& AddAIPlayerRequest::ai_personality() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.AddAIPlayerRequest.ai_personality)
  return _internal_ai_personality();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AddAIPlayerRequest::set_ai_personality(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ai_personality_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.AddAIPlayerRequest.ai_personality)
}
inline std::string* AddAIPlayerRequest::mutable_ai_personality() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ai_personality();
  // @@protoc_insertion_point(field_mutable:blokus.AddAIPlayerRequest.ai_personality)
  return _s;
}
inline const std::string& AddAIPlayerRequest::_internal_ai_personality() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ai_personality_.Get();
}
inline void AddAIPlayerRequest::_internal_set_ai_personality(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ai_personality_.Set(value, GetArena());
}
inline std::string* AddAIPlayerRequest::_internal_mutable_ai_personality() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.ai_personality_.Mutable( GetArena());
}
inline std::string* AddAIPlayerRequest::release_ai_personality() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.AddAIPlayerRequest.ai_personality)
  return _impl_.ai_personality_.Release();
}
inline void AddAIPlayerRequest::set_allocated_ai_personality(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ai_personality_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.ai_personality_.IsDefault()) {
    _impl_.ai_personality_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.AddAIPlayerRequest.ai_personality)
}

// -------------------------------------------------------------------

// AddAIPlayerResponse

// .blokus.Result result = 1;
inline bool AddAIPlayerResponse::has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.result_ != nullptr);
  return value;
}
inline const ::blokus::Result& AddAIPlayerResponse::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::Result* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::Result&>(::blokus::_Result_default_instance_);
}
inline const ::blokus::Result& AddAIPlayerResponse::result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.AddAIPlayerResponse.result)
  return _internal_result();
}
inline void AddAIPlayerResponse::unsafe_arena_set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.AddAIPlayerResponse.result)
}
inline ::blokus::Result* AddAIPlayerResponse::release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* released = _impl_.result_;
  _impl_.result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::Result* AddAIPlayerResponse::unsafe_arena_release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.AddAIPlayerResponse.result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::blokus::Result* AddAIPlayerResponse::_internal_mutable_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::Result>(GetArena());
    _impl_.result_ = reinterpret_cast<::blokus::Result*>(p);
  }
  return _impl_.result_;
}
inline ::blokus::Result* AddAIPlayerResponse::mutable_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::blokus::Result* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:blokus.AddAIPlayerResponse.result)
  return _msg;
}
inline void AddAIPlayerResponse::set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.AddAIPlayerResponse.result)
}

// .blokus.PlayerSlot ai_player_slot = 2;
inline bool AddAIPlayerResponse::has_ai_player_slot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ai_player_slot_ != nullptr);
  return value;
}
inline const ::blokus::PlayerSlot& AddAIPlayerResponse::_internal_ai_player_slot() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::PlayerSlot* p = _impl_.ai_player_slot_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::PlayerSlot&>(::blokus::_PlayerSlot_default_instance_);
}
inline const ::blokus::PlayerSlot& AddAIPlayerResponse::ai_player_slot() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.AddAIPlayerResponse.ai_player_slot)
  return _internal_ai_player_slot();
}
inline void AddAIPlayerResponse::unsafe_arena_set_allocated_ai_player_slot(::blokus::PlayerSlot* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ai_player_slot_);
  }
  _impl_.ai_player_slot_ = reinterpret_cast<::blokus::PlayerSlot*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.AddAIPlayerResponse.ai_player_slot)
}
inline ::blokus::PlayerSlot* AddAIPlayerResponse::release_ai_player_slot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::blokus::PlayerSlot* released = _impl_.ai_player_slot_;
  _impl_.ai_player_slot_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::PlayerSlot* AddAIPlayerResponse::unsafe_arena_release_ai_player_slot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.AddAIPlayerResponse.ai_player_slot)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::blokus::PlayerSlot* temp = _impl_.ai_player_slot_;
  _impl_.ai_player_slot_ = nullptr;
  return temp;
}
inline ::blokus::PlayerSlot* AddAIPlayerResponse::_internal_mutable_ai_player_slot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ai_player_slot_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::PlayerSlot>(GetArena());
    _impl_.ai_player_slot_ = reinterpret_cast<::blokus::PlayerSlot*>(p);
  }
  return _impl_.ai_player_slot_;
}
inline ::blokus::PlayerSlot* AddAIPlayerResponse::mutable_ai_player_slot() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::blokus::PlayerSlot* _msg = _internal_mutable_ai_player_slot();
  // @@protoc_insertion_point(field_mutable:blokus.AddAIPlayerResponse.ai_player_slot)
  return _msg;
}
inline void AddAIPlayerResponse::set_allocated_ai_player_slot(::blokus::PlayerSlot* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ai_player_slot_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.ai_player_slot_ = reinterpret_cast<::blokus::PlayerSlot*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.AddAIPlayerResponse.ai_player_slot)
}

// string message = 3;
inline void AddAIPlayerResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& AddAIPlayerResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.AddAIPlayerResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AddAIPlayerResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.AddAIPlayerResponse.message)
}
inline std::string* AddAIPlayerResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:blokus.AddAIPlayerResponse.message)
  return _s;
}
inline const std::string& AddAIPlayerResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void AddAIPlayerResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* AddAIPlayerResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* AddAIPlayerResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.AddAIPlayerResponse.message)
  return _impl_.message_.Release();
}
inline void AddAIPlayerResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.AddAIPlayerResponse.message)
}

// -------------------------------------------------------------------

// RemovePlayerRequest

// int32 room_id = 1;
inline void RemovePlayerRequest::clear_room_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_id_ = 0;
}
inline ::int32_t RemovePlayerRequest::room_id() const {
  // @@protoc_insertion_point(field_get:blokus.RemovePlayerRequest.room_id)
  return _internal_room_id();
}
inline void RemovePlayerRequest::set_room_id(::int32_t value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:blokus.RemovePlayerRequest.room_id)
}
inline ::int32_t RemovePlayerRequest::_internal_room_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.room_id_;
}
inline void RemovePlayerRequest::_internal_set_room_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_id_ = value;
}

// .blokus.PlayerColor color = 2;
inline void RemovePlayerRequest::clear_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.color_ = 0;
}
inline ::blokus::PlayerColor RemovePlayerRequest::color() const {
  // @@protoc_insertion_point(field_get:blokus.RemovePlayerRequest.color)
  return _internal_color();
}
inline void RemovePlayerRequest::set_color(::blokus::PlayerColor value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:blokus.RemovePlayerRequest.color)
}
inline ::blokus::PlayerColor RemovePlayerRequest::_internal_color() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::blokus::PlayerColor>(_impl_.color_);
}
inline void RemovePlayerRequest::_internal_set_color(::blokus::PlayerColor value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.color_ = value;
}

// string reason = 3;
inline void RemovePlayerRequest::clear_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.ClearToEmpty();
}
inline const std::string& RemovePlayerRequest::reason() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.RemovePlayerRequest.reason)
  return _internal_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RemovePlayerRequest::set_reason(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.RemovePlayerRequest.reason)
}
inline std::string* RemovePlayerRequest::mutable_reason() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:blokus.RemovePlayerRequest.reason)
  return _s;
}
inline const std::string& RemovePlayerRequest::_internal_reason() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reason_.Get();
}
inline void RemovePlayerRequest::_internal_set_reason(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.Set(value, GetArena());
}
inline std::string* RemovePlayerRequest::_internal_mutable_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.reason_.Mutable( GetArena());
}
inline std::string* RemovePlayerRequest::release_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.RemovePlayerRequest.reason)
  return _impl_.reason_.Release();
}
inline void RemovePlayerRequest::set_allocated_reason(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.reason_.IsDefault()) {
    _impl_.reason_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.RemovePlayerRequest.reason)
}

// bool is_kick = 4;
inline void RemovePlayerRequest::clear_is_kick() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_kick_ = false;
}
inline bool RemovePlayerRequest::is_kick() const {
  // @@protoc_insertion_point(field_get:blokus.RemovePlayerRequest.is_kick)
  return _internal_is_kick();
}
inline void RemovePlayerRequest::set_is_kick(bool value) {
  _internal_set_is_kick(value);
  // @@protoc_insertion_point(field_set:blokus.RemovePlayerRequest.is_kick)
}
inline bool RemovePlayerRequest::_internal_is_kick() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_kick_;
}
inline void RemovePlayerRequest::_internal_set_is_kick(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_kick_ = value;
}

// -------------------------------------------------------------------

// RemovePlayerResponse

// .blokus.Result result = 1;
inline bool RemovePlayerResponse::has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.result_ != nullptr);
  return value;
}
inline const ::blokus::Result& RemovePlayerResponse::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::Result* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::Result&>(::blokus::_Result_default_instance_);
}
inline const ::blokus::Result& RemovePlayerResponse::result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.RemovePlayerResponse.result)
  return _internal_result();
}
inline void RemovePlayerResponse::unsafe_arena_set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.RemovePlayerResponse.result)
}
inline ::blokus::Result* RemovePlayerResponse::release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* released = _impl_.result_;
  _impl_.result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::Result* RemovePlayerResponse::unsafe_arena_release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.RemovePlayerResponse.result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::blokus::Result* RemovePlayerResponse::_internal_mutable_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::Result>(GetArena());
    _impl_.result_ = reinterpret_cast<::blokus::Result*>(p);
  }
  return _impl_.result_;
}
inline ::blokus::Result* RemovePlayerResponse::mutable_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::blokus::Result* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:blokus.RemovePlayerResponse.result)
  return _msg;
}
inline void RemovePlayerResponse::set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.RemovePlayerResponse.result)
}

// string message = 2;
inline void RemovePlayerResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& RemovePlayerResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.RemovePlayerResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RemovePlayerResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.RemovePlayerResponse.message)
}
inline std::string* RemovePlayerResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:blokus.RemovePlayerResponse.message)
  return _s;
}
inline const std::string& RemovePlayerResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void RemovePlayerResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* RemovePlayerResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* RemovePlayerResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.RemovePlayerResponse.message)
  return _impl_.message_.Release();
}
inline void RemovePlayerResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.RemovePlayerResponse.message)
}

// bool room_disbanded = 3;
inline void RemovePlayerResponse::clear_room_disbanded() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_disbanded_ = false;
}
inline bool RemovePlayerResponse::room_disbanded() const {
  // @@protoc_insertion_point(field_get:blokus.RemovePlayerResponse.room_disbanded)
  return _internal_room_disbanded();
}
inline void RemovePlayerResponse::set_room_disbanded(bool value) {
  _internal_set_room_disbanded(value);
  // @@protoc_insertion_point(field_set:blokus.RemovePlayerResponse.room_disbanded)
}
inline bool RemovePlayerResponse::_internal_room_disbanded() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.room_disbanded_;
}
inline void RemovePlayerResponse::_internal_set_room_disbanded(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_disbanded_ = value;
}

// -------------------------------------------------------------------

// StartGameRequest

// int32 room_id = 1;
inline void StartGameRequest::clear_room_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_id_ = 0;
}
inline ::int32_t StartGameRequest::room_id() const {
  // @@protoc_insertion_point(field_get:blokus.StartGameRequest.room_id)
  return _internal_room_id();
}
inline void StartGameRequest::set_room_id(::int32_t value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:blokus.StartGameRequest.room_id)
}
inline ::int32_t StartGameRequest::_internal_room_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.room_id_;
}
inline void StartGameRequest::_internal_set_room_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_id_ = value;
}

// bool force_start = 2;
inline void StartGameRequest::clear_force_start() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.force_start_ = false;
}
inline bool StartGameRequest::force_start() const {
  // @@protoc_insertion_point(field_get:blokus.StartGameRequest.force_start)
  return _internal_force_start();
}
inline void StartGameRequest::set_force_start(bool value) {
  _internal_set_force_start(value);
  // @@protoc_insertion_point(field_set:blokus.StartGameRequest.force_start)
}
inline bool StartGameRequest::_internal_force_start() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.force_start_;
}
inline void StartGameRequest::_internal_set_force_start(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.force_start_ = value;
}

// -------------------------------------------------------------------

// StartGameResponse

// .blokus.Result result = 1;
inline bool StartGameResponse::has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.result_ != nullptr);
  return value;
}
inline const ::blokus::Result& StartGameResponse::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::Result* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::Result&>(::blokus::_Result_default_instance_);
}
inline const ::blokus::Result& StartGameResponse::result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.StartGameResponse.result)
  return _internal_result();
}
inline void StartGameResponse::unsafe_arena_set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.StartGameResponse.result)
}
inline ::blokus::Result* StartGameResponse::release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* released = _impl_.result_;
  _impl_.result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::Result* StartGameResponse::unsafe_arena_release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.StartGameResponse.result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::blokus::Result* StartGameResponse::_internal_mutable_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::Result>(GetArena());
    _impl_.result_ = reinterpret_cast<::blokus::Result*>(p);
  }
  return _impl_.result_;
}
inline ::blokus::Result* StartGameResponse::mutable_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::blokus::Result* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:blokus.StartGameResponse.result)
  return _msg;
}
inline void StartGameResponse::set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.StartGameResponse.result)
}

// string message = 2;
inline void StartGameResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& StartGameResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.StartGameResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StartGameResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.StartGameResponse.message)
}
inline std::string* StartGameResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:blokus.StartGameResponse.message)
  return _s;
}
inline const std::string& StartGameResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void StartGameResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* StartGameResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* StartGameResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.StartGameResponse.message)
  return _impl_.message_.Release();
}
inline void StartGameResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.StartGameResponse.message)
}

// .google.protobuf.Timestamp game_start_time = 3;
inline bool StartGameResponse::has_game_start_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.game_start_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& StartGameResponse::_internal_game_start_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.game_start_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& StartGameResponse::game_start_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.StartGameResponse.game_start_time)
  return _internal_game_start_time();
}
inline void StartGameResponse::unsafe_arena_set_allocated_game_start_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.game_start_time_);
  }
  _impl_.game_start_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.StartGameResponse.game_start_time)
}
inline ::google::protobuf::Timestamp* StartGameResponse::release_game_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.game_start_time_;
  _impl_.game_start_time_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* StartGameResponse::unsafe_arena_release_game_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.StartGameResponse.game_start_time)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.game_start_time_;
  _impl_.game_start_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* StartGameResponse::_internal_mutable_game_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.game_start_time_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.game_start_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.game_start_time_;
}
inline ::google::protobuf::Timestamp* StartGameResponse::mutable_game_start_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_game_start_time();
  // @@protoc_insertion_point(field_mutable:blokus.StartGameResponse.game_start_time)
  return _msg;
}
inline void StartGameResponse::set_allocated_game_start_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.game_start_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.game_start_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.StartGameResponse.game_start_time)
}

// int32 estimated_duration_minutes = 4;
inline void StartGameResponse::clear_estimated_duration_minutes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.estimated_duration_minutes_ = 0;
}
inline ::int32_t StartGameResponse::estimated_duration_minutes() const {
  // @@protoc_insertion_point(field_get:blokus.StartGameResponse.estimated_duration_minutes)
  return _internal_estimated_duration_minutes();
}
inline void StartGameResponse::set_estimated_duration_minutes(::int32_t value) {
  _internal_set_estimated_duration_minutes(value);
  // @@protoc_insertion_point(field_set:blokus.StartGameResponse.estimated_duration_minutes)
}
inline ::int32_t StartGameResponse::_internal_estimated_duration_minutes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.estimated_duration_minutes_;
}
inline void StartGameResponse::_internal_set_estimated_duration_minutes(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.estimated_duration_minutes_ = value;
}

// -------------------------------------------------------------------

// GameStartedNotification

// int32 room_id = 1;
inline void GameStartedNotification::clear_room_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_id_ = 0;
}
inline ::int32_t GameStartedNotification::room_id() const {
  // @@protoc_insertion_point(field_get:blokus.GameStartedNotification.room_id)
  return _internal_room_id();
}
inline void GameStartedNotification::set_room_id(::int32_t value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:blokus.GameStartedNotification.room_id)
}
inline ::int32_t GameStartedNotification::_internal_room_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.room_id_;
}
inline void GameStartedNotification::_internal_set_room_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_id_ = value;
}

// repeated .blokus.PlayerSlot players = 2;
inline int GameStartedNotification::_internal_players_size() const {
  return _internal_players().size();
}
inline int GameStartedNotification::players_size() const {
  return _internal_players_size();
}
inline ::blokus::PlayerSlot* GameStartedNotification::mutable_players(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.GameStartedNotification.players)
  return _internal_mutable_players()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::blokus::PlayerSlot>* GameStartedNotification::mutable_players()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.GameStartedNotification.players)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_players();
}
inline const ::blokus::PlayerSlot& GameStartedNotification::players(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.GameStartedNotification.players)
  return _internal_players().Get(index);
}
inline ::blokus::PlayerSlot* GameStartedNotification::add_players() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::blokus::PlayerSlot* _add = _internal_mutable_players()->Add();
  // @@protoc_insertion_point(field_add:blokus.GameStartedNotification.players)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::blokus::PlayerSlot>& GameStartedNotification::players() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.GameStartedNotification.players)
  return _internal_players();
}
inline const ::google::protobuf::RepeatedPtrField<::blokus::PlayerSlot>&
GameStartedNotification::_internal_players() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.players_;
}
inline ::google::protobuf::RepeatedPtrField<::blokus::PlayerSlot>*
GameStartedNotification::_internal_mutable_players() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.players_;
}

// .blokus.PlayerColor first_player = 3;
inline void GameStartedNotification::clear_first_player() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.first_player_ = 0;
}
inline ::blokus::PlayerColor GameStartedNotification::first_player() const {
  // @@protoc_insertion_point(field_get:blokus.GameStartedNotification.first_player)
  return _internal_first_player();
}
inline void GameStartedNotification::set_first_player(::blokus::PlayerColor value) {
  _internal_set_first_player(value);
  // @@protoc_insertion_point(field_set:blokus.GameStartedNotification.first_player)
}
inline ::blokus::PlayerColor GameStartedNotification::_internal_first_player() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::blokus::PlayerColor>(_impl_.first_player_);
}
inline void GameStartedNotification::_internal_set_first_player(::blokus::PlayerColor value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.first_player_ = value;
}

// string game_mode = 4;
inline void GameStartedNotification::clear_game_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.game_mode_.ClearToEmpty();
}
inline const std::string& GameStartedNotification::game_mode() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.GameStartedNotification.game_mode)
  return _internal_game_mode();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GameStartedNotification::set_game_mode(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.game_mode_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.GameStartedNotification.game_mode)
}
inline std::string* GameStartedNotification::mutable_game_mode() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_game_mode();
  // @@protoc_insertion_point(field_mutable:blokus.GameStartedNotification.game_mode)
  return _s;
}
inline const std::string& GameStartedNotification::_internal_game_mode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.game_mode_.Get();
}
inline void GameStartedNotification::_internal_set_game_mode(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.game_mode_.Set(value, GetArena());
}
inline std::string* GameStartedNotification::_internal_mutable_game_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.game_mode_.Mutable( GetArena());
}
inline std::string* GameStartedNotification::release_game_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.GameStartedNotification.game_mode)
  return _impl_.game_mode_.Release();
}
inline void GameStartedNotification::set_allocated_game_mode(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.game_mode_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.game_mode_.IsDefault()) {
    _impl_.game_mode_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.GameStartedNotification.game_mode)
}

// int32 turn_time_seconds = 5;
inline void GameStartedNotification::clear_turn_time_seconds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.turn_time_seconds_ = 0;
}
inline ::int32_t GameStartedNotification::turn_time_seconds() const {
  // @@protoc_insertion_point(field_get:blokus.GameStartedNotification.turn_time_seconds)
  return _internal_turn_time_seconds();
}
inline void GameStartedNotification::set_turn_time_seconds(::int32_t value) {
  _internal_set_turn_time_seconds(value);
  // @@protoc_insertion_point(field_set:blokus.GameStartedNotification.turn_time_seconds)
}
inline ::int32_t GameStartedNotification::_internal_turn_time_seconds() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.turn_time_seconds_;
}
inline void GameStartedNotification::_internal_set_turn_time_seconds(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.turn_time_seconds_ = value;
}

// bool allow_undo = 6;
inline void GameStartedNotification::clear_allow_undo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allow_undo_ = false;
}
inline bool GameStartedNotification::allow_undo() const {
  // @@protoc_insertion_point(field_get:blokus.GameStartedNotification.allow_undo)
  return _internal_allow_undo();
}
inline void GameStartedNotification::set_allow_undo(bool value) {
  _internal_set_allow_undo(value);
  // @@protoc_insertion_point(field_set:blokus.GameStartedNotification.allow_undo)
}
inline bool GameStartedNotification::_internal_allow_undo() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.allow_undo_;
}
inline void GameStartedNotification::_internal_set_allow_undo(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.allow_undo_ = value;
}

// int32 max_undo_count = 7;
inline void GameStartedNotification::clear_max_undo_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_undo_count_ = 0;
}
inline ::int32_t GameStartedNotification::max_undo_count() const {
  // @@protoc_insertion_point(field_get:blokus.GameStartedNotification.max_undo_count)
  return _internal_max_undo_count();
}
inline void GameStartedNotification::set_max_undo_count(::int32_t value) {
  _internal_set_max_undo_count(value);
  // @@protoc_insertion_point(field_set:blokus.GameStartedNotification.max_undo_count)
}
inline ::int32_t GameStartedNotification::_internal_max_undo_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_undo_count_;
}
inline void GameStartedNotification::_internal_set_max_undo_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_undo_count_ = value;
}

// .blokus.BoardState initial_board = 8;
inline bool GameStartedNotification::has_initial_board() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.initial_board_ != nullptr);
  return value;
}
inline const ::blokus::BoardState& GameStartedNotification::_internal_initial_board() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::BoardState* p = _impl_.initial_board_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::BoardState&>(::blokus::_BoardState_default_instance_);
}
inline const ::blokus::BoardState& GameStartedNotification::initial_board() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.GameStartedNotification.initial_board)
  return _internal_initial_board();
}
inline void GameStartedNotification::unsafe_arena_set_allocated_initial_board(::blokus::BoardState* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.initial_board_);
  }
  _impl_.initial_board_ = reinterpret_cast<::blokus::BoardState*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.GameStartedNotification.initial_board)
}
inline ::blokus::BoardState* GameStartedNotification::release_initial_board() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::BoardState* released = _impl_.initial_board_;
  _impl_.initial_board_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::BoardState* GameStartedNotification::unsafe_arena_release_initial_board() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.GameStartedNotification.initial_board)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::BoardState* temp = _impl_.initial_board_;
  _impl_.initial_board_ = nullptr;
  return temp;
}
inline ::blokus::BoardState* GameStartedNotification::_internal_mutable_initial_board() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.initial_board_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::BoardState>(GetArena());
    _impl_.initial_board_ = reinterpret_cast<::blokus::BoardState*>(p);
  }
  return _impl_.initial_board_;
}
inline ::blokus::BoardState* GameStartedNotification::mutable_initial_board() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::blokus::BoardState* _msg = _internal_mutable_initial_board();
  // @@protoc_insertion_point(field_mutable:blokus.GameStartedNotification.initial_board)
  return _msg;
}
inline void GameStartedNotification::set_allocated_initial_board(::blokus::BoardState* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.initial_board_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.initial_board_ = reinterpret_cast<::blokus::BoardState*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.GameStartedNotification.initial_board)
}

// .google.protobuf.Timestamp started_at = 9;
inline bool GameStartedNotification::has_started_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.started_at_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& GameStartedNotification::_internal_started_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.started_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& GameStartedNotification::started_at() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.GameStartedNotification.started_at)
  return _internal_started_at();
}
inline void GameStartedNotification::unsafe_arena_set_allocated_started_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.started_at_);
  }
  _impl_.started_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.GameStartedNotification.started_at)
}
inline ::google::protobuf::Timestamp* GameStartedNotification::release_started_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.started_at_;
  _impl_.started_at_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* GameStartedNotification::unsafe_arena_release_started_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.GameStartedNotification.started_at)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.started_at_;
  _impl_.started_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* GameStartedNotification::_internal_mutable_started_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.started_at_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.started_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.started_at_;
}
inline ::google::protobuf::Timestamp* GameStartedNotification::mutable_started_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_started_at();
  // @@protoc_insertion_point(field_mutable:blokus.GameStartedNotification.started_at)
  return _msg;
}
inline void GameStartedNotification::set_allocated_started_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.started_at_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.started_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.GameStartedNotification.started_at)
}

// string game_id = 10;
inline void GameStartedNotification::clear_game_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.game_id_.ClearToEmpty();
}
inline const std::string& GameStartedNotification::game_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.GameStartedNotification.game_id)
  return _internal_game_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GameStartedNotification::set_game_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.game_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.GameStartedNotification.game_id)
}
inline std::string* GameStartedNotification::mutable_game_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_game_id();
  // @@protoc_insertion_point(field_mutable:blokus.GameStartedNotification.game_id)
  return _s;
}
inline const std::string& GameStartedNotification::_internal_game_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.game_id_.Get();
}
inline void GameStartedNotification::_internal_set_game_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.game_id_.Set(value, GetArena());
}
inline std::string* GameStartedNotification::_internal_mutable_game_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.game_id_.Mutable( GetArena());
}
inline std::string* GameStartedNotification::release_game_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.GameStartedNotification.game_id)
  return _impl_.game_id_.Release();
}
inline void GameStartedNotification::set_allocated_game_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.game_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.game_id_.IsDefault()) {
    _impl_.game_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.GameStartedNotification.game_id)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GameEndedNotification

// int32 room_id = 1;
inline void GameEndedNotification::clear_room_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_id_ = 0;
}
inline ::int32_t GameEndedNotification::room_id() const {
  // @@protoc_insertion_point(field_get:blokus.GameEndedNotification.room_id)
  return _internal_room_id();
}
inline void GameEndedNotification::set_room_id(::int32_t value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:blokus.GameEndedNotification.room_id)
}
inline ::int32_t GameEndedNotification::_internal_room_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.room_id_;
}
inline void GameEndedNotification::_internal_set_room_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_id_ = value;
}

// string game_id = 2;
inline void GameEndedNotification::clear_game_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.game_id_.ClearToEmpty();
}
inline const std::string& GameEndedNotification::game_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.GameEndedNotification.game_id)
  return _internal_game_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GameEndedNotification::set_game_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.game_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.GameEndedNotification.game_id)
}
inline std::string* GameEndedNotification::mutable_game_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_game_id();
  // @@protoc_insertion_point(field_mutable:blokus.GameEndedNotification.game_id)
  return _s;
}
inline const std::string& GameEndedNotification::_internal_game_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.game_id_.Get();
}
inline void GameEndedNotification::_internal_set_game_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.game_id_.Set(value, GetArena());
}
inline std::string* GameEndedNotification::_internal_mutable_game_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.game_id_.Mutable( GetArena());
}
inline std::string* GameEndedNotification::release_game_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.GameEndedNotification.game_id)
  return _impl_.game_id_.Release();
}
inline void GameEndedNotification::set_allocated_game_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.game_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.game_id_.IsDefault()) {
    _impl_.game_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.GameEndedNotification.game_id)
}

// .blokus.GameEndReason end_reason = 3;
inline void GameEndedNotification::clear_end_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.end_reason_ = 0;
}
inline ::blokus::GameEndReason GameEndedNotification::end_reason() const {
  // @@protoc_insertion_point(field_get:blokus.GameEndedNotification.end_reason)
  return _internal_end_reason();
}
inline void GameEndedNotification::set_end_reason(::blokus::GameEndReason value) {
  _internal_set_end_reason(value);
  // @@protoc_insertion_point(field_set:blokus.GameEndedNotification.end_reason)
}
inline ::blokus::GameEndReason GameEndedNotification::_internal_end_reason() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::blokus::GameEndReason>(_impl_.end_reason_);
}
inline void GameEndedNotification::_internal_set_end_reason(::blokus::GameEndReason value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.end_reason_ = value;
}

// repeated .blokus.PlayerResult final_results = 4;
inline int GameEndedNotification::_internal_final_results_size() const {
  return _internal_final_results().size();
}
inline int GameEndedNotification::final_results_size() const {
  return _internal_final_results_size();
}
inline void GameEndedNotification::clear_final_results() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.final_results_.Clear();
}
inline ::blokus::PlayerResult* GameEndedNotification::mutable_final_results(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.GameEndedNotification.final_results)
  return _internal_mutable_final_results()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::blokus::PlayerResult>* GameEndedNotification::mutable_final_results()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.GameEndedNotification.final_results)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_final_results();
}
inline const ::blokus::PlayerResult& GameEndedNotification::final_results(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.GameEndedNotification.final_results)
  return _internal_final_results().Get(index);
}
inline ::blokus::PlayerResult* GameEndedNotification::add_final_results() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::blokus::PlayerResult* _add = _internal_mutable_final_results()->Add();
  // @@protoc_insertion_point(field_add:blokus.GameEndedNotification.final_results)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::blokus::PlayerResult>& GameEndedNotification::final_results() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.GameEndedNotification.final_results)
  return _internal_final_results();
}
inline const ::google::protobuf::RepeatedPtrField<::blokus::PlayerResult>&
GameEndedNotification::_internal_final_results() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.final_results_;
}
inline ::google::protobuf::RepeatedPtrField<::blokus::PlayerResult>*
GameEndedNotification::_internal_mutable_final_results() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.final_results_;
}

// string winner = 5;
inline void GameEndedNotification::clear_winner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.winner_.ClearToEmpty();
}
inline const std::string& GameEndedNotification::winner() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.GameEndedNotification.winner)
  return _internal_winner();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GameEndedNotification::set_winner(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.winner_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.GameEndedNotification.winner)
}
inline std::string* GameEndedNotification::mutable_winner() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_winner();
  // @@protoc_insertion_point(field_mutable:blokus.GameEndedNotification.winner)
  return _s;
}
inline const std::string& GameEndedNotification::_internal_winner() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.winner_.Get();
}
inline void GameEndedNotification::_internal_set_winner(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.winner_.Set(value, GetArena());
}
inline std::string* GameEndedNotification::_internal_mutable_winner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.winner_.Mutable( GetArena());
}
inline std::string* GameEndedNotification::release_winner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.GameEndedNotification.winner)
  return _impl_.winner_.Release();
}
inline void GameEndedNotification::set_allocated_winner(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.winner_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.winner_.IsDefault()) {
    _impl_.winner_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.GameEndedNotification.winner)
}

// .blokus.GameStats game_stats = 6;
inline bool GameEndedNotification::has_game_stats() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.game_stats_ != nullptr);
  return value;
}
inline const ::blokus::GameStats& GameEndedNotification::_internal_game_stats() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::GameStats* p = _impl_.game_stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::GameStats&>(::blokus::_GameStats_default_instance_);
}
inline const ::blokus::GameStats& GameEndedNotification::game_stats() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.GameEndedNotification.game_stats)
  return _internal_game_stats();
}
inline void GameEndedNotification::unsafe_arena_set_allocated_game_stats(::blokus::GameStats* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.game_stats_);
  }
  _impl_.game_stats_ = reinterpret_cast<::blokus::GameStats*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.GameEndedNotification.game_stats)
}
inline ::blokus::GameStats* GameEndedNotification::release_game_stats() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::GameStats* released = _impl_.game_stats_;
  _impl_.game_stats_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::GameStats* GameEndedNotification::unsafe_arena_release_game_stats() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.GameEndedNotification.game_stats)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::GameStats* temp = _impl_.game_stats_;
  _impl_.game_stats_ = nullptr;
  return temp;
}
inline ::blokus::GameStats* GameEndedNotification::_internal_mutable_game_stats() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.game_stats_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::GameStats>(GetArena());
    _impl_.game_stats_ = reinterpret_cast<::blokus::GameStats*>(p);
  }
  return _impl_.game_stats_;
}
inline ::blokus::GameStats* GameEndedNotification::mutable_game_stats() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::blokus::GameStats* _msg = _internal_mutable_game_stats();
  // @@protoc_insertion_point(field_mutable:blokus.GameEndedNotification.game_stats)
  return _msg;
}
inline void GameEndedNotification::set_allocated_game_stats(::blokus::GameStats* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.game_stats_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.game_stats_ = reinterpret_cast<::blokus::GameStats*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.GameEndedNotification.game_stats)
}

// .google.protobuf.Timestamp ended_at = 7;
inline bool GameEndedNotification::has_ended_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ended_at_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& GameEndedNotification::_internal_ended_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.ended_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& GameEndedNotification::ended_at() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.GameEndedNotification.ended_at)
  return _internal_ended_at();
}
inline void GameEndedNotification::unsafe_arena_set_allocated_ended_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ended_at_);
  }
  _impl_.ended_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.GameEndedNotification.ended_at)
}
inline ::google::protobuf::Timestamp* GameEndedNotification::release_ended_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.ended_at_;
  _impl_.ended_at_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* GameEndedNotification::unsafe_arena_release_ended_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.GameEndedNotification.ended_at)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.ended_at_;
  _impl_.ended_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* GameEndedNotification::_internal_mutable_ended_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ended_at_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.ended_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.ended_at_;
}
inline ::google::protobuf::Timestamp* GameEndedNotification::mutable_ended_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_ended_at();
  // @@protoc_insertion_point(field_mutable:blokus.GameEndedNotification.ended_at)
  return _msg;
}
inline void GameEndedNotification::set_allocated_ended_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ended_at_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.ended_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.GameEndedNotification.ended_at)
}

// int32 game_duration_seconds = 8;
inline void GameEndedNotification::clear_game_duration_seconds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.game_duration_seconds_ = 0;
}
inline ::int32_t GameEndedNotification::game_duration_seconds() const {
  // @@protoc_insertion_point(field_get:blokus.GameEndedNotification.game_duration_seconds)
  return _internal_game_duration_seconds();
}
inline void GameEndedNotification::set_game_duration_seconds(::int32_t value) {
  _internal_set_game_duration_seconds(value);
  // @@protoc_insertion_point(field_set:blokus.GameEndedNotification.game_duration_seconds)
}
inline ::int32_t GameEndedNotification::_internal_game_duration_seconds() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.game_duration_seconds_;
}
inline void GameEndedNotification::_internal_set_game_duration_seconds(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.game_duration_seconds_ = value;
}

// map<string, int32> rating_changes = 9;
inline int GameEndedNotification::_internal_rating_changes_size() const {
  return _internal_rating_changes().size();
}
inline int GameEndedNotification::rating_changes_size() const {
  return _internal_rating_changes_size();
}
inline void GameEndedNotification::clear_rating_changes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rating_changes_.Clear();
}
inline const ::google::protobuf::Map<std::string, ::int32_t>& GameEndedNotification::_internal_rating_changes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rating_changes_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::int32_t>& GameEndedNotification::rating_changes() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:blokus.GameEndedNotification.rating_changes)
  return _internal_rating_changes();
}
inline ::google::protobuf::Map<std::string, ::int32_t>* GameEndedNotification::_internal_mutable_rating_changes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.rating_changes_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::int32_t>* GameEndedNotification::mutable_rating_changes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:blokus.GameEndedNotification.rating_changes)
  return _internal_mutable_rating_changes();
}

// map<string, string> achievements = 10;
inline int GameEndedNotification::_internal_achievements_size() const {
  return _internal_achievements().size();
}
inline int GameEndedNotification::achievements_size() const {
  return _internal_achievements_size();
}
inline void GameEndedNotification::clear_achievements() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.achievements_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& GameEndedNotification::_internal_achievements() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.achievements_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& GameEndedNotification::achievements() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:blokus.GameEndedNotification.achievements)
  return _internal_achievements();
}
inline ::google::protobuf::Map<std::string, std::string>* GameEndedNotification::_internal_mutable_achievements() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.achievements_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* GameEndedNotification::mutable_achievements() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:blokus.GameEndedNotification.achievements)
  return _internal_mutable_achievements();
}

// map<string, int32> experience_gained = 11;
inline int GameEndedNotification::_internal_experience_gained_size() const {
  return _internal_experience_gained().size();
}
inline int GameEndedNotification::experience_gained_size() const {
  return _internal_experience_gained_size();
}
inline void GameEndedNotification::clear_experience_gained() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.experience_gained_.Clear();
}
inline const ::google::protobuf::Map<std::string, ::int32_t>& GameEndedNotification::_internal_experience_gained() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.experience_gained_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::int32_t>& GameEndedNotification::experience_gained() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:blokus.GameEndedNotification.experience_gained)
  return _internal_experience_gained();
}
inline ::google::protobuf::Map<std::string, ::int32_t>* GameEndedNotification::_internal_mutable_experience_gained() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.experience_gained_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::int32_t>* GameEndedNotification::mutable_experience_gained() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:blokus.GameEndedNotification.experience_gained)
  return _internal_mutable_experience_gained();
}

// -------------------------------------------------------------------

// PlayerResult

// string username = 1;
inline void PlayerResult::clear_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.ClearToEmpty();
}
inline const std::string& PlayerResult::username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.PlayerResult.username)
  return _internal_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PlayerResult::set_username(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.PlayerResult.username)
}
inline std::string* PlayerResult::mutable_username() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:blokus.PlayerResult.username)
  return _s;
}
inline const std::string& PlayerResult::_internal_username() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.username_.Get();
}
inline void PlayerResult::_internal_set_username(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.Set(value, GetArena());
}
inline std::string* PlayerResult::_internal_mutable_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.username_.Mutable( GetArena());
}
inline std::string* PlayerResult::release_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.PlayerResult.username)
  return _impl_.username_.Release();
}
inline void PlayerResult::set_allocated_username(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.PlayerResult.username)
}

// .blokus.PlayerColor color = 2;
inline void PlayerResult::clear_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.color_ = 0;
}
inline ::blokus::PlayerColor PlayerResult::color() const {
  // @@protoc_insertion_point(field_get:blokus.PlayerResult.color)
  return _internal_color();
}
inline void PlayerResult::set_color(::blokus::PlayerColor value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:blokus.PlayerResult.color)
}
inline ::blokus::PlayerColor PlayerResult::_internal_color() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::blokus::PlayerColor>(_impl_.color_);
}
inline void PlayerResult::_internal_set_color(::blokus::PlayerColor value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.color_ = value;
}

// int32 final_score = 3;
inline void PlayerResult::clear_final_score() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.final_score_ = 0;
}
inline ::int32_t PlayerResult::final_score() const {
  // @@protoc_insertion_point(field_get:blokus.PlayerResult.final_score)
  return _internal_final_score();
}
inline void PlayerResult::set_final_score(::int32_t value) {
  _internal_set_final_score(value);
  // @@protoc_insertion_point(field_set:blokus.PlayerResult.final_score)
}
inline ::int32_t PlayerResult::_internal_final_score() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.final_score_;
}
inline void PlayerResult::_internal_set_final_score(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.final_score_ = value;
}

// int32 blocks_placed = 4;
inline void PlayerResult::clear_blocks_placed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.blocks_placed_ = 0;
}
inline ::int32_t PlayerResult::blocks_placed() const {
  // @@protoc_insertion_point(field_get:blokus.PlayerResult.blocks_placed)
  return _internal_blocks_placed();
}
inline void PlayerResult::set_blocks_placed(::int32_t value) {
  _internal_set_blocks_placed(value);
  // @@protoc_insertion_point(field_set:blokus.PlayerResult.blocks_placed)
}
inline ::int32_t PlayerResult::_internal_blocks_placed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.blocks_placed_;
}
inline void PlayerResult::_internal_set_blocks_placed(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.blocks_placed_ = value;
}

// int32 remaining_blocks = 5;
inline void PlayerResult::clear_remaining_blocks() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.remaining_blocks_ = 0;
}
inline ::int32_t PlayerResult::remaining_blocks() const {
  // @@protoc_insertion_point(field_get:blokus.PlayerResult.remaining_blocks)
  return _internal_remaining_blocks();
}
inline void PlayerResult::set_remaining_blocks(::int32_t value) {
  _internal_set_remaining_blocks(value);
  // @@protoc_insertion_point(field_set:blokus.PlayerResult.remaining_blocks)
}
inline ::int32_t PlayerResult::_internal_remaining_blocks() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.remaining_blocks_;
}
inline void PlayerResult::_internal_set_remaining_blocks(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.remaining_blocks_ = value;
}

// bool finished_all_blocks = 6;
inline void PlayerResult::clear_finished_all_blocks() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.finished_all_blocks_ = false;
}
inline bool PlayerResult::finished_all_blocks() const {
  // @@protoc_insertion_point(field_get:blokus.PlayerResult.finished_all_blocks)
  return _internal_finished_all_blocks();
}
inline void PlayerResult::set_finished_all_blocks(bool value) {
  _internal_set_finished_all_blocks(value);
  // @@protoc_insertion_point(field_set:blokus.PlayerResult.finished_all_blocks)
}
inline bool PlayerResult::_internal_finished_all_blocks() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.finished_all_blocks_;
}
inline void PlayerResult::_internal_set_finished_all_blocks(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.finished_all_blocks_ = value;
}

// int32 total_moves = 7;
inline void PlayerResult::clear_total_moves() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_moves_ = 0;
}
inline ::int32_t PlayerResult::total_moves() const {
  // @@protoc_insertion_point(field_get:blokus.PlayerResult.total_moves)
  return _internal_total_moves();
}
inline void PlayerResult::set_total_moves(::int32_t value) {
  _internal_set_total_moves(value);
  // @@protoc_insertion_point(field_set:blokus.PlayerResult.total_moves)
}
inline ::int32_t PlayerResult::_internal_total_moves() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_moves_;
}
inline void PlayerResult::_internal_set_total_moves(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_moves_ = value;
}

// int32 undo_count = 8;
inline void PlayerResult::clear_undo_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.undo_count_ = 0;
}
inline ::int32_t PlayerResult::undo_count() const {
  // @@protoc_insertion_point(field_get:blokus.PlayerResult.undo_count)
  return _internal_undo_count();
}
inline void PlayerResult::set_undo_count(::int32_t value) {
  _internal_set_undo_count(value);
  // @@protoc_insertion_point(field_set:blokus.PlayerResult.undo_count)
}
inline ::int32_t PlayerResult::_internal_undo_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.undo_count_;
}
inline void PlayerResult::_internal_set_undo_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.undo_count_ = value;
}

// float average_think_time = 9;
inline void PlayerResult::clear_average_think_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.average_think_time_ = 0;
}
inline float PlayerResult::average_think_time() const {
  // @@protoc_insertion_point(field_get:blokus.PlayerResult.average_think_time)
  return _internal_average_think_time();
}
inline void PlayerResult::set_average_think_time(float value) {
  _internal_set_average_think_time(value);
  // @@protoc_insertion_point(field_set:blokus.PlayerResult.average_think_time)
}
inline float PlayerResult::_internal_average_think_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.average_think_time_;
}
inline void PlayerResult::_internal_set_average_think_time(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.average_think_time_ = value;
}

// int32 longest_think_time = 10;
inline void PlayerResult::clear_longest_think_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.longest_think_time_ = 0;
}
inline ::int32_t PlayerResult::longest_think_time() const {
  // @@protoc_insertion_point(field_get:blokus.PlayerResult.longest_think_time)
  return _internal_longest_think_time();
}
inline void PlayerResult::set_longest_think_time(::int32_t value) {
  _internal_set_longest_think_time(value);
  // @@protoc_insertion_point(field_set:blokus.PlayerResult.longest_think_time)
}
inline ::int32_t PlayerResult::_internal_longest_think_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.longest_think_time_;
}
inline void PlayerResult::_internal_set_longest_think_time(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.longest_think_time_ = value;
}

// bool disconnected = 11;
inline void PlayerResult::clear_disconnected() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.disconnected_ = false;
}
inline bool PlayerResult::disconnected() const {
  // @@protoc_insertion_point(field_get:blokus.PlayerResult.disconnected)
  return _internal_disconnected();
}
inline void PlayerResult::set_disconnected(bool value) {
  _internal_set_disconnected(value);
  // @@protoc_insertion_point(field_set:blokus.PlayerResult.disconnected)
}
inline bool PlayerResult::_internal_disconnected() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.disconnected_;
}
inline void PlayerResult::_internal_set_disconnected(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.disconnected_ = value;
}

// -------------------------------------------------------------------

// TurnChangedNotification

// int32 room_id = 1;
inline void TurnChangedNotification::clear_room_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_id_ = 0;
}
inline ::int32_t TurnChangedNotification::room_id() const {
  // @@protoc_insertion_point(field_get:blokus.TurnChangedNotification.room_id)
  return _internal_room_id();
}
inline void TurnChangedNotification::set_room_id(::int32_t value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:blokus.TurnChangedNotification.room_id)
}
inline ::int32_t TurnChangedNotification::_internal_room_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.room_id_;
}
inline void TurnChangedNotification::_internal_set_room_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_id_ = value;
}

// .blokus.PlayerColor current_player = 2;
inline void TurnChangedNotification::clear_current_player() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_player_ = 0;
}
inline ::blokus::PlayerColor TurnChangedNotification::current_player() const {
  // @@protoc_insertion_point(field_get:blokus.TurnChangedNotification.current_player)
  return _internal_current_player();
}
inline void TurnChangedNotification::set_current_player(::blokus::PlayerColor value) {
  _internal_set_current_player(value);
  // @@protoc_insertion_point(field_set:blokus.TurnChangedNotification.current_player)
}
inline ::blokus::PlayerColor TurnChangedNotification::_internal_current_player() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::blokus::PlayerColor>(_impl_.current_player_);
}
inline void TurnChangedNotification::_internal_set_current_player(::blokus::PlayerColor value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_player_ = value;
}

// .blokus.PlayerColor previous_player = 3;
inline void TurnChangedNotification::clear_previous_player() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.previous_player_ = 0;
}
inline ::blokus::PlayerColor TurnChangedNotification::previous_player() const {
  // @@protoc_insertion_point(field_get:blokus.TurnChangedNotification.previous_player)
  return _internal_previous_player();
}
inline void TurnChangedNotification::set_previous_player(::blokus::PlayerColor value) {
  _internal_set_previous_player(value);
  // @@protoc_insertion_point(field_set:blokus.TurnChangedNotification.previous_player)
}
inline ::blokus::PlayerColor TurnChangedNotification::_internal_previous_player() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::blokus::PlayerColor>(_impl_.previous_player_);
}
inline void TurnChangedNotification::_internal_set_previous_player(::blokus::PlayerColor value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.previous_player_ = value;
}

// int32 turn_number = 4;
inline void TurnChangedNotification::clear_turn_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.turn_number_ = 0;
}
inline ::int32_t TurnChangedNotification::turn_number() const {
  // @@protoc_insertion_point(field_get:blokus.TurnChangedNotification.turn_number)
  return _internal_turn_number();
}
inline void TurnChangedNotification::set_turn_number(::int32_t value) {
  _internal_set_turn_number(value);
  // @@protoc_insertion_point(field_set:blokus.TurnChangedNotification.turn_number)
}
inline ::int32_t TurnChangedNotification::_internal_turn_number() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.turn_number_;
}
inline void TurnChangedNotification::_internal_set_turn_number(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.turn_number_ = value;
}

// int32 turn_time_seconds = 5;
inline void TurnChangedNotification::clear_turn_time_seconds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.turn_time_seconds_ = 0;
}
inline ::int32_t TurnChangedNotification::turn_time_seconds() const {
  // @@protoc_insertion_point(field_get:blokus.TurnChangedNotification.turn_time_seconds)
  return _internal_turn_time_seconds();
}
inline void TurnChangedNotification::set_turn_time_seconds(::int32_t value) {
  _internal_set_turn_time_seconds(value);
  // @@protoc_insertion_point(field_set:blokus.TurnChangedNotification.turn_time_seconds)
}
inline ::int32_t TurnChangedNotification::_internal_turn_time_seconds() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.turn_time_seconds_;
}
inline void TurnChangedNotification::_internal_set_turn_time_seconds(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.turn_time_seconds_ = value;
}

// .google.protobuf.Timestamp turn_started_at = 6;
inline bool TurnChangedNotification::has_turn_started_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.turn_started_at_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& TurnChangedNotification::_internal_turn_started_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.turn_started_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& TurnChangedNotification::turn_started_at() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.TurnChangedNotification.turn_started_at)
  return _internal_turn_started_at();
}
inline void TurnChangedNotification::unsafe_arena_set_allocated_turn_started_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.turn_started_at_);
  }
  _impl_.turn_started_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.TurnChangedNotification.turn_started_at)
}
inline ::google::protobuf::Timestamp* TurnChangedNotification::release_turn_started_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.turn_started_at_;
  _impl_.turn_started_at_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* TurnChangedNotification::unsafe_arena_release_turn_started_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.TurnChangedNotification.turn_started_at)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.turn_started_at_;
  _impl_.turn_started_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* TurnChangedNotification::_internal_mutable_turn_started_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.turn_started_at_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.turn_started_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.turn_started_at_;
}
inline ::google::protobuf::Timestamp* TurnChangedNotification::mutable_turn_started_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_turn_started_at();
  // @@protoc_insertion_point(field_mutable:blokus.TurnChangedNotification.turn_started_at)
  return _msg;
}
inline void TurnChangedNotification::set_allocated_turn_started_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.turn_started_at_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.turn_started_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.TurnChangedNotification.turn_started_at)
}

// int32 moves_made = 7;
inline void TurnChangedNotification::clear_moves_made() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.moves_made_ = 0;
}
inline ::int32_t TurnChangedNotification::moves_made() const {
  // @@protoc_insertion_point(field_get:blokus.TurnChangedNotification.moves_made)
  return _internal_moves_made();
}
inline void TurnChangedNotification::set_moves_made(::int32_t value) {
  _internal_set_moves_made(value);
  // @@protoc_insertion_point(field_set:blokus.TurnChangedNotification.moves_made)
}
inline ::int32_t TurnChangedNotification::_internal_moves_made() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.moves_made_;
}
inline void TurnChangedNotification::_internal_set_moves_made(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.moves_made_ = value;
}

// bool game_nearly_finished = 8;
inline void TurnChangedNotification::clear_game_nearly_finished() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.game_nearly_finished_ = false;
}
inline bool TurnChangedNotification::game_nearly_finished() const {
  // @@protoc_insertion_point(field_get:blokus.TurnChangedNotification.game_nearly_finished)
  return _internal_game_nearly_finished();
}
inline void TurnChangedNotification::set_game_nearly_finished(bool value) {
  _internal_set_game_nearly_finished(value);
  // @@protoc_insertion_point(field_set:blokus.TurnChangedNotification.game_nearly_finished)
}
inline bool TurnChangedNotification::_internal_game_nearly_finished() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.game_nearly_finished_;
}
inline void TurnChangedNotification::_internal_set_game_nearly_finished(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.game_nearly_finished_ = value;
}

// .blokus.TurnAction previous_action = 9;
inline void TurnChangedNotification::clear_previous_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.previous_action_ = 0;
}
inline ::blokus::TurnAction TurnChangedNotification::previous_action() const {
  // @@protoc_insertion_point(field_get:blokus.TurnChangedNotification.previous_action)
  return _internal_previous_action();
}
inline void TurnChangedNotification::set_previous_action(::blokus::TurnAction value) {
  _internal_set_previous_action(value);
  // @@protoc_insertion_point(field_set:blokus.TurnChangedNotification.previous_action)
}
inline ::blokus::TurnAction TurnChangedNotification::_internal_previous_action() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::blokus::TurnAction>(_impl_.previous_action_);
}
inline void TurnChangedNotification::_internal_set_previous_action(::blokus::TurnAction value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.previous_action_ = value;
}

// string previous_action_details = 10;
inline void TurnChangedNotification::clear_previous_action_details() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.previous_action_details_.ClearToEmpty();
}
inline const std::string& TurnChangedNotification::previous_action_details() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.TurnChangedNotification.previous_action_details)
  return _internal_previous_action_details();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TurnChangedNotification::set_previous_action_details(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.previous_action_details_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.TurnChangedNotification.previous_action_details)
}
inline std::string* TurnChangedNotification::mutable_previous_action_details() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_previous_action_details();
  // @@protoc_insertion_point(field_mutable:blokus.TurnChangedNotification.previous_action_details)
  return _s;
}
inline const std::string& TurnChangedNotification::_internal_previous_action_details() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.previous_action_details_.Get();
}
inline void TurnChangedNotification::_internal_set_previous_action_details(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.previous_action_details_.Set(value, GetArena());
}
inline std::string* TurnChangedNotification::_internal_mutable_previous_action_details() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.previous_action_details_.Mutable( GetArena());
}
inline std::string* TurnChangedNotification::release_previous_action_details() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.TurnChangedNotification.previous_action_details)
  return _impl_.previous_action_details_.Release();
}
inline void TurnChangedNotification::set_allocated_previous_action_details(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.previous_action_details_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.previous_action_details_.IsDefault()) {
    _impl_.previous_action_details_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.TurnChangedNotification.previous_action_details)
}

// -------------------------------------------------------------------

// PlaceBlockRequest

// int32 room_id = 1;
inline void PlaceBlockRequest::clear_room_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_id_ = 0;
}
inline ::int32_t PlaceBlockRequest::room_id() const {
  // @@protoc_insertion_point(field_get:blokus.PlaceBlockRequest.room_id)
  return _internal_room_id();
}
inline void PlaceBlockRequest::set_room_id(::int32_t value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:blokus.PlaceBlockRequest.room_id)
}
inline ::int32_t PlaceBlockRequest::_internal_room_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.room_id_;
}
inline void PlaceBlockRequest::_internal_set_room_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_id_ = value;
}

// .blokus.BlockPlacement block_placement = 2;
inline bool PlaceBlockRequest::has_block_placement() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.block_placement_ != nullptr);
  return value;
}
inline const ::blokus::BlockPlacement& PlaceBlockRequest::_internal_block_placement() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::BlockPlacement* p = _impl_.block_placement_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::BlockPlacement&>(::blokus::_BlockPlacement_default_instance_);
}
inline const ::blokus::BlockPlacement& PlaceBlockRequest::block_placement() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.PlaceBlockRequest.block_placement)
  return _internal_block_placement();
}
inline void PlaceBlockRequest::unsafe_arena_set_allocated_block_placement(::blokus::BlockPlacement* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.block_placement_);
  }
  _impl_.block_placement_ = reinterpret_cast<::blokus::BlockPlacement*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.PlaceBlockRequest.block_placement)
}
inline ::blokus::BlockPlacement* PlaceBlockRequest::release_block_placement() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::BlockPlacement* released = _impl_.block_placement_;
  _impl_.block_placement_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::BlockPlacement* PlaceBlockRequest::unsafe_arena_release_block_placement() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.PlaceBlockRequest.block_placement)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::BlockPlacement* temp = _impl_.block_placement_;
  _impl_.block_placement_ = nullptr;
  return temp;
}
inline ::blokus::BlockPlacement* PlaceBlockRequest::_internal_mutable_block_placement() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.block_placement_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::BlockPlacement>(GetArena());
    _impl_.block_placement_ = reinterpret_cast<::blokus::BlockPlacement*>(p);
  }
  return _impl_.block_placement_;
}
inline ::blokus::BlockPlacement* PlaceBlockRequest::mutable_block_placement() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::blokus::BlockPlacement* _msg = _internal_mutable_block_placement();
  // @@protoc_insertion_point(field_mutable:blokus.PlaceBlockRequest.block_placement)
  return _msg;
}
inline void PlaceBlockRequest::set_allocated_block_placement(::blokus::BlockPlacement* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.block_placement_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.block_placement_ = reinterpret_cast<::blokus::BlockPlacement*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.PlaceBlockRequest.block_placement)
}

// bool confirm_placement = 3;
inline void PlaceBlockRequest::clear_confirm_placement() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.confirm_placement_ = false;
}
inline bool PlaceBlockRequest::confirm_placement() const {
  // @@protoc_insertion_point(field_get:blokus.PlaceBlockRequest.confirm_placement)
  return _internal_confirm_placement();
}
inline void PlaceBlockRequest::set_confirm_placement(bool value) {
  _internal_set_confirm_placement(value);
  // @@protoc_insertion_point(field_set:blokus.PlaceBlockRequest.confirm_placement)
}
inline bool PlaceBlockRequest::_internal_confirm_placement() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.confirm_placement_;
}
inline void PlaceBlockRequest::_internal_set_confirm_placement(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.confirm_placement_ = value;
}

// bool use_hint = 4;
inline void PlaceBlockRequest::clear_use_hint() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.use_hint_ = false;
}
inline bool PlaceBlockRequest::use_hint() const {
  // @@protoc_insertion_point(field_get:blokus.PlaceBlockRequest.use_hint)
  return _internal_use_hint();
}
inline void PlaceBlockRequest::set_use_hint(bool value) {
  _internal_set_use_hint(value);
  // @@protoc_insertion_point(field_set:blokus.PlaceBlockRequest.use_hint)
}
inline bool PlaceBlockRequest::_internal_use_hint() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.use_hint_;
}
inline void PlaceBlockRequest::_internal_set_use_hint(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.use_hint_ = value;
}

// int32 client_board_version = 5;
inline void PlaceBlockRequest::clear_client_board_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_board_version_ = 0;
}
inline ::int32_t PlaceBlockRequest::client_board_version() const {
  // @@protoc_insertion_point(field_get:blokus.PlaceBlockRequest.client_board_version)
  return _internal_client_board_version();
}
inline void PlaceBlockRequest::set_client_board_version(::int32_t value) {
  _internal_set_client_board_version(value);
  // @@protoc_insertion_point(field_set:blokus.PlaceBlockRequest.client_board_version)
}
inline ::int32_t PlaceBlockRequest::_internal_client_board_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.client_board_version_;
}
inline void PlaceBlockRequest::_internal_set_client_board_version(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_board_version_ = value;
}

// string move_id = 6;
inline void PlaceBlockRequest::clear_move_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.move_id_.ClearToEmpty();
}
inline const std::string& PlaceBlockRequest::move_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.PlaceBlockRequest.move_id)
  return _internal_move_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PlaceBlockRequest::set_move_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.move_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.PlaceBlockRequest.move_id)
}
inline std::string* PlaceBlockRequest::mutable_move_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_move_id();
  // @@protoc_insertion_point(field_mutable:blokus.PlaceBlockRequest.move_id)
  return _s;
}
inline const std::string& PlaceBlockRequest::_internal_move_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.move_id_.Get();
}
inline void PlaceBlockRequest::_internal_set_move_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.move_id_.Set(value, GetArena());
}
inline std::string* PlaceBlockRequest::_internal_mutable_move_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.move_id_.Mutable( GetArena());
}
inline std::string* PlaceBlockRequest::release_move_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.PlaceBlockRequest.move_id)
  return _impl_.move_id_.Release();
}
inline void PlaceBlockRequest::set_allocated_move_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.move_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.move_id_.IsDefault()) {
    _impl_.move_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.PlaceBlockRequest.move_id)
}

// -------------------------------------------------------------------

// PlaceBlockResponse

// .blokus.Result result = 1;
inline bool PlaceBlockResponse::has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.result_ != nullptr);
  return value;
}
inline const ::blokus::Result& PlaceBlockResponse::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::Result* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::Result&>(::blokus::_Result_default_instance_);
}
inline const ::blokus::Result& PlaceBlockResponse::result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.PlaceBlockResponse.result)
  return _internal_result();
}
inline void PlaceBlockResponse::unsafe_arena_set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.PlaceBlockResponse.result)
}
inline ::blokus::Result* PlaceBlockResponse::release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* released = _impl_.result_;
  _impl_.result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::Result* PlaceBlockResponse::unsafe_arena_release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.PlaceBlockResponse.result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::blokus::Result* PlaceBlockResponse::_internal_mutable_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::Result>(GetArena());
    _impl_.result_ = reinterpret_cast<::blokus::Result*>(p);
  }
  return _impl_.result_;
}
inline ::blokus::Result* PlaceBlockResponse::mutable_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::blokus::Result* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:blokus.PlaceBlockResponse.result)
  return _msg;
}
inline void PlaceBlockResponse::set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.PlaceBlockResponse.result)
}

// .blokus.BlockPlacement confirmed_placement = 2;
inline bool PlaceBlockResponse::has_confirmed_placement() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.confirmed_placement_ != nullptr);
  return value;
}
inline const ::blokus::BlockPlacement& PlaceBlockResponse::_internal_confirmed_placement() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::BlockPlacement* p = _impl_.confirmed_placement_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::BlockPlacement&>(::blokus::_BlockPlacement_default_instance_);
}
inline const ::blokus::BlockPlacement& PlaceBlockResponse::confirmed_placement() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.PlaceBlockResponse.confirmed_placement)
  return _internal_confirmed_placement();
}
inline void PlaceBlockResponse::unsafe_arena_set_allocated_confirmed_placement(::blokus::BlockPlacement* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.confirmed_placement_);
  }
  _impl_.confirmed_placement_ = reinterpret_cast<::blokus::BlockPlacement*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.PlaceBlockResponse.confirmed_placement)
}
inline ::blokus::BlockPlacement* PlaceBlockResponse::release_confirmed_placement() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::blokus::BlockPlacement* released = _impl_.confirmed_placement_;
  _impl_.confirmed_placement_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::BlockPlacement* PlaceBlockResponse::unsafe_arena_release_confirmed_placement() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.PlaceBlockResponse.confirmed_placement)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::blokus::BlockPlacement* temp = _impl_.confirmed_placement_;
  _impl_.confirmed_placement_ = nullptr;
  return temp;
}
inline ::blokus::BlockPlacement* PlaceBlockResponse::_internal_mutable_confirmed_placement() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.confirmed_placement_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::BlockPlacement>(GetArena());
    _impl_.confirmed_placement_ = reinterpret_cast<::blokus::BlockPlacement*>(p);
  }
  return _impl_.confirmed_placement_;
}
inline ::blokus::BlockPlacement* PlaceBlockResponse::mutable_confirmed_placement() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::blokus::BlockPlacement* _msg = _internal_mutable_confirmed_placement();
  // @@protoc_insertion_point(field_mutable:blokus.PlaceBlockResponse.confirmed_placement)
  return _msg;
}
inline void PlaceBlockResponse::set_allocated_confirmed_placement(::blokus::BlockPlacement* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.confirmed_placement_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.confirmed_placement_ = reinterpret_cast<::blokus::BlockPlacement*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.PlaceBlockResponse.confirmed_placement)
}

// int32 score_gained = 3;
inline void PlaceBlockResponse::clear_score_gained() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.score_gained_ = 0;
}
inline ::int32_t PlaceBlockResponse::score_gained() const {
  // @@protoc_insertion_point(field_get:blokus.PlaceBlockResponse.score_gained)
  return _internal_score_gained();
}
inline void PlaceBlockResponse::set_score_gained(::int32_t value) {
  _internal_set_score_gained(value);
  // @@protoc_insertion_point(field_set:blokus.PlaceBlockResponse.score_gained)
}
inline ::int32_t PlaceBlockResponse::_internal_score_gained() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.score_gained_;
}
inline void PlaceBlockResponse::_internal_set_score_gained(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.score_gained_ = value;
}

// .blokus.BoardState new_board_state = 4;
inline bool PlaceBlockResponse::has_new_board_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_board_state_ != nullptr);
  return value;
}
inline const ::blokus::BoardState& PlaceBlockResponse::_internal_new_board_state() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::BoardState* p = _impl_.new_board_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::BoardState&>(::blokus::_BoardState_default_instance_);
}
inline const ::blokus::BoardState& PlaceBlockResponse::new_board_state() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.PlaceBlockResponse.new_board_state)
  return _internal_new_board_state();
}
inline void PlaceBlockResponse::unsafe_arena_set_allocated_new_board_state(::blokus::BoardState* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.new_board_state_);
  }
  _impl_.new_board_state_ = reinterpret_cast<::blokus::BoardState*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.PlaceBlockResponse.new_board_state)
}
inline ::blokus::BoardState* PlaceBlockResponse::release_new_board_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::blokus::BoardState* released = _impl_.new_board_state_;
  _impl_.new_board_state_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::BoardState* PlaceBlockResponse::unsafe_arena_release_new_board_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.PlaceBlockResponse.new_board_state)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::blokus::BoardState* temp = _impl_.new_board_state_;
  _impl_.new_board_state_ = nullptr;
  return temp;
}
inline ::blokus::BoardState* PlaceBlockResponse::_internal_mutable_new_board_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.new_board_state_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::BoardState>(GetArena());
    _impl_.new_board_state_ = reinterpret_cast<::blokus::BoardState*>(p);
  }
  return _impl_.new_board_state_;
}
inline ::blokus::BoardState* PlaceBlockResponse::mutable_new_board_state() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::blokus::BoardState* _msg = _internal_mutable_new_board_state();
  // @@protoc_insertion_point(field_mutable:blokus.PlaceBlockResponse.new_board_state)
  return _msg;
}
inline void PlaceBlockResponse::set_allocated_new_board_state(::blokus::BoardState* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.new_board_state_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.new_board_state_ = reinterpret_cast<::blokus::BoardState*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.PlaceBlockResponse.new_board_state)
}

// bool move_accepted = 5;
inline void PlaceBlockResponse::clear_move_accepted() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.move_accepted_ = false;
}
inline bool PlaceBlockResponse::move_accepted() const {
  // @@protoc_insertion_point(field_get:blokus.PlaceBlockResponse.move_accepted)
  return _internal_move_accepted();
}
inline void PlaceBlockResponse::set_move_accepted(bool value) {
  _internal_set_move_accepted(value);
  // @@protoc_insertion_point(field_set:blokus.PlaceBlockResponse.move_accepted)
}
inline bool PlaceBlockResponse::_internal_move_accepted() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.move_accepted_;
}
inline void PlaceBlockResponse::_internal_set_move_accepted(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.move_accepted_ = value;
}

// bool valid_placement = 6;
inline void PlaceBlockResponse::clear_valid_placement() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.valid_placement_ = false;
}
inline bool PlaceBlockResponse::valid_placement() const {
  // @@protoc_insertion_point(field_get:blokus.PlaceBlockResponse.valid_placement)
  return _internal_valid_placement();
}
inline void PlaceBlockResponse::set_valid_placement(bool value) {
  _internal_set_valid_placement(value);
  // @@protoc_insertion_point(field_set:blokus.PlaceBlockResponse.valid_placement)
}
inline bool PlaceBlockResponse::_internal_valid_placement() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.valid_placement_;
}
inline void PlaceBlockResponse::_internal_set_valid_placement(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.valid_placement_ = value;
}

// repeated string validation_errors = 7;
inline int PlaceBlockResponse::_internal_validation_errors_size() const {
  return _internal_validation_errors().size();
}
inline int PlaceBlockResponse::validation_errors_size() const {
  return _internal_validation_errors_size();
}
inline void PlaceBlockResponse::clear_validation_errors() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validation_errors_.Clear();
}
inline std::string* PlaceBlockResponse::add_validation_errors() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_validation_errors()->Add();
  // @@protoc_insertion_point(field_add_mutable:blokus.PlaceBlockResponse.validation_errors)
  return _s;
}
inline const std::string& PlaceBlockResponse::validation_errors(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.PlaceBlockResponse.validation_errors)
  return _internal_validation_errors().Get(index);
}
inline std::string* PlaceBlockResponse::mutable_validation_errors(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.PlaceBlockResponse.validation_errors)
  return _internal_mutable_validation_errors()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void PlaceBlockResponse::set_validation_errors(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_validation_errors()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:blokus.PlaceBlockResponse.validation_errors)
}
template <typename Arg_, typename... Args_>
inline void PlaceBlockResponse::add_validation_errors(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_validation_errors(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:blokus.PlaceBlockResponse.validation_errors)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
PlaceBlockResponse::validation_errors() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.PlaceBlockResponse.validation_errors)
  return _internal_validation_errors();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
PlaceBlockResponse::mutable_validation_errors() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.PlaceBlockResponse.validation_errors)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_validation_errors();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
PlaceBlockResponse::_internal_validation_errors() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.validation_errors_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
PlaceBlockResponse::_internal_mutable_validation_errors() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.validation_errors_;
}

// repeated .blokus.Position suggested_positions = 8;
inline int PlaceBlockResponse::_internal_suggested_positions_size() const {
  return _internal_suggested_positions().size();
}
inline int PlaceBlockResponse::suggested_positions_size() const {
  return _internal_suggested_positions_size();
}
inline ::blokus::Position* PlaceBlockResponse::mutable_suggested_positions(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.PlaceBlockResponse.suggested_positions)
  return _internal_mutable_suggested_positions()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::blokus::Position>* PlaceBlockResponse::mutable_suggested_positions()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.PlaceBlockResponse.suggested_positions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_suggested_positions();
}
inline const ::blokus::Position& PlaceBlockResponse::suggested_positions(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.PlaceBlockResponse.suggested_positions)
  return _internal_suggested_positions().Get(index);
}
inline ::blokus::Position* PlaceBlockResponse::add_suggested_positions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::blokus::Position* _add = _internal_mutable_suggested_positions()->Add();
  // @@protoc_insertion_point(field_add:blokus.PlaceBlockResponse.suggested_positions)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::blokus::Position>& PlaceBlockResponse::suggested_positions() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.PlaceBlockResponse.suggested_positions)
  return _internal_suggested_positions();
}
inline const ::google::protobuf::RepeatedPtrField<::blokus::Position>&
PlaceBlockResponse::_internal_suggested_positions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.suggested_positions_;
}
inline ::google::protobuf::RepeatedPtrField<::blokus::Position>*
PlaceBlockResponse::_internal_mutable_suggested_positions() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.suggested_positions_;
}

// bool turn_ended = 9;
inline void PlaceBlockResponse::clear_turn_ended() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.turn_ended_ = false;
}
inline bool PlaceBlockResponse::turn_ended() const {
  // @@protoc_insertion_point(field_get:blokus.PlaceBlockResponse.turn_ended)
  return _internal_turn_ended();
}
inline void PlaceBlockResponse::set_turn_ended(bool value) {
  _internal_set_turn_ended(value);
  // @@protoc_insertion_point(field_set:blokus.PlaceBlockResponse.turn_ended)
}
inline bool PlaceBlockResponse::_internal_turn_ended() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.turn_ended_;
}
inline void PlaceBlockResponse::_internal_set_turn_ended(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.turn_ended_ = value;
}

// .blokus.PlayerColor next_player = 10;
inline void PlaceBlockResponse::clear_next_player() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.next_player_ = 0;
}
inline ::blokus::PlayerColor PlaceBlockResponse::next_player() const {
  // @@protoc_insertion_point(field_get:blokus.PlaceBlockResponse.next_player)
  return _internal_next_player();
}
inline void PlaceBlockResponse::set_next_player(::blokus::PlayerColor value) {
  _internal_set_next_player(value);
  // @@protoc_insertion_point(field_set:blokus.PlaceBlockResponse.next_player)
}
inline ::blokus::PlayerColor PlaceBlockResponse::_internal_next_player() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::blokus::PlayerColor>(_impl_.next_player_);
}
inline void PlaceBlockResponse::_internal_set_next_player(::blokus::PlayerColor value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.next_player_ = value;
}

// bool game_ended = 11;
inline void PlaceBlockResponse::clear_game_ended() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.game_ended_ = false;
}
inline bool PlaceBlockResponse::game_ended() const {
  // @@protoc_insertion_point(field_get:blokus.PlaceBlockResponse.game_ended)
  return _internal_game_ended();
}
inline void PlaceBlockResponse::set_game_ended(bool value) {
  _internal_set_game_ended(value);
  // @@protoc_insertion_point(field_set:blokus.PlaceBlockResponse.game_ended)
}
inline bool PlaceBlockResponse::_internal_game_ended() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.game_ended_;
}
inline void PlaceBlockResponse::_internal_set_game_ended(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.game_ended_ = value;
}

// string move_id = 12;
inline void PlaceBlockResponse::clear_move_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.move_id_.ClearToEmpty();
}
inline const std::string& PlaceBlockResponse::move_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.PlaceBlockResponse.move_id)
  return _internal_move_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PlaceBlockResponse::set_move_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.move_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.PlaceBlockResponse.move_id)
}
inline std::string* PlaceBlockResponse::mutable_move_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_move_id();
  // @@protoc_insertion_point(field_mutable:blokus.PlaceBlockResponse.move_id)
  return _s;
}
inline const std::string& PlaceBlockResponse::_internal_move_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.move_id_.Get();
}
inline void PlaceBlockResponse::_internal_set_move_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.move_id_.Set(value, GetArena());
}
inline std::string* PlaceBlockResponse::_internal_mutable_move_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.move_id_.Mutable( GetArena());
}
inline std::string* PlaceBlockResponse::release_move_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.PlaceBlockResponse.move_id)
  return _impl_.move_id_.Release();
}
inline void PlaceBlockResponse::set_allocated_move_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.move_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.move_id_.IsDefault()) {
    _impl_.move_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.PlaceBlockResponse.move_id)
}

// int32 server_board_version = 13;
inline void PlaceBlockResponse::clear_server_board_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_board_version_ = 0;
}
inline ::int32_t PlaceBlockResponse::server_board_version() const {
  // @@protoc_insertion_point(field_get:blokus.PlaceBlockResponse.server_board_version)
  return _internal_server_board_version();
}
inline void PlaceBlockResponse::set_server_board_version(::int32_t value) {
  _internal_set_server_board_version(value);
  // @@protoc_insertion_point(field_set:blokus.PlaceBlockResponse.server_board_version)
}
inline ::int32_t PlaceBlockResponse::_internal_server_board_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.server_board_version_;
}
inline void PlaceBlockResponse::_internal_set_server_board_version(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_board_version_ = value;
}

// -------------------------------------------------------------------

// BlockPlacedNotification

// int32 room_id = 1;
inline void BlockPlacedNotification::clear_room_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_id_ = 0;
}
inline ::int32_t BlockPlacedNotification::room_id() const {
  // @@protoc_insertion_point(field_get:blokus.BlockPlacedNotification.room_id)
  return _internal_room_id();
}
inline void BlockPlacedNotification::set_room_id(::int32_t value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:blokus.BlockPlacedNotification.room_id)
}
inline ::int32_t BlockPlacedNotification::_internal_room_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.room_id_;
}
inline void BlockPlacedNotification::_internal_set_room_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_id_ = value;
}

// string player_username = 2;
inline void BlockPlacedNotification::clear_player_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_username_.ClearToEmpty();
}
inline const std::string& BlockPlacedNotification::player_username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.BlockPlacedNotification.player_username)
  return _internal_player_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BlockPlacedNotification::set_player_username(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.BlockPlacedNotification.player_username)
}
inline std::string* BlockPlacedNotification::mutable_player_username() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_player_username();
  // @@protoc_insertion_point(field_mutable:blokus.BlockPlacedNotification.player_username)
  return _s;
}
inline const std::string& BlockPlacedNotification::_internal_player_username() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.player_username_.Get();
}
inline void BlockPlacedNotification::_internal_set_player_username(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_username_.Set(value, GetArena());
}
inline std::string* BlockPlacedNotification::_internal_mutable_player_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.player_username_.Mutable( GetArena());
}
inline std::string* BlockPlacedNotification::release_player_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.BlockPlacedNotification.player_username)
  return _impl_.player_username_.Release();
}
inline void BlockPlacedNotification::set_allocated_player_username(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_username_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.player_username_.IsDefault()) {
    _impl_.player_username_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.BlockPlacedNotification.player_username)
}

// .blokus.PlayerColor player_color = 3;
inline void BlockPlacedNotification::clear_player_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_color_ = 0;
}
inline ::blokus::PlayerColor BlockPlacedNotification::player_color() const {
  // @@protoc_insertion_point(field_get:blokus.BlockPlacedNotification.player_color)
  return _internal_player_color();
}
inline void BlockPlacedNotification::set_player_color(::blokus::PlayerColor value) {
  _internal_set_player_color(value);
  // @@protoc_insertion_point(field_set:blokus.BlockPlacedNotification.player_color)
}
inline ::blokus::PlayerColor BlockPlacedNotification::_internal_player_color() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::blokus::PlayerColor>(_impl_.player_color_);
}
inline void BlockPlacedNotification::_internal_set_player_color(::blokus::PlayerColor value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_color_ = value;
}

// .blokus.BlockPlacement block_placement = 4;
inline bool BlockPlacedNotification::has_block_placement() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.block_placement_ != nullptr);
  return value;
}
inline const ::blokus::BlockPlacement& BlockPlacedNotification::_internal_block_placement() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::BlockPlacement* p = _impl_.block_placement_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::BlockPlacement&>(::blokus::_BlockPlacement_default_instance_);
}
inline const ::blokus::BlockPlacement& BlockPlacedNotification::block_placement() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.BlockPlacedNotification.block_placement)
  return _internal_block_placement();
}
inline void BlockPlacedNotification::unsafe_arena_set_allocated_block_placement(::blokus::BlockPlacement* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.block_placement_);
  }
  _impl_.block_placement_ = reinterpret_cast<::blokus::BlockPlacement*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.BlockPlacedNotification.block_placement)
}
inline ::blokus::BlockPlacement* BlockPlacedNotification::release_block_placement() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::BlockPlacement* released = _impl_.block_placement_;
  _impl_.block_placement_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::BlockPlacement* BlockPlacedNotification::unsafe_arena_release_block_placement() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.BlockPlacedNotification.block_placement)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::BlockPlacement* temp = _impl_.block_placement_;
  _impl_.block_placement_ = nullptr;
  return temp;
}
inline ::blokus::BlockPlacement* BlockPlacedNotification::_internal_mutable_block_placement() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.block_placement_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::BlockPlacement>(GetArena());
    _impl_.block_placement_ = reinterpret_cast<::blokus::BlockPlacement*>(p);
  }
  return _impl_.block_placement_;
}
inline ::blokus::BlockPlacement* BlockPlacedNotification::mutable_block_placement() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::blokus::BlockPlacement* _msg = _internal_mutable_block_placement();
  // @@protoc_insertion_point(field_mutable:blokus.BlockPlacedNotification.block_placement)
  return _msg;
}
inline void BlockPlacedNotification::set_allocated_block_placement(::blokus::BlockPlacement* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.block_placement_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.block_placement_ = reinterpret_cast<::blokus::BlockPlacement*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.BlockPlacedNotification.block_placement)
}

// int32 score_gained = 5;
inline void BlockPlacedNotification::clear_score_gained() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.score_gained_ = 0;
}
inline ::int32_t BlockPlacedNotification::score_gained() const {
  // @@protoc_insertion_point(field_get:blokus.BlockPlacedNotification.score_gained)
  return _internal_score_gained();
}
inline void BlockPlacedNotification::set_score_gained(::int32_t value) {
  _internal_set_score_gained(value);
  // @@protoc_insertion_point(field_set:blokus.BlockPlacedNotification.score_gained)
}
inline ::int32_t BlockPlacedNotification::_internal_score_gained() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.score_gained_;
}
inline void BlockPlacedNotification::_internal_set_score_gained(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.score_gained_ = value;
}

// int32 new_total_score = 6;
inline void BlockPlacedNotification::clear_new_total_score() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_total_score_ = 0;
}
inline ::int32_t BlockPlacedNotification::new_total_score() const {
  // @@protoc_insertion_point(field_get:blokus.BlockPlacedNotification.new_total_score)
  return _internal_new_total_score();
}
inline void BlockPlacedNotification::set_new_total_score(::int32_t value) {
  _internal_set_new_total_score(value);
  // @@protoc_insertion_point(field_set:blokus.BlockPlacedNotification.new_total_score)
}
inline ::int32_t BlockPlacedNotification::_internal_new_total_score() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.new_total_score_;
}
inline void BlockPlacedNotification::_internal_set_new_total_score(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_total_score_ = value;
}

// int32 remaining_blocks = 7;
inline void BlockPlacedNotification::clear_remaining_blocks() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.remaining_blocks_ = 0;
}
inline ::int32_t BlockPlacedNotification::remaining_blocks() const {
  // @@protoc_insertion_point(field_get:blokus.BlockPlacedNotification.remaining_blocks)
  return _internal_remaining_blocks();
}
inline void BlockPlacedNotification::set_remaining_blocks(::int32_t value) {
  _internal_set_remaining_blocks(value);
  // @@protoc_insertion_point(field_set:blokus.BlockPlacedNotification.remaining_blocks)
}
inline ::int32_t BlockPlacedNotification::_internal_remaining_blocks() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.remaining_blocks_;
}
inline void BlockPlacedNotification::_internal_set_remaining_blocks(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.remaining_blocks_ = value;
}

// .blokus.BoardState updated_board = 8;
inline bool BlockPlacedNotification::has_updated_board() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.updated_board_ != nullptr);
  return value;
}
inline const ::blokus::BoardState& BlockPlacedNotification::_internal_updated_board() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::BoardState* p = _impl_.updated_board_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::BoardState&>(::blokus::_BoardState_default_instance_);
}
inline const ::blokus::BoardState& BlockPlacedNotification::updated_board() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.BlockPlacedNotification.updated_board)
  return _internal_updated_board();
}
inline void BlockPlacedNotification::unsafe_arena_set_allocated_updated_board(::blokus::BoardState* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.updated_board_);
  }
  _impl_.updated_board_ = reinterpret_cast<::blokus::BoardState*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.BlockPlacedNotification.updated_board)
}
inline ::blokus::BoardState* BlockPlacedNotification::release_updated_board() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::blokus::BoardState* released = _impl_.updated_board_;
  _impl_.updated_board_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::BoardState* BlockPlacedNotification::unsafe_arena_release_updated_board() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.BlockPlacedNotification.updated_board)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::blokus::BoardState* temp = _impl_.updated_board_;
  _impl_.updated_board_ = nullptr;
  return temp;
}
inline ::blokus::BoardState* BlockPlacedNotification::_internal_mutable_updated_board() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.updated_board_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::BoardState>(GetArena());
    _impl_.updated_board_ = reinterpret_cast<::blokus::BoardState*>(p);
  }
  return _impl_.updated_board_;
}
inline ::blokus::BoardState* BlockPlacedNotification::mutable_updated_board() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::blokus::BoardState* _msg = _internal_mutable_updated_board();
  // @@protoc_insertion_point(field_mutable:blokus.BlockPlacedNotification.updated_board)
  return _msg;
}
inline void BlockPlacedNotification::set_allocated_updated_board(::blokus::BoardState* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.updated_board_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.updated_board_ = reinterpret_cast<::blokus::BoardState*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.BlockPlacedNotification.updated_board)
}

// bool turn_ended = 9;
inline void BlockPlacedNotification::clear_turn_ended() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.turn_ended_ = false;
}
inline bool BlockPlacedNotification::turn_ended() const {
  // @@protoc_insertion_point(field_get:blokus.BlockPlacedNotification.turn_ended)
  return _internal_turn_ended();
}
inline void BlockPlacedNotification::set_turn_ended(bool value) {
  _internal_set_turn_ended(value);
  // @@protoc_insertion_point(field_set:blokus.BlockPlacedNotification.turn_ended)
}
inline bool BlockPlacedNotification::_internal_turn_ended() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.turn_ended_;
}
inline void BlockPlacedNotification::_internal_set_turn_ended(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.turn_ended_ = value;
}

// .blokus.PlayerColor next_player = 10;
inline void BlockPlacedNotification::clear_next_player() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.next_player_ = 0;
}
inline ::blokus::PlayerColor BlockPlacedNotification::next_player() const {
  // @@protoc_insertion_point(field_get:blokus.BlockPlacedNotification.next_player)
  return _internal_next_player();
}
inline void BlockPlacedNotification::set_next_player(::blokus::PlayerColor value) {
  _internal_set_next_player(value);
  // @@protoc_insertion_point(field_set:blokus.BlockPlacedNotification.next_player)
}
inline ::blokus::PlayerColor BlockPlacedNotification::_internal_next_player() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::blokus::PlayerColor>(_impl_.next_player_);
}
inline void BlockPlacedNotification::_internal_set_next_player(::blokus::PlayerColor value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.next_player_ = value;
}

// .google.protobuf.Timestamp placed_at = 11;
inline bool BlockPlacedNotification::has_placed_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.placed_at_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& BlockPlacedNotification::_internal_placed_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.placed_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& BlockPlacedNotification::placed_at() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.BlockPlacedNotification.placed_at)
  return _internal_placed_at();
}
inline void BlockPlacedNotification::unsafe_arena_set_allocated_placed_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.placed_at_);
  }
  _impl_.placed_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.BlockPlacedNotification.placed_at)
}
inline ::google::protobuf::Timestamp* BlockPlacedNotification::release_placed_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Timestamp* released = _impl_.placed_at_;
  _impl_.placed_at_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* BlockPlacedNotification::unsafe_arena_release_placed_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.BlockPlacedNotification.placed_at)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Timestamp* temp = _impl_.placed_at_;
  _impl_.placed_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* BlockPlacedNotification::_internal_mutable_placed_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.placed_at_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.placed_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.placed_at_;
}
inline ::google::protobuf::Timestamp* BlockPlacedNotification::mutable_placed_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_placed_at();
  // @@protoc_insertion_point(field_mutable:blokus.BlockPlacedNotification.placed_at)
  return _msg;
}
inline void BlockPlacedNotification::set_allocated_placed_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.placed_at_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.placed_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.BlockPlacedNotification.placed_at)
}

// bool perfect_game = 12;
inline void BlockPlacedNotification::clear_perfect_game() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.perfect_game_ = false;
}
inline bool BlockPlacedNotification::perfect_game() const {
  // @@protoc_insertion_point(field_get:blokus.BlockPlacedNotification.perfect_game)
  return _internal_perfect_game();
}
inline void BlockPlacedNotification::set_perfect_game(bool value) {
  _internal_set_perfect_game(value);
  // @@protoc_insertion_point(field_set:blokus.BlockPlacedNotification.perfect_game)
}
inline bool BlockPlacedNotification::_internal_perfect_game() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.perfect_game_;
}
inline void BlockPlacedNotification::_internal_set_perfect_game(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.perfect_game_ = value;
}

// bool game_winning_move = 13;
inline void BlockPlacedNotification::clear_game_winning_move() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.game_winning_move_ = false;
}
inline bool BlockPlacedNotification::game_winning_move() const {
  // @@protoc_insertion_point(field_get:blokus.BlockPlacedNotification.game_winning_move)
  return _internal_game_winning_move();
}
inline void BlockPlacedNotification::set_game_winning_move(bool value) {
  _internal_set_game_winning_move(value);
  // @@protoc_insertion_point(field_set:blokus.BlockPlacedNotification.game_winning_move)
}
inline bool BlockPlacedNotification::_internal_game_winning_move() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.game_winning_move_;
}
inline void BlockPlacedNotification::_internal_set_game_winning_move(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.game_winning_move_ = value;
}

// repeated string triggered_achievements = 14;
inline int BlockPlacedNotification::_internal_triggered_achievements_size() const {
  return _internal_triggered_achievements().size();
}
inline int BlockPlacedNotification::triggered_achievements_size() const {
  return _internal_triggered_achievements_size();
}
inline void BlockPlacedNotification::clear_triggered_achievements() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.triggered_achievements_.Clear();
}
inline std::string* BlockPlacedNotification::add_triggered_achievements() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_triggered_achievements()->Add();
  // @@protoc_insertion_point(field_add_mutable:blokus.BlockPlacedNotification.triggered_achievements)
  return _s;
}
inline const std::string& BlockPlacedNotification::triggered_achievements(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.BlockPlacedNotification.triggered_achievements)
  return _internal_triggered_achievements().Get(index);
}
inline std::string* BlockPlacedNotification::mutable_triggered_achievements(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.BlockPlacedNotification.triggered_achievements)
  return _internal_mutable_triggered_achievements()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void BlockPlacedNotification::set_triggered_achievements(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_triggered_achievements()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:blokus.BlockPlacedNotification.triggered_achievements)
}
template <typename Arg_, typename... Args_>
inline void BlockPlacedNotification::add_triggered_achievements(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_triggered_achievements(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:blokus.BlockPlacedNotification.triggered_achievements)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
BlockPlacedNotification::triggered_achievements() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.BlockPlacedNotification.triggered_achievements)
  return _internal_triggered_achievements();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
BlockPlacedNotification::mutable_triggered_achievements() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.BlockPlacedNotification.triggered_achievements)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_triggered_achievements();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
BlockPlacedNotification::_internal_triggered_achievements() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.triggered_achievements_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
BlockPlacedNotification::_internal_mutable_triggered_achievements() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.triggered_achievements_;
}

// -------------------------------------------------------------------

// SkipTurnRequest

// int32 room_id = 1;
inline void SkipTurnRequest::clear_room_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_id_ = 0;
}
inline ::int32_t SkipTurnRequest::room_id() const {
  // @@protoc_insertion_point(field_get:blokus.SkipTurnRequest.room_id)
  return _internal_room_id();
}
inline void SkipTurnRequest::set_room_id(::int32_t value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:blokus.SkipTurnRequest.room_id)
}
inline ::int32_t SkipTurnRequest::_internal_room_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.room_id_;
}
inline void SkipTurnRequest::_internal_set_room_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_id_ = value;
}

// string reason = 2;
inline void SkipTurnRequest::clear_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.ClearToEmpty();
}
inline const std::string& SkipTurnRequest::reason() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.SkipTurnRequest.reason)
  return _internal_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SkipTurnRequest::set_reason(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.SkipTurnRequest.reason)
}
inline std::string* SkipTurnRequest::mutable_reason() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:blokus.SkipTurnRequest.reason)
  return _s;
}
inline const std::string& SkipTurnRequest::_internal_reason() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reason_.Get();
}
inline void SkipTurnRequest::_internal_set_reason(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.Set(value, GetArena());
}
inline std::string* SkipTurnRequest::_internal_mutable_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.reason_.Mutable( GetArena());
}
inline std::string* SkipTurnRequest::release_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.SkipTurnRequest.reason)
  return _impl_.reason_.Release();
}
inline void SkipTurnRequest::set_allocated_reason(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.reason_.IsDefault()) {
    _impl_.reason_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.SkipTurnRequest.reason)
}

// bool forced = 3;
inline void SkipTurnRequest::clear_forced() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.forced_ = false;
}
inline bool SkipTurnRequest::forced() const {
  // @@protoc_insertion_point(field_get:blokus.SkipTurnRequest.forced)
  return _internal_forced();
}
inline void SkipTurnRequest::set_forced(bool value) {
  _internal_set_forced(value);
  // @@protoc_insertion_point(field_set:blokus.SkipTurnRequest.forced)
}
inline bool SkipTurnRequest::_internal_forced() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.forced_;
}
inline void SkipTurnRequest::_internal_set_forced(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.forced_ = value;
}

// -------------------------------------------------------------------

// SkipTurnResponse

// .blokus.Result result = 1;
inline bool SkipTurnResponse::has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.result_ != nullptr);
  return value;
}
inline const ::blokus::Result& SkipTurnResponse::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::Result* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::Result&>(::blokus::_Result_default_instance_);
}
inline const ::blokus::Result& SkipTurnResponse::result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.SkipTurnResponse.result)
  return _internal_result();
}
inline void SkipTurnResponse::unsafe_arena_set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.SkipTurnResponse.result)
}
inline ::blokus::Result* SkipTurnResponse::release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* released = _impl_.result_;
  _impl_.result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::Result* SkipTurnResponse::unsafe_arena_release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.SkipTurnResponse.result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::blokus::Result* SkipTurnResponse::_internal_mutable_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::Result>(GetArena());
    _impl_.result_ = reinterpret_cast<::blokus::Result*>(p);
  }
  return _impl_.result_;
}
inline ::blokus::Result* SkipTurnResponse::mutable_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::blokus::Result* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:blokus.SkipTurnResponse.result)
  return _msg;
}
inline void SkipTurnResponse::set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.SkipTurnResponse.result)
}

// string message = 2;
inline void SkipTurnResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& SkipTurnResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.SkipTurnResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SkipTurnResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.SkipTurnResponse.message)
}
inline std::string* SkipTurnResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:blokus.SkipTurnResponse.message)
  return _s;
}
inline const std::string& SkipTurnResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void SkipTurnResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* SkipTurnResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* SkipTurnResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.SkipTurnResponse.message)
  return _impl_.message_.Release();
}
inline void SkipTurnResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.SkipTurnResponse.message)
}

// .blokus.PlayerColor next_player = 3;
inline void SkipTurnResponse::clear_next_player() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.next_player_ = 0;
}
inline ::blokus::PlayerColor SkipTurnResponse::next_player() const {
  // @@protoc_insertion_point(field_get:blokus.SkipTurnResponse.next_player)
  return _internal_next_player();
}
inline void SkipTurnResponse::set_next_player(::blokus::PlayerColor value) {
  _internal_set_next_player(value);
  // @@protoc_insertion_point(field_set:blokus.SkipTurnResponse.next_player)
}
inline ::blokus::PlayerColor SkipTurnResponse::_internal_next_player() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::blokus::PlayerColor>(_impl_.next_player_);
}
inline void SkipTurnResponse::_internal_set_next_player(::blokus::PlayerColor value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.next_player_ = value;
}

// bool game_ended = 4;
inline void SkipTurnResponse::clear_game_ended() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.game_ended_ = false;
}
inline bool SkipTurnResponse::game_ended() const {
  // @@protoc_insertion_point(field_get:blokus.SkipTurnResponse.game_ended)
  return _internal_game_ended();
}
inline void SkipTurnResponse::set_game_ended(bool value) {
  _internal_set_game_ended(value);
  // @@protoc_insertion_point(field_set:blokus.SkipTurnResponse.game_ended)
}
inline bool SkipTurnResponse::_internal_game_ended() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.game_ended_;
}
inline void SkipTurnResponse::_internal_set_game_ended(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.game_ended_ = value;
}

// -------------------------------------------------------------------

// UndoMoveRequest

// int32 room_id = 1;
inline void UndoMoveRequest::clear_room_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_id_ = 0;
}
inline ::int32_t UndoMoveRequest::room_id() const {
  // @@protoc_insertion_point(field_get:blokus.UndoMoveRequest.room_id)
  return _internal_room_id();
}
inline void UndoMoveRequest::set_room_id(::int32_t value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:blokus.UndoMoveRequest.room_id)
}
inline ::int32_t UndoMoveRequest::_internal_room_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.room_id_;
}
inline void UndoMoveRequest::_internal_set_room_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_id_ = value;
}

// int32 moves_to_undo = 2;
inline void UndoMoveRequest::clear_moves_to_undo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.moves_to_undo_ = 0;
}
inline ::int32_t UndoMoveRequest::moves_to_undo() const {
  // @@protoc_insertion_point(field_get:blokus.UndoMoveRequest.moves_to_undo)
  return _internal_moves_to_undo();
}
inline void UndoMoveRequest::set_moves_to_undo(::int32_t value) {
  _internal_set_moves_to_undo(value);
  // @@protoc_insertion_point(field_set:blokus.UndoMoveRequest.moves_to_undo)
}
inline ::int32_t UndoMoveRequest::_internal_moves_to_undo() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.moves_to_undo_;
}
inline void UndoMoveRequest::_internal_set_moves_to_undo(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.moves_to_undo_ = value;
}

// string reason = 3;
inline void UndoMoveRequest::clear_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.ClearToEmpty();
}
inline const std::string& UndoMoveRequest::reason() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.UndoMoveRequest.reason)
  return _internal_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UndoMoveRequest::set_reason(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.UndoMoveRequest.reason)
}
inline std::string* UndoMoveRequest::mutable_reason() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:blokus.UndoMoveRequest.reason)
  return _s;
}
inline const std::string& UndoMoveRequest::_internal_reason() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reason_.Get();
}
inline void UndoMoveRequest::_internal_set_reason(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.Set(value, GetArena());
}
inline std::string* UndoMoveRequest::_internal_mutable_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.reason_.Mutable( GetArena());
}
inline std::string* UndoMoveRequest::release_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.UndoMoveRequest.reason)
  return _impl_.reason_.Release();
}
inline void UndoMoveRequest::set_allocated_reason(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.reason_.IsDefault()) {
    _impl_.reason_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.UndoMoveRequest.reason)
}

// -------------------------------------------------------------------

// UndoMoveResponse

// .blokus.Result result = 1;
inline bool UndoMoveResponse::has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.result_ != nullptr);
  return value;
}
inline const ::blokus::Result& UndoMoveResponse::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::Result* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::Result&>(::blokus::_Result_default_instance_);
}
inline const ::blokus::Result& UndoMoveResponse::result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.UndoMoveResponse.result)
  return _internal_result();
}
inline void UndoMoveResponse::unsafe_arena_set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.UndoMoveResponse.result)
}
inline ::blokus::Result* UndoMoveResponse::release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* released = _impl_.result_;
  _impl_.result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::Result* UndoMoveResponse::unsafe_arena_release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.UndoMoveResponse.result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::blokus::Result* UndoMoveResponse::_internal_mutable_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::Result>(GetArena());
    _impl_.result_ = reinterpret_cast<::blokus::Result*>(p);
  }
  return _impl_.result_;
}
inline ::blokus::Result* UndoMoveResponse::mutable_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::blokus::Result* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:blokus.UndoMoveResponse.result)
  return _msg;
}
inline void UndoMoveResponse::set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.UndoMoveResponse.result)
}

// .blokus.BoardState reverted_board = 2;
inline bool UndoMoveResponse::has_reverted_board() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.reverted_board_ != nullptr);
  return value;
}
inline const ::blokus::BoardState& UndoMoveResponse::_internal_reverted_board() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::BoardState* p = _impl_.reverted_board_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::BoardState&>(::blokus::_BoardState_default_instance_);
}
inline const ::blokus::BoardState& UndoMoveResponse::reverted_board() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.UndoMoveResponse.reverted_board)
  return _internal_reverted_board();
}
inline void UndoMoveResponse::unsafe_arena_set_allocated_reverted_board(::blokus::BoardState* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.reverted_board_);
  }
  _impl_.reverted_board_ = reinterpret_cast<::blokus::BoardState*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.UndoMoveResponse.reverted_board)
}
inline ::blokus::BoardState* UndoMoveResponse::release_reverted_board() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::blokus::BoardState* released = _impl_.reverted_board_;
  _impl_.reverted_board_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::BoardState* UndoMoveResponse::unsafe_arena_release_reverted_board() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.UndoMoveResponse.reverted_board)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::blokus::BoardState* temp = _impl_.reverted_board_;
  _impl_.reverted_board_ = nullptr;
  return temp;
}
inline ::blokus::BoardState* UndoMoveResponse::_internal_mutable_reverted_board() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.reverted_board_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::BoardState>(GetArena());
    _impl_.reverted_board_ = reinterpret_cast<::blokus::BoardState*>(p);
  }
  return _impl_.reverted_board_;
}
inline ::blokus::BoardState* UndoMoveResponse::mutable_reverted_board() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::blokus::BoardState* _msg = _internal_mutable_reverted_board();
  // @@protoc_insertion_point(field_mutable:blokus.UndoMoveResponse.reverted_board)
  return _msg;
}
inline void UndoMoveResponse::set_allocated_reverted_board(::blokus::BoardState* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.reverted_board_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.reverted_board_ = reinterpret_cast<::blokus::BoardState*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.UndoMoveResponse.reverted_board)
}

// .blokus.PlayerColor current_player = 3;
inline void UndoMoveResponse::clear_current_player() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_player_ = 0;
}
inline ::blokus::PlayerColor UndoMoveResponse::current_player() const {
  // @@protoc_insertion_point(field_get:blokus.UndoMoveResponse.current_player)
  return _internal_current_player();
}
inline void UndoMoveResponse::set_current_player(::blokus::PlayerColor value) {
  _internal_set_current_player(value);
  // @@protoc_insertion_point(field_set:blokus.UndoMoveResponse.current_player)
}
inline ::blokus::PlayerColor UndoMoveResponse::_internal_current_player() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::blokus::PlayerColor>(_impl_.current_player_);
}
inline void UndoMoveResponse::_internal_set_current_player(::blokus::PlayerColor value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_player_ = value;
}

// int32 undo_count_remaining = 4;
inline void UndoMoveResponse::clear_undo_count_remaining() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.undo_count_remaining_ = 0;
}
inline ::int32_t UndoMoveResponse::undo_count_remaining() const {
  // @@protoc_insertion_point(field_get:blokus.UndoMoveResponse.undo_count_remaining)
  return _internal_undo_count_remaining();
}
inline void UndoMoveResponse::set_undo_count_remaining(::int32_t value) {
  _internal_set_undo_count_remaining(value);
  // @@protoc_insertion_point(field_set:blokus.UndoMoveResponse.undo_count_remaining)
}
inline ::int32_t UndoMoveResponse::_internal_undo_count_remaining() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.undo_count_remaining_;
}
inline void UndoMoveResponse::_internal_set_undo_count_remaining(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.undo_count_remaining_ = value;
}

// string message = 5;
inline void UndoMoveResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& UndoMoveResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.UndoMoveResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UndoMoveResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.UndoMoveResponse.message)
}
inline std::string* UndoMoveResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:blokus.UndoMoveResponse.message)
  return _s;
}
inline const std::string& UndoMoveResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void UndoMoveResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* UndoMoveResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* UndoMoveResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.UndoMoveResponse.message)
  return _impl_.message_.Release();
}
inline void UndoMoveResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.UndoMoveResponse.message)
}

// -------------------------------------------------------------------

// GetGameStateRequest

// int32 room_id = 1;
inline void GetGameStateRequest::clear_room_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_id_ = 0;
}
inline ::int32_t GetGameStateRequest::room_id() const {
  // @@protoc_insertion_point(field_get:blokus.GetGameStateRequest.room_id)
  return _internal_room_id();
}
inline void GetGameStateRequest::set_room_id(::int32_t value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:blokus.GetGameStateRequest.room_id)
}
inline ::int32_t GetGameStateRequest::_internal_room_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.room_id_;
}
inline void GetGameStateRequest::_internal_set_room_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_id_ = value;
}

// bool include_board = 2;
inline void GetGameStateRequest::clear_include_board() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.include_board_ = false;
}
inline bool GetGameStateRequest::include_board() const {
  // @@protoc_insertion_point(field_get:blokus.GetGameStateRequest.include_board)
  return _internal_include_board();
}
inline void GetGameStateRequest::set_include_board(bool value) {
  _internal_set_include_board(value);
  // @@protoc_insertion_point(field_set:blokus.GetGameStateRequest.include_board)
}
inline bool GetGameStateRequest::_internal_include_board() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.include_board_;
}
inline void GetGameStateRequest::_internal_set_include_board(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.include_board_ = value;
}

// bool include_player_details = 3;
inline void GetGameStateRequest::clear_include_player_details() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.include_player_details_ = false;
}
inline bool GetGameStateRequest::include_player_details() const {
  // @@protoc_insertion_point(field_get:blokus.GetGameStateRequest.include_player_details)
  return _internal_include_player_details();
}
inline void GetGameStateRequest::set_include_player_details(bool value) {
  _internal_set_include_player_details(value);
  // @@protoc_insertion_point(field_set:blokus.GetGameStateRequest.include_player_details)
}
inline bool GetGameStateRequest::_internal_include_player_details() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.include_player_details_;
}
inline void GetGameStateRequest::_internal_set_include_player_details(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.include_player_details_ = value;
}

// bool include_move_history = 4;
inline void GetGameStateRequest::clear_include_move_history() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.include_move_history_ = false;
}
inline bool GetGameStateRequest::include_move_history() const {
  // @@protoc_insertion_point(field_get:blokus.GetGameStateRequest.include_move_history)
  return _internal_include_move_history();
}
inline void GetGameStateRequest::set_include_move_history(bool value) {
  _internal_set_include_move_history(value);
  // @@protoc_insertion_point(field_set:blokus.GetGameStateRequest.include_move_history)
}
inline bool GetGameStateRequest::_internal_include_move_history() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.include_move_history_;
}
inline void GetGameStateRequest::_internal_set_include_move_history(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.include_move_history_ = value;
}

// -------------------------------------------------------------------

// GameStateResponse

// .blokus.Result result = 1;
inline bool GameStateResponse::has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.result_ != nullptr);
  return value;
}
inline const ::blokus::Result& GameStateResponse::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::Result* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::Result&>(::blokus::_Result_default_instance_);
}
inline const ::blokus::Result& GameStateResponse::result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.GameStateResponse.result)
  return _internal_result();
}
inline void GameStateResponse::unsafe_arena_set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.GameStateResponse.result)
}
inline ::blokus::Result* GameStateResponse::release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* released = _impl_.result_;
  _impl_.result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::Result* GameStateResponse::unsafe_arena_release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.GameStateResponse.result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::blokus::Result* GameStateResponse::_internal_mutable_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::Result>(GetArena());
    _impl_.result_ = reinterpret_cast<::blokus::Result*>(p);
  }
  return _impl_.result_;
}
inline ::blokus::Result* GameStateResponse::mutable_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::blokus::Result* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:blokus.GameStateResponse.result)
  return _msg;
}
inline void GameStateResponse::set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.GameStateResponse.result)
}

// .blokus.GameState game_state = 2;
inline void GameStateResponse::clear_game_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.game_state_ = 0;
}
inline ::blokus::GameState GameStateResponse::game_state() const {
  // @@protoc_insertion_point(field_get:blokus.GameStateResponse.game_state)
  return _internal_game_state();
}
inline void GameStateResponse::set_game_state(::blokus::GameState value) {
  _internal_set_game_state(value);
  // @@protoc_insertion_point(field_set:blokus.GameStateResponse.game_state)
}
inline ::blokus::GameState GameStateResponse::_internal_game_state() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::blokus::GameState>(_impl_.game_state_);
}
inline void GameStateResponse::_internal_set_game_state(::blokus::GameState value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.game_state_ = value;
}

// .blokus.PlayerColor current_player = 3;
inline void GameStateResponse::clear_current_player() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_player_ = 0;
}
inline ::blokus::PlayerColor GameStateResponse::current_player() const {
  // @@protoc_insertion_point(field_get:blokus.GameStateResponse.current_player)
  return _internal_current_player();
}
inline void GameStateResponse::set_current_player(::blokus::PlayerColor value) {
  _internal_set_current_player(value);
  // @@protoc_insertion_point(field_set:blokus.GameStateResponse.current_player)
}
inline ::blokus::PlayerColor GameStateResponse::_internal_current_player() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::blokus::PlayerColor>(_impl_.current_player_);
}
inline void GameStateResponse::_internal_set_current_player(::blokus::PlayerColor value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_player_ = value;
}

// int32 turn_number = 4;
inline void GameStateResponse::clear_turn_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.turn_number_ = 0;
}
inline ::int32_t GameStateResponse::turn_number() const {
  // @@protoc_insertion_point(field_get:blokus.GameStateResponse.turn_number)
  return _internal_turn_number();
}
inline void GameStateResponse::set_turn_number(::int32_t value) {
  _internal_set_turn_number(value);
  // @@protoc_insertion_point(field_set:blokus.GameStateResponse.turn_number)
}
inline ::int32_t GameStateResponse::_internal_turn_number() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.turn_number_;
}
inline void GameStateResponse::_internal_set_turn_number(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.turn_number_ = value;
}

// int32 remaining_time_seconds = 5;
inline void GameStateResponse::clear_remaining_time_seconds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.remaining_time_seconds_ = 0;
}
inline ::int32_t GameStateResponse::remaining_time_seconds() const {
  // @@protoc_insertion_point(field_get:blokus.GameStateResponse.remaining_time_seconds)
  return _internal_remaining_time_seconds();
}
inline void GameStateResponse::set_remaining_time_seconds(::int32_t value) {
  _internal_set_remaining_time_seconds(value);
  // @@protoc_insertion_point(field_set:blokus.GameStateResponse.remaining_time_seconds)
}
inline ::int32_t GameStateResponse::_internal_remaining_time_seconds() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.remaining_time_seconds_;
}
inline void GameStateResponse::_internal_set_remaining_time_seconds(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.remaining_time_seconds_ = value;
}

// repeated .blokus.PlayerSlot players = 6;
inline int GameStateResponse::_internal_players_size() const {
  return _internal_players().size();
}
inline int GameStateResponse::players_size() const {
  return _internal_players_size();
}
inline ::blokus::PlayerSlot* GameStateResponse::mutable_players(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.GameStateResponse.players)
  return _internal_mutable_players()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::blokus::PlayerSlot>* GameStateResponse::mutable_players()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.GameStateResponse.players)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_players();
}
inline const ::blokus::PlayerSlot& GameStateResponse::players(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.GameStateResponse.players)
  return _internal_players().Get(index);
}
inline ::blokus::PlayerSlot* GameStateResponse::add_players() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::blokus::PlayerSlot* _add = _internal_mutable_players()->Add();
  // @@protoc_insertion_point(field_add:blokus.GameStateResponse.players)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::blokus::PlayerSlot>& GameStateResponse::players() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.GameStateResponse.players)
  return _internal_players();
}
inline const ::google::protobuf::RepeatedPtrField<::blokus::PlayerSlot>&
GameStateResponse::_internal_players() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.players_;
}
inline ::google::protobuf::RepeatedPtrField<::blokus::PlayerSlot>*
GameStateResponse::_internal_mutable_players() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.players_;
}

// .blokus.BoardState board_state = 7;
inline bool GameStateResponse::has_board_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.board_state_ != nullptr);
  return value;
}
inline const ::blokus::BoardState& GameStateResponse::_internal_board_state() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::BoardState* p = _impl_.board_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::BoardState&>(::blokus::_BoardState_default_instance_);
}
inline const ::blokus::BoardState& GameStateResponse::board_state() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.GameStateResponse.board_state)
  return _internal_board_state();
}
inline void GameStateResponse::unsafe_arena_set_allocated_board_state(::blokus::BoardState* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.board_state_);
  }
  _impl_.board_state_ = reinterpret_cast<::blokus::BoardState*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.GameStateResponse.board_state)
}
inline ::blokus::BoardState* GameStateResponse::release_board_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::blokus::BoardState* released = _impl_.board_state_;
  _impl_.board_state_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::BoardState* GameStateResponse::unsafe_arena_release_board_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.GameStateResponse.board_state)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::blokus::BoardState* temp = _impl_.board_state_;
  _impl_.board_state_ = nullptr;
  return temp;
}
inline ::blokus::BoardState* GameStateResponse::_internal_mutable_board_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.board_state_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::BoardState>(GetArena());
    _impl_.board_state_ = reinterpret_cast<::blokus::BoardState*>(p);
  }
  return _impl_.board_state_;
}
inline ::blokus::BoardState* GameStateResponse::mutable_board_state() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::blokus::BoardState* _msg = _internal_mutable_board_state();
  // @@protoc_insertion_point(field_mutable:blokus.GameStateResponse.board_state)
  return _msg;
}
inline void GameStateResponse::set_allocated_board_state(::blokus::BoardState* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.board_state_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.board_state_ = reinterpret_cast<::blokus::BoardState*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.GameStateResponse.board_state)
}

// repeated .blokus.GameMove move_history = 8;
inline int GameStateResponse::_internal_move_history_size() const {
  return _internal_move_history().size();
}
inline int GameStateResponse::move_history_size() const {
  return _internal_move_history_size();
}
inline void GameStateResponse::clear_move_history() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.move_history_.Clear();
}
inline ::blokus::GameMove* GameStateResponse::mutable_move_history(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.GameStateResponse.move_history)
  return _internal_mutable_move_history()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::blokus::GameMove>* GameStateResponse::mutable_move_history()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.GameStateResponse.move_history)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_move_history();
}
inline const ::blokus::GameMove& GameStateResponse::move_history(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.GameStateResponse.move_history)
  return _internal_move_history().Get(index);
}
inline ::blokus::GameMove* GameStateResponse::add_move_history() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::blokus::GameMove* _add = _internal_mutable_move_history()->Add();
  // @@protoc_insertion_point(field_add:blokus.GameStateResponse.move_history)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::blokus::GameMove>& GameStateResponse::move_history() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.GameStateResponse.move_history)
  return _internal_move_history();
}
inline const ::google::protobuf::RepeatedPtrField<::blokus::GameMove>&
GameStateResponse::_internal_move_history() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.move_history_;
}
inline ::google::protobuf::RepeatedPtrField<::blokus::GameMove>*
GameStateResponse::_internal_mutable_move_history() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.move_history_;
}

// .google.protobuf.Timestamp game_started_at = 9;
inline bool GameStateResponse::has_game_started_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.game_started_at_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& GameStateResponse::_internal_game_started_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.game_started_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& GameStateResponse::game_started_at() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.GameStateResponse.game_started_at)
  return _internal_game_started_at();
}
inline void GameStateResponse::unsafe_arena_set_allocated_game_started_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.game_started_at_);
  }
  _impl_.game_started_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.GameStateResponse.game_started_at)
}
inline ::google::protobuf::Timestamp* GameStateResponse::release_game_started_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Timestamp* released = _impl_.game_started_at_;
  _impl_.game_started_at_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* GameStateResponse::unsafe_arena_release_game_started_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.GameStateResponse.game_started_at)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Timestamp* temp = _impl_.game_started_at_;
  _impl_.game_started_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* GameStateResponse::_internal_mutable_game_started_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.game_started_at_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.game_started_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.game_started_at_;
}
inline ::google::protobuf::Timestamp* GameStateResponse::mutable_game_started_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_game_started_at();
  // @@protoc_insertion_point(field_mutable:blokus.GameStateResponse.game_started_at)
  return _msg;
}
inline void GameStateResponse::set_allocated_game_started_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.game_started_at_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.game_started_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.GameStateResponse.game_started_at)
}

// string game_id = 10;
inline void GameStateResponse::clear_game_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.game_id_.ClearToEmpty();
}
inline const std::string& GameStateResponse::game_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.GameStateResponse.game_id)
  return _internal_game_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GameStateResponse::set_game_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.game_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.GameStateResponse.game_id)
}
inline std::string* GameStateResponse::mutable_game_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_game_id();
  // @@protoc_insertion_point(field_mutable:blokus.GameStateResponse.game_id)
  return _s;
}
inline const std::string& GameStateResponse::_internal_game_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.game_id_.Get();
}
inline void GameStateResponse::_internal_set_game_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.game_id_.Set(value, GetArena());
}
inline std::string* GameStateResponse::_internal_mutable_game_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.game_id_.Mutable( GetArena());
}
inline std::string* GameStateResponse::release_game_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.GameStateResponse.game_id)
  return _impl_.game_id_.Release();
}
inline void GameStateResponse::set_allocated_game_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.game_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.game_id_.IsDefault()) {
    _impl_.game_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.GameStateResponse.game_id)
}

// string game_mode = 11;
inline void GameStateResponse::clear_game_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.game_mode_.ClearToEmpty();
}
inline const std::string& GameStateResponse::game_mode() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.GameStateResponse.game_mode)
  return _internal_game_mode();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GameStateResponse::set_game_mode(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.game_mode_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.GameStateResponse.game_mode)
}
inline std::string* GameStateResponse::mutable_game_mode() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_game_mode();
  // @@protoc_insertion_point(field_mutable:blokus.GameStateResponse.game_mode)
  return _s;
}
inline const std::string& GameStateResponse::_internal_game_mode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.game_mode_.Get();
}
inline void GameStateResponse::_internal_set_game_mode(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.game_mode_.Set(value, GetArena());
}
inline std::string* GameStateResponse::_internal_mutable_game_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.game_mode_.Mutable( GetArena());
}
inline std::string* GameStateResponse::release_game_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.GameStateResponse.game_mode)
  return _impl_.game_mode_.Release();
}
inline void GameStateResponse::set_allocated_game_mode(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.game_mode_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.game_mode_.IsDefault()) {
    _impl_.game_mode_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.GameStateResponse.game_mode)
}

// -------------------------------------------------------------------

// GameMove

// int32 move_number = 1;
inline void GameMove::clear_move_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.move_number_ = 0;
}
inline ::int32_t GameMove::move_number() const {
  // @@protoc_insertion_point(field_get:blokus.GameMove.move_number)
  return _internal_move_number();
}
inline void GameMove::set_move_number(::int32_t value) {
  _internal_set_move_number(value);
  // @@protoc_insertion_point(field_set:blokus.GameMove.move_number)
}
inline ::int32_t GameMove::_internal_move_number() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.move_number_;
}
inline void GameMove::_internal_set_move_number(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.move_number_ = value;
}

// string player_username = 2;
inline void GameMove::clear_player_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_username_.ClearToEmpty();
}
inline const std::string& GameMove::player_username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.GameMove.player_username)
  return _internal_player_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GameMove::set_player_username(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.GameMove.player_username)
}
inline std::string* GameMove::mutable_player_username() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_player_username();
  // @@protoc_insertion_point(field_mutable:blokus.GameMove.player_username)
  return _s;
}
inline const std::string& GameMove::_internal_player_username() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.player_username_.Get();
}
inline void GameMove::_internal_set_player_username(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_username_.Set(value, GetArena());
}
inline std::string* GameMove::_internal_mutable_player_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.player_username_.Mutable( GetArena());
}
inline std::string* GameMove::release_player_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.GameMove.player_username)
  return _impl_.player_username_.Release();
}
inline void GameMove::set_allocated_player_username(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_username_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.player_username_.IsDefault()) {
    _impl_.player_username_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.GameMove.player_username)
}

// .blokus.PlayerColor player_color = 3;
inline void GameMove::clear_player_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_color_ = 0;
}
inline ::blokus::PlayerColor GameMove::player_color() const {
  // @@protoc_insertion_point(field_get:blokus.GameMove.player_color)
  return _internal_player_color();
}
inline void GameMove::set_player_color(::blokus::PlayerColor value) {
  _internal_set_player_color(value);
  // @@protoc_insertion_point(field_set:blokus.GameMove.player_color)
}
inline ::blokus::PlayerColor GameMove::_internal_player_color() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::blokus::PlayerColor>(_impl_.player_color_);
}
inline void GameMove::_internal_set_player_color(::blokus::PlayerColor value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_color_ = value;
}

// .blokus.TurnAction action = 4;
inline void GameMove::clear_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_ = 0;
}
inline ::blokus::TurnAction GameMove::action() const {
  // @@protoc_insertion_point(field_get:blokus.GameMove.action)
  return _internal_action();
}
inline void GameMove::set_action(::blokus::TurnAction value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:blokus.GameMove.action)
}
inline ::blokus::TurnAction GameMove::_internal_action() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::blokus::TurnAction>(_impl_.action_);
}
inline void GameMove::_internal_set_action(::blokus::TurnAction value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_ = value;
}

// .blokus.BlockPlacement block_placement = 5;
inline bool GameMove::has_block_placement() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.block_placement_ != nullptr);
  return value;
}
inline const ::blokus::BlockPlacement& GameMove::_internal_block_placement() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::BlockPlacement* p = _impl_.block_placement_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::BlockPlacement&>(::blokus::_BlockPlacement_default_instance_);
}
inline const ::blokus::BlockPlacement& GameMove::block_placement() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.GameMove.block_placement)
  return _internal_block_placement();
}
inline void GameMove::unsafe_arena_set_allocated_block_placement(::blokus::BlockPlacement* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.block_placement_);
  }
  _impl_.block_placement_ = reinterpret_cast<::blokus::BlockPlacement*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.GameMove.block_placement)
}
inline ::blokus::BlockPlacement* GameMove::release_block_placement() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::BlockPlacement* released = _impl_.block_placement_;
  _impl_.block_placement_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::BlockPlacement* GameMove::unsafe_arena_release_block_placement() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.GameMove.block_placement)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::BlockPlacement* temp = _impl_.block_placement_;
  _impl_.block_placement_ = nullptr;
  return temp;
}
inline ::blokus::BlockPlacement* GameMove::_internal_mutable_block_placement() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.block_placement_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::BlockPlacement>(GetArena());
    _impl_.block_placement_ = reinterpret_cast<::blokus::BlockPlacement*>(p);
  }
  return _impl_.block_placement_;
}
inline ::blokus::BlockPlacement* GameMove::mutable_block_placement() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::blokus::BlockPlacement* _msg = _internal_mutable_block_placement();
  // @@protoc_insertion_point(field_mutable:blokus.GameMove.block_placement)
  return _msg;
}
inline void GameMove::set_allocated_block_placement(::blokus::BlockPlacement* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.block_placement_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.block_placement_ = reinterpret_cast<::blokus::BlockPlacement*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.GameMove.block_placement)
}

// .google.protobuf.Timestamp timestamp = 6;
inline bool GameMove::has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.timestamp_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& GameMove::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& GameMove::timestamp() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.GameMove.timestamp)
  return _internal_timestamp();
}
inline void GameMove::unsafe_arena_set_allocated_timestamp(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.GameMove.timestamp)
}
inline ::google::protobuf::Timestamp* GameMove::release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* GameMove::unsafe_arena_release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.GameMove.timestamp)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* GameMove::_internal_mutable_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.timestamp_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.timestamp_;
}
inline ::google::protobuf::Timestamp* GameMove::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:blokus.GameMove.timestamp)
  return _msg;
}
inline void GameMove::set_allocated_timestamp(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.timestamp_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.GameMove.timestamp)
}

// int32 think_time_seconds = 7;
inline void GameMove::clear_think_time_seconds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.think_time_seconds_ = 0;
}
inline ::int32_t GameMove::think_time_seconds() const {
  // @@protoc_insertion_point(field_get:blokus.GameMove.think_time_seconds)
  return _internal_think_time_seconds();
}
inline void GameMove::set_think_time_seconds(::int32_t value) {
  _internal_set_think_time_seconds(value);
  // @@protoc_insertion_point(field_set:blokus.GameMove.think_time_seconds)
}
inline ::int32_t GameMove::_internal_think_time_seconds() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.think_time_seconds_;
}
inline void GameMove::_internal_set_think_time_seconds(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.think_time_seconds_ = value;
}

// int32 score_before = 8;
inline void GameMove::clear_score_before() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.score_before_ = 0;
}
inline ::int32_t GameMove::score_before() const {
  // @@protoc_insertion_point(field_get:blokus.GameMove.score_before)
  return _internal_score_before();
}
inline void GameMove::set_score_before(::int32_t value) {
  _internal_set_score_before(value);
  // @@protoc_insertion_point(field_set:blokus.GameMove.score_before)
}
inline ::int32_t GameMove::_internal_score_before() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.score_before_;
}
inline void GameMove::_internal_set_score_before(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.score_before_ = value;
}

// int32 score_after = 9;
inline void GameMove::clear_score_after() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.score_after_ = 0;
}
inline ::int32_t GameMove::score_after() const {
  // @@protoc_insertion_point(field_get:blokus.GameMove.score_after)
  return _internal_score_after();
}
inline void GameMove::set_score_after(::int32_t value) {
  _internal_set_score_after(value);
  // @@protoc_insertion_point(field_set:blokus.GameMove.score_after)
}
inline ::int32_t GameMove::_internal_score_after() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.score_after_;
}
inline void GameMove::_internal_set_score_after(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.score_after_ = value;
}

// -------------------------------------------------------------------

// GameStateUpdate

// int32 room_id = 1;
inline void GameStateUpdate::clear_room_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_id_ = 0;
}
inline ::int32_t GameStateUpdate::room_id() const {
  // @@protoc_insertion_point(field_get:blokus.GameStateUpdate.room_id)
  return _internal_room_id();
}
inline void GameStateUpdate::set_room_id(::int32_t value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:blokus.GameStateUpdate.room_id)
}
inline ::int32_t GameStateUpdate::_internal_room_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.room_id_;
}
inline void GameStateUpdate::_internal_set_room_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_id_ = value;
}

// int32 update_version = 2;
inline void GameStateUpdate::clear_update_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.update_version_ = 0;
}
inline ::int32_t GameStateUpdate::update_version() const {
  // @@protoc_insertion_point(field_get:blokus.GameStateUpdate.update_version)
  return _internal_update_version();
}
inline void GameStateUpdate::set_update_version(::int32_t value) {
  _internal_set_update_version(value);
  // @@protoc_insertion_point(field_set:blokus.GameStateUpdate.update_version)
}
inline ::int32_t GameStateUpdate::_internal_update_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.update_version_;
}
inline void GameStateUpdate::_internal_set_update_version(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.update_version_ = value;
}

// optional .blokus.PlayerColor current_player = 3;
inline bool GameStateUpdate::has_current_player() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void GameStateUpdate::clear_current_player() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_player_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::blokus::PlayerColor GameStateUpdate::current_player() const {
  // @@protoc_insertion_point(field_get:blokus.GameStateUpdate.current_player)
  return _internal_current_player();
}
inline void GameStateUpdate::set_current_player(::blokus::PlayerColor value) {
  _internal_set_current_player(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:blokus.GameStateUpdate.current_player)
}
inline ::blokus::PlayerColor GameStateUpdate::_internal_current_player() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::blokus::PlayerColor>(_impl_.current_player_);
}
inline void GameStateUpdate::_internal_set_current_player(::blokus::PlayerColor value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_player_ = value;
}

// optional int32 remaining_time = 4;
inline bool GameStateUpdate::has_remaining_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void GameStateUpdate::clear_remaining_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.remaining_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t GameStateUpdate::remaining_time() const {
  // @@protoc_insertion_point(field_get:blokus.GameStateUpdate.remaining_time)
  return _internal_remaining_time();
}
inline void GameStateUpdate::set_remaining_time(::int32_t value) {
  _internal_set_remaining_time(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:blokus.GameStateUpdate.remaining_time)
}
inline ::int32_t GameStateUpdate::_internal_remaining_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.remaining_time_;
}
inline void GameStateUpdate::_internal_set_remaining_time(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.remaining_time_ = value;
}

// optional .blokus.BoardState board_changes = 5;
inline bool GameStateUpdate::has_board_changes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.board_changes_ != nullptr);
  return value;
}
inline const ::blokus::BoardState& GameStateUpdate::_internal_board_changes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::BoardState* p = _impl_.board_changes_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::BoardState&>(::blokus::_BoardState_default_instance_);
}
inline const ::blokus::BoardState& GameStateUpdate::board_changes() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.GameStateUpdate.board_changes)
  return _internal_board_changes();
}
inline void GameStateUpdate::unsafe_arena_set_allocated_board_changes(::blokus::BoardState* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.board_changes_);
  }
  _impl_.board_changes_ = reinterpret_cast<::blokus::BoardState*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.GameStateUpdate.board_changes)
}
inline ::blokus::BoardState* GameStateUpdate::release_board_changes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::BoardState* released = _impl_.board_changes_;
  _impl_.board_changes_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::BoardState* GameStateUpdate::unsafe_arena_release_board_changes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.GameStateUpdate.board_changes)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::BoardState* temp = _impl_.board_changes_;
  _impl_.board_changes_ = nullptr;
  return temp;
}
inline ::blokus::BoardState* GameStateUpdate::_internal_mutable_board_changes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.board_changes_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::BoardState>(GetArena());
    _impl_.board_changes_ = reinterpret_cast<::blokus::BoardState*>(p);
  }
  return _impl_.board_changes_;
}
inline ::blokus::BoardState* GameStateUpdate::mutable_board_changes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::blokus::BoardState* _msg = _internal_mutable_board_changes();
  // @@protoc_insertion_point(field_mutable:blokus.GameStateUpdate.board_changes)
  return _msg;
}
inline void GameStateUpdate::set_allocated_board_changes(::blokus::BoardState* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.board_changes_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.board_changes_ = reinterpret_cast<::blokus::BoardState*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.GameStateUpdate.board_changes)
}

// repeated .blokus.PlayerSlot updated_players = 6;
inline int GameStateUpdate::_internal_updated_players_size() const {
  return _internal_updated_players().size();
}
inline int GameStateUpdate::updated_players_size() const {
  return _internal_updated_players_size();
}
inline ::blokus::PlayerSlot* GameStateUpdate::mutable_updated_players(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.GameStateUpdate.updated_players)
  return _internal_mutable_updated_players()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::blokus::PlayerSlot>* GameStateUpdate::mutable_updated_players()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.GameStateUpdate.updated_players)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_updated_players();
}
inline const ::blokus::PlayerSlot& GameStateUpdate::updated_players(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.GameStateUpdate.updated_players)
  return _internal_updated_players().Get(index);
}
inline ::blokus::PlayerSlot* GameStateUpdate::add_updated_players() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::blokus::PlayerSlot* _add = _internal_mutable_updated_players()->Add();
  // @@protoc_insertion_point(field_add:blokus.GameStateUpdate.updated_players)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::blokus::PlayerSlot>& GameStateUpdate::updated_players() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.GameStateUpdate.updated_players)
  return _internal_updated_players();
}
inline const ::google::protobuf::RepeatedPtrField<::blokus::PlayerSlot>&
GameStateUpdate::_internal_updated_players() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.updated_players_;
}
inline ::google::protobuf::RepeatedPtrField<::blokus::PlayerSlot>*
GameStateUpdate::_internal_mutable_updated_players() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.updated_players_;
}

// .google.protobuf.Timestamp updated_at = 7;
inline bool GameStateUpdate::has_updated_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.updated_at_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& GameStateUpdate::_internal_updated_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.updated_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& GameStateUpdate::updated_at() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.GameStateUpdate.updated_at)
  return _internal_updated_at();
}
inline void GameStateUpdate::unsafe_arena_set_allocated_updated_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.updated_at_);
  }
  _impl_.updated_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.GameStateUpdate.updated_at)
}
inline ::google::protobuf::Timestamp* GameStateUpdate::release_updated_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.updated_at_;
  _impl_.updated_at_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* GameStateUpdate::unsafe_arena_release_updated_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.GameStateUpdate.updated_at)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.updated_at_;
  _impl_.updated_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* GameStateUpdate::_internal_mutable_updated_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.updated_at_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.updated_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.updated_at_;
}
inline ::google::protobuf::Timestamp* GameStateUpdate::mutable_updated_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_updated_at();
  // @@protoc_insertion_point(field_mutable:blokus.GameStateUpdate.updated_at)
  return _msg;
}
inline void GameStateUpdate::set_allocated_updated_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.updated_at_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.updated_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.GameStateUpdate.updated_at)
}

// string update_reason = 8;
inline void GameStateUpdate::clear_update_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.update_reason_.ClearToEmpty();
}
inline const std::string& GameStateUpdate::update_reason() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.GameStateUpdate.update_reason)
  return _internal_update_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GameStateUpdate::set_update_reason(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.update_reason_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.GameStateUpdate.update_reason)
}
inline std::string* GameStateUpdate::mutable_update_reason() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_update_reason();
  // @@protoc_insertion_point(field_mutable:blokus.GameStateUpdate.update_reason)
  return _s;
}
inline const std::string& GameStateUpdate::_internal_update_reason() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.update_reason_.Get();
}
inline void GameStateUpdate::_internal_set_update_reason(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.update_reason_.Set(value, GetArena());
}
inline std::string* GameStateUpdate::_internal_mutable_update_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.update_reason_.Mutable( GetArena());
}
inline std::string* GameStateUpdate::release_update_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.GameStateUpdate.update_reason)
  return _impl_.update_reason_.Release();
}
inline void GameStateUpdate::set_allocated_update_reason(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.update_reason_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.update_reason_.IsDefault()) {
    _impl_.update_reason_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.GameStateUpdate.update_reason)
}

// -------------------------------------------------------------------

// GetHintRequest

// int32 room_id = 1;
inline void GetHintRequest::clear_room_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_id_ = 0;
}
inline ::int32_t GetHintRequest::room_id() const {
  // @@protoc_insertion_point(field_get:blokus.GetHintRequest.room_id)
  return _internal_room_id();
}
inline void GetHintRequest::set_room_id(::int32_t value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:blokus.GetHintRequest.room_id)
}
inline ::int32_t GetHintRequest::_internal_room_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.room_id_;
}
inline void GetHintRequest::_internal_set_room_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_id_ = value;
}

// .blokus.PlayerColor player = 2;
inline void GetHintRequest::clear_player() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_ = 0;
}
inline ::blokus::PlayerColor GetHintRequest::player() const {
  // @@protoc_insertion_point(field_get:blokus.GetHintRequest.player)
  return _internal_player();
}
inline void GetHintRequest::set_player(::blokus::PlayerColor value) {
  _internal_set_player(value);
  // @@protoc_insertion_point(field_set:blokus.GetHintRequest.player)
}
inline ::blokus::PlayerColor GetHintRequest::_internal_player() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::blokus::PlayerColor>(_impl_.player_);
}
inline void GetHintRequest::_internal_set_player(::blokus::PlayerColor value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_ = value;
}

// int32 hint_level = 3;
inline void GetHintRequest::clear_hint_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hint_level_ = 0;
}
inline ::int32_t GetHintRequest::hint_level() const {
  // @@protoc_insertion_point(field_get:blokus.GetHintRequest.hint_level)
  return _internal_hint_level();
}
inline void GetHintRequest::set_hint_level(::int32_t value) {
  _internal_set_hint_level(value);
  // @@protoc_insertion_point(field_set:blokus.GetHintRequest.hint_level)
}
inline ::int32_t GetHintRequest::_internal_hint_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hint_level_;
}
inline void GetHintRequest::_internal_set_hint_level(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hint_level_ = value;
}

// -------------------------------------------------------------------

// GetHintResponse

// .blokus.Result result = 1;
inline bool GetHintResponse::has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.result_ != nullptr);
  return value;
}
inline const ::blokus::Result& GetHintResponse::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::Result* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::Result&>(::blokus::_Result_default_instance_);
}
inline const ::blokus::Result& GetHintResponse::result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.GetHintResponse.result)
  return _internal_result();
}
inline void GetHintResponse::unsafe_arena_set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.GetHintResponse.result)
}
inline ::blokus::Result* GetHintResponse::release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* released = _impl_.result_;
  _impl_.result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::Result* GetHintResponse::unsafe_arena_release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.GetHintResponse.result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::blokus::Result* GetHintResponse::_internal_mutable_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::Result>(GetArena());
    _impl_.result_ = reinterpret_cast<::blokus::Result*>(p);
  }
  return _impl_.result_;
}
inline ::blokus::Result* GetHintResponse::mutable_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::blokus::Result* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:blokus.GetHintResponse.result)
  return _msg;
}
inline void GetHintResponse::set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.GetHintResponse.result)
}

// repeated .blokus.BlockPlacement suggested_moves = 2;
inline int GetHintResponse::_internal_suggested_moves_size() const {
  return _internal_suggested_moves().size();
}
inline int GetHintResponse::suggested_moves_size() const {
  return _internal_suggested_moves_size();
}
inline ::blokus::BlockPlacement* GetHintResponse::mutable_suggested_moves(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.GetHintResponse.suggested_moves)
  return _internal_mutable_suggested_moves()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::blokus::BlockPlacement>* GetHintResponse::mutable_suggested_moves()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.GetHintResponse.suggested_moves)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_suggested_moves();
}
inline const ::blokus::BlockPlacement& GetHintResponse::suggested_moves(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.GetHintResponse.suggested_moves)
  return _internal_suggested_moves().Get(index);
}
inline ::blokus::BlockPlacement* GetHintResponse::add_suggested_moves() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::blokus::BlockPlacement* _add = _internal_mutable_suggested_moves()->Add();
  // @@protoc_insertion_point(field_add:blokus.GetHintResponse.suggested_moves)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::blokus::BlockPlacement>& GetHintResponse::suggested_moves() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.GetHintResponse.suggested_moves)
  return _internal_suggested_moves();
}
inline const ::google::protobuf::RepeatedPtrField<::blokus::BlockPlacement>&
GetHintResponse::_internal_suggested_moves() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.suggested_moves_;
}
inline ::google::protobuf::RepeatedPtrField<::blokus::BlockPlacement>*
GetHintResponse::_internal_mutable_suggested_moves() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.suggested_moves_;
}

// repeated string explanations = 3;
inline int GetHintResponse::_internal_explanations_size() const {
  return _internal_explanations().size();
}
inline int GetHintResponse::explanations_size() const {
  return _internal_explanations_size();
}
inline void GetHintResponse::clear_explanations() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.explanations_.Clear();
}
inline std::string* GetHintResponse::add_explanations() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_explanations()->Add();
  // @@protoc_insertion_point(field_add_mutable:blokus.GetHintResponse.explanations)
  return _s;
}
inline const std::string& GetHintResponse::explanations(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.GetHintResponse.explanations)
  return _internal_explanations().Get(index);
}
inline std::string* GetHintResponse::mutable_explanations(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.GetHintResponse.explanations)
  return _internal_mutable_explanations()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void GetHintResponse::set_explanations(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_explanations()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:blokus.GetHintResponse.explanations)
}
template <typename Arg_, typename... Args_>
inline void GetHintResponse::add_explanations(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_explanations(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:blokus.GetHintResponse.explanations)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
GetHintResponse::explanations() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.GetHintResponse.explanations)
  return _internal_explanations();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
GetHintResponse::mutable_explanations() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.GetHintResponse.explanations)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_explanations();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
GetHintResponse::_internal_explanations() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.explanations_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
GetHintResponse::_internal_mutable_explanations() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.explanations_;
}

// int32 hint_quality = 4;
inline void GetHintResponse::clear_hint_quality() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hint_quality_ = 0;
}
inline ::int32_t GetHintResponse::hint_quality() const {
  // @@protoc_insertion_point(field_get:blokus.GetHintResponse.hint_quality)
  return _internal_hint_quality();
}
inline void GetHintResponse::set_hint_quality(::int32_t value) {
  _internal_set_hint_quality(value);
  // @@protoc_insertion_point(field_set:blokus.GetHintResponse.hint_quality)
}
inline ::int32_t GetHintResponse::_internal_hint_quality() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hint_quality_;
}
inline void GetHintResponse::_internal_set_hint_quality(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hint_quality_ = value;
}

// int32 possible_moves_count = 5;
inline void GetHintResponse::clear_possible_moves_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.possible_moves_count_ = 0;
}
inline ::int32_t GetHintResponse::possible_moves_count() const {
  // @@protoc_insertion_point(field_get:blokus.GetHintResponse.possible_moves_count)
  return _internal_possible_moves_count();
}
inline void GetHintResponse::set_possible_moves_count(::int32_t value) {
  _internal_set_possible_moves_count(value);
  // @@protoc_insertion_point(field_set:blokus.GetHintResponse.possible_moves_count)
}
inline ::int32_t GetHintResponse::_internal_possible_moves_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.possible_moves_count_;
}
inline void GetHintResponse::_internal_set_possible_moves_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.possible_moves_count_ = value;
}

// float win_probability = 6;
inline void GetHintResponse::clear_win_probability() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.win_probability_ = 0;
}
inline float GetHintResponse::win_probability() const {
  // @@protoc_insertion_point(field_get:blokus.GetHintResponse.win_probability)
  return _internal_win_probability();
}
inline void GetHintResponse::set_win_probability(float value) {
  _internal_set_win_probability(value);
  // @@protoc_insertion_point(field_set:blokus.GetHintResponse.win_probability)
}
inline float GetHintResponse::_internal_win_probability() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.win_probability_;
}
inline void GetHintResponse::_internal_set_win_probability(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.win_probability_ = value;
}

// string strategy_advice = 7;
inline void GetHintResponse::clear_strategy_advice() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.strategy_advice_.ClearToEmpty();
}
inline const std::string& GetHintResponse::strategy_advice() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.GetHintResponse.strategy_advice)
  return _internal_strategy_advice();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetHintResponse::set_strategy_advice(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.strategy_advice_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.GetHintResponse.strategy_advice)
}
inline std::string* GetHintResponse::mutable_strategy_advice() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_strategy_advice();
  // @@protoc_insertion_point(field_mutable:blokus.GetHintResponse.strategy_advice)
  return _s;
}
inline const std::string& GetHintResponse::_internal_strategy_advice() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.strategy_advice_.Get();
}
inline void GetHintResponse::_internal_set_strategy_advice(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.strategy_advice_.Set(value, GetArena());
}
inline std::string* GetHintResponse::_internal_mutable_strategy_advice() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.strategy_advice_.Mutable( GetArena());
}
inline std::string* GetHintResponse::release_strategy_advice() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.GetHintResponse.strategy_advice)
  return _impl_.strategy_advice_.Release();
}
inline void GetHintResponse::set_allocated_strategy_advice(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.strategy_advice_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.strategy_advice_.IsDefault()) {
    _impl_.strategy_advice_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.GetHintResponse.strategy_advice)
}

// -------------------------------------------------------------------

// SpectatorJoinRequest

// int32 room_id = 1;
inline void SpectatorJoinRequest::clear_room_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_id_ = 0;
}
inline ::int32_t SpectatorJoinRequest::room_id() const {
  // @@protoc_insertion_point(field_get:blokus.SpectatorJoinRequest.room_id)
  return _internal_room_id();
}
inline void SpectatorJoinRequest::set_room_id(::int32_t value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:blokus.SpectatorJoinRequest.room_id)
}
inline ::int32_t SpectatorJoinRequest::_internal_room_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.room_id_;
}
inline void SpectatorJoinRequest::_internal_set_room_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_id_ = value;
}

// bool silent_join = 2;
inline void SpectatorJoinRequest::clear_silent_join() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.silent_join_ = false;
}
inline bool SpectatorJoinRequest::silent_join() const {
  // @@protoc_insertion_point(field_get:blokus.SpectatorJoinRequest.silent_join)
  return _internal_silent_join();
}
inline void SpectatorJoinRequest::set_silent_join(bool value) {
  _internal_set_silent_join(value);
  // @@protoc_insertion_point(field_set:blokus.SpectatorJoinRequest.silent_join)
}
inline bool SpectatorJoinRequest::_internal_silent_join() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.silent_join_;
}
inline void SpectatorJoinRequest::_internal_set_silent_join(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.silent_join_ = value;
}

// -------------------------------------------------------------------

// SpectatorJoinResponse

// .blokus.Result result = 1;
inline bool SpectatorJoinResponse::has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.result_ != nullptr);
  return value;
}
inline const ::blokus::Result& SpectatorJoinResponse::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::Result* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::Result&>(::blokus::_Result_default_instance_);
}
inline const ::blokus::Result& SpectatorJoinResponse::result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.SpectatorJoinResponse.result)
  return _internal_result();
}
inline void SpectatorJoinResponse::unsafe_arena_set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.SpectatorJoinResponse.result)
}
inline ::blokus::Result* SpectatorJoinResponse::release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* released = _impl_.result_;
  _impl_.result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::Result* SpectatorJoinResponse::unsafe_arena_release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.SpectatorJoinResponse.result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::blokus::Result* SpectatorJoinResponse::_internal_mutable_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::Result>(GetArena());
    _impl_.result_ = reinterpret_cast<::blokus::Result*>(p);
  }
  return _impl_.result_;
}
inline ::blokus::Result* SpectatorJoinResponse::mutable_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::blokus::Result* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:blokus.SpectatorJoinResponse.result)
  return _msg;
}
inline void SpectatorJoinResponse::set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.SpectatorJoinResponse.result)
}

// .blokus.GameStateResponse current_state = 2;
inline bool SpectatorJoinResponse::has_current_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.current_state_ != nullptr);
  return value;
}
inline void SpectatorJoinResponse::clear_current_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.current_state_ != nullptr) _impl_.current_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::blokus::GameStateResponse& SpectatorJoinResponse::_internal_current_state() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::GameStateResponse* p = _impl_.current_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::GameStateResponse&>(::blokus::_GameStateResponse_default_instance_);
}
inline const ::blokus::GameStateResponse& SpectatorJoinResponse::current_state() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.SpectatorJoinResponse.current_state)
  return _internal_current_state();
}
inline void SpectatorJoinResponse::unsafe_arena_set_allocated_current_state(::blokus::GameStateResponse* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.current_state_);
  }
  _impl_.current_state_ = reinterpret_cast<::blokus::GameStateResponse*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.SpectatorJoinResponse.current_state)
}
inline ::blokus::GameStateResponse* SpectatorJoinResponse::release_current_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::blokus::GameStateResponse* released = _impl_.current_state_;
  _impl_.current_state_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::GameStateResponse* SpectatorJoinResponse::unsafe_arena_release_current_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.SpectatorJoinResponse.current_state)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::blokus::GameStateResponse* temp = _impl_.current_state_;
  _impl_.current_state_ = nullptr;
  return temp;
}
inline ::blokus::GameStateResponse* SpectatorJoinResponse::_internal_mutable_current_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.current_state_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::GameStateResponse>(GetArena());
    _impl_.current_state_ = reinterpret_cast<::blokus::GameStateResponse*>(p);
  }
  return _impl_.current_state_;
}
inline ::blokus::GameStateResponse* SpectatorJoinResponse::mutable_current_state() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::blokus::GameStateResponse* _msg = _internal_mutable_current_state();
  // @@protoc_insertion_point(field_mutable:blokus.SpectatorJoinResponse.current_state)
  return _msg;
}
inline void SpectatorJoinResponse::set_allocated_current_state(::blokus::GameStateResponse* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.current_state_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.current_state_ = reinterpret_cast<::blokus::GameStateResponse*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.SpectatorJoinResponse.current_state)
}

// int32 spectator_count = 3;
inline void SpectatorJoinResponse::clear_spectator_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.spectator_count_ = 0;
}
inline ::int32_t SpectatorJoinResponse::spectator_count() const {
  // @@protoc_insertion_point(field_get:blokus.SpectatorJoinResponse.spectator_count)
  return _internal_spectator_count();
}
inline void SpectatorJoinResponse::set_spectator_count(::int32_t value) {
  _internal_set_spectator_count(value);
  // @@protoc_insertion_point(field_set:blokus.SpectatorJoinResponse.spectator_count)
}
inline ::int32_t SpectatorJoinResponse::_internal_spectator_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.spectator_count_;
}
inline void SpectatorJoinResponse::_internal_set_spectator_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.spectator_count_ = value;
}

// string welcome_message = 4;
inline void SpectatorJoinResponse::clear_welcome_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.welcome_message_.ClearToEmpty();
}
inline const std::string& SpectatorJoinResponse::welcome_message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.SpectatorJoinResponse.welcome_message)
  return _internal_welcome_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SpectatorJoinResponse::set_welcome_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.welcome_message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.SpectatorJoinResponse.welcome_message)
}
inline std::string* SpectatorJoinResponse::mutable_welcome_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_welcome_message();
  // @@protoc_insertion_point(field_mutable:blokus.SpectatorJoinResponse.welcome_message)
  return _s;
}
inline const std::string& SpectatorJoinResponse::_internal_welcome_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.welcome_message_.Get();
}
inline void SpectatorJoinResponse::_internal_set_welcome_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.welcome_message_.Set(value, GetArena());
}
inline std::string* SpectatorJoinResponse::_internal_mutable_welcome_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.welcome_message_.Mutable( GetArena());
}
inline std::string* SpectatorJoinResponse::release_welcome_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.SpectatorJoinResponse.welcome_message)
  return _impl_.welcome_message_.Release();
}
inline void SpectatorJoinResponse::set_allocated_welcome_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.welcome_message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.welcome_message_.IsDefault()) {
    _impl_.welcome_message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.SpectatorJoinResponse.welcome_message)
}

// -------------------------------------------------------------------

// SpectatorNotification

// int32 room_id = 1;
inline void SpectatorNotification::clear_room_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_id_ = 0;
}
inline ::int32_t SpectatorNotification::room_id() const {
  // @@protoc_insertion_point(field_get:blokus.SpectatorNotification.room_id)
  return _internal_room_id();
}
inline void SpectatorNotification::set_room_id(::int32_t value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:blokus.SpectatorNotification.room_id)
}
inline ::int32_t SpectatorNotification::_internal_room_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.room_id_;
}
inline void SpectatorNotification::_internal_set_room_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_id_ = value;
}

// string spectator_username = 2;
inline void SpectatorNotification::clear_spectator_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.spectator_username_.ClearToEmpty();
}
inline const std::string& SpectatorNotification::spectator_username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.SpectatorNotification.spectator_username)
  return _internal_spectator_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SpectatorNotification::set_spectator_username(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.spectator_username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.SpectatorNotification.spectator_username)
}
inline std::string* SpectatorNotification::mutable_spectator_username() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_spectator_username();
  // @@protoc_insertion_point(field_mutable:blokus.SpectatorNotification.spectator_username)
  return _s;
}
inline const std::string& SpectatorNotification::_internal_spectator_username() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.spectator_username_.Get();
}
inline void SpectatorNotification::_internal_set_spectator_username(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.spectator_username_.Set(value, GetArena());
}
inline std::string* SpectatorNotification::_internal_mutable_spectator_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.spectator_username_.Mutable( GetArena());
}
inline std::string* SpectatorNotification::release_spectator_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.SpectatorNotification.spectator_username)
  return _impl_.spectator_username_.Release();
}
inline void SpectatorNotification::set_allocated_spectator_username(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.spectator_username_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.spectator_username_.IsDefault()) {
    _impl_.spectator_username_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.SpectatorNotification.spectator_username)
}

// bool joined = 3;
inline void SpectatorNotification::clear_joined() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.joined_ = false;
}
inline bool SpectatorNotification::joined() const {
  // @@protoc_insertion_point(field_get:blokus.SpectatorNotification.joined)
  return _internal_joined();
}
inline void SpectatorNotification::set_joined(bool value) {
  _internal_set_joined(value);
  // @@protoc_insertion_point(field_set:blokus.SpectatorNotification.joined)
}
inline bool SpectatorNotification::_internal_joined() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.joined_;
}
inline void SpectatorNotification::_internal_set_joined(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.joined_ = value;
}

// int32 total_spectators = 4;
inline void SpectatorNotification::clear_total_spectators() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_spectators_ = 0;
}
inline ::int32_t SpectatorNotification::total_spectators() const {
  // @@protoc_insertion_point(field_get:blokus.SpectatorNotification.total_spectators)
  return _internal_total_spectators();
}
inline void SpectatorNotification::set_total_spectators(::int32_t value) {
  _internal_set_total_spectators(value);
  // @@protoc_insertion_point(field_set:blokus.SpectatorNotification.total_spectators)
}
inline ::int32_t SpectatorNotification::_internal_total_spectators() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_spectators_;
}
inline void SpectatorNotification::_internal_set_total_spectators(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_spectators_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace blokus


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::blokus::TurnAction> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::blokus::TurnAction>() {
  return ::blokus::TurnAction_descriptor();
}
template <>
struct is_proto_enum<::blokus::GameEndReason> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::blokus::GameEndReason>() {
  return ::blokus::GameEndReason_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // game_2eproto_2epb_2eh
