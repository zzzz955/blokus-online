// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: auth.proto
// Protobuf C++ Version: 5.29.3

#ifndef auth_2eproto_2epb_2eh
#define auth_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
#include "common.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_auth_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_auth_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_auth_2eproto;
namespace blokus {
class AccountStatusInfo;
struct AccountStatusInfoDefaultTypeInternal;
extern AccountStatusInfoDefaultTypeInternal _AccountStatusInfo_default_instance_;
class AuthRequest;
struct AuthRequestDefaultTypeInternal;
extern AuthRequestDefaultTypeInternal _AuthRequest_default_instance_;
class AuthResponse;
struct AuthResponseDefaultTypeInternal;
extern AuthResponseDefaultTypeInternal _AuthResponse_default_instance_;
class EmailVerificationRequest;
struct EmailVerificationRequestDefaultTypeInternal;
extern EmailVerificationRequestDefaultTypeInternal _EmailVerificationRequest_default_instance_;
class EmailVerificationResponse;
struct EmailVerificationResponseDefaultTypeInternal;
extern EmailVerificationResponseDefaultTypeInternal _EmailVerificationResponse_default_instance_;
class HeartbeatRequest;
struct HeartbeatRequestDefaultTypeInternal;
extern HeartbeatRequestDefaultTypeInternal _HeartbeatRequest_default_instance_;
class HeartbeatResponse;
struct HeartbeatResponseDefaultTypeInternal;
extern HeartbeatResponseDefaultTypeInternal _HeartbeatResponse_default_instance_;
class LogoutRequest;
struct LogoutRequestDefaultTypeInternal;
extern LogoutRequestDefaultTypeInternal _LogoutRequest_default_instance_;
class LogoutResponse;
struct LogoutResponseDefaultTypeInternal;
extern LogoutResponseDefaultTypeInternal _LogoutResponse_default_instance_;
class PasswordChangeRequest;
struct PasswordChangeRequestDefaultTypeInternal;
extern PasswordChangeRequestDefaultTypeInternal _PasswordChangeRequest_default_instance_;
class PasswordChangeResponse;
struct PasswordChangeResponseDefaultTypeInternal;
extern PasswordChangeResponseDefaultTypeInternal _PasswordChangeResponse_default_instance_;
class PasswordResetRequest;
struct PasswordResetRequestDefaultTypeInternal;
extern PasswordResetRequestDefaultTypeInternal _PasswordResetRequest_default_instance_;
class PasswordResetResponse;
struct PasswordResetResponseDefaultTypeInternal;
extern PasswordResetResponseDefaultTypeInternal _PasswordResetResponse_default_instance_;
class RegisterRequest;
struct RegisterRequestDefaultTypeInternal;
extern RegisterRequestDefaultTypeInternal _RegisterRequest_default_instance_;
class RegisterResponse;
struct RegisterResponseDefaultTypeInternal;
extern RegisterResponseDefaultTypeInternal _RegisterResponse_default_instance_;
class SessionValidationRequest;
struct SessionValidationRequestDefaultTypeInternal;
extern SessionValidationRequestDefaultTypeInternal _SessionValidationRequest_default_instance_;
class SessionValidationResponse;
struct SessionValidationResponseDefaultTypeInternal;
extern SessionValidationResponseDefaultTypeInternal _SessionValidationResponse_default_instance_;
class WelcomeMessage;
struct WelcomeMessageDefaultTypeInternal;
extern WelcomeMessageDefaultTypeInternal _WelcomeMessage_default_instance_;
}  // namespace blokus
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace blokus {
enum AuthMethod : int {
  AUTH_METHOD_USERNAME_PASSWORD = 0,
  AUTH_METHOD_EMAIL_PASSWORD = 1,
  AUTH_METHOD_GUEST = 2,
  AUTH_METHOD_TOKEN = 3,
  AuthMethod_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  AuthMethod_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool AuthMethod_IsValid(int value);
extern const uint32_t AuthMethod_internal_data_[];
constexpr AuthMethod AuthMethod_MIN = static_cast<AuthMethod>(0);
constexpr AuthMethod AuthMethod_MAX = static_cast<AuthMethod>(3);
constexpr int AuthMethod_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
AuthMethod_descriptor();
template <typename T>
const std::string& AuthMethod_Name(T value) {
  static_assert(std::is_same<T, AuthMethod>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to AuthMethod_Name().");
  return AuthMethod_Name(static_cast<AuthMethod>(value));
}
template <>
inline const std::string& AuthMethod_Name(AuthMethod value) {
  return ::google::protobuf::internal::NameOfDenseEnum<AuthMethod_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool AuthMethod_Parse(absl::string_view name, AuthMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AuthMethod>(
      AuthMethod_descriptor(), name, value);
}
enum AccountStatus : int {
  ACCOUNT_STATUS_ACTIVE = 0,
  ACCOUNT_STATUS_SUSPENDED = 1,
  ACCOUNT_STATUS_BANNED = 2,
  ACCOUNT_STATUS_PENDING_VERIFICATION = 3,
  ACCOUNT_STATUS_DELETED = 4,
  AccountStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  AccountStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool AccountStatus_IsValid(int value);
extern const uint32_t AccountStatus_internal_data_[];
constexpr AccountStatus AccountStatus_MIN = static_cast<AccountStatus>(0);
constexpr AccountStatus AccountStatus_MAX = static_cast<AccountStatus>(4);
constexpr int AccountStatus_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
AccountStatus_descriptor();
template <typename T>
const std::string& AccountStatus_Name(T value) {
  static_assert(std::is_same<T, AccountStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to AccountStatus_Name().");
  return AccountStatus_Name(static_cast<AccountStatus>(value));
}
template <>
inline const std::string& AccountStatus_Name(AccountStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<AccountStatus_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool AccountStatus_Parse(absl::string_view name, AccountStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AccountStatus>(
      AccountStatus_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class RegisterRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.RegisterRequest) */ {
 public:
  inline RegisterRequest() : RegisterRequest(nullptr) {}
  ~RegisterRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RegisterRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RegisterRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RegisterRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline RegisterRequest(const RegisterRequest& from) : RegisterRequest(nullptr, from) {}
  inline RegisterRequest(RegisterRequest&& from) noexcept
      : RegisterRequest(nullptr, std::move(from)) {}
  inline RegisterRequest& operator=(const RegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterRequest& operator=(RegisterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterRequest*>(
        &_RegisterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(RegisterRequest& a, RegisterRequest& b) { a.Swap(&b); }
  inline void Swap(RegisterRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RegisterRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RegisterRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RegisterRequest& from) { RegisterRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RegisterRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.RegisterRequest"; }

 protected:
  explicit RegisterRequest(::google::protobuf::Arena* arena);
  RegisterRequest(::google::protobuf::Arena* arena, const RegisterRequest& from);
  RegisterRequest(::google::protobuf::Arena* arena, RegisterRequest&& from) noexcept
      : RegisterRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUsernameFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kEmailFieldNumber = 3,
    kDisplayNameFieldNumber = 4,
    kCountryFieldNumber = 5,
    kLanguageFieldNumber = 6,
    kEmailVerificationTokenFieldNumber = 15,
    kReferralCodeFieldNumber = 16,
    kClientVersionFieldNumber = 20,
    kPlatformFieldNumber = 21,
    kTermsAcceptedFieldNumber = 10,
    kPrivacyAcceptedFieldNumber = 11,
    kMarketingAcceptedFieldNumber = 12,
  };
  // string username = 1;
  void clear_username() ;
  const std::string& username() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_username(Arg_&& arg, Args_... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* value);

  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(
      const std::string& value);
  std::string* _internal_mutable_username();

  public:
  // string password = 2;
  void clear_password() ;
  const std::string& password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* value);

  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(
      const std::string& value);
  std::string* _internal_mutable_password();

  public:
  // string email = 3;
  void clear_email() ;
  const std::string& email() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_email(Arg_&& arg, Args_... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* value);

  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(
      const std::string& value);
  std::string* _internal_mutable_email();

  public:
  // string display_name = 4;
  void clear_display_name() ;
  const std::string& display_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_display_name(Arg_&& arg, Args_... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* value);

  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(
      const std::string& value);
  std::string* _internal_mutable_display_name();

  public:
  // string country = 5;
  void clear_country() ;
  const std::string& country() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_country(Arg_&& arg, Args_... args);
  std::string* mutable_country();
  PROTOBUF_NODISCARD std::string* release_country();
  void set_allocated_country(std::string* value);

  private:
  const std::string& _internal_country() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country(
      const std::string& value);
  std::string* _internal_mutable_country();

  public:
  // string language = 6;
  void clear_language() ;
  const std::string& language() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_language(Arg_&& arg, Args_... args);
  std::string* mutable_language();
  PROTOBUF_NODISCARD std::string* release_language();
  void set_allocated_language(std::string* value);

  private:
  const std::string& _internal_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language(
      const std::string& value);
  std::string* _internal_mutable_language();

  public:
  // string email_verification_token = 15;
  void clear_email_verification_token() ;
  const std::string& email_verification_token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_email_verification_token(Arg_&& arg, Args_... args);
  std::string* mutable_email_verification_token();
  PROTOBUF_NODISCARD std::string* release_email_verification_token();
  void set_allocated_email_verification_token(std::string* value);

  private:
  const std::string& _internal_email_verification_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email_verification_token(
      const std::string& value);
  std::string* _internal_mutable_email_verification_token();

  public:
  // string referral_code = 16;
  void clear_referral_code() ;
  const std::string& referral_code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_referral_code(Arg_&& arg, Args_... args);
  std::string* mutable_referral_code();
  PROTOBUF_NODISCARD std::string* release_referral_code();
  void set_allocated_referral_code(std::string* value);

  private:
  const std::string& _internal_referral_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_referral_code(
      const std::string& value);
  std::string* _internal_mutable_referral_code();

  public:
  // string client_version = 20;
  void clear_client_version() ;
  const std::string& client_version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_client_version(Arg_&& arg, Args_... args);
  std::string* mutable_client_version();
  PROTOBUF_NODISCARD std::string* release_client_version();
  void set_allocated_client_version(std::string* value);

  private:
  const std::string& _internal_client_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_version(
      const std::string& value);
  std::string* _internal_mutable_client_version();

  public:
  // string platform = 21;
  void clear_platform() ;
  const std::string& platform() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_platform(Arg_&& arg, Args_... args);
  std::string* mutable_platform();
  PROTOBUF_NODISCARD std::string* release_platform();
  void set_allocated_platform(std::string* value);

  private:
  const std::string& _internal_platform() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_platform(
      const std::string& value);
  std::string* _internal_mutable_platform();

  public:
  // bool terms_accepted = 10;
  void clear_terms_accepted() ;
  bool terms_accepted() const;
  void set_terms_accepted(bool value);

  private:
  bool _internal_terms_accepted() const;
  void _internal_set_terms_accepted(bool value);

  public:
  // bool privacy_accepted = 11;
  void clear_privacy_accepted() ;
  bool privacy_accepted() const;
  void set_privacy_accepted(bool value);

  private:
  bool _internal_privacy_accepted() const;
  void _internal_set_privacy_accepted(bool value);

  public:
  // bool marketing_accepted = 12;
  void clear_marketing_accepted() ;
  bool marketing_accepted() const;
  void set_marketing_accepted(bool value);

  private:
  bool _internal_marketing_accepted() const;
  void _internal_set_marketing_accepted(bool value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.RegisterRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 13, 0,
      146, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RegisterRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr username_;
    ::google::protobuf::internal::ArenaStringPtr password_;
    ::google::protobuf::internal::ArenaStringPtr email_;
    ::google::protobuf::internal::ArenaStringPtr display_name_;
    ::google::protobuf::internal::ArenaStringPtr country_;
    ::google::protobuf::internal::ArenaStringPtr language_;
    ::google::protobuf::internal::ArenaStringPtr email_verification_token_;
    ::google::protobuf::internal::ArenaStringPtr referral_code_;
    ::google::protobuf::internal::ArenaStringPtr client_version_;
    ::google::protobuf::internal::ArenaStringPtr platform_;
    bool terms_accepted_;
    bool privacy_accepted_;
    bool marketing_accepted_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class PasswordResetRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.PasswordResetRequest) */ {
 public:
  inline PasswordResetRequest() : PasswordResetRequest(nullptr) {}
  ~PasswordResetRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PasswordResetRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PasswordResetRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PasswordResetRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline PasswordResetRequest(const PasswordResetRequest& from) : PasswordResetRequest(nullptr, from) {}
  inline PasswordResetRequest(PasswordResetRequest&& from) noexcept
      : PasswordResetRequest(nullptr, std::move(from)) {}
  inline PasswordResetRequest& operator=(const PasswordResetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PasswordResetRequest& operator=(PasswordResetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PasswordResetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PasswordResetRequest* internal_default_instance() {
    return reinterpret_cast<const PasswordResetRequest*>(
        &_PasswordResetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(PasswordResetRequest& a, PasswordResetRequest& b) { a.Swap(&b); }
  inline void Swap(PasswordResetRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PasswordResetRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PasswordResetRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PasswordResetRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PasswordResetRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PasswordResetRequest& from) { PasswordResetRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PasswordResetRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.PasswordResetRequest"; }

 protected:
  explicit PasswordResetRequest(::google::protobuf::Arena* arena);
  PasswordResetRequest(::google::protobuf::Arena* arena, const PasswordResetRequest& from);
  PasswordResetRequest(::google::protobuf::Arena* arena, PasswordResetRequest&& from) noexcept
      : PasswordResetRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEmailFieldNumber = 1,
    kUsernameFieldNumber = 2,
    kCaptchaResponseFieldNumber = 3,
  };
  // string email = 1;
  void clear_email() ;
  const std::string& email() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_email(Arg_&& arg, Args_... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* value);

  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(
      const std::string& value);
  std::string* _internal_mutable_email();

  public:
  // string username = 2;
  void clear_username() ;
  const std::string& username() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_username(Arg_&& arg, Args_... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* value);

  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(
      const std::string& value);
  std::string* _internal_mutable_username();

  public:
  // string captcha_response = 3;
  void clear_captcha_response() ;
  const std::string& captcha_response() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_captcha_response(Arg_&& arg, Args_... args);
  std::string* mutable_captcha_response();
  PROTOBUF_NODISCARD std::string* release_captcha_response();
  void set_allocated_captcha_response(std::string* value);

  private:
  const std::string& _internal_captcha_response() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_captcha_response(
      const std::string& value);
  std::string* _internal_mutable_captcha_response();

  public:
  // @@protoc_insertion_point(class_scope:blokus.PasswordResetRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      65, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PasswordResetRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr email_;
    ::google::protobuf::internal::ArenaStringPtr username_;
    ::google::protobuf::internal::ArenaStringPtr captcha_response_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class PasswordChangeRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.PasswordChangeRequest) */ {
 public:
  inline PasswordChangeRequest() : PasswordChangeRequest(nullptr) {}
  ~PasswordChangeRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PasswordChangeRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PasswordChangeRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PasswordChangeRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline PasswordChangeRequest(const PasswordChangeRequest& from) : PasswordChangeRequest(nullptr, from) {}
  inline PasswordChangeRequest(PasswordChangeRequest&& from) noexcept
      : PasswordChangeRequest(nullptr, std::move(from)) {}
  inline PasswordChangeRequest& operator=(const PasswordChangeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PasswordChangeRequest& operator=(PasswordChangeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PasswordChangeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PasswordChangeRequest* internal_default_instance() {
    return reinterpret_cast<const PasswordChangeRequest*>(
        &_PasswordChangeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(PasswordChangeRequest& a, PasswordChangeRequest& b) { a.Swap(&b); }
  inline void Swap(PasswordChangeRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PasswordChangeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PasswordChangeRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PasswordChangeRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PasswordChangeRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PasswordChangeRequest& from) { PasswordChangeRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PasswordChangeRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.PasswordChangeRequest"; }

 protected:
  explicit PasswordChangeRequest(::google::protobuf::Arena* arena);
  PasswordChangeRequest(::google::protobuf::Arena* arena, const PasswordChangeRequest& from);
  PasswordChangeRequest(::google::protobuf::Arena* arena, PasswordChangeRequest&& from) noexcept
      : PasswordChangeRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCurrentPasswordFieldNumber = 1,
    kNewPasswordFieldNumber = 2,
    kResetTokenFieldNumber = 3,
    kSessionTokenFieldNumber = 4,
  };
  // string current_password = 1;
  void clear_current_password() ;
  const std::string& current_password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_current_password(Arg_&& arg, Args_... args);
  std::string* mutable_current_password();
  PROTOBUF_NODISCARD std::string* release_current_password();
  void set_allocated_current_password(std::string* value);

  private:
  const std::string& _internal_current_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_current_password(
      const std::string& value);
  std::string* _internal_mutable_current_password();

  public:
  // string new_password = 2;
  void clear_new_password() ;
  const std::string& new_password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_new_password(Arg_&& arg, Args_... args);
  std::string* mutable_new_password();
  PROTOBUF_NODISCARD std::string* release_new_password();
  void set_allocated_new_password(std::string* value);

  private:
  const std::string& _internal_new_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_new_password(
      const std::string& value);
  std::string* _internal_mutable_new_password();

  public:
  // string reset_token = 3;
  void clear_reset_token() ;
  const std::string& reset_token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reset_token(Arg_&& arg, Args_... args);
  std::string* mutable_reset_token();
  PROTOBUF_NODISCARD std::string* release_reset_token();
  void set_allocated_reset_token(std::string* value);

  private:
  const std::string& _internal_reset_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reset_token(
      const std::string& value);
  std::string* _internal_mutable_reset_token();

  public:
  // string session_token = 4;
  void clear_session_token() ;
  const std::string& session_token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_session_token(Arg_&& arg, Args_... args);
  std::string* mutable_session_token();
  PROTOBUF_NODISCARD std::string* release_session_token();
  void set_allocated_session_token(std::string* value);

  private:
  const std::string& _internal_session_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_token(
      const std::string& value);
  std::string* _internal_mutable_session_token();

  public:
  // @@protoc_insertion_point(class_scope:blokus.PasswordChangeRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      89, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PasswordChangeRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr current_password_;
    ::google::protobuf::internal::ArenaStringPtr new_password_;
    ::google::protobuf::internal::ArenaStringPtr reset_token_;
    ::google::protobuf::internal::ArenaStringPtr session_token_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class LogoutRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.LogoutRequest) */ {
 public:
  inline LogoutRequest() : LogoutRequest(nullptr) {}
  ~LogoutRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(LogoutRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(LogoutRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LogoutRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline LogoutRequest(const LogoutRequest& from) : LogoutRequest(nullptr, from) {}
  inline LogoutRequest(LogoutRequest&& from) noexcept
      : LogoutRequest(nullptr, std::move(from)) {}
  inline LogoutRequest& operator=(const LogoutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogoutRequest& operator=(LogoutRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogoutRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogoutRequest* internal_default_instance() {
    return reinterpret_cast<const LogoutRequest*>(
        &_LogoutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(LogoutRequest& a, LogoutRequest& b) { a.Swap(&b); }
  inline void Swap(LogoutRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogoutRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogoutRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<LogoutRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LogoutRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LogoutRequest& from) { LogoutRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(LogoutRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.LogoutRequest"; }

 protected:
  explicit LogoutRequest(::google::protobuf::Arena* arena);
  LogoutRequest(::google::protobuf::Arena* arena, const LogoutRequest& from);
  LogoutRequest(::google::protobuf::Arena* arena, LogoutRequest&& from) noexcept
      : LogoutRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSessionTokenFieldNumber = 1,
    kReasonFieldNumber = 3,
    kLogoutAllSessionsFieldNumber = 2,
  };
  // string session_token = 1;
  void clear_session_token() ;
  const std::string& session_token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_session_token(Arg_&& arg, Args_... args);
  std::string* mutable_session_token();
  PROTOBUF_NODISCARD std::string* release_session_token();
  void set_allocated_session_token(std::string* value);

  private:
  const std::string& _internal_session_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_token(
      const std::string& value);
  std::string* _internal_mutable_session_token();

  public:
  // string reason = 3;
  void clear_reason() ;
  const std::string& reason() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reason(Arg_&& arg, Args_... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* value);

  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(
      const std::string& value);
  std::string* _internal_mutable_reason();

  public:
  // bool logout_all_sessions = 2;
  void clear_logout_all_sessions() ;
  bool logout_all_sessions() const;
  void set_logout_all_sessions(bool value);

  private:
  bool _internal_logout_all_sessions() const;
  void _internal_set_logout_all_sessions(bool value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.LogoutRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      48, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LogoutRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr session_token_;
    ::google::protobuf::internal::ArenaStringPtr reason_;
    bool logout_all_sessions_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class EmailVerificationRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.EmailVerificationRequest) */ {
 public:
  inline EmailVerificationRequest() : EmailVerificationRequest(nullptr) {}
  ~EmailVerificationRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(EmailVerificationRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(EmailVerificationRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EmailVerificationRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline EmailVerificationRequest(const EmailVerificationRequest& from) : EmailVerificationRequest(nullptr, from) {}
  inline EmailVerificationRequest(EmailVerificationRequest&& from) noexcept
      : EmailVerificationRequest(nullptr, std::move(from)) {}
  inline EmailVerificationRequest& operator=(const EmailVerificationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmailVerificationRequest& operator=(EmailVerificationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmailVerificationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmailVerificationRequest* internal_default_instance() {
    return reinterpret_cast<const EmailVerificationRequest*>(
        &_EmailVerificationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;
  friend void swap(EmailVerificationRequest& a, EmailVerificationRequest& b) { a.Swap(&b); }
  inline void Swap(EmailVerificationRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmailVerificationRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmailVerificationRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<EmailVerificationRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EmailVerificationRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EmailVerificationRequest& from) { EmailVerificationRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(EmailVerificationRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.EmailVerificationRequest"; }

 protected:
  explicit EmailVerificationRequest(::google::protobuf::Arena* arena);
  EmailVerificationRequest(::google::protobuf::Arena* arena, const EmailVerificationRequest& from);
  EmailVerificationRequest(::google::protobuf::Arena* arena, EmailVerificationRequest&& from) noexcept
      : EmailVerificationRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kVerificationTokenFieldNumber = 1,
    kEmailFieldNumber = 2,
  };
  // string verification_token = 1;
  void clear_verification_token() ;
  const std::string& verification_token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_verification_token(Arg_&& arg, Args_... args);
  std::string* mutable_verification_token();
  PROTOBUF_NODISCARD std::string* release_verification_token();
  void set_allocated_verification_token(std::string* value);

  private:
  const std::string& _internal_verification_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_verification_token(
      const std::string& value);
  std::string* _internal_mutable_verification_token();

  public:
  // string email = 2;
  void clear_email() ;
  const std::string& email() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_email(Arg_&& arg, Args_... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* value);

  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(
      const std::string& value);
  std::string* _internal_mutable_email();

  public:
  // @@protoc_insertion_point(class_scope:blokus.EmailVerificationRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      63, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EmailVerificationRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr verification_token_;
    ::google::protobuf::internal::ArenaStringPtr email_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class AuthRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.AuthRequest) */ {
 public:
  inline AuthRequest() : AuthRequest(nullptr) {}
  ~AuthRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AuthRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AuthRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AuthRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline AuthRequest(const AuthRequest& from) : AuthRequest(nullptr, from) {}
  inline AuthRequest(AuthRequest&& from) noexcept
      : AuthRequest(nullptr, std::move(from)) {}
  inline AuthRequest& operator=(const AuthRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthRequest& operator=(AuthRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthRequest* internal_default_instance() {
    return reinterpret_cast<const AuthRequest*>(
        &_AuthRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(AuthRequest& a, AuthRequest& b) { a.Swap(&b); }
  inline void Swap(AuthRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AuthRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AuthRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AuthRequest& from) { AuthRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AuthRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.AuthRequest"; }

 protected:
  explicit AuthRequest(::google::protobuf::Arena* arena);
  AuthRequest(::google::protobuf::Arena* arena, const AuthRequest& from);
  AuthRequest(::google::protobuf::Arena* arena, AuthRequest&& from) noexcept
      : AuthRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUsernameFieldNumber = 2,
    kPasswordFieldNumber = 3,
    kEmailFieldNumber = 4,
    kSessionTokenFieldNumber = 5,
    kGuestIdFieldNumber = 6,
    kClientVersionFieldNumber = 10,
    kPlatformFieldNumber = 11,
    kDeviceIdFieldNumber = 12,
    kUserAgentFieldNumber = 13,
    kCaptchaResponseFieldNumber = 16,
    kMethodFieldNumber = 1,
    kRememberMeFieldNumber = 15,
  };
  // string username = 2;
  void clear_username() ;
  const std::string& username() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_username(Arg_&& arg, Args_... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* value);

  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(
      const std::string& value);
  std::string* _internal_mutable_username();

  public:
  // string password = 3;
  void clear_password() ;
  const std::string& password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* value);

  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(
      const std::string& value);
  std::string* _internal_mutable_password();

  public:
  // string email = 4;
  void clear_email() ;
  const std::string& email() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_email(Arg_&& arg, Args_... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* value);

  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(
      const std::string& value);
  std::string* _internal_mutable_email();

  public:
  // string session_token = 5;
  void clear_session_token() ;
  const std::string& session_token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_session_token(Arg_&& arg, Args_... args);
  std::string* mutable_session_token();
  PROTOBUF_NODISCARD std::string* release_session_token();
  void set_allocated_session_token(std::string* value);

  private:
  const std::string& _internal_session_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_token(
      const std::string& value);
  std::string* _internal_mutable_session_token();

  public:
  // string guest_id = 6;
  void clear_guest_id() ;
  const std::string& guest_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_guest_id(Arg_&& arg, Args_... args);
  std::string* mutable_guest_id();
  PROTOBUF_NODISCARD std::string* release_guest_id();
  void set_allocated_guest_id(std::string* value);

  private:
  const std::string& _internal_guest_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_guest_id(
      const std::string& value);
  std::string* _internal_mutable_guest_id();

  public:
  // string client_version = 10;
  void clear_client_version() ;
  const std::string& client_version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_client_version(Arg_&& arg, Args_... args);
  std::string* mutable_client_version();
  PROTOBUF_NODISCARD std::string* release_client_version();
  void set_allocated_client_version(std::string* value);

  private:
  const std::string& _internal_client_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_version(
      const std::string& value);
  std::string* _internal_mutable_client_version();

  public:
  // string platform = 11;
  void clear_platform() ;
  const std::string& platform() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_platform(Arg_&& arg, Args_... args);
  std::string* mutable_platform();
  PROTOBUF_NODISCARD std::string* release_platform();
  void set_allocated_platform(std::string* value);

  private:
  const std::string& _internal_platform() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_platform(
      const std::string& value);
  std::string* _internal_mutable_platform();

  public:
  // string device_id = 12;
  void clear_device_id() ;
  const std::string& device_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_device_id(Arg_&& arg, Args_... args);
  std::string* mutable_device_id();
  PROTOBUF_NODISCARD std::string* release_device_id();
  void set_allocated_device_id(std::string* value);

  private:
  const std::string& _internal_device_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_id(
      const std::string& value);
  std::string* _internal_mutable_device_id();

  public:
  // string user_agent = 13;
  void clear_user_agent() ;
  const std::string& user_agent() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_agent(Arg_&& arg, Args_... args);
  std::string* mutable_user_agent();
  PROTOBUF_NODISCARD std::string* release_user_agent();
  void set_allocated_user_agent(std::string* value);

  private:
  const std::string& _internal_user_agent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_agent(
      const std::string& value);
  std::string* _internal_mutable_user_agent();

  public:
  // string captcha_response = 16;
  void clear_captcha_response() ;
  const std::string& captcha_response() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_captcha_response(Arg_&& arg, Args_... args);
  std::string* mutable_captcha_response();
  PROTOBUF_NODISCARD std::string* release_captcha_response();
  void set_allocated_captcha_response(std::string* value);

  private:
  const std::string& _internal_captcha_response() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_captcha_response(
      const std::string& value);
  std::string* _internal_mutable_captcha_response();

  public:
  // .blokus.AuthMethod method = 1;
  void clear_method() ;
  ::blokus::AuthMethod method() const;
  void set_method(::blokus::AuthMethod value);

  private:
  ::blokus::AuthMethod _internal_method() const;
  void _internal_set_method(::blokus::AuthMethod value);

  public:
  // bool remember_me = 15;
  void clear_remember_me() ;
  bool remember_me() const;
  void set_remember_me(bool value);

  private:
  bool _internal_remember_me() const;
  void _internal_set_remember_me(bool value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.AuthRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 12, 0,
      134, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AuthRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr username_;
    ::google::protobuf::internal::ArenaStringPtr password_;
    ::google::protobuf::internal::ArenaStringPtr email_;
    ::google::protobuf::internal::ArenaStringPtr session_token_;
    ::google::protobuf::internal::ArenaStringPtr guest_id_;
    ::google::protobuf::internal::ArenaStringPtr client_version_;
    ::google::protobuf::internal::ArenaStringPtr platform_;
    ::google::protobuf::internal::ArenaStringPtr device_id_;
    ::google::protobuf::internal::ArenaStringPtr user_agent_;
    ::google::protobuf::internal::ArenaStringPtr captcha_response_;
    int method_;
    bool remember_me_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class SessionValidationRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.SessionValidationRequest) */ {
 public:
  inline SessionValidationRequest() : SessionValidationRequest(nullptr) {}
  ~SessionValidationRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SessionValidationRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SessionValidationRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SessionValidationRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline SessionValidationRequest(const SessionValidationRequest& from) : SessionValidationRequest(nullptr, from) {}
  inline SessionValidationRequest(SessionValidationRequest&& from) noexcept
      : SessionValidationRequest(nullptr, std::move(from)) {}
  inline SessionValidationRequest& operator=(const SessionValidationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionValidationRequest& operator=(SessionValidationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SessionValidationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SessionValidationRequest* internal_default_instance() {
    return reinterpret_cast<const SessionValidationRequest*>(
        &_SessionValidationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(SessionValidationRequest& a, SessionValidationRequest& b) { a.Swap(&b); }
  inline void Swap(SessionValidationRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionValidationRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SessionValidationRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SessionValidationRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SessionValidationRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SessionValidationRequest& from) { SessionValidationRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SessionValidationRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.SessionValidationRequest"; }

 protected:
  explicit SessionValidationRequest(::google::protobuf::Arena* arena);
  SessionValidationRequest(::google::protobuf::Arena* arena, const SessionValidationRequest& from);
  SessionValidationRequest(::google::protobuf::Arena* arena, SessionValidationRequest&& from) noexcept
      : SessionValidationRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSessionTokenFieldNumber = 1,
    kLastActivityFieldNumber = 2,
  };
  // string session_token = 1;
  void clear_session_token() ;
  const std::string& session_token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_session_token(Arg_&& arg, Args_... args);
  std::string* mutable_session_token();
  PROTOBUF_NODISCARD std::string* release_session_token();
  void set_allocated_session_token(std::string* value);

  private:
  const std::string& _internal_session_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_token(
      const std::string& value);
  std::string* _internal_mutable_session_token();

  public:
  // .google.protobuf.Timestamp last_activity = 2;
  bool has_last_activity() const;
  void clear_last_activity() ;
  const ::google::protobuf::Timestamp& last_activity() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_last_activity();
  ::google::protobuf::Timestamp* mutable_last_activity();
  void set_allocated_last_activity(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_last_activity(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_last_activity();

  private:
  const ::google::protobuf::Timestamp& _internal_last_activity() const;
  ::google::protobuf::Timestamp* _internal_mutable_last_activity();

  public:
  // @@protoc_insertion_point(class_scope:blokus.SessionValidationRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      53, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SessionValidationRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr session_token_;
    ::google::protobuf::Timestamp* last_activity_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class HeartbeatRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.HeartbeatRequest) */ {
 public:
  inline HeartbeatRequest() : HeartbeatRequest(nullptr) {}
  ~HeartbeatRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(HeartbeatRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(HeartbeatRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HeartbeatRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline HeartbeatRequest(const HeartbeatRequest& from) : HeartbeatRequest(nullptr, from) {}
  inline HeartbeatRequest(HeartbeatRequest&& from) noexcept
      : HeartbeatRequest(nullptr, std::move(from)) {}
  inline HeartbeatRequest& operator=(const HeartbeatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeartbeatRequest& operator=(HeartbeatRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeartbeatRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeartbeatRequest* internal_default_instance() {
    return reinterpret_cast<const HeartbeatRequest*>(
        &_HeartbeatRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(HeartbeatRequest& a, HeartbeatRequest& b) { a.Swap(&b); }
  inline void Swap(HeartbeatRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeartbeatRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HeartbeatRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<HeartbeatRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HeartbeatRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HeartbeatRequest& from) { HeartbeatRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(HeartbeatRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.HeartbeatRequest"; }

 protected:
  explicit HeartbeatRequest(::google::protobuf::Arena* arena);
  HeartbeatRequest(::google::protobuf::Arena* arena, const HeartbeatRequest& from);
  HeartbeatRequest(::google::protobuf::Arena* arena, HeartbeatRequest&& from) noexcept
      : HeartbeatRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kClientTimeFieldNumber = 1,
    kSequenceNumberFieldNumber = 2,
    kCpuUsageFieldNumber = 3,
    kMemoryUsageMbFieldNumber = 4,
    kFpsFieldNumber = 5,
    kIsWindowFocusedFieldNumber = 6,
  };
  // .google.protobuf.Timestamp client_time = 1;
  bool has_client_time() const;
  void clear_client_time() ;
  const ::google::protobuf::Timestamp& client_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_client_time();
  ::google::protobuf::Timestamp* mutable_client_time();
  void set_allocated_client_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_client_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_client_time();

  private:
  const ::google::protobuf::Timestamp& _internal_client_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_client_time();

  public:
  // uint32 sequence_number = 2;
  void clear_sequence_number() ;
  ::uint32_t sequence_number() const;
  void set_sequence_number(::uint32_t value);

  private:
  ::uint32_t _internal_sequence_number() const;
  void _internal_set_sequence_number(::uint32_t value);

  public:
  // float cpu_usage = 3;
  void clear_cpu_usage() ;
  float cpu_usage() const;
  void set_cpu_usage(float value);

  private:
  float _internal_cpu_usage() const;
  void _internal_set_cpu_usage(float value);

  public:
  // uint32 memory_usage_mb = 4;
  void clear_memory_usage_mb() ;
  ::uint32_t memory_usage_mb() const;
  void set_memory_usage_mb(::uint32_t value);

  private:
  ::uint32_t _internal_memory_usage_mb() const;
  void _internal_set_memory_usage_mb(::uint32_t value);

  public:
  // uint32 fps = 5;
  void clear_fps() ;
  ::uint32_t fps() const;
  void set_fps(::uint32_t value);

  private:
  ::uint32_t _internal_fps() const;
  void _internal_set_fps(::uint32_t value);

  public:
  // bool is_window_focused = 6;
  void clear_is_window_focused() ;
  bool is_window_focused() const;
  void set_is_window_focused(bool value);

  private:
  bool _internal_is_window_focused() const;
  void _internal_set_is_window_focused(bool value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.HeartbeatRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const HeartbeatRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::Timestamp* client_time_;
    ::uint32_t sequence_number_;
    float cpu_usage_;
    ::uint32_t memory_usage_mb_;
    ::uint32_t fps_;
    bool is_window_focused_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class AccountStatusInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.AccountStatusInfo) */ {
 public:
  inline AccountStatusInfo() : AccountStatusInfo(nullptr) {}
  ~AccountStatusInfo() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AccountStatusInfo* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AccountStatusInfo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AccountStatusInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline AccountStatusInfo(const AccountStatusInfo& from) : AccountStatusInfo(nullptr, from) {}
  inline AccountStatusInfo(AccountStatusInfo&& from) noexcept
      : AccountStatusInfo(nullptr, std::move(from)) {}
  inline AccountStatusInfo& operator=(const AccountStatusInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountStatusInfo& operator=(AccountStatusInfo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccountStatusInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccountStatusInfo* internal_default_instance() {
    return reinterpret_cast<const AccountStatusInfo*>(
        &_AccountStatusInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(AccountStatusInfo& a, AccountStatusInfo& b) { a.Swap(&b); }
  inline void Swap(AccountStatusInfo* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountStatusInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccountStatusInfo* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AccountStatusInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AccountStatusInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AccountStatusInfo& from) { AccountStatusInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AccountStatusInfo* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.AccountStatusInfo"; }

 protected:
  explicit AccountStatusInfo(::google::protobuf::Arena* arena);
  AccountStatusInfo(::google::protobuf::Arena* arena, const AccountStatusInfo& from);
  AccountStatusInfo(::google::protobuf::Arena* arena, AccountStatusInfo&& from) noexcept
      : AccountStatusInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kViolationHistoryFieldNumber = 6,
    kStatusReasonFieldNumber = 2,
    kAppealUrlFieldNumber = 7,
    kStatusSinceFieldNumber = 3,
    kStatusUntilFieldNumber = 4,
    kStatusFieldNumber = 1,
    kWarningCountFieldNumber = 5,
  };
  // repeated string violation_history = 6;
  int violation_history_size() const;
  private:
  int _internal_violation_history_size() const;

  public:
  void clear_violation_history() ;
  const std::string& violation_history(int index) const;
  std::string* mutable_violation_history(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_violation_history(int index, Arg_&& value, Args_... args);
  std::string* add_violation_history();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_violation_history(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& violation_history() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_violation_history();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_violation_history() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_violation_history();

  public:
  // string status_reason = 2;
  void clear_status_reason() ;
  const std::string& status_reason() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_status_reason(Arg_&& arg, Args_... args);
  std::string* mutable_status_reason();
  PROTOBUF_NODISCARD std::string* release_status_reason();
  void set_allocated_status_reason(std::string* value);

  private:
  const std::string& _internal_status_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status_reason(
      const std::string& value);
  std::string* _internal_mutable_status_reason();

  public:
  // string appeal_url = 7;
  void clear_appeal_url() ;
  const std::string& appeal_url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_appeal_url(Arg_&& arg, Args_... args);
  std::string* mutable_appeal_url();
  PROTOBUF_NODISCARD std::string* release_appeal_url();
  void set_allocated_appeal_url(std::string* value);

  private:
  const std::string& _internal_appeal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_appeal_url(
      const std::string& value);
  std::string* _internal_mutable_appeal_url();

  public:
  // .google.protobuf.Timestamp status_since = 3;
  bool has_status_since() const;
  void clear_status_since() ;
  const ::google::protobuf::Timestamp& status_since() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_status_since();
  ::google::protobuf::Timestamp* mutable_status_since();
  void set_allocated_status_since(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_status_since(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_status_since();

  private:
  const ::google::protobuf::Timestamp& _internal_status_since() const;
  ::google::protobuf::Timestamp* _internal_mutable_status_since();

  public:
  // .google.protobuf.Timestamp status_until = 4;
  bool has_status_until() const;
  void clear_status_until() ;
  const ::google::protobuf::Timestamp& status_until() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_status_until();
  ::google::protobuf::Timestamp* mutable_status_until();
  void set_allocated_status_until(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_status_until(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_status_until();

  private:
  const ::google::protobuf::Timestamp& _internal_status_until() const;
  ::google::protobuf::Timestamp* _internal_mutable_status_until();

  public:
  // .blokus.AccountStatus status = 1;
  void clear_status() ;
  ::blokus::AccountStatus status() const;
  void set_status(::blokus::AccountStatus value);

  private:
  ::blokus::AccountStatus _internal_status() const;
  void _internal_set_status(::blokus::AccountStatus value);

  public:
  // int32 warning_count = 5;
  void clear_warning_count() ;
  ::int32_t warning_count() const;
  void set_warning_count(::int32_t value);

  private:
  ::int32_t _internal_warning_count() const;
  void _internal_set_warning_count(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.AccountStatusInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 2,
      73, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AccountStatusInfo& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> violation_history_;
    ::google::protobuf::internal::ArenaStringPtr status_reason_;
    ::google::protobuf::internal::ArenaStringPtr appeal_url_;
    ::google::protobuf::Timestamp* status_since_;
    ::google::protobuf::Timestamp* status_until_;
    int status_;
    ::int32_t warning_count_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class WelcomeMessage final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.WelcomeMessage) */ {
 public:
  inline WelcomeMessage() : WelcomeMessage(nullptr) {}
  ~WelcomeMessage() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(WelcomeMessage* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(WelcomeMessage));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR WelcomeMessage(
      ::google::protobuf::internal::ConstantInitialized);

  inline WelcomeMessage(const WelcomeMessage& from) : WelcomeMessage(nullptr, from) {}
  inline WelcomeMessage(WelcomeMessage&& from) noexcept
      : WelcomeMessage(nullptr, std::move(from)) {}
  inline WelcomeMessage& operator=(const WelcomeMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline WelcomeMessage& operator=(WelcomeMessage&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WelcomeMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const WelcomeMessage* internal_default_instance() {
    return reinterpret_cast<const WelcomeMessage*>(
        &_WelcomeMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(WelcomeMessage& a, WelcomeMessage& b) { a.Swap(&b); }
  inline void Swap(WelcomeMessage* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WelcomeMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WelcomeMessage* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<WelcomeMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WelcomeMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const WelcomeMessage& from) { WelcomeMessage::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(WelcomeMessage* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.WelcomeMessage"; }

 protected:
  explicit WelcomeMessage(::google::protobuf::Arena* arena);
  WelcomeMessage(::google::protobuf::Arena* arena, const WelcomeMessage& from);
  WelcomeMessage(::google::protobuf::Arena* arena, WelcomeMessage&& from) noexcept
      : WelcomeMessage(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAvailableGameModesFieldNumber = 3,
    kDailyRewardsFieldNumber = 5,
    kAchievementsFieldNumber = 6,
    kFriendOnlineFieldNumber = 7,
    kSystemNotificationsFieldNumber = 10,
    kMotdFieldNumber = 11,
    kUserInfoFieldNumber = 1,
    kServerInfoFieldNumber = 2,
    kRecommendedRoomCountFieldNumber = 4,
    kRankPositionFieldNumber = 15,
    kTotalPlayersFieldNumber = 16,
    kWinRateFieldNumber = 17,
  };
  // repeated string available_game_modes = 3;
  int available_game_modes_size() const;
  private:
  int _internal_available_game_modes_size() const;

  public:
  void clear_available_game_modes() ;
  const std::string& available_game_modes(int index) const;
  std::string* mutable_available_game_modes(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_available_game_modes(int index, Arg_&& value, Args_... args);
  std::string* add_available_game_modes();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_available_game_modes(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& available_game_modes() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_available_game_modes();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_available_game_modes() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_available_game_modes();

  public:
  // repeated string daily_rewards = 5;
  int daily_rewards_size() const;
  private:
  int _internal_daily_rewards_size() const;

  public:
  void clear_daily_rewards() ;
  const std::string& daily_rewards(int index) const;
  std::string* mutable_daily_rewards(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_daily_rewards(int index, Arg_&& value, Args_... args);
  std::string* add_daily_rewards();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_daily_rewards(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& daily_rewards() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_daily_rewards();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_daily_rewards() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_daily_rewards();

  public:
  // repeated string achievements = 6;
  int achievements_size() const;
  private:
  int _internal_achievements_size() const;

  public:
  void clear_achievements() ;
  const std::string& achievements(int index) const;
  std::string* mutable_achievements(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_achievements(int index, Arg_&& value, Args_... args);
  std::string* add_achievements();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_achievements(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& achievements() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_achievements();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_achievements() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_achievements();

  public:
  // repeated string friend_online = 7;
  int friend_online_size() const;
  private:
  int _internal_friend_online_size() const;

  public:
  void clear_friend_online() ;
  const std::string& friend_online(int index) const;
  std::string* mutable_friend_online(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_friend_online(int index, Arg_&& value, Args_... args);
  std::string* add_friend_online();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_friend_online(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& friend_online() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_friend_online();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_friend_online() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_friend_online();

  public:
  // repeated string system_notifications = 10;
  int system_notifications_size() const;
  private:
  int _internal_system_notifications_size() const;

  public:
  void clear_system_notifications() ;
  const std::string& system_notifications(int index) const;
  std::string* mutable_system_notifications(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_system_notifications(int index, Arg_&& value, Args_... args);
  std::string* add_system_notifications();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_system_notifications(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& system_notifications() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_system_notifications();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_system_notifications() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_system_notifications();

  public:
  // string motd = 11;
  void clear_motd() ;
  const std::string& motd() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_motd(Arg_&& arg, Args_... args);
  std::string* mutable_motd();
  PROTOBUF_NODISCARD std::string* release_motd();
  void set_allocated_motd(std::string* value);

  private:
  const std::string& _internal_motd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_motd(
      const std::string& value);
  std::string* _internal_mutable_motd();

  public:
  // .blokus.UserInfo user_info = 1;
  bool has_user_info() const;
  void clear_user_info() ;
  const ::blokus::UserInfo& user_info() const;
  PROTOBUF_NODISCARD ::blokus::UserInfo* release_user_info();
  ::blokus::UserInfo* mutable_user_info();
  void set_allocated_user_info(::blokus::UserInfo* value);
  void unsafe_arena_set_allocated_user_info(::blokus::UserInfo* value);
  ::blokus::UserInfo* unsafe_arena_release_user_info();

  private:
  const ::blokus::UserInfo& _internal_user_info() const;
  ::blokus::UserInfo* _internal_mutable_user_info();

  public:
  // .blokus.ServerInfo server_info = 2;
  bool has_server_info() const;
  void clear_server_info() ;
  const ::blokus::ServerInfo& server_info() const;
  PROTOBUF_NODISCARD ::blokus::ServerInfo* release_server_info();
  ::blokus::ServerInfo* mutable_server_info();
  void set_allocated_server_info(::blokus::ServerInfo* value);
  void unsafe_arena_set_allocated_server_info(::blokus::ServerInfo* value);
  ::blokus::ServerInfo* unsafe_arena_release_server_info();

  private:
  const ::blokus::ServerInfo& _internal_server_info() const;
  ::blokus::ServerInfo* _internal_mutable_server_info();

  public:
  // int32 recommended_room_count = 4;
  void clear_recommended_room_count() ;
  ::int32_t recommended_room_count() const;
  void set_recommended_room_count(::int32_t value);

  private:
  ::int32_t _internal_recommended_room_count() const;
  void _internal_set_recommended_room_count(::int32_t value);

  public:
  // int32 rank_position = 15;
  void clear_rank_position() ;
  ::int32_t rank_position() const;
  void set_rank_position(::int32_t value);

  private:
  ::int32_t _internal_rank_position() const;
  void _internal_set_rank_position(::int32_t value);

  public:
  // int32 total_players = 16;
  void clear_total_players() ;
  ::int32_t total_players() const;
  void set_total_players(::int32_t value);

  private:
  ::int32_t _internal_total_players() const;
  void _internal_set_total_players(::int32_t value);

  public:
  // float win_rate = 17;
  void clear_win_rate() ;
  float win_rate() const;
  void set_win_rate(float value);

  private:
  float _internal_win_rate() const;
  void _internal_set_win_rate(float value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.WelcomeMessage)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 12, 2,
      120, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const WelcomeMessage& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> available_game_modes_;
    ::google::protobuf::RepeatedPtrField<std::string> daily_rewards_;
    ::google::protobuf::RepeatedPtrField<std::string> achievements_;
    ::google::protobuf::RepeatedPtrField<std::string> friend_online_;
    ::google::protobuf::RepeatedPtrField<std::string> system_notifications_;
    ::google::protobuf::internal::ArenaStringPtr motd_;
    ::blokus::UserInfo* user_info_;
    ::blokus::ServerInfo* server_info_;
    ::int32_t recommended_room_count_;
    ::int32_t rank_position_;
    ::int32_t total_players_;
    float win_rate_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class SessionValidationResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.SessionValidationResponse) */ {
 public:
  inline SessionValidationResponse() : SessionValidationResponse(nullptr) {}
  ~SessionValidationResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SessionValidationResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SessionValidationResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SessionValidationResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline SessionValidationResponse(const SessionValidationResponse& from) : SessionValidationResponse(nullptr, from) {}
  inline SessionValidationResponse(SessionValidationResponse&& from) noexcept
      : SessionValidationResponse(nullptr, std::move(from)) {}
  inline SessionValidationResponse& operator=(const SessionValidationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionValidationResponse& operator=(SessionValidationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SessionValidationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SessionValidationResponse* internal_default_instance() {
    return reinterpret_cast<const SessionValidationResponse*>(
        &_SessionValidationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(SessionValidationResponse& a, SessionValidationResponse& b) { a.Swap(&b); }
  inline void Swap(SessionValidationResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionValidationResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SessionValidationResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SessionValidationResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SessionValidationResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SessionValidationResponse& from) { SessionValidationResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SessionValidationResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.SessionValidationResponse"; }

 protected:
  explicit SessionValidationResponse(::google::protobuf::Arena* arena);
  SessionValidationResponse(::google::protobuf::Arena* arena, const SessionValidationResponse& from);
  SessionValidationResponse(::google::protobuf::Arena* arena, SessionValidationResponse&& from) noexcept
      : SessionValidationResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNewTokenFieldNumber = 5,
    kResultFieldNumber = 1,
    kExpiresAtFieldNumber = 3,
    kIsValidFieldNumber = 2,
    kRequiresRenewalFieldNumber = 4,
  };
  // string new_token = 5;
  void clear_new_token() ;
  const std::string& new_token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_new_token(Arg_&& arg, Args_... args);
  std::string* mutable_new_token();
  PROTOBUF_NODISCARD std::string* release_new_token();
  void set_allocated_new_token(std::string* value);

  private:
  const std::string& _internal_new_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_new_token(
      const std::string& value);
  std::string* _internal_mutable_new_token();

  public:
  // .blokus.Result result = 1;
  bool has_result() const;
  void clear_result() ;
  const ::blokus::Result& result() const;
  PROTOBUF_NODISCARD ::blokus::Result* release_result();
  ::blokus::Result* mutable_result();
  void set_allocated_result(::blokus::Result* value);
  void unsafe_arena_set_allocated_result(::blokus::Result* value);
  ::blokus::Result* unsafe_arena_release_result();

  private:
  const ::blokus::Result& _internal_result() const;
  ::blokus::Result* _internal_mutable_result();

  public:
  // .google.protobuf.Timestamp expires_at = 3;
  bool has_expires_at() const;
  void clear_expires_at() ;
  const ::google::protobuf::Timestamp& expires_at() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_expires_at();
  ::google::protobuf::Timestamp* mutable_expires_at();
  void set_allocated_expires_at(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_expires_at(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_expires_at();

  private:
  const ::google::protobuf::Timestamp& _internal_expires_at() const;
  ::google::protobuf::Timestamp* _internal_mutable_expires_at();

  public:
  // bool is_valid = 2;
  void clear_is_valid() ;
  bool is_valid() const;
  void set_is_valid(bool value);

  private:
  bool _internal_is_valid() const;
  void _internal_set_is_valid(bool value);

  public:
  // bool requires_renewal = 4;
  void clear_requires_renewal() ;
  bool requires_renewal() const;
  void set_requires_renewal(bool value);

  private:
  bool _internal_requires_renewal() const;
  void _internal_set_requires_renewal(bool value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.SessionValidationResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 2,
      50, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SessionValidationResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr new_token_;
    ::blokus::Result* result_;
    ::google::protobuf::Timestamp* expires_at_;
    bool is_valid_;
    bool requires_renewal_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class RegisterResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.RegisterResponse) */ {
 public:
  inline RegisterResponse() : RegisterResponse(nullptr) {}
  ~RegisterResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(RegisterResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(RegisterResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RegisterResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline RegisterResponse(const RegisterResponse& from) : RegisterResponse(nullptr, from) {}
  inline RegisterResponse(RegisterResponse&& from) noexcept
      : RegisterResponse(nullptr, std::move(from)) {}
  inline RegisterResponse& operator=(const RegisterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterResponse& operator=(RegisterResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterResponse* internal_default_instance() {
    return reinterpret_cast<const RegisterResponse*>(
        &_RegisterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(RegisterResponse& a, RegisterResponse& b) { a.Swap(&b); }
  inline void Swap(RegisterResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<RegisterResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RegisterResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RegisterResponse& from) { RegisterResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(RegisterResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.RegisterResponse"; }

 protected:
  explicit RegisterResponse(::google::protobuf::Arena* arena);
  RegisterResponse(::google::protobuf::Arena* arena, const RegisterResponse& from);
  RegisterResponse(::google::protobuf::Arena* arena, RegisterResponse&& from) noexcept
      : RegisterResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValidationErrorsFieldNumber = 10,
    kConflictingFieldsFieldNumber = 11,
    kUserIdFieldNumber = 2,
    kVerificationEmailSentToFieldNumber = 4,
    kSessionTokenFieldNumber = 5,
    kResultFieldNumber = 1,
    kTokenExpiresAtFieldNumber = 6,
    kUserInfoFieldNumber = 7,
    kEmailVerificationRequiredFieldNumber = 3,
  };
  // repeated string validation_errors = 10;
  int validation_errors_size() const;
  private:
  int _internal_validation_errors_size() const;

  public:
  void clear_validation_errors() ;
  const std::string& validation_errors(int index) const;
  std::string* mutable_validation_errors(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_validation_errors(int index, Arg_&& value, Args_... args);
  std::string* add_validation_errors();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_validation_errors(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& validation_errors() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_validation_errors();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_validation_errors() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_validation_errors();

  public:
  // repeated string conflicting_fields = 11;
  int conflicting_fields_size() const;
  private:
  int _internal_conflicting_fields_size() const;

  public:
  void clear_conflicting_fields() ;
  const std::string& conflicting_fields(int index) const;
  std::string* mutable_conflicting_fields(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_conflicting_fields(int index, Arg_&& value, Args_... args);
  std::string* add_conflicting_fields();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_conflicting_fields(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& conflicting_fields() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_conflicting_fields();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_conflicting_fields() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_conflicting_fields();

  public:
  // string user_id = 2;
  void clear_user_id() ;
  const std::string& user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* value);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // string verification_email_sent_to = 4;
  void clear_verification_email_sent_to() ;
  const std::string& verification_email_sent_to() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_verification_email_sent_to(Arg_&& arg, Args_... args);
  std::string* mutable_verification_email_sent_to();
  PROTOBUF_NODISCARD std::string* release_verification_email_sent_to();
  void set_allocated_verification_email_sent_to(std::string* value);

  private:
  const std::string& _internal_verification_email_sent_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_verification_email_sent_to(
      const std::string& value);
  std::string* _internal_mutable_verification_email_sent_to();

  public:
  // string session_token = 5;
  void clear_session_token() ;
  const std::string& session_token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_session_token(Arg_&& arg, Args_... args);
  std::string* mutable_session_token();
  PROTOBUF_NODISCARD std::string* release_session_token();
  void set_allocated_session_token(std::string* value);

  private:
  const std::string& _internal_session_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_token(
      const std::string& value);
  std::string* _internal_mutable_session_token();

  public:
  // .blokus.Result result = 1;
  bool has_result() const;
  void clear_result() ;
  const ::blokus::Result& result() const;
  PROTOBUF_NODISCARD ::blokus::Result* release_result();
  ::blokus::Result* mutable_result();
  void set_allocated_result(::blokus::Result* value);
  void unsafe_arena_set_allocated_result(::blokus::Result* value);
  ::blokus::Result* unsafe_arena_release_result();

  private:
  const ::blokus::Result& _internal_result() const;
  ::blokus::Result* _internal_mutable_result();

  public:
  // .google.protobuf.Timestamp token_expires_at = 6;
  bool has_token_expires_at() const;
  void clear_token_expires_at() ;
  const ::google::protobuf::Timestamp& token_expires_at() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_token_expires_at();
  ::google::protobuf::Timestamp* mutable_token_expires_at();
  void set_allocated_token_expires_at(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_token_expires_at(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_token_expires_at();

  private:
  const ::google::protobuf::Timestamp& _internal_token_expires_at() const;
  ::google::protobuf::Timestamp* _internal_mutable_token_expires_at();

  public:
  // .blokus.UserInfo user_info = 7;
  bool has_user_info() const;
  void clear_user_info() ;
  const ::blokus::UserInfo& user_info() const;
  PROTOBUF_NODISCARD ::blokus::UserInfo* release_user_info();
  ::blokus::UserInfo* mutable_user_info();
  void set_allocated_user_info(::blokus::UserInfo* value);
  void unsafe_arena_set_allocated_user_info(::blokus::UserInfo* value);
  ::blokus::UserInfo* unsafe_arena_release_user_info();

  private:
  const ::blokus::UserInfo& _internal_user_info() const;
  ::blokus::UserInfo* _internal_mutable_user_info();

  public:
  // bool email_verification_required = 3;
  void clear_email_verification_required() ;
  bool email_verification_required() const;
  void set_email_verification_required(bool value);

  private:
  bool _internal_email_verification_required() const;
  void _internal_set_email_verification_required(bool value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.RegisterResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 3,
      121, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RegisterResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> validation_errors_;
    ::google::protobuf::RepeatedPtrField<std::string> conflicting_fields_;
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    ::google::protobuf::internal::ArenaStringPtr verification_email_sent_to_;
    ::google::protobuf::internal::ArenaStringPtr session_token_;
    ::blokus::Result* result_;
    ::google::protobuf::Timestamp* token_expires_at_;
    ::blokus::UserInfo* user_info_;
    bool email_verification_required_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class PasswordResetResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.PasswordResetResponse) */ {
 public:
  inline PasswordResetResponse() : PasswordResetResponse(nullptr) {}
  ~PasswordResetResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PasswordResetResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PasswordResetResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PasswordResetResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline PasswordResetResponse(const PasswordResetResponse& from) : PasswordResetResponse(nullptr, from) {}
  inline PasswordResetResponse(PasswordResetResponse&& from) noexcept
      : PasswordResetResponse(nullptr, std::move(from)) {}
  inline PasswordResetResponse& operator=(const PasswordResetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PasswordResetResponse& operator=(PasswordResetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PasswordResetResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PasswordResetResponse* internal_default_instance() {
    return reinterpret_cast<const PasswordResetResponse*>(
        &_PasswordResetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(PasswordResetResponse& a, PasswordResetResponse& b) { a.Swap(&b); }
  inline void Swap(PasswordResetResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PasswordResetResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PasswordResetResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PasswordResetResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PasswordResetResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PasswordResetResponse& from) { PasswordResetResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PasswordResetResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.PasswordResetResponse"; }

 protected:
  explicit PasswordResetResponse(::google::protobuf::Arena* arena);
  PasswordResetResponse(::google::protobuf::Arena* arena, const PasswordResetResponse& from);
  PasswordResetResponse(::google::protobuf::Arena* arena, PasswordResetResponse&& from) noexcept
      : PasswordResetResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kMaskedEmailFieldNumber = 4,
    kResultFieldNumber = 1,
    kEmailSentFieldNumber = 3,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // string masked_email = 4;
  void clear_masked_email() ;
  const std::string& masked_email() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_masked_email(Arg_&& arg, Args_... args);
  std::string* mutable_masked_email();
  PROTOBUF_NODISCARD std::string* release_masked_email();
  void set_allocated_masked_email(std::string* value);

  private:
  const std::string& _internal_masked_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_masked_email(
      const std::string& value);
  std::string* _internal_mutable_masked_email();

  public:
  // .blokus.Result result = 1;
  bool has_result() const;
  void clear_result() ;
  const ::blokus::Result& result() const;
  PROTOBUF_NODISCARD ::blokus::Result* release_result();
  ::blokus::Result* mutable_result();
  void set_allocated_result(::blokus::Result* value);
  void unsafe_arena_set_allocated_result(::blokus::Result* value);
  ::blokus::Result* unsafe_arena_release_result();

  private:
  const ::blokus::Result& _internal_result() const;
  ::blokus::Result* _internal_mutable_result();

  public:
  // bool email_sent = 3;
  void clear_email_sent() ;
  bool email_sent() const;
  void set_email_sent(bool value);

  private:
  bool _internal_email_sent() const;
  void _internal_set_email_sent(bool value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.PasswordResetResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      56, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PasswordResetResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::google::protobuf::internal::ArenaStringPtr masked_email_;
    ::blokus::Result* result_;
    bool email_sent_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class PasswordChangeResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.PasswordChangeResponse) */ {
 public:
  inline PasswordChangeResponse() : PasswordChangeResponse(nullptr) {}
  ~PasswordChangeResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PasswordChangeResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PasswordChangeResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PasswordChangeResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline PasswordChangeResponse(const PasswordChangeResponse& from) : PasswordChangeResponse(nullptr, from) {}
  inline PasswordChangeResponse(PasswordChangeResponse&& from) noexcept
      : PasswordChangeResponse(nullptr, std::move(from)) {}
  inline PasswordChangeResponse& operator=(const PasswordChangeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PasswordChangeResponse& operator=(PasswordChangeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PasswordChangeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PasswordChangeResponse* internal_default_instance() {
    return reinterpret_cast<const PasswordChangeResponse*>(
        &_PasswordChangeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(PasswordChangeResponse& a, PasswordChangeResponse& b) { a.Swap(&b); }
  inline void Swap(PasswordChangeResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PasswordChangeResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PasswordChangeResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PasswordChangeResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PasswordChangeResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PasswordChangeResponse& from) { PasswordChangeResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PasswordChangeResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.PasswordChangeResponse"; }

 protected:
  explicit PasswordChangeResponse(::google::protobuf::Arena* arena);
  PasswordChangeResponse(::google::protobuf::Arena* arena, const PasswordChangeResponse& from);
  PasswordChangeResponse(::google::protobuf::Arena* arena, PasswordChangeResponse&& from) noexcept
      : PasswordChangeResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kResultFieldNumber = 1,
    kRequiresReloginFieldNumber = 3,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // .blokus.Result result = 1;
  bool has_result() const;
  void clear_result() ;
  const ::blokus::Result& result() const;
  PROTOBUF_NODISCARD ::blokus::Result* release_result();
  ::blokus::Result* mutable_result();
  void set_allocated_result(::blokus::Result* value);
  void unsafe_arena_set_allocated_result(::blokus::Result* value);
  ::blokus::Result* unsafe_arena_release_result();

  private:
  const ::blokus::Result& _internal_result() const;
  ::blokus::Result* _internal_mutable_result();

  public:
  // bool requires_relogin = 3;
  void clear_requires_relogin() ;
  bool requires_relogin() const;
  void set_requires_relogin(bool value);

  private:
  bool _internal_requires_relogin() const;
  void _internal_set_requires_relogin(bool value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.PasswordChangeResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      45, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PasswordChangeResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::blokus::Result* result_;
    bool requires_relogin_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class LogoutResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.LogoutResponse) */ {
 public:
  inline LogoutResponse() : LogoutResponse(nullptr) {}
  ~LogoutResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(LogoutResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(LogoutResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LogoutResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline LogoutResponse(const LogoutResponse& from) : LogoutResponse(nullptr, from) {}
  inline LogoutResponse(LogoutResponse&& from) noexcept
      : LogoutResponse(nullptr, std::move(from)) {}
  inline LogoutResponse& operator=(const LogoutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogoutResponse& operator=(LogoutResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogoutResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogoutResponse* internal_default_instance() {
    return reinterpret_cast<const LogoutResponse*>(
        &_LogoutResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(LogoutResponse& a, LogoutResponse& b) { a.Swap(&b); }
  inline void Swap(LogoutResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogoutResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogoutResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<LogoutResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LogoutResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LogoutResponse& from) { LogoutResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(LogoutResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.LogoutResponse"; }

 protected:
  explicit LogoutResponse(::google::protobuf::Arena* arena);
  LogoutResponse(::google::protobuf::Arena* arena, const LogoutResponse& from);
  LogoutResponse(::google::protobuf::Arena* arena, LogoutResponse&& from) noexcept
      : LogoutResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 2,
    kResultFieldNumber = 1,
    kLoggedOutAtFieldNumber = 3,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // .blokus.Result result = 1;
  bool has_result() const;
  void clear_result() ;
  const ::blokus::Result& result() const;
  PROTOBUF_NODISCARD ::blokus::Result* release_result();
  ::blokus::Result* mutable_result();
  void set_allocated_result(::blokus::Result* value);
  void unsafe_arena_set_allocated_result(::blokus::Result* value);
  ::blokus::Result* unsafe_arena_release_result();

  private:
  const ::blokus::Result& _internal_result() const;
  ::blokus::Result* _internal_mutable_result();

  public:
  // .google.protobuf.Timestamp logged_out_at = 3;
  bool has_logged_out_at() const;
  void clear_logged_out_at() ;
  const ::google::protobuf::Timestamp& logged_out_at() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_logged_out_at();
  ::google::protobuf::Timestamp* mutable_logged_out_at();
  void set_allocated_logged_out_at(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_logged_out_at(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_logged_out_at();

  private:
  const ::google::protobuf::Timestamp& _internal_logged_out_at() const;
  ::google::protobuf::Timestamp* _internal_mutable_logged_out_at();

  public:
  // @@protoc_insertion_point(class_scope:blokus.LogoutResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      37, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LogoutResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::blokus::Result* result_;
    ::google::protobuf::Timestamp* logged_out_at_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class HeartbeatResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.HeartbeatResponse) */ {
 public:
  inline HeartbeatResponse() : HeartbeatResponse(nullptr) {}
  ~HeartbeatResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(HeartbeatResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(HeartbeatResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HeartbeatResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline HeartbeatResponse(const HeartbeatResponse& from) : HeartbeatResponse(nullptr, from) {}
  inline HeartbeatResponse(HeartbeatResponse&& from) noexcept
      : HeartbeatResponse(nullptr, std::move(from)) {}
  inline HeartbeatResponse& operator=(const HeartbeatResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeartbeatResponse& operator=(HeartbeatResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeartbeatResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeartbeatResponse* internal_default_instance() {
    return reinterpret_cast<const HeartbeatResponse*>(
        &_HeartbeatResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(HeartbeatResponse& a, HeartbeatResponse& b) { a.Swap(&b); }
  inline void Swap(HeartbeatResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeartbeatResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HeartbeatResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<HeartbeatResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HeartbeatResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HeartbeatResponse& from) { HeartbeatResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(HeartbeatResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.HeartbeatResponse"; }

 protected:
  explicit HeartbeatResponse(::google::protobuf::Arena* arena);
  HeartbeatResponse(::google::protobuf::Arena* arena, const HeartbeatResponse& from);
  HeartbeatResponse(::google::protobuf::Arena* arena, HeartbeatResponse&& from) noexcept
      : HeartbeatResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kServerMessagesFieldNumber = 6,
    kUpdateUrlFieldNumber = 5,
    kServerTimeFieldNumber = 1,
    kServerInfoFieldNumber = 3,
    kSequenceNumberFieldNumber = 2,
    kForceUpdateRequiredFieldNumber = 4,
  };
  // repeated string server_messages = 6;
  int server_messages_size() const;
  private:
  int _internal_server_messages_size() const;

  public:
  void clear_server_messages() ;
  const std::string& server_messages(int index) const;
  std::string* mutable_server_messages(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_server_messages(int index, Arg_&& value, Args_... args);
  std::string* add_server_messages();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_server_messages(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& server_messages() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_server_messages();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_server_messages() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_server_messages();

  public:
  // string update_url = 5;
  void clear_update_url() ;
  const std::string& update_url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_update_url(Arg_&& arg, Args_... args);
  std::string* mutable_update_url();
  PROTOBUF_NODISCARD std::string* release_update_url();
  void set_allocated_update_url(std::string* value);

  private:
  const std::string& _internal_update_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_update_url(
      const std::string& value);
  std::string* _internal_mutable_update_url();

  public:
  // .google.protobuf.Timestamp server_time = 1;
  bool has_server_time() const;
  void clear_server_time() ;
  const ::google::protobuf::Timestamp& server_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_server_time();
  ::google::protobuf::Timestamp* mutable_server_time();
  void set_allocated_server_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_server_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_server_time();

  private:
  const ::google::protobuf::Timestamp& _internal_server_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_server_time();

  public:
  // .blokus.ServerInfo server_info = 3;
  bool has_server_info() const;
  void clear_server_info() ;
  const ::blokus::ServerInfo& server_info() const;
  PROTOBUF_NODISCARD ::blokus::ServerInfo* release_server_info();
  ::blokus::ServerInfo* mutable_server_info();
  void set_allocated_server_info(::blokus::ServerInfo* value);
  void unsafe_arena_set_allocated_server_info(::blokus::ServerInfo* value);
  ::blokus::ServerInfo* unsafe_arena_release_server_info();

  private:
  const ::blokus::ServerInfo& _internal_server_info() const;
  ::blokus::ServerInfo* _internal_mutable_server_info();

  public:
  // uint32 sequence_number = 2;
  void clear_sequence_number() ;
  ::uint32_t sequence_number() const;
  void set_sequence_number(::uint32_t value);

  private:
  ::uint32_t _internal_sequence_number() const;
  void _internal_set_sequence_number(::uint32_t value);

  public:
  // bool force_update_required = 4;
  void clear_force_update_required() ;
  bool force_update_required() const;
  void set_force_update_required(bool value);

  private:
  bool _internal_force_update_required() const;
  void _internal_set_force_update_required(bool value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.HeartbeatResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 2,
      58, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const HeartbeatResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> server_messages_;
    ::google::protobuf::internal::ArenaStringPtr update_url_;
    ::google::protobuf::Timestamp* server_time_;
    ::blokus::ServerInfo* server_info_;
    ::uint32_t sequence_number_;
    bool force_update_required_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class EmailVerificationResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.EmailVerificationResponse) */ {
 public:
  inline EmailVerificationResponse() : EmailVerificationResponse(nullptr) {}
  ~EmailVerificationResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(EmailVerificationResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(EmailVerificationResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EmailVerificationResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline EmailVerificationResponse(const EmailVerificationResponse& from) : EmailVerificationResponse(nullptr, from) {}
  inline EmailVerificationResponse(EmailVerificationResponse&& from) noexcept
      : EmailVerificationResponse(nullptr, std::move(from)) {}
  inline EmailVerificationResponse& operator=(const EmailVerificationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmailVerificationResponse& operator=(EmailVerificationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmailVerificationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmailVerificationResponse* internal_default_instance() {
    return reinterpret_cast<const EmailVerificationResponse*>(
        &_EmailVerificationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 17;
  friend void swap(EmailVerificationResponse& a, EmailVerificationResponse& b) { a.Swap(&b); }
  inline void Swap(EmailVerificationResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmailVerificationResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmailVerificationResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<EmailVerificationResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EmailVerificationResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EmailVerificationResponse& from) { EmailVerificationResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(EmailVerificationResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.EmailVerificationResponse"; }

 protected:
  explicit EmailVerificationResponse(::google::protobuf::Arena* arena);
  EmailVerificationResponse(::google::protobuf::Arena* arena, const EmailVerificationResponse& from);
  EmailVerificationResponse(::google::protobuf::Arena* arena, EmailVerificationResponse&& from) noexcept
      : EmailVerificationResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRewardsFieldNumber = 4,
    kResultFieldNumber = 1,
    kVerifiedAtFieldNumber = 3,
    kVerifiedFieldNumber = 2,
  };
  // repeated string rewards = 4;
  int rewards_size() const;
  private:
  int _internal_rewards_size() const;

  public:
  void clear_rewards() ;
  const std::string& rewards(int index) const;
  std::string* mutable_rewards(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_rewards(int index, Arg_&& value, Args_... args);
  std::string* add_rewards();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_rewards(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& rewards() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_rewards();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_rewards() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_rewards();

  public:
  // .blokus.Result result = 1;
  bool has_result() const;
  void clear_result() ;
  const ::blokus::Result& result() const;
  PROTOBUF_NODISCARD ::blokus::Result* release_result();
  ::blokus::Result* mutable_result();
  void set_allocated_result(::blokus::Result* value);
  void unsafe_arena_set_allocated_result(::blokus::Result* value);
  ::blokus::Result* unsafe_arena_release_result();

  private:
  const ::blokus::Result& _internal_result() const;
  ::blokus::Result* _internal_mutable_result();

  public:
  // .google.protobuf.Timestamp verified_at = 3;
  bool has_verified_at() const;
  void clear_verified_at() ;
  const ::google::protobuf::Timestamp& verified_at() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_verified_at();
  ::google::protobuf::Timestamp* mutable_verified_at();
  void set_allocated_verified_at(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_verified_at(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_verified_at();

  private:
  const ::google::protobuf::Timestamp& _internal_verified_at() const;
  ::google::protobuf::Timestamp* _internal_mutable_verified_at();

  public:
  // bool verified = 2;
  void clear_verified() ;
  bool verified() const;
  void set_verified(bool value);

  private:
  bool _internal_verified() const;
  void _internal_set_verified(bool value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.EmailVerificationResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 2,
      48, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const EmailVerificationResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> rewards_;
    ::blokus::Result* result_;
    ::google::protobuf::Timestamp* verified_at_;
    bool verified_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class AuthResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:blokus.AuthResponse) */ {
 public:
  inline AuthResponse() : AuthResponse(nullptr) {}
  ~AuthResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AuthResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AuthResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AuthResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline AuthResponse(const AuthResponse& from) : AuthResponse(nullptr, from) {}
  inline AuthResponse(AuthResponse&& from) noexcept
      : AuthResponse(nullptr, std::move(from)) {}
  inline AuthResponse& operator=(const AuthResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthResponse& operator=(AuthResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthResponse* internal_default_instance() {
    return reinterpret_cast<const AuthResponse*>(
        &_AuthResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(AuthResponse& a, AuthResponse& b) { a.Swap(&b); }
  inline void Swap(AuthResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AuthResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AuthResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AuthResponse& from) { AuthResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AuthResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "blokus.AuthResponse"; }

 protected:
  explicit AuthResponse(::google::protobuf::Arena* arena);
  AuthResponse(::google::protobuf::Arena* arena, const AuthResponse& from);
  AuthResponse(::google::protobuf::Arena* arena, AuthResponse&& from) noexcept
      : AuthResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPermissionsFieldNumber = 5,
    kSessionTokenFieldNumber = 2,
    kPasswordResetTokenFieldNumber = 12,
    kResultFieldNumber = 1,
    kTokenExpiresAtFieldNumber = 3,
    kUserInfoFieldNumber = 4,
    kServerInfoFieldNumber = 8,
    kConsecutiveLoginDaysFieldNumber = 7,
    kIsFirstLoginFieldNumber = 6,
    kRequiresCaptchaFieldNumber = 11,
    kRetryAfterSecondsFieldNumber = 10,
  };
  // repeated string permissions = 5;
  int permissions_size() const;
  private:
  int _internal_permissions_size() const;

  public:
  void clear_permissions() ;
  const std::string& permissions(int index) const;
  std::string* mutable_permissions(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_permissions(int index, Arg_&& value, Args_... args);
  std::string* add_permissions();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_permissions(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& permissions() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_permissions();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_permissions() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_permissions();

  public:
  // string session_token = 2;
  void clear_session_token() ;
  const std::string& session_token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_session_token(Arg_&& arg, Args_... args);
  std::string* mutable_session_token();
  PROTOBUF_NODISCARD std::string* release_session_token();
  void set_allocated_session_token(std::string* value);

  private:
  const std::string& _internal_session_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_token(
      const std::string& value);
  std::string* _internal_mutable_session_token();

  public:
  // string password_reset_token = 12;
  void clear_password_reset_token() ;
  const std::string& password_reset_token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password_reset_token(Arg_&& arg, Args_... args);
  std::string* mutable_password_reset_token();
  PROTOBUF_NODISCARD std::string* release_password_reset_token();
  void set_allocated_password_reset_token(std::string* value);

  private:
  const std::string& _internal_password_reset_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password_reset_token(
      const std::string& value);
  std::string* _internal_mutable_password_reset_token();

  public:
  // .blokus.Result result = 1;
  bool has_result() const;
  void clear_result() ;
  const ::blokus::Result& result() const;
  PROTOBUF_NODISCARD ::blokus::Result* release_result();
  ::blokus::Result* mutable_result();
  void set_allocated_result(::blokus::Result* value);
  void unsafe_arena_set_allocated_result(::blokus::Result* value);
  ::blokus::Result* unsafe_arena_release_result();

  private:
  const ::blokus::Result& _internal_result() const;
  ::blokus::Result* _internal_mutable_result();

  public:
  // .google.protobuf.Timestamp token_expires_at = 3;
  bool has_token_expires_at() const;
  void clear_token_expires_at() ;
  const ::google::protobuf::Timestamp& token_expires_at() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_token_expires_at();
  ::google::protobuf::Timestamp* mutable_token_expires_at();
  void set_allocated_token_expires_at(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_token_expires_at(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_token_expires_at();

  private:
  const ::google::protobuf::Timestamp& _internal_token_expires_at() const;
  ::google::protobuf::Timestamp* _internal_mutable_token_expires_at();

  public:
  // .blokus.UserInfo user_info = 4;
  bool has_user_info() const;
  void clear_user_info() ;
  const ::blokus::UserInfo& user_info() const;
  PROTOBUF_NODISCARD ::blokus::UserInfo* release_user_info();
  ::blokus::UserInfo* mutable_user_info();
  void set_allocated_user_info(::blokus::UserInfo* value);
  void unsafe_arena_set_allocated_user_info(::blokus::UserInfo* value);
  ::blokus::UserInfo* unsafe_arena_release_user_info();

  private:
  const ::blokus::UserInfo& _internal_user_info() const;
  ::blokus::UserInfo* _internal_mutable_user_info();

  public:
  // .blokus.ServerInfo server_info = 8;
  bool has_server_info() const;
  void clear_server_info() ;
  const ::blokus::ServerInfo& server_info() const;
  PROTOBUF_NODISCARD ::blokus::ServerInfo* release_server_info();
  ::blokus::ServerInfo* mutable_server_info();
  void set_allocated_server_info(::blokus::ServerInfo* value);
  void unsafe_arena_set_allocated_server_info(::blokus::ServerInfo* value);
  ::blokus::ServerInfo* unsafe_arena_release_server_info();

  private:
  const ::blokus::ServerInfo& _internal_server_info() const;
  ::blokus::ServerInfo* _internal_mutable_server_info();

  public:
  // int32 consecutive_login_days = 7;
  void clear_consecutive_login_days() ;
  ::int32_t consecutive_login_days() const;
  void set_consecutive_login_days(::int32_t value);

  private:
  ::int32_t _internal_consecutive_login_days() const;
  void _internal_set_consecutive_login_days(::int32_t value);

  public:
  // bool is_first_login = 6;
  void clear_is_first_login() ;
  bool is_first_login() const;
  void set_is_first_login(bool value);

  private:
  bool _internal_is_first_login() const;
  void _internal_set_is_first_login(bool value);

  public:
  // bool requires_captcha = 11;
  void clear_requires_captcha() ;
  bool requires_captcha() const;
  void set_requires_captcha(bool value);

  private:
  bool _internal_requires_captcha() const;
  void _internal_set_requires_captcha(bool value);

  public:
  // int32 retry_after_seconds = 10;
  void clear_retry_after_seconds() ;
  ::int32_t retry_after_seconds() const;
  void set_retry_after_seconds(::int32_t value);

  private:
  ::int32_t _internal_retry_after_seconds() const;
  void _internal_set_retry_after_seconds(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:blokus.AuthResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 11, 4,
      80, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AuthResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> permissions_;
    ::google::protobuf::internal::ArenaStringPtr session_token_;
    ::google::protobuf::internal::ArenaStringPtr password_reset_token_;
    ::blokus::Result* result_;
    ::google::protobuf::Timestamp* token_expires_at_;
    ::blokus::UserInfo* user_info_;
    ::blokus::ServerInfo* server_info_;
    ::int32_t consecutive_login_days_;
    bool is_first_login_;
    bool requires_captcha_;
    ::int32_t retry_after_seconds_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// AuthRequest

// .blokus.AuthMethod method = 1;
inline void AuthRequest::clear_method() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.method_ = 0;
}
inline ::blokus::AuthMethod AuthRequest::method() const {
  // @@protoc_insertion_point(field_get:blokus.AuthRequest.method)
  return _internal_method();
}
inline void AuthRequest::set_method(::blokus::AuthMethod value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:blokus.AuthRequest.method)
}
inline ::blokus::AuthMethod AuthRequest::_internal_method() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::blokus::AuthMethod>(_impl_.method_);
}
inline void AuthRequest::_internal_set_method(::blokus::AuthMethod value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.method_ = value;
}

// string username = 2;
inline void AuthRequest::clear_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.ClearToEmpty();
}
inline const std::string& AuthRequest::username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.AuthRequest.username)
  return _internal_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuthRequest::set_username(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.AuthRequest.username)
}
inline std::string* AuthRequest::mutable_username() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:blokus.AuthRequest.username)
  return _s;
}
inline const std::string& AuthRequest::_internal_username() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.username_.Get();
}
inline void AuthRequest::_internal_set_username(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.Set(value, GetArena());
}
inline std::string* AuthRequest::_internal_mutable_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.username_.Mutable( GetArena());
}
inline std::string* AuthRequest::release_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.AuthRequest.username)
  return _impl_.username_.Release();
}
inline void AuthRequest::set_allocated_username(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.AuthRequest.username)
}

// string password = 3;
inline void AuthRequest::clear_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.ClearToEmpty();
}
inline const std::string& AuthRequest::password() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.AuthRequest.password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuthRequest::set_password(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.AuthRequest.password)
}
inline std::string* AuthRequest::mutable_password() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:blokus.AuthRequest.password)
  return _s;
}
inline const std::string& AuthRequest::_internal_password() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.password_.Get();
}
inline void AuthRequest::_internal_set_password(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.Set(value, GetArena());
}
inline std::string* AuthRequest::_internal_mutable_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.password_.Mutable( GetArena());
}
inline std::string* AuthRequest::release_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.AuthRequest.password)
  return _impl_.password_.Release();
}
inline void AuthRequest::set_allocated_password(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.AuthRequest.password)
}

// string email = 4;
inline void AuthRequest::clear_email() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.email_.ClearToEmpty();
}
inline const std::string& AuthRequest::email() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.AuthRequest.email)
  return _internal_email();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuthRequest::set_email(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.email_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.AuthRequest.email)
}
inline std::string* AuthRequest::mutable_email() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:blokus.AuthRequest.email)
  return _s;
}
inline const std::string& AuthRequest::_internal_email() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.email_.Get();
}
inline void AuthRequest::_internal_set_email(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.email_.Set(value, GetArena());
}
inline std::string* AuthRequest::_internal_mutable_email() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.email_.Mutable( GetArena());
}
inline std::string* AuthRequest::release_email() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.AuthRequest.email)
  return _impl_.email_.Release();
}
inline void AuthRequest::set_allocated_email(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.email_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.email_.IsDefault()) {
    _impl_.email_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.AuthRequest.email)
}

// string session_token = 5;
inline void AuthRequest::clear_session_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_token_.ClearToEmpty();
}
inline const std::string& AuthRequest::session_token() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.AuthRequest.session_token)
  return _internal_session_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuthRequest::set_session_token(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_token_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.AuthRequest.session_token)
}
inline std::string* AuthRequest::mutable_session_token() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_session_token();
  // @@protoc_insertion_point(field_mutable:blokus.AuthRequest.session_token)
  return _s;
}
inline const std::string& AuthRequest::_internal_session_token() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.session_token_.Get();
}
inline void AuthRequest::_internal_set_session_token(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_token_.Set(value, GetArena());
}
inline std::string* AuthRequest::_internal_mutable_session_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.session_token_.Mutable( GetArena());
}
inline std::string* AuthRequest::release_session_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.AuthRequest.session_token)
  return _impl_.session_token_.Release();
}
inline void AuthRequest::set_allocated_session_token(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_token_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.session_token_.IsDefault()) {
    _impl_.session_token_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.AuthRequest.session_token)
}

// string guest_id = 6;
inline void AuthRequest::clear_guest_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.guest_id_.ClearToEmpty();
}
inline const std::string& AuthRequest::guest_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.AuthRequest.guest_id)
  return _internal_guest_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuthRequest::set_guest_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.guest_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.AuthRequest.guest_id)
}
inline std::string* AuthRequest::mutable_guest_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_guest_id();
  // @@protoc_insertion_point(field_mutable:blokus.AuthRequest.guest_id)
  return _s;
}
inline const std::string& AuthRequest::_internal_guest_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.guest_id_.Get();
}
inline void AuthRequest::_internal_set_guest_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.guest_id_.Set(value, GetArena());
}
inline std::string* AuthRequest::_internal_mutable_guest_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.guest_id_.Mutable( GetArena());
}
inline std::string* AuthRequest::release_guest_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.AuthRequest.guest_id)
  return _impl_.guest_id_.Release();
}
inline void AuthRequest::set_allocated_guest_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.guest_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.guest_id_.IsDefault()) {
    _impl_.guest_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.AuthRequest.guest_id)
}

// string client_version = 10;
inline void AuthRequest::clear_client_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_version_.ClearToEmpty();
}
inline const std::string& AuthRequest::client_version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.AuthRequest.client_version)
  return _internal_client_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuthRequest::set_client_version(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.AuthRequest.client_version)
}
inline std::string* AuthRequest::mutable_client_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_client_version();
  // @@protoc_insertion_point(field_mutable:blokus.AuthRequest.client_version)
  return _s;
}
inline const std::string& AuthRequest::_internal_client_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.client_version_.Get();
}
inline void AuthRequest::_internal_set_client_version(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_version_.Set(value, GetArena());
}
inline std::string* AuthRequest::_internal_mutable_client_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.client_version_.Mutable( GetArena());
}
inline std::string* AuthRequest::release_client_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.AuthRequest.client_version)
  return _impl_.client_version_.Release();
}
inline void AuthRequest::set_allocated_client_version(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_version_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.client_version_.IsDefault()) {
    _impl_.client_version_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.AuthRequest.client_version)
}

// string platform = 11;
inline void AuthRequest::clear_platform() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.platform_.ClearToEmpty();
}
inline const std::string& AuthRequest::platform() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.AuthRequest.platform)
  return _internal_platform();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuthRequest::set_platform(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.platform_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.AuthRequest.platform)
}
inline std::string* AuthRequest::mutable_platform() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_platform();
  // @@protoc_insertion_point(field_mutable:blokus.AuthRequest.platform)
  return _s;
}
inline const std::string& AuthRequest::_internal_platform() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.platform_.Get();
}
inline void AuthRequest::_internal_set_platform(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.platform_.Set(value, GetArena());
}
inline std::string* AuthRequest::_internal_mutable_platform() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.platform_.Mutable( GetArena());
}
inline std::string* AuthRequest::release_platform() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.AuthRequest.platform)
  return _impl_.platform_.Release();
}
inline void AuthRequest::set_allocated_platform(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.platform_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.platform_.IsDefault()) {
    _impl_.platform_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.AuthRequest.platform)
}

// string device_id = 12;
inline void AuthRequest::clear_device_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.ClearToEmpty();
}
inline const std::string& AuthRequest::device_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.AuthRequest.device_id)
  return _internal_device_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuthRequest::set_device_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.AuthRequest.device_id)
}
inline std::string* AuthRequest::mutable_device_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_device_id();
  // @@protoc_insertion_point(field_mutable:blokus.AuthRequest.device_id)
  return _s;
}
inline const std::string& AuthRequest::_internal_device_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.device_id_.Get();
}
inline void AuthRequest::_internal_set_device_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.Set(value, GetArena());
}
inline std::string* AuthRequest::_internal_mutable_device_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.device_id_.Mutable( GetArena());
}
inline std::string* AuthRequest::release_device_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.AuthRequest.device_id)
  return _impl_.device_id_.Release();
}
inline void AuthRequest::set_allocated_device_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.device_id_.IsDefault()) {
    _impl_.device_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.AuthRequest.device_id)
}

// string user_agent = 13;
inline void AuthRequest::clear_user_agent() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_agent_.ClearToEmpty();
}
inline const std::string& AuthRequest::user_agent() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.AuthRequest.user_agent)
  return _internal_user_agent();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuthRequest::set_user_agent(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_agent_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.AuthRequest.user_agent)
}
inline std::string* AuthRequest::mutable_user_agent() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_agent();
  // @@protoc_insertion_point(field_mutable:blokus.AuthRequest.user_agent)
  return _s;
}
inline const std::string& AuthRequest::_internal_user_agent() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_agent_.Get();
}
inline void AuthRequest::_internal_set_user_agent(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_agent_.Set(value, GetArena());
}
inline std::string* AuthRequest::_internal_mutable_user_agent() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_agent_.Mutable( GetArena());
}
inline std::string* AuthRequest::release_user_agent() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.AuthRequest.user_agent)
  return _impl_.user_agent_.Release();
}
inline void AuthRequest::set_allocated_user_agent(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_agent_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_agent_.IsDefault()) {
    _impl_.user_agent_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.AuthRequest.user_agent)
}

// bool remember_me = 15;
inline void AuthRequest::clear_remember_me() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.remember_me_ = false;
}
inline bool AuthRequest::remember_me() const {
  // @@protoc_insertion_point(field_get:blokus.AuthRequest.remember_me)
  return _internal_remember_me();
}
inline void AuthRequest::set_remember_me(bool value) {
  _internal_set_remember_me(value);
  // @@protoc_insertion_point(field_set:blokus.AuthRequest.remember_me)
}
inline bool AuthRequest::_internal_remember_me() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.remember_me_;
}
inline void AuthRequest::_internal_set_remember_me(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.remember_me_ = value;
}

// string captcha_response = 16;
inline void AuthRequest::clear_captcha_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.captcha_response_.ClearToEmpty();
}
inline const std::string& AuthRequest::captcha_response() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.AuthRequest.captcha_response)
  return _internal_captcha_response();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuthRequest::set_captcha_response(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.captcha_response_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.AuthRequest.captcha_response)
}
inline std::string* AuthRequest::mutable_captcha_response() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_captcha_response();
  // @@protoc_insertion_point(field_mutable:blokus.AuthRequest.captcha_response)
  return _s;
}
inline const std::string& AuthRequest::_internal_captcha_response() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.captcha_response_.Get();
}
inline void AuthRequest::_internal_set_captcha_response(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.captcha_response_.Set(value, GetArena());
}
inline std::string* AuthRequest::_internal_mutable_captcha_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.captcha_response_.Mutable( GetArena());
}
inline std::string* AuthRequest::release_captcha_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.AuthRequest.captcha_response)
  return _impl_.captcha_response_.Release();
}
inline void AuthRequest::set_allocated_captcha_response(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.captcha_response_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.captcha_response_.IsDefault()) {
    _impl_.captcha_response_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.AuthRequest.captcha_response)
}

// -------------------------------------------------------------------

// AuthResponse

// .blokus.Result result = 1;
inline bool AuthResponse::has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.result_ != nullptr);
  return value;
}
inline const ::blokus::Result& AuthResponse::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::Result* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::Result&>(::blokus::_Result_default_instance_);
}
inline const ::blokus::Result& AuthResponse::result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.AuthResponse.result)
  return _internal_result();
}
inline void AuthResponse::unsafe_arena_set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.AuthResponse.result)
}
inline ::blokus::Result* AuthResponse::release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* released = _impl_.result_;
  _impl_.result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::Result* AuthResponse::unsafe_arena_release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.AuthResponse.result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::blokus::Result* AuthResponse::_internal_mutable_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::Result>(GetArena());
    _impl_.result_ = reinterpret_cast<::blokus::Result*>(p);
  }
  return _impl_.result_;
}
inline ::blokus::Result* AuthResponse::mutable_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::blokus::Result* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:blokus.AuthResponse.result)
  return _msg;
}
inline void AuthResponse::set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.AuthResponse.result)
}

// string session_token = 2;
inline void AuthResponse::clear_session_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_token_.ClearToEmpty();
}
inline const std::string& AuthResponse::session_token() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.AuthResponse.session_token)
  return _internal_session_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuthResponse::set_session_token(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_token_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.AuthResponse.session_token)
}
inline std::string* AuthResponse::mutable_session_token() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_session_token();
  // @@protoc_insertion_point(field_mutable:blokus.AuthResponse.session_token)
  return _s;
}
inline const std::string& AuthResponse::_internal_session_token() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.session_token_.Get();
}
inline void AuthResponse::_internal_set_session_token(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_token_.Set(value, GetArena());
}
inline std::string* AuthResponse::_internal_mutable_session_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.session_token_.Mutable( GetArena());
}
inline std::string* AuthResponse::release_session_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.AuthResponse.session_token)
  return _impl_.session_token_.Release();
}
inline void AuthResponse::set_allocated_session_token(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_token_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.session_token_.IsDefault()) {
    _impl_.session_token_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.AuthResponse.session_token)
}

// .google.protobuf.Timestamp token_expires_at = 3;
inline bool AuthResponse::has_token_expires_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.token_expires_at_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& AuthResponse::_internal_token_expires_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.token_expires_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& AuthResponse::token_expires_at() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.AuthResponse.token_expires_at)
  return _internal_token_expires_at();
}
inline void AuthResponse::unsafe_arena_set_allocated_token_expires_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.token_expires_at_);
  }
  _impl_.token_expires_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.AuthResponse.token_expires_at)
}
inline ::google::protobuf::Timestamp* AuthResponse::release_token_expires_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.token_expires_at_;
  _impl_.token_expires_at_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* AuthResponse::unsafe_arena_release_token_expires_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.AuthResponse.token_expires_at)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.token_expires_at_;
  _impl_.token_expires_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* AuthResponse::_internal_mutable_token_expires_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.token_expires_at_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.token_expires_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.token_expires_at_;
}
inline ::google::protobuf::Timestamp* AuthResponse::mutable_token_expires_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_token_expires_at();
  // @@protoc_insertion_point(field_mutable:blokus.AuthResponse.token_expires_at)
  return _msg;
}
inline void AuthResponse::set_allocated_token_expires_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.token_expires_at_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.token_expires_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.AuthResponse.token_expires_at)
}

// .blokus.UserInfo user_info = 4;
inline bool AuthResponse::has_user_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_info_ != nullptr);
  return value;
}
inline const ::blokus::UserInfo& AuthResponse::_internal_user_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::UserInfo* p = _impl_.user_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::UserInfo&>(::blokus::_UserInfo_default_instance_);
}
inline const ::blokus::UserInfo& AuthResponse::user_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.AuthResponse.user_info)
  return _internal_user_info();
}
inline void AuthResponse::unsafe_arena_set_allocated_user_info(::blokus::UserInfo* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.user_info_);
  }
  _impl_.user_info_ = reinterpret_cast<::blokus::UserInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.AuthResponse.user_info)
}
inline ::blokus::UserInfo* AuthResponse::release_user_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::blokus::UserInfo* released = _impl_.user_info_;
  _impl_.user_info_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::UserInfo* AuthResponse::unsafe_arena_release_user_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.AuthResponse.user_info)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::blokus::UserInfo* temp = _impl_.user_info_;
  _impl_.user_info_ = nullptr;
  return temp;
}
inline ::blokus::UserInfo* AuthResponse::_internal_mutable_user_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.user_info_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::UserInfo>(GetArena());
    _impl_.user_info_ = reinterpret_cast<::blokus::UserInfo*>(p);
  }
  return _impl_.user_info_;
}
inline ::blokus::UserInfo* AuthResponse::mutable_user_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::blokus::UserInfo* _msg = _internal_mutable_user_info();
  // @@protoc_insertion_point(field_mutable:blokus.AuthResponse.user_info)
  return _msg;
}
inline void AuthResponse::set_allocated_user_info(::blokus::UserInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.user_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.user_info_ = reinterpret_cast<::blokus::UserInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.AuthResponse.user_info)
}

// repeated string permissions = 5;
inline int AuthResponse::_internal_permissions_size() const {
  return _internal_permissions().size();
}
inline int AuthResponse::permissions_size() const {
  return _internal_permissions_size();
}
inline void AuthResponse::clear_permissions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.permissions_.Clear();
}
inline std::string* AuthResponse::add_permissions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_permissions()->Add();
  // @@protoc_insertion_point(field_add_mutable:blokus.AuthResponse.permissions)
  return _s;
}
inline const std::string& AuthResponse::permissions(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.AuthResponse.permissions)
  return _internal_permissions().Get(index);
}
inline std::string* AuthResponse::mutable_permissions(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.AuthResponse.permissions)
  return _internal_mutable_permissions()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void AuthResponse::set_permissions(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_permissions()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:blokus.AuthResponse.permissions)
}
template <typename Arg_, typename... Args_>
inline void AuthResponse::add_permissions(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_permissions(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:blokus.AuthResponse.permissions)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AuthResponse::permissions() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.AuthResponse.permissions)
  return _internal_permissions();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AuthResponse::mutable_permissions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.AuthResponse.permissions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_permissions();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AuthResponse::_internal_permissions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.permissions_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AuthResponse::_internal_mutable_permissions() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.permissions_;
}

// bool is_first_login = 6;
inline void AuthResponse::clear_is_first_login() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_first_login_ = false;
}
inline bool AuthResponse::is_first_login() const {
  // @@protoc_insertion_point(field_get:blokus.AuthResponse.is_first_login)
  return _internal_is_first_login();
}
inline void AuthResponse::set_is_first_login(bool value) {
  _internal_set_is_first_login(value);
  // @@protoc_insertion_point(field_set:blokus.AuthResponse.is_first_login)
}
inline bool AuthResponse::_internal_is_first_login() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_first_login_;
}
inline void AuthResponse::_internal_set_is_first_login(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_first_login_ = value;
}

// int32 consecutive_login_days = 7;
inline void AuthResponse::clear_consecutive_login_days() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.consecutive_login_days_ = 0;
}
inline ::int32_t AuthResponse::consecutive_login_days() const {
  // @@protoc_insertion_point(field_get:blokus.AuthResponse.consecutive_login_days)
  return _internal_consecutive_login_days();
}
inline void AuthResponse::set_consecutive_login_days(::int32_t value) {
  _internal_set_consecutive_login_days(value);
  // @@protoc_insertion_point(field_set:blokus.AuthResponse.consecutive_login_days)
}
inline ::int32_t AuthResponse::_internal_consecutive_login_days() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.consecutive_login_days_;
}
inline void AuthResponse::_internal_set_consecutive_login_days(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.consecutive_login_days_ = value;
}

// .blokus.ServerInfo server_info = 8;
inline bool AuthResponse::has_server_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.server_info_ != nullptr);
  return value;
}
inline const ::blokus::ServerInfo& AuthResponse::_internal_server_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::ServerInfo* p = _impl_.server_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::ServerInfo&>(::blokus::_ServerInfo_default_instance_);
}
inline const ::blokus::ServerInfo& AuthResponse::server_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.AuthResponse.server_info)
  return _internal_server_info();
}
inline void AuthResponse::unsafe_arena_set_allocated_server_info(::blokus::ServerInfo* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.server_info_);
  }
  _impl_.server_info_ = reinterpret_cast<::blokus::ServerInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.AuthResponse.server_info)
}
inline ::blokus::ServerInfo* AuthResponse::release_server_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::blokus::ServerInfo* released = _impl_.server_info_;
  _impl_.server_info_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::ServerInfo* AuthResponse::unsafe_arena_release_server_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.AuthResponse.server_info)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::blokus::ServerInfo* temp = _impl_.server_info_;
  _impl_.server_info_ = nullptr;
  return temp;
}
inline ::blokus::ServerInfo* AuthResponse::_internal_mutable_server_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.server_info_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::ServerInfo>(GetArena());
    _impl_.server_info_ = reinterpret_cast<::blokus::ServerInfo*>(p);
  }
  return _impl_.server_info_;
}
inline ::blokus::ServerInfo* AuthResponse::mutable_server_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::blokus::ServerInfo* _msg = _internal_mutable_server_info();
  // @@protoc_insertion_point(field_mutable:blokus.AuthResponse.server_info)
  return _msg;
}
inline void AuthResponse::set_allocated_server_info(::blokus::ServerInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.server_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.server_info_ = reinterpret_cast<::blokus::ServerInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.AuthResponse.server_info)
}

// int32 retry_after_seconds = 10;
inline void AuthResponse::clear_retry_after_seconds() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retry_after_seconds_ = 0;
}
inline ::int32_t AuthResponse::retry_after_seconds() const {
  // @@protoc_insertion_point(field_get:blokus.AuthResponse.retry_after_seconds)
  return _internal_retry_after_seconds();
}
inline void AuthResponse::set_retry_after_seconds(::int32_t value) {
  _internal_set_retry_after_seconds(value);
  // @@protoc_insertion_point(field_set:blokus.AuthResponse.retry_after_seconds)
}
inline ::int32_t AuthResponse::_internal_retry_after_seconds() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.retry_after_seconds_;
}
inline void AuthResponse::_internal_set_retry_after_seconds(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.retry_after_seconds_ = value;
}

// bool requires_captcha = 11;
inline void AuthResponse::clear_requires_captcha() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requires_captcha_ = false;
}
inline bool AuthResponse::requires_captcha() const {
  // @@protoc_insertion_point(field_get:blokus.AuthResponse.requires_captcha)
  return _internal_requires_captcha();
}
inline void AuthResponse::set_requires_captcha(bool value) {
  _internal_set_requires_captcha(value);
  // @@protoc_insertion_point(field_set:blokus.AuthResponse.requires_captcha)
}
inline bool AuthResponse::_internal_requires_captcha() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.requires_captcha_;
}
inline void AuthResponse::_internal_set_requires_captcha(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requires_captcha_ = value;
}

// string password_reset_token = 12;
inline void AuthResponse::clear_password_reset_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_reset_token_.ClearToEmpty();
}
inline const std::string& AuthResponse::password_reset_token() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.AuthResponse.password_reset_token)
  return _internal_password_reset_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuthResponse::set_password_reset_token(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_reset_token_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.AuthResponse.password_reset_token)
}
inline std::string* AuthResponse::mutable_password_reset_token() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_password_reset_token();
  // @@protoc_insertion_point(field_mutable:blokus.AuthResponse.password_reset_token)
  return _s;
}
inline const std::string& AuthResponse::_internal_password_reset_token() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.password_reset_token_.Get();
}
inline void AuthResponse::_internal_set_password_reset_token(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_reset_token_.Set(value, GetArena());
}
inline std::string* AuthResponse::_internal_mutable_password_reset_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.password_reset_token_.Mutable( GetArena());
}
inline std::string* AuthResponse::release_password_reset_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.AuthResponse.password_reset_token)
  return _impl_.password_reset_token_.Release();
}
inline void AuthResponse::set_allocated_password_reset_token(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_reset_token_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.password_reset_token_.IsDefault()) {
    _impl_.password_reset_token_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.AuthResponse.password_reset_token)
}

// -------------------------------------------------------------------

// RegisterRequest

// string username = 1;
inline void RegisterRequest::clear_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.ClearToEmpty();
}
inline const std::string& RegisterRequest::username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.RegisterRequest.username)
  return _internal_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegisterRequest::set_username(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.RegisterRequest.username)
}
inline std::string* RegisterRequest::mutable_username() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:blokus.RegisterRequest.username)
  return _s;
}
inline const std::string& RegisterRequest::_internal_username() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.username_.Get();
}
inline void RegisterRequest::_internal_set_username(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.Set(value, GetArena());
}
inline std::string* RegisterRequest::_internal_mutable_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.username_.Mutable( GetArena());
}
inline std::string* RegisterRequest::release_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.RegisterRequest.username)
  return _impl_.username_.Release();
}
inline void RegisterRequest::set_allocated_username(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.RegisterRequest.username)
}

// string password = 2;
inline void RegisterRequest::clear_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.ClearToEmpty();
}
inline const std::string& RegisterRequest::password() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.RegisterRequest.password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegisterRequest::set_password(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.RegisterRequest.password)
}
inline std::string* RegisterRequest::mutable_password() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:blokus.RegisterRequest.password)
  return _s;
}
inline const std::string& RegisterRequest::_internal_password() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.password_.Get();
}
inline void RegisterRequest::_internal_set_password(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.Set(value, GetArena());
}
inline std::string* RegisterRequest::_internal_mutable_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.password_.Mutable( GetArena());
}
inline std::string* RegisterRequest::release_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.RegisterRequest.password)
  return _impl_.password_.Release();
}
inline void RegisterRequest::set_allocated_password(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.RegisterRequest.password)
}

// string email = 3;
inline void RegisterRequest::clear_email() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.email_.ClearToEmpty();
}
inline const std::string& RegisterRequest::email() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.RegisterRequest.email)
  return _internal_email();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegisterRequest::set_email(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.email_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.RegisterRequest.email)
}
inline std::string* RegisterRequest::mutable_email() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:blokus.RegisterRequest.email)
  return _s;
}
inline const std::string& RegisterRequest::_internal_email() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.email_.Get();
}
inline void RegisterRequest::_internal_set_email(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.email_.Set(value, GetArena());
}
inline std::string* RegisterRequest::_internal_mutable_email() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.email_.Mutable( GetArena());
}
inline std::string* RegisterRequest::release_email() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.RegisterRequest.email)
  return _impl_.email_.Release();
}
inline void RegisterRequest::set_allocated_email(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.email_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.email_.IsDefault()) {
    _impl_.email_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.RegisterRequest.email)
}

// string display_name = 4;
inline void RegisterRequest::clear_display_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.display_name_.ClearToEmpty();
}
inline const std::string& RegisterRequest::display_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.RegisterRequest.display_name)
  return _internal_display_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegisterRequest::set_display_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.display_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.RegisterRequest.display_name)
}
inline std::string* RegisterRequest::mutable_display_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:blokus.RegisterRequest.display_name)
  return _s;
}
inline const std::string& RegisterRequest::_internal_display_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.display_name_.Get();
}
inline void RegisterRequest::_internal_set_display_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.display_name_.Set(value, GetArena());
}
inline std::string* RegisterRequest::_internal_mutable_display_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.display_name_.Mutable( GetArena());
}
inline std::string* RegisterRequest::release_display_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.RegisterRequest.display_name)
  return _impl_.display_name_.Release();
}
inline void RegisterRequest::set_allocated_display_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.display_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.display_name_.IsDefault()) {
    _impl_.display_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.RegisterRequest.display_name)
}

// string country = 5;
inline void RegisterRequest::clear_country() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.country_.ClearToEmpty();
}
inline const std::string& RegisterRequest::country() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.RegisterRequest.country)
  return _internal_country();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegisterRequest::set_country(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.country_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.RegisterRequest.country)
}
inline std::string* RegisterRequest::mutable_country() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_country();
  // @@protoc_insertion_point(field_mutable:blokus.RegisterRequest.country)
  return _s;
}
inline const std::string& RegisterRequest::_internal_country() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.country_.Get();
}
inline void RegisterRequest::_internal_set_country(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.country_.Set(value, GetArena());
}
inline std::string* RegisterRequest::_internal_mutable_country() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.country_.Mutable( GetArena());
}
inline std::string* RegisterRequest::release_country() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.RegisterRequest.country)
  return _impl_.country_.Release();
}
inline void RegisterRequest::set_allocated_country(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.country_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.country_.IsDefault()) {
    _impl_.country_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.RegisterRequest.country)
}

// string language = 6;
inline void RegisterRequest::clear_language() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.language_.ClearToEmpty();
}
inline const std::string& RegisterRequest::language() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.RegisterRequest.language)
  return _internal_language();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegisterRequest::set_language(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.language_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.RegisterRequest.language)
}
inline std::string* RegisterRequest::mutable_language() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_language();
  // @@protoc_insertion_point(field_mutable:blokus.RegisterRequest.language)
  return _s;
}
inline const std::string& RegisterRequest::_internal_language() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.language_.Get();
}
inline void RegisterRequest::_internal_set_language(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.language_.Set(value, GetArena());
}
inline std::string* RegisterRequest::_internal_mutable_language() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.language_.Mutable( GetArena());
}
inline std::string* RegisterRequest::release_language() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.RegisterRequest.language)
  return _impl_.language_.Release();
}
inline void RegisterRequest::set_allocated_language(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.language_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.language_.IsDefault()) {
    _impl_.language_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.RegisterRequest.language)
}

// bool terms_accepted = 10;
inline void RegisterRequest::clear_terms_accepted() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.terms_accepted_ = false;
}
inline bool RegisterRequest::terms_accepted() const {
  // @@protoc_insertion_point(field_get:blokus.RegisterRequest.terms_accepted)
  return _internal_terms_accepted();
}
inline void RegisterRequest::set_terms_accepted(bool value) {
  _internal_set_terms_accepted(value);
  // @@protoc_insertion_point(field_set:blokus.RegisterRequest.terms_accepted)
}
inline bool RegisterRequest::_internal_terms_accepted() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.terms_accepted_;
}
inline void RegisterRequest::_internal_set_terms_accepted(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.terms_accepted_ = value;
}

// bool privacy_accepted = 11;
inline void RegisterRequest::clear_privacy_accepted() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.privacy_accepted_ = false;
}
inline bool RegisterRequest::privacy_accepted() const {
  // @@protoc_insertion_point(field_get:blokus.RegisterRequest.privacy_accepted)
  return _internal_privacy_accepted();
}
inline void RegisterRequest::set_privacy_accepted(bool value) {
  _internal_set_privacy_accepted(value);
  // @@protoc_insertion_point(field_set:blokus.RegisterRequest.privacy_accepted)
}
inline bool RegisterRequest::_internal_privacy_accepted() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.privacy_accepted_;
}
inline void RegisterRequest::_internal_set_privacy_accepted(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.privacy_accepted_ = value;
}

// bool marketing_accepted = 12;
inline void RegisterRequest::clear_marketing_accepted() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.marketing_accepted_ = false;
}
inline bool RegisterRequest::marketing_accepted() const {
  // @@protoc_insertion_point(field_get:blokus.RegisterRequest.marketing_accepted)
  return _internal_marketing_accepted();
}
inline void RegisterRequest::set_marketing_accepted(bool value) {
  _internal_set_marketing_accepted(value);
  // @@protoc_insertion_point(field_set:blokus.RegisterRequest.marketing_accepted)
}
inline bool RegisterRequest::_internal_marketing_accepted() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.marketing_accepted_;
}
inline void RegisterRequest::_internal_set_marketing_accepted(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.marketing_accepted_ = value;
}

// string email_verification_token = 15;
inline void RegisterRequest::clear_email_verification_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.email_verification_token_.ClearToEmpty();
}
inline const std::string& RegisterRequest::email_verification_token() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.RegisterRequest.email_verification_token)
  return _internal_email_verification_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegisterRequest::set_email_verification_token(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.email_verification_token_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.RegisterRequest.email_verification_token)
}
inline std::string* RegisterRequest::mutable_email_verification_token() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_email_verification_token();
  // @@protoc_insertion_point(field_mutable:blokus.RegisterRequest.email_verification_token)
  return _s;
}
inline const std::string& RegisterRequest::_internal_email_verification_token() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.email_verification_token_.Get();
}
inline void RegisterRequest::_internal_set_email_verification_token(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.email_verification_token_.Set(value, GetArena());
}
inline std::string* RegisterRequest::_internal_mutable_email_verification_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.email_verification_token_.Mutable( GetArena());
}
inline std::string* RegisterRequest::release_email_verification_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.RegisterRequest.email_verification_token)
  return _impl_.email_verification_token_.Release();
}
inline void RegisterRequest::set_allocated_email_verification_token(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.email_verification_token_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.email_verification_token_.IsDefault()) {
    _impl_.email_verification_token_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.RegisterRequest.email_verification_token)
}

// string referral_code = 16;
inline void RegisterRequest::clear_referral_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.referral_code_.ClearToEmpty();
}
inline const std::string& RegisterRequest::referral_code() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.RegisterRequest.referral_code)
  return _internal_referral_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegisterRequest::set_referral_code(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.referral_code_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.RegisterRequest.referral_code)
}
inline std::string* RegisterRequest::mutable_referral_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_referral_code();
  // @@protoc_insertion_point(field_mutable:blokus.RegisterRequest.referral_code)
  return _s;
}
inline const std::string& RegisterRequest::_internal_referral_code() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.referral_code_.Get();
}
inline void RegisterRequest::_internal_set_referral_code(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.referral_code_.Set(value, GetArena());
}
inline std::string* RegisterRequest::_internal_mutable_referral_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.referral_code_.Mutable( GetArena());
}
inline std::string* RegisterRequest::release_referral_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.RegisterRequest.referral_code)
  return _impl_.referral_code_.Release();
}
inline void RegisterRequest::set_allocated_referral_code(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.referral_code_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.referral_code_.IsDefault()) {
    _impl_.referral_code_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.RegisterRequest.referral_code)
}

// string client_version = 20;
inline void RegisterRequest::clear_client_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_version_.ClearToEmpty();
}
inline const std::string& RegisterRequest::client_version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.RegisterRequest.client_version)
  return _internal_client_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegisterRequest::set_client_version(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.RegisterRequest.client_version)
}
inline std::string* RegisterRequest::mutable_client_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_client_version();
  // @@protoc_insertion_point(field_mutable:blokus.RegisterRequest.client_version)
  return _s;
}
inline const std::string& RegisterRequest::_internal_client_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.client_version_.Get();
}
inline void RegisterRequest::_internal_set_client_version(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_version_.Set(value, GetArena());
}
inline std::string* RegisterRequest::_internal_mutable_client_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.client_version_.Mutable( GetArena());
}
inline std::string* RegisterRequest::release_client_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.RegisterRequest.client_version)
  return _impl_.client_version_.Release();
}
inline void RegisterRequest::set_allocated_client_version(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_version_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.client_version_.IsDefault()) {
    _impl_.client_version_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.RegisterRequest.client_version)
}

// string platform = 21;
inline void RegisterRequest::clear_platform() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.platform_.ClearToEmpty();
}
inline const std::string& RegisterRequest::platform() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.RegisterRequest.platform)
  return _internal_platform();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegisterRequest::set_platform(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.platform_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.RegisterRequest.platform)
}
inline std::string* RegisterRequest::mutable_platform() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_platform();
  // @@protoc_insertion_point(field_mutable:blokus.RegisterRequest.platform)
  return _s;
}
inline const std::string& RegisterRequest::_internal_platform() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.platform_.Get();
}
inline void RegisterRequest::_internal_set_platform(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.platform_.Set(value, GetArena());
}
inline std::string* RegisterRequest::_internal_mutable_platform() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.platform_.Mutable( GetArena());
}
inline std::string* RegisterRequest::release_platform() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.RegisterRequest.platform)
  return _impl_.platform_.Release();
}
inline void RegisterRequest::set_allocated_platform(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.platform_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.platform_.IsDefault()) {
    _impl_.platform_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.RegisterRequest.platform)
}

// -------------------------------------------------------------------

// RegisterResponse

// .blokus.Result result = 1;
inline bool RegisterResponse::has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.result_ != nullptr);
  return value;
}
inline const ::blokus::Result& RegisterResponse::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::Result* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::Result&>(::blokus::_Result_default_instance_);
}
inline const ::blokus::Result& RegisterResponse::result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.RegisterResponse.result)
  return _internal_result();
}
inline void RegisterResponse::unsafe_arena_set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.RegisterResponse.result)
}
inline ::blokus::Result* RegisterResponse::release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* released = _impl_.result_;
  _impl_.result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::Result* RegisterResponse::unsafe_arena_release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.RegisterResponse.result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::blokus::Result* RegisterResponse::_internal_mutable_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::Result>(GetArena());
    _impl_.result_ = reinterpret_cast<::blokus::Result*>(p);
  }
  return _impl_.result_;
}
inline ::blokus::Result* RegisterResponse::mutable_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::blokus::Result* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:blokus.RegisterResponse.result)
  return _msg;
}
inline void RegisterResponse::set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.RegisterResponse.result)
}

// string user_id = 2;
inline void RegisterResponse::clear_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& RegisterResponse::user_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.RegisterResponse.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegisterResponse::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.RegisterResponse.user_id)
}
inline std::string* RegisterResponse::mutable_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:blokus.RegisterResponse.user_id)
  return _s;
}
inline const std::string& RegisterResponse::_internal_user_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_id_.Get();
}
inline void RegisterResponse::_internal_set_user_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(value, GetArena());
}
inline std::string* RegisterResponse::_internal_mutable_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_id_.Mutable( GetArena());
}
inline std::string* RegisterResponse::release_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.RegisterResponse.user_id)
  return _impl_.user_id_.Release();
}
inline void RegisterResponse::set_allocated_user_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.RegisterResponse.user_id)
}

// bool email_verification_required = 3;
inline void RegisterResponse::clear_email_verification_required() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.email_verification_required_ = false;
}
inline bool RegisterResponse::email_verification_required() const {
  // @@protoc_insertion_point(field_get:blokus.RegisterResponse.email_verification_required)
  return _internal_email_verification_required();
}
inline void RegisterResponse::set_email_verification_required(bool value) {
  _internal_set_email_verification_required(value);
  // @@protoc_insertion_point(field_set:blokus.RegisterResponse.email_verification_required)
}
inline bool RegisterResponse::_internal_email_verification_required() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.email_verification_required_;
}
inline void RegisterResponse::_internal_set_email_verification_required(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.email_verification_required_ = value;
}

// string verification_email_sent_to = 4;
inline void RegisterResponse::clear_verification_email_sent_to() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.verification_email_sent_to_.ClearToEmpty();
}
inline const std::string& RegisterResponse::verification_email_sent_to() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.RegisterResponse.verification_email_sent_to)
  return _internal_verification_email_sent_to();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegisterResponse::set_verification_email_sent_to(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.verification_email_sent_to_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.RegisterResponse.verification_email_sent_to)
}
inline std::string* RegisterResponse::mutable_verification_email_sent_to() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_verification_email_sent_to();
  // @@protoc_insertion_point(field_mutable:blokus.RegisterResponse.verification_email_sent_to)
  return _s;
}
inline const std::string& RegisterResponse::_internal_verification_email_sent_to() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.verification_email_sent_to_.Get();
}
inline void RegisterResponse::_internal_set_verification_email_sent_to(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.verification_email_sent_to_.Set(value, GetArena());
}
inline std::string* RegisterResponse::_internal_mutable_verification_email_sent_to() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.verification_email_sent_to_.Mutable( GetArena());
}
inline std::string* RegisterResponse::release_verification_email_sent_to() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.RegisterResponse.verification_email_sent_to)
  return _impl_.verification_email_sent_to_.Release();
}
inline void RegisterResponse::set_allocated_verification_email_sent_to(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.verification_email_sent_to_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.verification_email_sent_to_.IsDefault()) {
    _impl_.verification_email_sent_to_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.RegisterResponse.verification_email_sent_to)
}

// string session_token = 5;
inline void RegisterResponse::clear_session_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_token_.ClearToEmpty();
}
inline const std::string& RegisterResponse::session_token() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.RegisterResponse.session_token)
  return _internal_session_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegisterResponse::set_session_token(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_token_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.RegisterResponse.session_token)
}
inline std::string* RegisterResponse::mutable_session_token() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_session_token();
  // @@protoc_insertion_point(field_mutable:blokus.RegisterResponse.session_token)
  return _s;
}
inline const std::string& RegisterResponse::_internal_session_token() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.session_token_.Get();
}
inline void RegisterResponse::_internal_set_session_token(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_token_.Set(value, GetArena());
}
inline std::string* RegisterResponse::_internal_mutable_session_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.session_token_.Mutable( GetArena());
}
inline std::string* RegisterResponse::release_session_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.RegisterResponse.session_token)
  return _impl_.session_token_.Release();
}
inline void RegisterResponse::set_allocated_session_token(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_token_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.session_token_.IsDefault()) {
    _impl_.session_token_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.RegisterResponse.session_token)
}

// .google.protobuf.Timestamp token_expires_at = 6;
inline bool RegisterResponse::has_token_expires_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.token_expires_at_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& RegisterResponse::_internal_token_expires_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.token_expires_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& RegisterResponse::token_expires_at() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.RegisterResponse.token_expires_at)
  return _internal_token_expires_at();
}
inline void RegisterResponse::unsafe_arena_set_allocated_token_expires_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.token_expires_at_);
  }
  _impl_.token_expires_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.RegisterResponse.token_expires_at)
}
inline ::google::protobuf::Timestamp* RegisterResponse::release_token_expires_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.token_expires_at_;
  _impl_.token_expires_at_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* RegisterResponse::unsafe_arena_release_token_expires_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.RegisterResponse.token_expires_at)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.token_expires_at_;
  _impl_.token_expires_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* RegisterResponse::_internal_mutable_token_expires_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.token_expires_at_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.token_expires_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.token_expires_at_;
}
inline ::google::protobuf::Timestamp* RegisterResponse::mutable_token_expires_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_token_expires_at();
  // @@protoc_insertion_point(field_mutable:blokus.RegisterResponse.token_expires_at)
  return _msg;
}
inline void RegisterResponse::set_allocated_token_expires_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.token_expires_at_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.token_expires_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.RegisterResponse.token_expires_at)
}

// .blokus.UserInfo user_info = 7;
inline bool RegisterResponse::has_user_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_info_ != nullptr);
  return value;
}
inline const ::blokus::UserInfo& RegisterResponse::_internal_user_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::UserInfo* p = _impl_.user_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::UserInfo&>(::blokus::_UserInfo_default_instance_);
}
inline const ::blokus::UserInfo& RegisterResponse::user_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.RegisterResponse.user_info)
  return _internal_user_info();
}
inline void RegisterResponse::unsafe_arena_set_allocated_user_info(::blokus::UserInfo* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.user_info_);
  }
  _impl_.user_info_ = reinterpret_cast<::blokus::UserInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.RegisterResponse.user_info)
}
inline ::blokus::UserInfo* RegisterResponse::release_user_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::blokus::UserInfo* released = _impl_.user_info_;
  _impl_.user_info_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::UserInfo* RegisterResponse::unsafe_arena_release_user_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.RegisterResponse.user_info)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::blokus::UserInfo* temp = _impl_.user_info_;
  _impl_.user_info_ = nullptr;
  return temp;
}
inline ::blokus::UserInfo* RegisterResponse::_internal_mutable_user_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.user_info_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::UserInfo>(GetArena());
    _impl_.user_info_ = reinterpret_cast<::blokus::UserInfo*>(p);
  }
  return _impl_.user_info_;
}
inline ::blokus::UserInfo* RegisterResponse::mutable_user_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::blokus::UserInfo* _msg = _internal_mutable_user_info();
  // @@protoc_insertion_point(field_mutable:blokus.RegisterResponse.user_info)
  return _msg;
}
inline void RegisterResponse::set_allocated_user_info(::blokus::UserInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.user_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.user_info_ = reinterpret_cast<::blokus::UserInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.RegisterResponse.user_info)
}

// repeated string validation_errors = 10;
inline int RegisterResponse::_internal_validation_errors_size() const {
  return _internal_validation_errors().size();
}
inline int RegisterResponse::validation_errors_size() const {
  return _internal_validation_errors_size();
}
inline void RegisterResponse::clear_validation_errors() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.validation_errors_.Clear();
}
inline std::string* RegisterResponse::add_validation_errors() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_validation_errors()->Add();
  // @@protoc_insertion_point(field_add_mutable:blokus.RegisterResponse.validation_errors)
  return _s;
}
inline const std::string& RegisterResponse::validation_errors(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.RegisterResponse.validation_errors)
  return _internal_validation_errors().Get(index);
}
inline std::string* RegisterResponse::mutable_validation_errors(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.RegisterResponse.validation_errors)
  return _internal_mutable_validation_errors()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void RegisterResponse::set_validation_errors(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_validation_errors()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:blokus.RegisterResponse.validation_errors)
}
template <typename Arg_, typename... Args_>
inline void RegisterResponse::add_validation_errors(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_validation_errors(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:blokus.RegisterResponse.validation_errors)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RegisterResponse::validation_errors() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.RegisterResponse.validation_errors)
  return _internal_validation_errors();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
RegisterResponse::mutable_validation_errors() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.RegisterResponse.validation_errors)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_validation_errors();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RegisterResponse::_internal_validation_errors() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.validation_errors_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
RegisterResponse::_internal_mutable_validation_errors() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.validation_errors_;
}

// repeated string conflicting_fields = 11;
inline int RegisterResponse::_internal_conflicting_fields_size() const {
  return _internal_conflicting_fields().size();
}
inline int RegisterResponse::conflicting_fields_size() const {
  return _internal_conflicting_fields_size();
}
inline void RegisterResponse::clear_conflicting_fields() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.conflicting_fields_.Clear();
}
inline std::string* RegisterResponse::add_conflicting_fields() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_conflicting_fields()->Add();
  // @@protoc_insertion_point(field_add_mutable:blokus.RegisterResponse.conflicting_fields)
  return _s;
}
inline const std::string& RegisterResponse::conflicting_fields(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.RegisterResponse.conflicting_fields)
  return _internal_conflicting_fields().Get(index);
}
inline std::string* RegisterResponse::mutable_conflicting_fields(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.RegisterResponse.conflicting_fields)
  return _internal_mutable_conflicting_fields()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void RegisterResponse::set_conflicting_fields(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_conflicting_fields()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:blokus.RegisterResponse.conflicting_fields)
}
template <typename Arg_, typename... Args_>
inline void RegisterResponse::add_conflicting_fields(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_conflicting_fields(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:blokus.RegisterResponse.conflicting_fields)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RegisterResponse::conflicting_fields() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.RegisterResponse.conflicting_fields)
  return _internal_conflicting_fields();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
RegisterResponse::mutable_conflicting_fields() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.RegisterResponse.conflicting_fields)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_conflicting_fields();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RegisterResponse::_internal_conflicting_fields() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.conflicting_fields_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
RegisterResponse::_internal_mutable_conflicting_fields() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.conflicting_fields_;
}

// -------------------------------------------------------------------

// LogoutRequest

// string session_token = 1;
inline void LogoutRequest::clear_session_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_token_.ClearToEmpty();
}
inline const std::string& LogoutRequest::session_token() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.LogoutRequest.session_token)
  return _internal_session_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LogoutRequest::set_session_token(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_token_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.LogoutRequest.session_token)
}
inline std::string* LogoutRequest::mutable_session_token() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_session_token();
  // @@protoc_insertion_point(field_mutable:blokus.LogoutRequest.session_token)
  return _s;
}
inline const std::string& LogoutRequest::_internal_session_token() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.session_token_.Get();
}
inline void LogoutRequest::_internal_set_session_token(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_token_.Set(value, GetArena());
}
inline std::string* LogoutRequest::_internal_mutable_session_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.session_token_.Mutable( GetArena());
}
inline std::string* LogoutRequest::release_session_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.LogoutRequest.session_token)
  return _impl_.session_token_.Release();
}
inline void LogoutRequest::set_allocated_session_token(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_token_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.session_token_.IsDefault()) {
    _impl_.session_token_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.LogoutRequest.session_token)
}

// bool logout_all_sessions = 2;
inline void LogoutRequest::clear_logout_all_sessions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.logout_all_sessions_ = false;
}
inline bool LogoutRequest::logout_all_sessions() const {
  // @@protoc_insertion_point(field_get:blokus.LogoutRequest.logout_all_sessions)
  return _internal_logout_all_sessions();
}
inline void LogoutRequest::set_logout_all_sessions(bool value) {
  _internal_set_logout_all_sessions(value);
  // @@protoc_insertion_point(field_set:blokus.LogoutRequest.logout_all_sessions)
}
inline bool LogoutRequest::_internal_logout_all_sessions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.logout_all_sessions_;
}
inline void LogoutRequest::_internal_set_logout_all_sessions(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.logout_all_sessions_ = value;
}

// string reason = 3;
inline void LogoutRequest::clear_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.ClearToEmpty();
}
inline const std::string& LogoutRequest::reason() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.LogoutRequest.reason)
  return _internal_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LogoutRequest::set_reason(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.LogoutRequest.reason)
}
inline std::string* LogoutRequest::mutable_reason() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:blokus.LogoutRequest.reason)
  return _s;
}
inline const std::string& LogoutRequest::_internal_reason() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reason_.Get();
}
inline void LogoutRequest::_internal_set_reason(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.Set(value, GetArena());
}
inline std::string* LogoutRequest::_internal_mutable_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.reason_.Mutable( GetArena());
}
inline std::string* LogoutRequest::release_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.LogoutRequest.reason)
  return _impl_.reason_.Release();
}
inline void LogoutRequest::set_allocated_reason(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reason_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.reason_.IsDefault()) {
    _impl_.reason_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.LogoutRequest.reason)
}

// -------------------------------------------------------------------

// LogoutResponse

// .blokus.Result result = 1;
inline bool LogoutResponse::has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.result_ != nullptr);
  return value;
}
inline const ::blokus::Result& LogoutResponse::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::Result* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::Result&>(::blokus::_Result_default_instance_);
}
inline const ::blokus::Result& LogoutResponse::result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.LogoutResponse.result)
  return _internal_result();
}
inline void LogoutResponse::unsafe_arena_set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.LogoutResponse.result)
}
inline ::blokus::Result* LogoutResponse::release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* released = _impl_.result_;
  _impl_.result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::Result* LogoutResponse::unsafe_arena_release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.LogoutResponse.result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::blokus::Result* LogoutResponse::_internal_mutable_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::Result>(GetArena());
    _impl_.result_ = reinterpret_cast<::blokus::Result*>(p);
  }
  return _impl_.result_;
}
inline ::blokus::Result* LogoutResponse::mutable_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::blokus::Result* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:blokus.LogoutResponse.result)
  return _msg;
}
inline void LogoutResponse::set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.LogoutResponse.result)
}

// string message = 2;
inline void LogoutResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& LogoutResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.LogoutResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LogoutResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.LogoutResponse.message)
}
inline std::string* LogoutResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:blokus.LogoutResponse.message)
  return _s;
}
inline const std::string& LogoutResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void LogoutResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* LogoutResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* LogoutResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.LogoutResponse.message)
  return _impl_.message_.Release();
}
inline void LogoutResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.LogoutResponse.message)
}

// .google.protobuf.Timestamp logged_out_at = 3;
inline bool LogoutResponse::has_logged_out_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.logged_out_at_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& LogoutResponse::_internal_logged_out_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.logged_out_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& LogoutResponse::logged_out_at() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.LogoutResponse.logged_out_at)
  return _internal_logged_out_at();
}
inline void LogoutResponse::unsafe_arena_set_allocated_logged_out_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.logged_out_at_);
  }
  _impl_.logged_out_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.LogoutResponse.logged_out_at)
}
inline ::google::protobuf::Timestamp* LogoutResponse::release_logged_out_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.logged_out_at_;
  _impl_.logged_out_at_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* LogoutResponse::unsafe_arena_release_logged_out_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.LogoutResponse.logged_out_at)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.logged_out_at_;
  _impl_.logged_out_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* LogoutResponse::_internal_mutable_logged_out_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.logged_out_at_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.logged_out_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.logged_out_at_;
}
inline ::google::protobuf::Timestamp* LogoutResponse::mutable_logged_out_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_logged_out_at();
  // @@protoc_insertion_point(field_mutable:blokus.LogoutResponse.logged_out_at)
  return _msg;
}
inline void LogoutResponse::set_allocated_logged_out_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.logged_out_at_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.logged_out_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.LogoutResponse.logged_out_at)
}

// -------------------------------------------------------------------

// HeartbeatRequest

// .google.protobuf.Timestamp client_time = 1;
inline bool HeartbeatRequest::has_client_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.client_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& HeartbeatRequest::_internal_client_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.client_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& HeartbeatRequest::client_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.HeartbeatRequest.client_time)
  return _internal_client_time();
}
inline void HeartbeatRequest::unsafe_arena_set_allocated_client_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.client_time_);
  }
  _impl_.client_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.HeartbeatRequest.client_time)
}
inline ::google::protobuf::Timestamp* HeartbeatRequest::release_client_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.client_time_;
  _impl_.client_time_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* HeartbeatRequest::unsafe_arena_release_client_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.HeartbeatRequest.client_time)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.client_time_;
  _impl_.client_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* HeartbeatRequest::_internal_mutable_client_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.client_time_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.client_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.client_time_;
}
inline ::google::protobuf::Timestamp* HeartbeatRequest::mutable_client_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_client_time();
  // @@protoc_insertion_point(field_mutable:blokus.HeartbeatRequest.client_time)
  return _msg;
}
inline void HeartbeatRequest::set_allocated_client_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.client_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.client_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.HeartbeatRequest.client_time)
}

// uint32 sequence_number = 2;
inline void HeartbeatRequest::clear_sequence_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sequence_number_ = 0u;
}
inline ::uint32_t HeartbeatRequest::sequence_number() const {
  // @@protoc_insertion_point(field_get:blokus.HeartbeatRequest.sequence_number)
  return _internal_sequence_number();
}
inline void HeartbeatRequest::set_sequence_number(::uint32_t value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:blokus.HeartbeatRequest.sequence_number)
}
inline ::uint32_t HeartbeatRequest::_internal_sequence_number() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sequence_number_;
}
inline void HeartbeatRequest::_internal_set_sequence_number(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sequence_number_ = value;
}

// float cpu_usage = 3;
inline void HeartbeatRequest::clear_cpu_usage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cpu_usage_ = 0;
}
inline float HeartbeatRequest::cpu_usage() const {
  // @@protoc_insertion_point(field_get:blokus.HeartbeatRequest.cpu_usage)
  return _internal_cpu_usage();
}
inline void HeartbeatRequest::set_cpu_usage(float value) {
  _internal_set_cpu_usage(value);
  // @@protoc_insertion_point(field_set:blokus.HeartbeatRequest.cpu_usage)
}
inline float HeartbeatRequest::_internal_cpu_usage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cpu_usage_;
}
inline void HeartbeatRequest::_internal_set_cpu_usage(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cpu_usage_ = value;
}

// uint32 memory_usage_mb = 4;
inline void HeartbeatRequest::clear_memory_usage_mb() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.memory_usage_mb_ = 0u;
}
inline ::uint32_t HeartbeatRequest::memory_usage_mb() const {
  // @@protoc_insertion_point(field_get:blokus.HeartbeatRequest.memory_usage_mb)
  return _internal_memory_usage_mb();
}
inline void HeartbeatRequest::set_memory_usage_mb(::uint32_t value) {
  _internal_set_memory_usage_mb(value);
  // @@protoc_insertion_point(field_set:blokus.HeartbeatRequest.memory_usage_mb)
}
inline ::uint32_t HeartbeatRequest::_internal_memory_usage_mb() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.memory_usage_mb_;
}
inline void HeartbeatRequest::_internal_set_memory_usage_mb(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.memory_usage_mb_ = value;
}

// uint32 fps = 5;
inline void HeartbeatRequest::clear_fps() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fps_ = 0u;
}
inline ::uint32_t HeartbeatRequest::fps() const {
  // @@protoc_insertion_point(field_get:blokus.HeartbeatRequest.fps)
  return _internal_fps();
}
inline void HeartbeatRequest::set_fps(::uint32_t value) {
  _internal_set_fps(value);
  // @@protoc_insertion_point(field_set:blokus.HeartbeatRequest.fps)
}
inline ::uint32_t HeartbeatRequest::_internal_fps() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.fps_;
}
inline void HeartbeatRequest::_internal_set_fps(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fps_ = value;
}

// bool is_window_focused = 6;
inline void HeartbeatRequest::clear_is_window_focused() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_window_focused_ = false;
}
inline bool HeartbeatRequest::is_window_focused() const {
  // @@protoc_insertion_point(field_get:blokus.HeartbeatRequest.is_window_focused)
  return _internal_is_window_focused();
}
inline void HeartbeatRequest::set_is_window_focused(bool value) {
  _internal_set_is_window_focused(value);
  // @@protoc_insertion_point(field_set:blokus.HeartbeatRequest.is_window_focused)
}
inline bool HeartbeatRequest::_internal_is_window_focused() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_window_focused_;
}
inline void HeartbeatRequest::_internal_set_is_window_focused(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_window_focused_ = value;
}

// -------------------------------------------------------------------

// HeartbeatResponse

// .google.protobuf.Timestamp server_time = 1;
inline bool HeartbeatResponse::has_server_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.server_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& HeartbeatResponse::_internal_server_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.server_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& HeartbeatResponse::server_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.HeartbeatResponse.server_time)
  return _internal_server_time();
}
inline void HeartbeatResponse::unsafe_arena_set_allocated_server_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.server_time_);
  }
  _impl_.server_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.HeartbeatResponse.server_time)
}
inline ::google::protobuf::Timestamp* HeartbeatResponse::release_server_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.server_time_;
  _impl_.server_time_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* HeartbeatResponse::unsafe_arena_release_server_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.HeartbeatResponse.server_time)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.server_time_;
  _impl_.server_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* HeartbeatResponse::_internal_mutable_server_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.server_time_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.server_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.server_time_;
}
inline ::google::protobuf::Timestamp* HeartbeatResponse::mutable_server_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_server_time();
  // @@protoc_insertion_point(field_mutable:blokus.HeartbeatResponse.server_time)
  return _msg;
}
inline void HeartbeatResponse::set_allocated_server_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.server_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.server_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.HeartbeatResponse.server_time)
}

// uint32 sequence_number = 2;
inline void HeartbeatResponse::clear_sequence_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sequence_number_ = 0u;
}
inline ::uint32_t HeartbeatResponse::sequence_number() const {
  // @@protoc_insertion_point(field_get:blokus.HeartbeatResponse.sequence_number)
  return _internal_sequence_number();
}
inline void HeartbeatResponse::set_sequence_number(::uint32_t value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:blokus.HeartbeatResponse.sequence_number)
}
inline ::uint32_t HeartbeatResponse::_internal_sequence_number() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sequence_number_;
}
inline void HeartbeatResponse::_internal_set_sequence_number(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sequence_number_ = value;
}

// .blokus.ServerInfo server_info = 3;
inline bool HeartbeatResponse::has_server_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.server_info_ != nullptr);
  return value;
}
inline const ::blokus::ServerInfo& HeartbeatResponse::_internal_server_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::ServerInfo* p = _impl_.server_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::ServerInfo&>(::blokus::_ServerInfo_default_instance_);
}
inline const ::blokus::ServerInfo& HeartbeatResponse::server_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.HeartbeatResponse.server_info)
  return _internal_server_info();
}
inline void HeartbeatResponse::unsafe_arena_set_allocated_server_info(::blokus::ServerInfo* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.server_info_);
  }
  _impl_.server_info_ = reinterpret_cast<::blokus::ServerInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.HeartbeatResponse.server_info)
}
inline ::blokus::ServerInfo* HeartbeatResponse::release_server_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::blokus::ServerInfo* released = _impl_.server_info_;
  _impl_.server_info_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::ServerInfo* HeartbeatResponse::unsafe_arena_release_server_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.HeartbeatResponse.server_info)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::blokus::ServerInfo* temp = _impl_.server_info_;
  _impl_.server_info_ = nullptr;
  return temp;
}
inline ::blokus::ServerInfo* HeartbeatResponse::_internal_mutable_server_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.server_info_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::ServerInfo>(GetArena());
    _impl_.server_info_ = reinterpret_cast<::blokus::ServerInfo*>(p);
  }
  return _impl_.server_info_;
}
inline ::blokus::ServerInfo* HeartbeatResponse::mutable_server_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::blokus::ServerInfo* _msg = _internal_mutable_server_info();
  // @@protoc_insertion_point(field_mutable:blokus.HeartbeatResponse.server_info)
  return _msg;
}
inline void HeartbeatResponse::set_allocated_server_info(::blokus::ServerInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.server_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.server_info_ = reinterpret_cast<::blokus::ServerInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.HeartbeatResponse.server_info)
}

// bool force_update_required = 4;
inline void HeartbeatResponse::clear_force_update_required() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.force_update_required_ = false;
}
inline bool HeartbeatResponse::force_update_required() const {
  // @@protoc_insertion_point(field_get:blokus.HeartbeatResponse.force_update_required)
  return _internal_force_update_required();
}
inline void HeartbeatResponse::set_force_update_required(bool value) {
  _internal_set_force_update_required(value);
  // @@protoc_insertion_point(field_set:blokus.HeartbeatResponse.force_update_required)
}
inline bool HeartbeatResponse::_internal_force_update_required() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.force_update_required_;
}
inline void HeartbeatResponse::_internal_set_force_update_required(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.force_update_required_ = value;
}

// string update_url = 5;
inline void HeartbeatResponse::clear_update_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.update_url_.ClearToEmpty();
}
inline const std::string& HeartbeatResponse::update_url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.HeartbeatResponse.update_url)
  return _internal_update_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HeartbeatResponse::set_update_url(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.update_url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.HeartbeatResponse.update_url)
}
inline std::string* HeartbeatResponse::mutable_update_url() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_update_url();
  // @@protoc_insertion_point(field_mutable:blokus.HeartbeatResponse.update_url)
  return _s;
}
inline const std::string& HeartbeatResponse::_internal_update_url() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.update_url_.Get();
}
inline void HeartbeatResponse::_internal_set_update_url(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.update_url_.Set(value, GetArena());
}
inline std::string* HeartbeatResponse::_internal_mutable_update_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.update_url_.Mutable( GetArena());
}
inline std::string* HeartbeatResponse::release_update_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.HeartbeatResponse.update_url)
  return _impl_.update_url_.Release();
}
inline void HeartbeatResponse::set_allocated_update_url(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.update_url_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.update_url_.IsDefault()) {
    _impl_.update_url_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.HeartbeatResponse.update_url)
}

// repeated string server_messages = 6;
inline int HeartbeatResponse::_internal_server_messages_size() const {
  return _internal_server_messages().size();
}
inline int HeartbeatResponse::server_messages_size() const {
  return _internal_server_messages_size();
}
inline void HeartbeatResponse::clear_server_messages() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_messages_.Clear();
}
inline std::string* HeartbeatResponse::add_server_messages() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_server_messages()->Add();
  // @@protoc_insertion_point(field_add_mutable:blokus.HeartbeatResponse.server_messages)
  return _s;
}
inline const std::string& HeartbeatResponse::server_messages(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.HeartbeatResponse.server_messages)
  return _internal_server_messages().Get(index);
}
inline std::string* HeartbeatResponse::mutable_server_messages(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.HeartbeatResponse.server_messages)
  return _internal_mutable_server_messages()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void HeartbeatResponse::set_server_messages(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_server_messages()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:blokus.HeartbeatResponse.server_messages)
}
template <typename Arg_, typename... Args_>
inline void HeartbeatResponse::add_server_messages(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_server_messages(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:blokus.HeartbeatResponse.server_messages)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
HeartbeatResponse::server_messages() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.HeartbeatResponse.server_messages)
  return _internal_server_messages();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
HeartbeatResponse::mutable_server_messages() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.HeartbeatResponse.server_messages)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_server_messages();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
HeartbeatResponse::_internal_server_messages() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.server_messages_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
HeartbeatResponse::_internal_mutable_server_messages() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.server_messages_;
}

// -------------------------------------------------------------------

// WelcomeMessage

// .blokus.UserInfo user_info = 1;
inline bool WelcomeMessage::has_user_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_info_ != nullptr);
  return value;
}
inline const ::blokus::UserInfo& WelcomeMessage::_internal_user_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::UserInfo* p = _impl_.user_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::UserInfo&>(::blokus::_UserInfo_default_instance_);
}
inline const ::blokus::UserInfo& WelcomeMessage::user_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.WelcomeMessage.user_info)
  return _internal_user_info();
}
inline void WelcomeMessage::unsafe_arena_set_allocated_user_info(::blokus::UserInfo* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.user_info_);
  }
  _impl_.user_info_ = reinterpret_cast<::blokus::UserInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.WelcomeMessage.user_info)
}
inline ::blokus::UserInfo* WelcomeMessage::release_user_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::UserInfo* released = _impl_.user_info_;
  _impl_.user_info_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::UserInfo* WelcomeMessage::unsafe_arena_release_user_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.WelcomeMessage.user_info)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::UserInfo* temp = _impl_.user_info_;
  _impl_.user_info_ = nullptr;
  return temp;
}
inline ::blokus::UserInfo* WelcomeMessage::_internal_mutable_user_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.user_info_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::UserInfo>(GetArena());
    _impl_.user_info_ = reinterpret_cast<::blokus::UserInfo*>(p);
  }
  return _impl_.user_info_;
}
inline ::blokus::UserInfo* WelcomeMessage::mutable_user_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::blokus::UserInfo* _msg = _internal_mutable_user_info();
  // @@protoc_insertion_point(field_mutable:blokus.WelcomeMessage.user_info)
  return _msg;
}
inline void WelcomeMessage::set_allocated_user_info(::blokus::UserInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.user_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.user_info_ = reinterpret_cast<::blokus::UserInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.WelcomeMessage.user_info)
}

// .blokus.ServerInfo server_info = 2;
inline bool WelcomeMessage::has_server_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.server_info_ != nullptr);
  return value;
}
inline const ::blokus::ServerInfo& WelcomeMessage::_internal_server_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::ServerInfo* p = _impl_.server_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::ServerInfo&>(::blokus::_ServerInfo_default_instance_);
}
inline const ::blokus::ServerInfo& WelcomeMessage::server_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.WelcomeMessage.server_info)
  return _internal_server_info();
}
inline void WelcomeMessage::unsafe_arena_set_allocated_server_info(::blokus::ServerInfo* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.server_info_);
  }
  _impl_.server_info_ = reinterpret_cast<::blokus::ServerInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.WelcomeMessage.server_info)
}
inline ::blokus::ServerInfo* WelcomeMessage::release_server_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::blokus::ServerInfo* released = _impl_.server_info_;
  _impl_.server_info_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::ServerInfo* WelcomeMessage::unsafe_arena_release_server_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.WelcomeMessage.server_info)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::blokus::ServerInfo* temp = _impl_.server_info_;
  _impl_.server_info_ = nullptr;
  return temp;
}
inline ::blokus::ServerInfo* WelcomeMessage::_internal_mutable_server_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.server_info_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::ServerInfo>(GetArena());
    _impl_.server_info_ = reinterpret_cast<::blokus::ServerInfo*>(p);
  }
  return _impl_.server_info_;
}
inline ::blokus::ServerInfo* WelcomeMessage::mutable_server_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::blokus::ServerInfo* _msg = _internal_mutable_server_info();
  // @@protoc_insertion_point(field_mutable:blokus.WelcomeMessage.server_info)
  return _msg;
}
inline void WelcomeMessage::set_allocated_server_info(::blokus::ServerInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.server_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.server_info_ = reinterpret_cast<::blokus::ServerInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.WelcomeMessage.server_info)
}

// repeated string available_game_modes = 3;
inline int WelcomeMessage::_internal_available_game_modes_size() const {
  return _internal_available_game_modes().size();
}
inline int WelcomeMessage::available_game_modes_size() const {
  return _internal_available_game_modes_size();
}
inline void WelcomeMessage::clear_available_game_modes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.available_game_modes_.Clear();
}
inline std::string* WelcomeMessage::add_available_game_modes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_available_game_modes()->Add();
  // @@protoc_insertion_point(field_add_mutable:blokus.WelcomeMessage.available_game_modes)
  return _s;
}
inline const std::string& WelcomeMessage::available_game_modes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.WelcomeMessage.available_game_modes)
  return _internal_available_game_modes().Get(index);
}
inline std::string* WelcomeMessage::mutable_available_game_modes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.WelcomeMessage.available_game_modes)
  return _internal_mutable_available_game_modes()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void WelcomeMessage::set_available_game_modes(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_available_game_modes()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:blokus.WelcomeMessage.available_game_modes)
}
template <typename Arg_, typename... Args_>
inline void WelcomeMessage::add_available_game_modes(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_available_game_modes(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:blokus.WelcomeMessage.available_game_modes)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
WelcomeMessage::available_game_modes() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.WelcomeMessage.available_game_modes)
  return _internal_available_game_modes();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
WelcomeMessage::mutable_available_game_modes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.WelcomeMessage.available_game_modes)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_available_game_modes();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
WelcomeMessage::_internal_available_game_modes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.available_game_modes_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
WelcomeMessage::_internal_mutable_available_game_modes() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.available_game_modes_;
}

// int32 recommended_room_count = 4;
inline void WelcomeMessage::clear_recommended_room_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recommended_room_count_ = 0;
}
inline ::int32_t WelcomeMessage::recommended_room_count() const {
  // @@protoc_insertion_point(field_get:blokus.WelcomeMessage.recommended_room_count)
  return _internal_recommended_room_count();
}
inline void WelcomeMessage::set_recommended_room_count(::int32_t value) {
  _internal_set_recommended_room_count(value);
  // @@protoc_insertion_point(field_set:blokus.WelcomeMessage.recommended_room_count)
}
inline ::int32_t WelcomeMessage::_internal_recommended_room_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.recommended_room_count_;
}
inline void WelcomeMessage::_internal_set_recommended_room_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.recommended_room_count_ = value;
}

// repeated string daily_rewards = 5;
inline int WelcomeMessage::_internal_daily_rewards_size() const {
  return _internal_daily_rewards().size();
}
inline int WelcomeMessage::daily_rewards_size() const {
  return _internal_daily_rewards_size();
}
inline void WelcomeMessage::clear_daily_rewards() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.daily_rewards_.Clear();
}
inline std::string* WelcomeMessage::add_daily_rewards() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_daily_rewards()->Add();
  // @@protoc_insertion_point(field_add_mutable:blokus.WelcomeMessage.daily_rewards)
  return _s;
}
inline const std::string& WelcomeMessage::daily_rewards(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.WelcomeMessage.daily_rewards)
  return _internal_daily_rewards().Get(index);
}
inline std::string* WelcomeMessage::mutable_daily_rewards(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.WelcomeMessage.daily_rewards)
  return _internal_mutable_daily_rewards()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void WelcomeMessage::set_daily_rewards(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_daily_rewards()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:blokus.WelcomeMessage.daily_rewards)
}
template <typename Arg_, typename... Args_>
inline void WelcomeMessage::add_daily_rewards(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_daily_rewards(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:blokus.WelcomeMessage.daily_rewards)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
WelcomeMessage::daily_rewards() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.WelcomeMessage.daily_rewards)
  return _internal_daily_rewards();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
WelcomeMessage::mutable_daily_rewards() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.WelcomeMessage.daily_rewards)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_daily_rewards();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
WelcomeMessage::_internal_daily_rewards() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.daily_rewards_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
WelcomeMessage::_internal_mutable_daily_rewards() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.daily_rewards_;
}

// repeated string achievements = 6;
inline int WelcomeMessage::_internal_achievements_size() const {
  return _internal_achievements().size();
}
inline int WelcomeMessage::achievements_size() const {
  return _internal_achievements_size();
}
inline void WelcomeMessage::clear_achievements() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.achievements_.Clear();
}
inline std::string* WelcomeMessage::add_achievements() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_achievements()->Add();
  // @@protoc_insertion_point(field_add_mutable:blokus.WelcomeMessage.achievements)
  return _s;
}
inline const std::string& WelcomeMessage::achievements(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.WelcomeMessage.achievements)
  return _internal_achievements().Get(index);
}
inline std::string* WelcomeMessage::mutable_achievements(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.WelcomeMessage.achievements)
  return _internal_mutable_achievements()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void WelcomeMessage::set_achievements(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_achievements()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:blokus.WelcomeMessage.achievements)
}
template <typename Arg_, typename... Args_>
inline void WelcomeMessage::add_achievements(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_achievements(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:blokus.WelcomeMessage.achievements)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
WelcomeMessage::achievements() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.WelcomeMessage.achievements)
  return _internal_achievements();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
WelcomeMessage::mutable_achievements() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.WelcomeMessage.achievements)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_achievements();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
WelcomeMessage::_internal_achievements() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.achievements_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
WelcomeMessage::_internal_mutable_achievements() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.achievements_;
}

// repeated string friend_online = 7;
inline int WelcomeMessage::_internal_friend_online_size() const {
  return _internal_friend_online().size();
}
inline int WelcomeMessage::friend_online_size() const {
  return _internal_friend_online_size();
}
inline void WelcomeMessage::clear_friend_online() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.friend_online_.Clear();
}
inline std::string* WelcomeMessage::add_friend_online() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_friend_online()->Add();
  // @@protoc_insertion_point(field_add_mutable:blokus.WelcomeMessage.friend_online)
  return _s;
}
inline const std::string& WelcomeMessage::friend_online(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.WelcomeMessage.friend_online)
  return _internal_friend_online().Get(index);
}
inline std::string* WelcomeMessage::mutable_friend_online(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.WelcomeMessage.friend_online)
  return _internal_mutable_friend_online()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void WelcomeMessage::set_friend_online(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_friend_online()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:blokus.WelcomeMessage.friend_online)
}
template <typename Arg_, typename... Args_>
inline void WelcomeMessage::add_friend_online(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_friend_online(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:blokus.WelcomeMessage.friend_online)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
WelcomeMessage::friend_online() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.WelcomeMessage.friend_online)
  return _internal_friend_online();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
WelcomeMessage::mutable_friend_online() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.WelcomeMessage.friend_online)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_friend_online();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
WelcomeMessage::_internal_friend_online() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.friend_online_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
WelcomeMessage::_internal_mutable_friend_online() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.friend_online_;
}

// repeated string system_notifications = 10;
inline int WelcomeMessage::_internal_system_notifications_size() const {
  return _internal_system_notifications().size();
}
inline int WelcomeMessage::system_notifications_size() const {
  return _internal_system_notifications_size();
}
inline void WelcomeMessage::clear_system_notifications() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.system_notifications_.Clear();
}
inline std::string* WelcomeMessage::add_system_notifications() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_system_notifications()->Add();
  // @@protoc_insertion_point(field_add_mutable:blokus.WelcomeMessage.system_notifications)
  return _s;
}
inline const std::string& WelcomeMessage::system_notifications(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.WelcomeMessage.system_notifications)
  return _internal_system_notifications().Get(index);
}
inline std::string* WelcomeMessage::mutable_system_notifications(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.WelcomeMessage.system_notifications)
  return _internal_mutable_system_notifications()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void WelcomeMessage::set_system_notifications(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_system_notifications()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:blokus.WelcomeMessage.system_notifications)
}
template <typename Arg_, typename... Args_>
inline void WelcomeMessage::add_system_notifications(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_system_notifications(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:blokus.WelcomeMessage.system_notifications)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
WelcomeMessage::system_notifications() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.WelcomeMessage.system_notifications)
  return _internal_system_notifications();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
WelcomeMessage::mutable_system_notifications() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.WelcomeMessage.system_notifications)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_system_notifications();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
WelcomeMessage::_internal_system_notifications() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.system_notifications_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
WelcomeMessage::_internal_mutable_system_notifications() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.system_notifications_;
}

// string motd = 11;
inline void WelcomeMessage::clear_motd() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.motd_.ClearToEmpty();
}
inline const std::string& WelcomeMessage::motd() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.WelcomeMessage.motd)
  return _internal_motd();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WelcomeMessage::set_motd(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.motd_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.WelcomeMessage.motd)
}
inline std::string* WelcomeMessage::mutable_motd() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_motd();
  // @@protoc_insertion_point(field_mutable:blokus.WelcomeMessage.motd)
  return _s;
}
inline const std::string& WelcomeMessage::_internal_motd() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.motd_.Get();
}
inline void WelcomeMessage::_internal_set_motd(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.motd_.Set(value, GetArena());
}
inline std::string* WelcomeMessage::_internal_mutable_motd() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.motd_.Mutable( GetArena());
}
inline std::string* WelcomeMessage::release_motd() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.WelcomeMessage.motd)
  return _impl_.motd_.Release();
}
inline void WelcomeMessage::set_allocated_motd(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.motd_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.motd_.IsDefault()) {
    _impl_.motd_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.WelcomeMessage.motd)
}

// int32 rank_position = 15;
inline void WelcomeMessage::clear_rank_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rank_position_ = 0;
}
inline ::int32_t WelcomeMessage::rank_position() const {
  // @@protoc_insertion_point(field_get:blokus.WelcomeMessage.rank_position)
  return _internal_rank_position();
}
inline void WelcomeMessage::set_rank_position(::int32_t value) {
  _internal_set_rank_position(value);
  // @@protoc_insertion_point(field_set:blokus.WelcomeMessage.rank_position)
}
inline ::int32_t WelcomeMessage::_internal_rank_position() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rank_position_;
}
inline void WelcomeMessage::_internal_set_rank_position(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rank_position_ = value;
}

// int32 total_players = 16;
inline void WelcomeMessage::clear_total_players() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_players_ = 0;
}
inline ::int32_t WelcomeMessage::total_players() const {
  // @@protoc_insertion_point(field_get:blokus.WelcomeMessage.total_players)
  return _internal_total_players();
}
inline void WelcomeMessage::set_total_players(::int32_t value) {
  _internal_set_total_players(value);
  // @@protoc_insertion_point(field_set:blokus.WelcomeMessage.total_players)
}
inline ::int32_t WelcomeMessage::_internal_total_players() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_players_;
}
inline void WelcomeMessage::_internal_set_total_players(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_players_ = value;
}

// float win_rate = 17;
inline void WelcomeMessage::clear_win_rate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.win_rate_ = 0;
}
inline float WelcomeMessage::win_rate() const {
  // @@protoc_insertion_point(field_get:blokus.WelcomeMessage.win_rate)
  return _internal_win_rate();
}
inline void WelcomeMessage::set_win_rate(float value) {
  _internal_set_win_rate(value);
  // @@protoc_insertion_point(field_set:blokus.WelcomeMessage.win_rate)
}
inline float WelcomeMessage::_internal_win_rate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.win_rate_;
}
inline void WelcomeMessage::_internal_set_win_rate(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.win_rate_ = value;
}

// -------------------------------------------------------------------

// SessionValidationRequest

// string session_token = 1;
inline void SessionValidationRequest::clear_session_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_token_.ClearToEmpty();
}
inline const std::string& SessionValidationRequest::session_token() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.SessionValidationRequest.session_token)
  return _internal_session_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SessionValidationRequest::set_session_token(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_token_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.SessionValidationRequest.session_token)
}
inline std::string* SessionValidationRequest::mutable_session_token() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_session_token();
  // @@protoc_insertion_point(field_mutable:blokus.SessionValidationRequest.session_token)
  return _s;
}
inline const std::string& SessionValidationRequest::_internal_session_token() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.session_token_.Get();
}
inline void SessionValidationRequest::_internal_set_session_token(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_token_.Set(value, GetArena());
}
inline std::string* SessionValidationRequest::_internal_mutable_session_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.session_token_.Mutable( GetArena());
}
inline std::string* SessionValidationRequest::release_session_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.SessionValidationRequest.session_token)
  return _impl_.session_token_.Release();
}
inline void SessionValidationRequest::set_allocated_session_token(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_token_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.session_token_.IsDefault()) {
    _impl_.session_token_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.SessionValidationRequest.session_token)
}

// .google.protobuf.Timestamp last_activity = 2;
inline bool SessionValidationRequest::has_last_activity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.last_activity_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& SessionValidationRequest::_internal_last_activity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.last_activity_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& SessionValidationRequest::last_activity() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.SessionValidationRequest.last_activity)
  return _internal_last_activity();
}
inline void SessionValidationRequest::unsafe_arena_set_allocated_last_activity(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.last_activity_);
  }
  _impl_.last_activity_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.SessionValidationRequest.last_activity)
}
inline ::google::protobuf::Timestamp* SessionValidationRequest::release_last_activity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.last_activity_;
  _impl_.last_activity_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* SessionValidationRequest::unsafe_arena_release_last_activity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.SessionValidationRequest.last_activity)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.last_activity_;
  _impl_.last_activity_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* SessionValidationRequest::_internal_mutable_last_activity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.last_activity_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.last_activity_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.last_activity_;
}
inline ::google::protobuf::Timestamp* SessionValidationRequest::mutable_last_activity() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_last_activity();
  // @@protoc_insertion_point(field_mutable:blokus.SessionValidationRequest.last_activity)
  return _msg;
}
inline void SessionValidationRequest::set_allocated_last_activity(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.last_activity_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.last_activity_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.SessionValidationRequest.last_activity)
}

// -------------------------------------------------------------------

// SessionValidationResponse

// .blokus.Result result = 1;
inline bool SessionValidationResponse::has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.result_ != nullptr);
  return value;
}
inline const ::blokus::Result& SessionValidationResponse::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::Result* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::Result&>(::blokus::_Result_default_instance_);
}
inline const ::blokus::Result& SessionValidationResponse::result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.SessionValidationResponse.result)
  return _internal_result();
}
inline void SessionValidationResponse::unsafe_arena_set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.SessionValidationResponse.result)
}
inline ::blokus::Result* SessionValidationResponse::release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* released = _impl_.result_;
  _impl_.result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::Result* SessionValidationResponse::unsafe_arena_release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.SessionValidationResponse.result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::blokus::Result* SessionValidationResponse::_internal_mutable_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::Result>(GetArena());
    _impl_.result_ = reinterpret_cast<::blokus::Result*>(p);
  }
  return _impl_.result_;
}
inline ::blokus::Result* SessionValidationResponse::mutable_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::blokus::Result* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:blokus.SessionValidationResponse.result)
  return _msg;
}
inline void SessionValidationResponse::set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.SessionValidationResponse.result)
}

// bool is_valid = 2;
inline void SessionValidationResponse::clear_is_valid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_valid_ = false;
}
inline bool SessionValidationResponse::is_valid() const {
  // @@protoc_insertion_point(field_get:blokus.SessionValidationResponse.is_valid)
  return _internal_is_valid();
}
inline void SessionValidationResponse::set_is_valid(bool value) {
  _internal_set_is_valid(value);
  // @@protoc_insertion_point(field_set:blokus.SessionValidationResponse.is_valid)
}
inline bool SessionValidationResponse::_internal_is_valid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_valid_;
}
inline void SessionValidationResponse::_internal_set_is_valid(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_valid_ = value;
}

// .google.protobuf.Timestamp expires_at = 3;
inline bool SessionValidationResponse::has_expires_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.expires_at_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& SessionValidationResponse::_internal_expires_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.expires_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& SessionValidationResponse::expires_at() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.SessionValidationResponse.expires_at)
  return _internal_expires_at();
}
inline void SessionValidationResponse::unsafe_arena_set_allocated_expires_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.expires_at_);
  }
  _impl_.expires_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.SessionValidationResponse.expires_at)
}
inline ::google::protobuf::Timestamp* SessionValidationResponse::release_expires_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.expires_at_;
  _impl_.expires_at_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* SessionValidationResponse::unsafe_arena_release_expires_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.SessionValidationResponse.expires_at)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.expires_at_;
  _impl_.expires_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* SessionValidationResponse::_internal_mutable_expires_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.expires_at_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.expires_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.expires_at_;
}
inline ::google::protobuf::Timestamp* SessionValidationResponse::mutable_expires_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_expires_at();
  // @@protoc_insertion_point(field_mutable:blokus.SessionValidationResponse.expires_at)
  return _msg;
}
inline void SessionValidationResponse::set_allocated_expires_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.expires_at_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.expires_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.SessionValidationResponse.expires_at)
}

// bool requires_renewal = 4;
inline void SessionValidationResponse::clear_requires_renewal() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requires_renewal_ = false;
}
inline bool SessionValidationResponse::requires_renewal() const {
  // @@protoc_insertion_point(field_get:blokus.SessionValidationResponse.requires_renewal)
  return _internal_requires_renewal();
}
inline void SessionValidationResponse::set_requires_renewal(bool value) {
  _internal_set_requires_renewal(value);
  // @@protoc_insertion_point(field_set:blokus.SessionValidationResponse.requires_renewal)
}
inline bool SessionValidationResponse::_internal_requires_renewal() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.requires_renewal_;
}
inline void SessionValidationResponse::_internal_set_requires_renewal(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requires_renewal_ = value;
}

// string new_token = 5;
inline void SessionValidationResponse::clear_new_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_token_.ClearToEmpty();
}
inline const std::string& SessionValidationResponse::new_token() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.SessionValidationResponse.new_token)
  return _internal_new_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SessionValidationResponse::set_new_token(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_token_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.SessionValidationResponse.new_token)
}
inline std::string* SessionValidationResponse::mutable_new_token() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_new_token();
  // @@protoc_insertion_point(field_mutable:blokus.SessionValidationResponse.new_token)
  return _s;
}
inline const std::string& SessionValidationResponse::_internal_new_token() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.new_token_.Get();
}
inline void SessionValidationResponse::_internal_set_new_token(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_token_.Set(value, GetArena());
}
inline std::string* SessionValidationResponse::_internal_mutable_new_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.new_token_.Mutable( GetArena());
}
inline std::string* SessionValidationResponse::release_new_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.SessionValidationResponse.new_token)
  return _impl_.new_token_.Release();
}
inline void SessionValidationResponse::set_allocated_new_token(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_token_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.new_token_.IsDefault()) {
    _impl_.new_token_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.SessionValidationResponse.new_token)
}

// -------------------------------------------------------------------

// PasswordResetRequest

// string email = 1;
inline void PasswordResetRequest::clear_email() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.email_.ClearToEmpty();
}
inline const std::string& PasswordResetRequest::email() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.PasswordResetRequest.email)
  return _internal_email();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PasswordResetRequest::set_email(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.email_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.PasswordResetRequest.email)
}
inline std::string* PasswordResetRequest::mutable_email() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:blokus.PasswordResetRequest.email)
  return _s;
}
inline const std::string& PasswordResetRequest::_internal_email() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.email_.Get();
}
inline void PasswordResetRequest::_internal_set_email(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.email_.Set(value, GetArena());
}
inline std::string* PasswordResetRequest::_internal_mutable_email() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.email_.Mutable( GetArena());
}
inline std::string* PasswordResetRequest::release_email() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.PasswordResetRequest.email)
  return _impl_.email_.Release();
}
inline void PasswordResetRequest::set_allocated_email(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.email_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.email_.IsDefault()) {
    _impl_.email_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.PasswordResetRequest.email)
}

// string username = 2;
inline void PasswordResetRequest::clear_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.ClearToEmpty();
}
inline const std::string& PasswordResetRequest::username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.PasswordResetRequest.username)
  return _internal_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PasswordResetRequest::set_username(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.PasswordResetRequest.username)
}
inline std::string* PasswordResetRequest::mutable_username() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:blokus.PasswordResetRequest.username)
  return _s;
}
inline const std::string& PasswordResetRequest::_internal_username() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.username_.Get();
}
inline void PasswordResetRequest::_internal_set_username(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.Set(value, GetArena());
}
inline std::string* PasswordResetRequest::_internal_mutable_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.username_.Mutable( GetArena());
}
inline std::string* PasswordResetRequest::release_username() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.PasswordResetRequest.username)
  return _impl_.username_.Release();
}
inline void PasswordResetRequest::set_allocated_username(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.username_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.PasswordResetRequest.username)
}

// string captcha_response = 3;
inline void PasswordResetRequest::clear_captcha_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.captcha_response_.ClearToEmpty();
}
inline const std::string& PasswordResetRequest::captcha_response() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.PasswordResetRequest.captcha_response)
  return _internal_captcha_response();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PasswordResetRequest::set_captcha_response(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.captcha_response_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.PasswordResetRequest.captcha_response)
}
inline std::string* PasswordResetRequest::mutable_captcha_response() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_captcha_response();
  // @@protoc_insertion_point(field_mutable:blokus.PasswordResetRequest.captcha_response)
  return _s;
}
inline const std::string& PasswordResetRequest::_internal_captcha_response() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.captcha_response_.Get();
}
inline void PasswordResetRequest::_internal_set_captcha_response(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.captcha_response_.Set(value, GetArena());
}
inline std::string* PasswordResetRequest::_internal_mutable_captcha_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.captcha_response_.Mutable( GetArena());
}
inline std::string* PasswordResetRequest::release_captcha_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.PasswordResetRequest.captcha_response)
  return _impl_.captcha_response_.Release();
}
inline void PasswordResetRequest::set_allocated_captcha_response(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.captcha_response_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.captcha_response_.IsDefault()) {
    _impl_.captcha_response_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.PasswordResetRequest.captcha_response)
}

// -------------------------------------------------------------------

// PasswordResetResponse

// .blokus.Result result = 1;
inline bool PasswordResetResponse::has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.result_ != nullptr);
  return value;
}
inline const ::blokus::Result& PasswordResetResponse::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::Result* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::Result&>(::blokus::_Result_default_instance_);
}
inline const ::blokus::Result& PasswordResetResponse::result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.PasswordResetResponse.result)
  return _internal_result();
}
inline void PasswordResetResponse::unsafe_arena_set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.PasswordResetResponse.result)
}
inline ::blokus::Result* PasswordResetResponse::release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* released = _impl_.result_;
  _impl_.result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::Result* PasswordResetResponse::unsafe_arena_release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.PasswordResetResponse.result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::blokus::Result* PasswordResetResponse::_internal_mutable_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::Result>(GetArena());
    _impl_.result_ = reinterpret_cast<::blokus::Result*>(p);
  }
  return _impl_.result_;
}
inline ::blokus::Result* PasswordResetResponse::mutable_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::blokus::Result* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:blokus.PasswordResetResponse.result)
  return _msg;
}
inline void PasswordResetResponse::set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.PasswordResetResponse.result)
}

// string message = 2;
inline void PasswordResetResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& PasswordResetResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.PasswordResetResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PasswordResetResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.PasswordResetResponse.message)
}
inline std::string* PasswordResetResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:blokus.PasswordResetResponse.message)
  return _s;
}
inline const std::string& PasswordResetResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void PasswordResetResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* PasswordResetResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* PasswordResetResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.PasswordResetResponse.message)
  return _impl_.message_.Release();
}
inline void PasswordResetResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.PasswordResetResponse.message)
}

// bool email_sent = 3;
inline void PasswordResetResponse::clear_email_sent() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.email_sent_ = false;
}
inline bool PasswordResetResponse::email_sent() const {
  // @@protoc_insertion_point(field_get:blokus.PasswordResetResponse.email_sent)
  return _internal_email_sent();
}
inline void PasswordResetResponse::set_email_sent(bool value) {
  _internal_set_email_sent(value);
  // @@protoc_insertion_point(field_set:blokus.PasswordResetResponse.email_sent)
}
inline bool PasswordResetResponse::_internal_email_sent() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.email_sent_;
}
inline void PasswordResetResponse::_internal_set_email_sent(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.email_sent_ = value;
}

// string masked_email = 4;
inline void PasswordResetResponse::clear_masked_email() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.masked_email_.ClearToEmpty();
}
inline const std::string& PasswordResetResponse::masked_email() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.PasswordResetResponse.masked_email)
  return _internal_masked_email();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PasswordResetResponse::set_masked_email(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.masked_email_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.PasswordResetResponse.masked_email)
}
inline std::string* PasswordResetResponse::mutable_masked_email() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_masked_email();
  // @@protoc_insertion_point(field_mutable:blokus.PasswordResetResponse.masked_email)
  return _s;
}
inline const std::string& PasswordResetResponse::_internal_masked_email() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.masked_email_.Get();
}
inline void PasswordResetResponse::_internal_set_masked_email(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.masked_email_.Set(value, GetArena());
}
inline std::string* PasswordResetResponse::_internal_mutable_masked_email() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.masked_email_.Mutable( GetArena());
}
inline std::string* PasswordResetResponse::release_masked_email() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.PasswordResetResponse.masked_email)
  return _impl_.masked_email_.Release();
}
inline void PasswordResetResponse::set_allocated_masked_email(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.masked_email_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.masked_email_.IsDefault()) {
    _impl_.masked_email_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.PasswordResetResponse.masked_email)
}

// -------------------------------------------------------------------

// PasswordChangeRequest

// string current_password = 1;
inline void PasswordChangeRequest::clear_current_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_password_.ClearToEmpty();
}
inline const std::string& PasswordChangeRequest::current_password() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.PasswordChangeRequest.current_password)
  return _internal_current_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PasswordChangeRequest::set_current_password(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_password_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.PasswordChangeRequest.current_password)
}
inline std::string* PasswordChangeRequest::mutable_current_password() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_current_password();
  // @@protoc_insertion_point(field_mutable:blokus.PasswordChangeRequest.current_password)
  return _s;
}
inline const std::string& PasswordChangeRequest::_internal_current_password() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.current_password_.Get();
}
inline void PasswordChangeRequest::_internal_set_current_password(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_password_.Set(value, GetArena());
}
inline std::string* PasswordChangeRequest::_internal_mutable_current_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.current_password_.Mutable( GetArena());
}
inline std::string* PasswordChangeRequest::release_current_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.PasswordChangeRequest.current_password)
  return _impl_.current_password_.Release();
}
inline void PasswordChangeRequest::set_allocated_current_password(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_password_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.current_password_.IsDefault()) {
    _impl_.current_password_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.PasswordChangeRequest.current_password)
}

// string new_password = 2;
inline void PasswordChangeRequest::clear_new_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_password_.ClearToEmpty();
}
inline const std::string& PasswordChangeRequest::new_password() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.PasswordChangeRequest.new_password)
  return _internal_new_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PasswordChangeRequest::set_new_password(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_password_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.PasswordChangeRequest.new_password)
}
inline std::string* PasswordChangeRequest::mutable_new_password() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_new_password();
  // @@protoc_insertion_point(field_mutable:blokus.PasswordChangeRequest.new_password)
  return _s;
}
inline const std::string& PasswordChangeRequest::_internal_new_password() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.new_password_.Get();
}
inline void PasswordChangeRequest::_internal_set_new_password(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_password_.Set(value, GetArena());
}
inline std::string* PasswordChangeRequest::_internal_mutable_new_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.new_password_.Mutable( GetArena());
}
inline std::string* PasswordChangeRequest::release_new_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.PasswordChangeRequest.new_password)
  return _impl_.new_password_.Release();
}
inline void PasswordChangeRequest::set_allocated_new_password(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_password_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.new_password_.IsDefault()) {
    _impl_.new_password_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.PasswordChangeRequest.new_password)
}

// string reset_token = 3;
inline void PasswordChangeRequest::clear_reset_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reset_token_.ClearToEmpty();
}
inline const std::string& PasswordChangeRequest::reset_token() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.PasswordChangeRequest.reset_token)
  return _internal_reset_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PasswordChangeRequest::set_reset_token(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reset_token_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.PasswordChangeRequest.reset_token)
}
inline std::string* PasswordChangeRequest::mutable_reset_token() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reset_token();
  // @@protoc_insertion_point(field_mutable:blokus.PasswordChangeRequest.reset_token)
  return _s;
}
inline const std::string& PasswordChangeRequest::_internal_reset_token() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reset_token_.Get();
}
inline void PasswordChangeRequest::_internal_set_reset_token(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reset_token_.Set(value, GetArena());
}
inline std::string* PasswordChangeRequest::_internal_mutable_reset_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.reset_token_.Mutable( GetArena());
}
inline std::string* PasswordChangeRequest::release_reset_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.PasswordChangeRequest.reset_token)
  return _impl_.reset_token_.Release();
}
inline void PasswordChangeRequest::set_allocated_reset_token(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reset_token_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.reset_token_.IsDefault()) {
    _impl_.reset_token_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.PasswordChangeRequest.reset_token)
}

// string session_token = 4;
inline void PasswordChangeRequest::clear_session_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_token_.ClearToEmpty();
}
inline const std::string& PasswordChangeRequest::session_token() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.PasswordChangeRequest.session_token)
  return _internal_session_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PasswordChangeRequest::set_session_token(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_token_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.PasswordChangeRequest.session_token)
}
inline std::string* PasswordChangeRequest::mutable_session_token() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_session_token();
  // @@protoc_insertion_point(field_mutable:blokus.PasswordChangeRequest.session_token)
  return _s;
}
inline const std::string& PasswordChangeRequest::_internal_session_token() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.session_token_.Get();
}
inline void PasswordChangeRequest::_internal_set_session_token(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_token_.Set(value, GetArena());
}
inline std::string* PasswordChangeRequest::_internal_mutable_session_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.session_token_.Mutable( GetArena());
}
inline std::string* PasswordChangeRequest::release_session_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.PasswordChangeRequest.session_token)
  return _impl_.session_token_.Release();
}
inline void PasswordChangeRequest::set_allocated_session_token(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.session_token_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.session_token_.IsDefault()) {
    _impl_.session_token_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.PasswordChangeRequest.session_token)
}

// -------------------------------------------------------------------

// PasswordChangeResponse

// .blokus.Result result = 1;
inline bool PasswordChangeResponse::has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.result_ != nullptr);
  return value;
}
inline const ::blokus::Result& PasswordChangeResponse::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::Result* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::Result&>(::blokus::_Result_default_instance_);
}
inline const ::blokus::Result& PasswordChangeResponse::result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.PasswordChangeResponse.result)
  return _internal_result();
}
inline void PasswordChangeResponse::unsafe_arena_set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.PasswordChangeResponse.result)
}
inline ::blokus::Result* PasswordChangeResponse::release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* released = _impl_.result_;
  _impl_.result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::Result* PasswordChangeResponse::unsafe_arena_release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.PasswordChangeResponse.result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::blokus::Result* PasswordChangeResponse::_internal_mutable_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::Result>(GetArena());
    _impl_.result_ = reinterpret_cast<::blokus::Result*>(p);
  }
  return _impl_.result_;
}
inline ::blokus::Result* PasswordChangeResponse::mutable_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::blokus::Result* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:blokus.PasswordChangeResponse.result)
  return _msg;
}
inline void PasswordChangeResponse::set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.PasswordChangeResponse.result)
}

// string message = 2;
inline void PasswordChangeResponse::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& PasswordChangeResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.PasswordChangeResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PasswordChangeResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.PasswordChangeResponse.message)
}
inline std::string* PasswordChangeResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:blokus.PasswordChangeResponse.message)
  return _s;
}
inline const std::string& PasswordChangeResponse::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void PasswordChangeResponse::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* PasswordChangeResponse::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* PasswordChangeResponse::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.PasswordChangeResponse.message)
  return _impl_.message_.Release();
}
inline void PasswordChangeResponse::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.PasswordChangeResponse.message)
}

// bool requires_relogin = 3;
inline void PasswordChangeResponse::clear_requires_relogin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requires_relogin_ = false;
}
inline bool PasswordChangeResponse::requires_relogin() const {
  // @@protoc_insertion_point(field_get:blokus.PasswordChangeResponse.requires_relogin)
  return _internal_requires_relogin();
}
inline void PasswordChangeResponse::set_requires_relogin(bool value) {
  _internal_set_requires_relogin(value);
  // @@protoc_insertion_point(field_set:blokus.PasswordChangeResponse.requires_relogin)
}
inline bool PasswordChangeResponse::_internal_requires_relogin() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.requires_relogin_;
}
inline void PasswordChangeResponse::_internal_set_requires_relogin(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requires_relogin_ = value;
}

// -------------------------------------------------------------------

// AccountStatusInfo

// .blokus.AccountStatus status = 1;
inline void AccountStatusInfo::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = 0;
}
inline ::blokus::AccountStatus AccountStatusInfo::status() const {
  // @@protoc_insertion_point(field_get:blokus.AccountStatusInfo.status)
  return _internal_status();
}
inline void AccountStatusInfo::set_status(::blokus::AccountStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:blokus.AccountStatusInfo.status)
}
inline ::blokus::AccountStatus AccountStatusInfo::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::blokus::AccountStatus>(_impl_.status_);
}
inline void AccountStatusInfo::_internal_set_status(::blokus::AccountStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = value;
}

// string status_reason = 2;
inline void AccountStatusInfo::clear_status_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_reason_.ClearToEmpty();
}
inline const std::string& AccountStatusInfo::status_reason() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.AccountStatusInfo.status_reason)
  return _internal_status_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccountStatusInfo::set_status_reason(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_reason_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.AccountStatusInfo.status_reason)
}
inline std::string* AccountStatusInfo::mutable_status_reason() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_status_reason();
  // @@protoc_insertion_point(field_mutable:blokus.AccountStatusInfo.status_reason)
  return _s;
}
inline const std::string& AccountStatusInfo::_internal_status_reason() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.status_reason_.Get();
}
inline void AccountStatusInfo::_internal_set_status_reason(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_reason_.Set(value, GetArena());
}
inline std::string* AccountStatusInfo::_internal_mutable_status_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.status_reason_.Mutable( GetArena());
}
inline std::string* AccountStatusInfo::release_status_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.AccountStatusInfo.status_reason)
  return _impl_.status_reason_.Release();
}
inline void AccountStatusInfo::set_allocated_status_reason(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_reason_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.status_reason_.IsDefault()) {
    _impl_.status_reason_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.AccountStatusInfo.status_reason)
}

// .google.protobuf.Timestamp status_since = 3;
inline bool AccountStatusInfo::has_status_since() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.status_since_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& AccountStatusInfo::_internal_status_since() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.status_since_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& AccountStatusInfo::status_since() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.AccountStatusInfo.status_since)
  return _internal_status_since();
}
inline void AccountStatusInfo::unsafe_arena_set_allocated_status_since(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.status_since_);
  }
  _impl_.status_since_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.AccountStatusInfo.status_since)
}
inline ::google::protobuf::Timestamp* AccountStatusInfo::release_status_since() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.status_since_;
  _impl_.status_since_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* AccountStatusInfo::unsafe_arena_release_status_since() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.AccountStatusInfo.status_since)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.status_since_;
  _impl_.status_since_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* AccountStatusInfo::_internal_mutable_status_since() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.status_since_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.status_since_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.status_since_;
}
inline ::google::protobuf::Timestamp* AccountStatusInfo::mutable_status_since() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_status_since();
  // @@protoc_insertion_point(field_mutable:blokus.AccountStatusInfo.status_since)
  return _msg;
}
inline void AccountStatusInfo::set_allocated_status_since(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.status_since_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.status_since_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.AccountStatusInfo.status_since)
}

// .google.protobuf.Timestamp status_until = 4;
inline bool AccountStatusInfo::has_status_until() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.status_until_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& AccountStatusInfo::_internal_status_until() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.status_until_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& AccountStatusInfo::status_until() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.AccountStatusInfo.status_until)
  return _internal_status_until();
}
inline void AccountStatusInfo::unsafe_arena_set_allocated_status_until(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.status_until_);
  }
  _impl_.status_until_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.AccountStatusInfo.status_until)
}
inline ::google::protobuf::Timestamp* AccountStatusInfo::release_status_until() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.status_until_;
  _impl_.status_until_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* AccountStatusInfo::unsafe_arena_release_status_until() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.AccountStatusInfo.status_until)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.status_until_;
  _impl_.status_until_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* AccountStatusInfo::_internal_mutable_status_until() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.status_until_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.status_until_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.status_until_;
}
inline ::google::protobuf::Timestamp* AccountStatusInfo::mutable_status_until() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_status_until();
  // @@protoc_insertion_point(field_mutable:blokus.AccountStatusInfo.status_until)
  return _msg;
}
inline void AccountStatusInfo::set_allocated_status_until(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.status_until_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.status_until_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.AccountStatusInfo.status_until)
}

// int32 warning_count = 5;
inline void AccountStatusInfo::clear_warning_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.warning_count_ = 0;
}
inline ::int32_t AccountStatusInfo::warning_count() const {
  // @@protoc_insertion_point(field_get:blokus.AccountStatusInfo.warning_count)
  return _internal_warning_count();
}
inline void AccountStatusInfo::set_warning_count(::int32_t value) {
  _internal_set_warning_count(value);
  // @@protoc_insertion_point(field_set:blokus.AccountStatusInfo.warning_count)
}
inline ::int32_t AccountStatusInfo::_internal_warning_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.warning_count_;
}
inline void AccountStatusInfo::_internal_set_warning_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.warning_count_ = value;
}

// repeated string violation_history = 6;
inline int AccountStatusInfo::_internal_violation_history_size() const {
  return _internal_violation_history().size();
}
inline int AccountStatusInfo::violation_history_size() const {
  return _internal_violation_history_size();
}
inline void AccountStatusInfo::clear_violation_history() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.violation_history_.Clear();
}
inline std::string* AccountStatusInfo::add_violation_history() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_violation_history()->Add();
  // @@protoc_insertion_point(field_add_mutable:blokus.AccountStatusInfo.violation_history)
  return _s;
}
inline const std::string& AccountStatusInfo::violation_history(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.AccountStatusInfo.violation_history)
  return _internal_violation_history().Get(index);
}
inline std::string* AccountStatusInfo::mutable_violation_history(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.AccountStatusInfo.violation_history)
  return _internal_mutable_violation_history()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void AccountStatusInfo::set_violation_history(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_violation_history()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:blokus.AccountStatusInfo.violation_history)
}
template <typename Arg_, typename... Args_>
inline void AccountStatusInfo::add_violation_history(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_violation_history(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:blokus.AccountStatusInfo.violation_history)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AccountStatusInfo::violation_history() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.AccountStatusInfo.violation_history)
  return _internal_violation_history();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AccountStatusInfo::mutable_violation_history() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.AccountStatusInfo.violation_history)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_violation_history();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AccountStatusInfo::_internal_violation_history() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.violation_history_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AccountStatusInfo::_internal_mutable_violation_history() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.violation_history_;
}

// string appeal_url = 7;
inline void AccountStatusInfo::clear_appeal_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.appeal_url_.ClearToEmpty();
}
inline const std::string& AccountStatusInfo::appeal_url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.AccountStatusInfo.appeal_url)
  return _internal_appeal_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccountStatusInfo::set_appeal_url(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.appeal_url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.AccountStatusInfo.appeal_url)
}
inline std::string* AccountStatusInfo::mutable_appeal_url() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_appeal_url();
  // @@protoc_insertion_point(field_mutable:blokus.AccountStatusInfo.appeal_url)
  return _s;
}
inline const std::string& AccountStatusInfo::_internal_appeal_url() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.appeal_url_.Get();
}
inline void AccountStatusInfo::_internal_set_appeal_url(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.appeal_url_.Set(value, GetArena());
}
inline std::string* AccountStatusInfo::_internal_mutable_appeal_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.appeal_url_.Mutable( GetArena());
}
inline std::string* AccountStatusInfo::release_appeal_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.AccountStatusInfo.appeal_url)
  return _impl_.appeal_url_.Release();
}
inline void AccountStatusInfo::set_allocated_appeal_url(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.appeal_url_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.appeal_url_.IsDefault()) {
    _impl_.appeal_url_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.AccountStatusInfo.appeal_url)
}

// -------------------------------------------------------------------

// EmailVerificationRequest

// string verification_token = 1;
inline void EmailVerificationRequest::clear_verification_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.verification_token_.ClearToEmpty();
}
inline const std::string& EmailVerificationRequest::verification_token() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.EmailVerificationRequest.verification_token)
  return _internal_verification_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EmailVerificationRequest::set_verification_token(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.verification_token_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.EmailVerificationRequest.verification_token)
}
inline std::string* EmailVerificationRequest::mutable_verification_token() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_verification_token();
  // @@protoc_insertion_point(field_mutable:blokus.EmailVerificationRequest.verification_token)
  return _s;
}
inline const std::string& EmailVerificationRequest::_internal_verification_token() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.verification_token_.Get();
}
inline void EmailVerificationRequest::_internal_set_verification_token(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.verification_token_.Set(value, GetArena());
}
inline std::string* EmailVerificationRequest::_internal_mutable_verification_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.verification_token_.Mutable( GetArena());
}
inline std::string* EmailVerificationRequest::release_verification_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.EmailVerificationRequest.verification_token)
  return _impl_.verification_token_.Release();
}
inline void EmailVerificationRequest::set_allocated_verification_token(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.verification_token_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.verification_token_.IsDefault()) {
    _impl_.verification_token_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.EmailVerificationRequest.verification_token)
}

// string email = 2;
inline void EmailVerificationRequest::clear_email() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.email_.ClearToEmpty();
}
inline const std::string& EmailVerificationRequest::email() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.EmailVerificationRequest.email)
  return _internal_email();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EmailVerificationRequest::set_email(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.email_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:blokus.EmailVerificationRequest.email)
}
inline std::string* EmailVerificationRequest::mutable_email() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:blokus.EmailVerificationRequest.email)
  return _s;
}
inline const std::string& EmailVerificationRequest::_internal_email() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.email_.Get();
}
inline void EmailVerificationRequest::_internal_set_email(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.email_.Set(value, GetArena());
}
inline std::string* EmailVerificationRequest::_internal_mutable_email() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.email_.Mutable( GetArena());
}
inline std::string* EmailVerificationRequest::release_email() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.EmailVerificationRequest.email)
  return _impl_.email_.Release();
}
inline void EmailVerificationRequest::set_allocated_email(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.email_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.email_.IsDefault()) {
    _impl_.email_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:blokus.EmailVerificationRequest.email)
}

// -------------------------------------------------------------------

// EmailVerificationResponse

// .blokus.Result result = 1;
inline bool EmailVerificationResponse::has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.result_ != nullptr);
  return value;
}
inline const ::blokus::Result& EmailVerificationResponse::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::blokus::Result* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::blokus::Result&>(::blokus::_Result_default_instance_);
}
inline const ::blokus::Result& EmailVerificationResponse::result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.EmailVerificationResponse.result)
  return _internal_result();
}
inline void EmailVerificationResponse::unsafe_arena_set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.EmailVerificationResponse.result)
}
inline ::blokus::Result* EmailVerificationResponse::release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* released = _impl_.result_;
  _impl_.result_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::blokus::Result* EmailVerificationResponse::unsafe_arena_release_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.EmailVerificationResponse.result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::blokus::Result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::blokus::Result* EmailVerificationResponse::_internal_mutable_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.result_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::blokus::Result>(GetArena());
    _impl_.result_ = reinterpret_cast<::blokus::Result*>(p);
  }
  return _impl_.result_;
}
inline ::blokus::Result* EmailVerificationResponse::mutable_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::blokus::Result* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:blokus.EmailVerificationResponse.result)
  return _msg;
}
inline void EmailVerificationResponse::set_allocated_result(::blokus::Result* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.result_ = reinterpret_cast<::blokus::Result*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.EmailVerificationResponse.result)
}

// bool verified = 2;
inline void EmailVerificationResponse::clear_verified() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.verified_ = false;
}
inline bool EmailVerificationResponse::verified() const {
  // @@protoc_insertion_point(field_get:blokus.EmailVerificationResponse.verified)
  return _internal_verified();
}
inline void EmailVerificationResponse::set_verified(bool value) {
  _internal_set_verified(value);
  // @@protoc_insertion_point(field_set:blokus.EmailVerificationResponse.verified)
}
inline bool EmailVerificationResponse::_internal_verified() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.verified_;
}
inline void EmailVerificationResponse::_internal_set_verified(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.verified_ = value;
}

// .google.protobuf.Timestamp verified_at = 3;
inline bool EmailVerificationResponse::has_verified_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.verified_at_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& EmailVerificationResponse::_internal_verified_at() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.verified_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& EmailVerificationResponse::verified_at() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.EmailVerificationResponse.verified_at)
  return _internal_verified_at();
}
inline void EmailVerificationResponse::unsafe_arena_set_allocated_verified_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.verified_at_);
  }
  _impl_.verified_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:blokus.EmailVerificationResponse.verified_at)
}
inline ::google::protobuf::Timestamp* EmailVerificationResponse::release_verified_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.verified_at_;
  _impl_.verified_at_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* EmailVerificationResponse::unsafe_arena_release_verified_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:blokus.EmailVerificationResponse.verified_at)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.verified_at_;
  _impl_.verified_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* EmailVerificationResponse::_internal_mutable_verified_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.verified_at_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.verified_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.verified_at_;
}
inline ::google::protobuf::Timestamp* EmailVerificationResponse::mutable_verified_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_verified_at();
  // @@protoc_insertion_point(field_mutable:blokus.EmailVerificationResponse.verified_at)
  return _msg;
}
inline void EmailVerificationResponse::set_allocated_verified_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.verified_at_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.verified_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:blokus.EmailVerificationResponse.verified_at)
}

// repeated string rewards = 4;
inline int EmailVerificationResponse::_internal_rewards_size() const {
  return _internal_rewards().size();
}
inline int EmailVerificationResponse::rewards_size() const {
  return _internal_rewards_size();
}
inline void EmailVerificationResponse::clear_rewards() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rewards_.Clear();
}
inline std::string* EmailVerificationResponse::add_rewards() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_rewards()->Add();
  // @@protoc_insertion_point(field_add_mutable:blokus.EmailVerificationResponse.rewards)
  return _s;
}
inline const std::string& EmailVerificationResponse::rewards(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:blokus.EmailVerificationResponse.rewards)
  return _internal_rewards().Get(index);
}
inline std::string* EmailVerificationResponse::mutable_rewards(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:blokus.EmailVerificationResponse.rewards)
  return _internal_mutable_rewards()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void EmailVerificationResponse::set_rewards(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_rewards()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:blokus.EmailVerificationResponse.rewards)
}
template <typename Arg_, typename... Args_>
inline void EmailVerificationResponse::add_rewards(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_rewards(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:blokus.EmailVerificationResponse.rewards)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
EmailVerificationResponse::rewards() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:blokus.EmailVerificationResponse.rewards)
  return _internal_rewards();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
EmailVerificationResponse::mutable_rewards() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:blokus.EmailVerificationResponse.rewards)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_rewards();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
EmailVerificationResponse::_internal_rewards() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rewards_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
EmailVerificationResponse::_internal_mutable_rewards() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.rewards_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace blokus


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::blokus::AuthMethod> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::blokus::AuthMethod>() {
  return ::blokus::AuthMethod_descriptor();
}
template <>
struct is_proto_enum<::blokus::AccountStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::blokus::AccountStatus>() {
  return ::blokus::AccountStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // auth_2eproto_2epb_2eh
