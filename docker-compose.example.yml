# Production Docker Compose Configuration
# Single docker-compose.yml for all services with host volume mounting

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: blokus-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: blokus_online
      POSTGRES_USER: ${DB_USER:-admin}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-admin}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    networks:
      - blokus_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-admin}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web Admin Panel (Next.js)
  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: blokus-web
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${DB_USER:-admin}:${DB_PASSWORD:-admin}@postgres:5432/blokus_online
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET:-your-secret-key-here}
      - NEXTAUTH_URL=${NEXTAUTH_URL:-http://localhost:3000}
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      # Host directory for stage thumbnails - persistent across container restarts
      - ${THUMBNAIL_HOST_PATH:-./data/stage-thumbnails}:/app/public/stage-thumbnails
    networks:
      - blokus_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Single Player API (Node.js)
  single-player-api:
    build:
      context: ./single-player-api
      dockerfile: Dockerfile
    container_name: blokus-single-api
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=blokus_online
      - DB_USER=${DB_USER:-admin}
      - DB_PASSWORD=${DB_PASSWORD:-admin}
      # Internal container communication for thumbnails
      - WEB_SERVER_URL=http://web:3000
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-http://localhost:3000,http://localhost:8080}
      - JWT_SECRET=${JWT_SECRET:-your-jwt-secret-here}
      - API_PREFIX=/api
      - RATE_LIMIT_MAX_REQUESTS=1000
      - RATE_LIMIT_WINDOW_MS=900000  # 15 minutes
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - blokus_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Multiplayer Game Server (C++)
  multiplayer-server:
    build:
      context: ./
      dockerfile: server/Dockerfile
    container_name: blokus-multi-server
    restart: unless-stopped
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=blokus_online
      - DB_USER=${DB_USER:-admin}
      - DB_PASSWORD=${DB_PASSWORD:-admin}
      - SERVER_PORT=9999
      - MAX_CONNECTIONS=${MAX_CONNECTIONS:-100}
    ports:
      - "9999:9999"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - blokus_network
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 9999 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Reverse Proxy (uncomment for production)
  # nginx:
  #   image: nginx:alpine
  #   container_name: blokus-nginx
  #   restart: unless-stopped
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./nginx/ssl:/etc/nginx/ssl:ro
  #   depends_on:
  #     - web
  #     - single-player-api
  #   networks:
  #     - blokus_network

volumes:
  postgres_data:
    driver: local

networks:
  blokus_network:
    driver: bridge

# Production deployment:
# 1. Copy .env.example to .env and configure
# 2. Set THUMBNAIL_HOST_PATH=/opt/blokus/thumbnails (or your preferred path)
# 3. Ensure host directory exists with proper permissions
# 4. Run: docker-compose up -d
# 5. Monitor with: docker-compose logs -f