name: CI/CD Pipeline - Smart Deploy to Server

on:
  push:
    branches: [ main ]
  workflow_dispatch: # 수동 실행 허용
    inputs:
      force_deploy_game_server:
        description: 'Force deploy Game Server (ignore change detection)'
        type: boolean
        default: false
      force_deploy_web:
        description: 'Force deploy Web Application (ignore change detection)'
        type: boolean
        default: false
      force_deploy_full:
        description: 'Force deploy Full Infrastructure (ignore change detection)'
        type: boolean
        default: false
      retry_failed_deployments:
        description: 'Retry previously failed deployments'
        type: boolean
        default: true

env:
  # Repository에서 환경변수 주입
  SSH_HOST: ${{ secrets.SSH_HOST }}
  SSH_USER: ${{ secrets.SSH_USER }}
  SSH_PORT: ${{ secrets.SSH_PORT }}
  SSH_KEY: ${{ secrets.SSH_KEY }}
  
  # 서버 설정
  DEPLOY_PATH: /home/${{ secrets.SSH_USER }}/blokus-online
  DOCKER_COMPOSE_FILE: docker-compose.yml

jobs:
  detect-changes:
    name: Detect Changed Files and Deployment State
    runs-on: ubuntu-latest
    outputs:
      game-server-changed: ${{ steps.changes.outputs.game-server }}
      web-changed: ${{ steps.changes.outputs.web }}
      infrastructure-changed: ${{ steps.changes.outputs.infrastructure }}
      force-game-server: ${{ steps.deployment-logic.outputs.force-game-server }}
      force-web: ${{ steps.deployment-logic.outputs.force-web }}
      force-infrastructure: ${{ steps.deployment-logic.outputs.force-infrastructure }}
    
    steps:
    - name: 체크아웃 소스코드
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 변경사항 감지
      id: changes
      run: |
        # 이전 커밋과 현재 커밋 간 변경된 파일 목록 가져오기
        if [ "${{ github.event_name }}" = "push" ]; then
          if [ "${{ github.event.before }}" = "0000000000000000000000000000000000000000" ]; then
            # 새로운 브랜치인 경우 HEAD와 HEAD~1 비교
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD || git ls-files)
          else
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
          fi
        else
          # workflow_dispatch의 경우 수동 빌드 플래그 설정
          MANUAL_BUILD=true
          CHANGED_FILES=""
        fi
        
        echo "Changed files:"
        echo "$CHANGED_FILES"
        echo "--- End of changed files ---"
        
        # 게임 서버 관련 변경사항 체크
        GAME_SERVER_CHANGED=false
        GAME_SERVER_FILES=$(echo "$CHANGED_FILES" | grep -E '^(server/|client/|common/|proto/|CMakeLists\.txt|vcpkg\.json)' || true)
        if [ ! -z "$GAME_SERVER_FILES" ]; then
          GAME_SERVER_CHANGED=true
          echo "Game server files changed: $GAME_SERVER_FILES"
        fi
        
        # 웹 애플리케이션 관련 변경사항 체크
        WEB_CHANGED=false
        WEB_FILES=$(echo "$CHANGED_FILES" | grep -E '^web/' || true)
        if [ ! -z "$WEB_FILES" ]; then
          WEB_CHANGED=true
          echo "Web files changed: $WEB_FILES"
        fi
        
        # 인프라 관련 변경사항 체크
        INFRASTRUCTURE_CHANGED=false
        INFRA_FILES=$(echo "$CHANGED_FILES" | grep -E '^(docker-compose\.yml|\.github/|\.env\.example)' || true)
        if [ ! -z "$INFRA_FILES" ]; then
          INFRASTRUCTURE_CHANGED=true
          echo "Infrastructure files changed: $INFRA_FILES"
        fi
        
        # 수동 빌드이거나 인프라 변경이 있으면 모든 서비스 재빌드
        if [ "$MANUAL_BUILD" = "true" ] || [ "$INFRASTRUCTURE_CHANGED" = "true" ]; then
          GAME_SERVER_CHANGED=true
          WEB_CHANGED=true
          INFRASTRUCTURE_CHANGED=true
          echo "Manual build or infrastructure change detected - building all services"
        fi
        
        echo "game-server=$GAME_SERVER_CHANGED" >> $GITHUB_OUTPUT
        echo "web=$WEB_CHANGED" >> $GITHUB_OUTPUT
        echo "infrastructure=$INFRASTRUCTURE_CHANGED" >> $GITHUB_OUTPUT
        
        echo "Game Server Changed: $GAME_SERVER_CHANGED"
        echo "Web Changed: $WEB_CHANGED"
        echo "Infrastructure Changed: $INFRASTRUCTURE_CHANGED"

    - name: SSH 키 설정 (배포 상태 확인용)
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -p ${{ env.SSH_PORT }} -H ${{ env.SSH_HOST }} >> ~/.ssh/known_hosts

    - name: 이전 배포 상태 확인 및 배포 결정 로직
      id: deployment-logic
      run: |
        echo "=== Deployment Decision Logic ==="
        
        # 기본 변경 감지 결과
        GAME_SERVER_CHANGED="${{ steps.changes.outputs.game-server }}"
        WEB_CHANGED="${{ steps.changes.outputs.web }}"
        INFRASTRUCTURE_CHANGED="${{ steps.changes.outputs.infrastructure }}"
        
        # 강제 배포 플래그 확인
        FORCE_GAME_SERVER="${{ github.event.inputs.force_deploy_game_server }}"
        FORCE_WEB="${{ github.event.inputs.force_deploy_web }}"
        FORCE_INFRASTRUCTURE="${{ github.event.inputs.force_deploy_full }}"
        RETRY_FAILED="${{ github.event.inputs.retry_failed_deployments }}"
        
        # 기본값 설정 (workflow_dispatch가 아닌 경우)
        if [ "${{ github.event_name }}" != "workflow_dispatch" ]; then
          RETRY_FAILED="true"
        fi
        
        echo "Force Game Server: $FORCE_GAME_SERVER"
        echo "Force Web: $FORCE_WEB"  
        echo "Force Infrastructure: $FORCE_INFRASTRUCTURE"
        echo "Retry Failed: $RETRY_FAILED"
        
        # 서버에서 이전 배포 상태 확인
        LAST_DEPLOYMENT_STATUS=""
        if [ "$RETRY_FAILED" = "true" ]; then
          echo "Checking previous deployment status on server..."
          LAST_DEPLOYMENT_STATUS=$(ssh -i ~/.ssh/id_rsa -p ${{ env.SSH_PORT }} ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "
            if [ -f ${{ env.DEPLOY_PATH }}/.deployment_status ]; then
              cat ${{ env.DEPLOY_PATH }}/.deployment_status
            else
              echo 'no_previous_deployment'
            fi
          " 2>/dev/null || echo "connection_failed")
          
          echo "Previous deployment status: $LAST_DEPLOYMENT_STATUS"
        fi
        
        # 최종 배포 결정
        DEPLOY_GAME_SERVER=false
        DEPLOY_WEB=false  
        DEPLOY_INFRASTRUCTURE=false
        
        # Game Server 배포 결정
        if [ "$FORCE_GAME_SERVER" = "true" ] || [ "$GAME_SERVER_CHANGED" = "true" ]; then
          DEPLOY_GAME_SERVER=true
          echo "Game Server deployment: Required (force=$FORCE_GAME_SERVER, changed=$GAME_SERVER_CHANGED)"
        elif [ "$RETRY_FAILED" = "true" ] && echo "$LAST_DEPLOYMENT_STATUS" | grep -q "game_server_failed"; then
          DEPLOY_GAME_SERVER=true
          echo "Game Server deployment: Required (previous deployment failed)"
        fi
        
        # Web Application 배포 결정
        if [ "$FORCE_WEB" = "true" ] || [ "$WEB_CHANGED" = "true" ]; then
          DEPLOY_WEB=true
          echo "Web deployment: Required (force=$FORCE_WEB, changed=$WEB_CHANGED)"
        elif [ "$RETRY_FAILED" = "true" ] && echo "$LAST_DEPLOYMENT_STATUS" | grep -q "web_failed"; then
          DEPLOY_WEB=true
          echo "Web deployment: Required (previous deployment failed)"
        fi
        
        # Infrastructure 배포 결정
        if [ "$FORCE_INFRASTRUCTURE" = "true" ] || [ "$INFRASTRUCTURE_CHANGED" = "true" ]; then
          DEPLOY_INFRASTRUCTURE=true
          echo "Infrastructure deployment: Required (force=$FORCE_INFRASTRUCTURE, changed=$INFRASTRUCTURE_CHANGED)"
        elif [ "$RETRY_FAILED" = "true" ] && echo "$LAST_DEPLOYMENT_STATUS" | grep -q "infrastructure_failed"; then
          DEPLOY_INFRASTRUCTURE=true
          echo "Infrastructure deployment: Required (previous deployment failed)"
        fi
        
        # 출력 설정
        echo "force-game-server=$DEPLOY_GAME_SERVER" >> $GITHUB_OUTPUT
        echo "force-web=$DEPLOY_WEB" >> $GITHUB_OUTPUT
        echo "force-infrastructure=$DEPLOY_INFRASTRUCTURE" >> $GITHUB_OUTPUT
        
        echo "=== Final Deployment Decision ==="
        echo "Game Server: $DEPLOY_GAME_SERVER"
        echo "Web Application: $DEPLOY_WEB"
        echo "Infrastructure: $DEPLOY_INFRASTRUCTURE"

  shared-setup:
    name: Shared Setup (Common Tasks)
    runs-on: ubuntu-latest
    needs: detect-changes
    if: |
      needs.detect-changes.outputs.force-game-server == 'true' || 
      needs.detect-changes.outputs.force-web == 'true' || 
      needs.detect-changes.outputs.force-infrastructure == 'true'
    
    steps:
    - name: 체크아웃 소스코드
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: SSH 키 설정
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -p ${{ env.SSH_PORT }} -H ${{ env.SSH_HOST }} >> ~/.ssh/known_hosts
        
    - name: 서버 연결 테스트
      run: |
        ssh -i ~/.ssh/id_rsa -p ${{ env.SSH_PORT }} ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "echo 'Shared setup - Connection successful!'"
        
    - name: 공통 소스코드 동기화
      run: |
        ssh -i ~/.ssh/id_rsa -p ${{ env.SSH_PORT }} ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "
          mkdir -p ${{ env.DEPLOY_PATH }} && 
          cd ${{ env.DEPLOY_PATH }} && 
          if [ ! -d .git ]; then
            git clone https://github.com/${{ github.repository }}.git .
          else
            git fetch origin main &&
            git reset --hard origin/main
          fi
        "
        
    - name: 공통 환경변수 파일 생성 (인프라 변경시에만)
      if: needs.detect-changes.outputs.infrastructure-changed == 'true'
      run: |
        ssh -i ~/.ssh/id_rsa -p ${{ env.SSH_PORT }} ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "
          cd ${{ env.DEPLOY_PATH }} && \\
          
          # 환경변수 기본값 설정
          JWT_SECRET='${{ secrets.JWT_SECRET }}'
          SESSION_TIMEOUT_HOURS='${{ secrets.SESSION_TIMEOUT_HOURS }}'
          PASSWORD_SALT_ROUNDS='${{ secrets.PASSWORD_SALT_ROUNDS }}'
          LOG_LEVEL='${{ secrets.LOG_LEVEL }}'
          LOG_DIRECTORY='${{ secrets.LOG_DIRECTORY }}'
          DEBUG_MODE='${{ secrets.DEBUG_MODE }}'
          ENABLE_SQL_LOGGING='${{ secrets.ENABLE_SQL_LOGGING }}'
          
          # JWT 시크릿 자동 생성 (설정되지 않은 경우)
          if [ -z \"\$JWT_SECRET\" ]; then
            JWT_SECRET=\$(openssl rand -hex 32)
            echo 'WARNING: JWT_SECRET not set, auto-generated. Please set it in Repository Secrets for security!'
          fi
          
          cat > .env << EOF
        # =========================
        # 게임 서버 설정
        # =========================
        SERVER_PORT=${{ secrets.SERVER_PORT }}
        SERVER_MAX_CLIENTS=${{ secrets.SERVER_MAX_CLIENTS }}
        SERVER_THREAD_POOL_SIZE=${{ secrets.SERVER_THREAD_POOL_SIZE }}
        BLOKUS_SERVER_VERSION=${{ secrets.BLOKUS_SERVER_VERSION }}
        BLOKUS_DOWNLOAD_URL=${{ secrets.BLOKUS_DOWNLOAD_URL }}
        
        # 데이터베이스 설정 (게임 서버용)
        DB_HOST=postgres
        DB_PORT=${{ secrets.DB_PORT }}
        DB_USER=${{ secrets.DB_USER }}
        DB_PASSWORD=${{ secrets.DB_PASSWORD }}
        DB_NAME=${{ secrets.DB_NAME }}
        DB_POOL_SIZE=${{ secrets.DB_POOL_SIZE }}
        
        # PostgreSQL 설정
        POSTGRES_DB=${{ secrets.DB_NAME }}
        POSTGRES_USER=${{ secrets.DB_USER }}
        POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }}
        
        # 보안 설정
        JWT_SECRET=\$JWT_SECRET
        SESSION_TIMEOUT_HOURS=\${SESSION_TIMEOUT_HOURS:-24}
        PASSWORD_SALT_ROUNDS=\${PASSWORD_SALT_ROUNDS:-12}
        
        # 로깅 설정
        LOG_LEVEL=\${LOG_LEVEL:-info}
        LOG_DIRECTORY=\${LOG_DIRECTORY:-/app/logs}
        
        # 개발 설정
        DEBUG_MODE=\${DEBUG_MODE:-false}
        ENABLE_SQL_LOGGING=\${ENABLE_SQL_LOGGING:-false}
        
        # =========================
        # 웹 애플리케이션 설정
        # =========================
        WEB_PORT=${{ secrets.WEB_PORT }}
        WEB_APP_URL=${{ secrets.WEB_APP_URL }}
        WEB_CLIENT_DOWNLOAD_URL=${{ secrets.WEB_CLIENT_DOWNLOAD_URL }}
        WEB_DATABASE_URL=postgresql://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@postgres:5432/blokus_online
        
        # 웹 인증 설정
        WEB_NEXTAUTH_SECRET=${{ secrets.WEB_NEXTAUTH_SECRET }}
        WEB_JWT_SECRET=${{ secrets.WEB_JWT_SECRET }}
        
        # 웹 관리자 계정
        WEB_ADMIN_USERNAME=${{ secrets.WEB_ADMIN_USERNAME }}
        WEB_ADMIN_PASSWORD=${{ secrets.WEB_ADMIN_PASSWORD }}
        
        # SSL/도메인 설정
        DOMAIN=${{ secrets.DOMAIN }}
        CERTBOT_EMAIL=${{ secrets.CERTBOT_EMAIL }}
        EOF
        "
        
    - name: 공통 디렉토리 설정 (인프라 변경시에만)
      if: needs.detect-changes.outputs.infrastructure-changed == 'true'
      run: |
        ssh -i ~/.ssh/id_rsa -p ${{ env.SSH_PORT }} ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "
          cd ${{ env.DEPLOY_PATH }} && \\
          
          # 기본 디렉토리 생성
          mkdir -p downloads web/uploads certbot/conf certbot/www && \\
          
          # logs 디렉토리 강제 정리 및 재생성
          rm -rf logs 2>/dev/null || echo 'logs cleanup completed' && \\
          mkdir -p logs/nginx && \\
          
          # 권한 설정
          chmod 755 downloads web/uploads logs logs/nginx certbot/conf certbot/www && \\
          echo 'All directories created and configured successfully'
        "

  deploy-game-server:
    name: Deploy Game Server
    runs-on: ubuntu-latest
    needs: [detect-changes, shared-setup]
    if: needs.detect-changes.outputs.force-game-server == 'true'
    
    steps:
    - name: SSH 키 설정
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -p ${{ env.SSH_PORT }} -H ${{ env.SSH_HOST }} >> ~/.ssh/known_hosts
        
    - name: 게임 서버 빌드 및 재시작
      run: |
        ssh -i ~/.ssh/id_rsa -p ${{ env.SSH_PORT }} ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "
          cd ${{ env.DEPLOY_PATH }} && 
          export DOCKER_BUILDKIT=1 && 
          export COMPOSE_DOCKER_CLI_BUILD=1 && 
          
          # 배포 상태 업데이트 (시작)
          echo 'game_server_deploying' > .deployment_status && 
          
          # 컨테이너 중지 및 빌드
          docker compose stop blokus-server && 
          docker compose build blokus-server && 
          docker compose up -d blokus-server --wait --wait-timeout 60 && 
          
          # 배포 성공 상태 업데이트
          sed -i 's/game_server_deploying/game_server_success/' .deployment_status || echo 'game_server_success' > .deployment_status
        "

    - name: 게임 서버 배포 실패 처리
      if: failure()
      run: |
        ssh -i ~/.ssh/id_rsa -p ${{ env.SSH_PORT }} ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "
          cd ${{ env.DEPLOY_PATH }} && 
          echo 'game_server_failed' > .deployment_status
        " || true

  deploy-web:
    name: Deploy Web Application
    runs-on: ubuntu-latest
    needs: [detect-changes, shared-setup]
    if: needs.detect-changes.outputs.force-web == 'true'
    
    steps:
    - name: SSH 키 설정
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -p ${{ env.SSH_PORT }} -H ${{ env.SSH_HOST }} >> ~/.ssh/known_hosts
        
    - name: 웹 애플리케이션 빌드 및 재시작
      run: |
        ssh -i ~/.ssh/id_rsa -p ${{ env.SSH_PORT }} ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "
          cd ${{ env.DEPLOY_PATH }} && 
          export DOCKER_BUILDKIT=1 && 
          export COMPOSE_DOCKER_CLI_BUILD=1 && 
          
          # 배포 상태 업데이트 (시작)
          echo 'web_deploying' >> .deployment_status && 
          
          # 컨테이너 중지 및 빌드
          docker compose stop blokus-web && 
          docker compose build blokus-web && 
          docker compose up -d blokus-web --wait --wait-timeout 60 && 
          
          # 배포 성공 상태 업데이트
          sed -i 's/web_deploying/web_success/' .deployment_status || echo 'web_success' >> .deployment_status
        "

    - name: 웹 애플리케이션 배포 실패 처리
      if: failure()
      run: |
        ssh -i ~/.ssh/id_rsa -p ${{ env.SSH_PORT }} ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "
          cd ${{ env.DEPLOY_PATH }} && 
          sed -i 's/web_deploying/web_failed/' .deployment_status || echo 'web_failed' >> .deployment_status
        " || true

  deploy-full:
    name: Full Deploy (Infrastructure Changes)
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.force-infrastructure == 'true'
    
    steps:
    - name: 체크아웃 소스코드
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: SSH 키 설정
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -p ${{ env.SSH_PORT }} -H ${{ env.SSH_HOST }} >> ~/.ssh/known_hosts
        
    - name: 필수 환경변수 체크
      run: |
        # 필수 secrets 체크
        if [ -z "${{ secrets.SSH_HOST }}" ] || [ -z "${{ secrets.SSH_USER }}" ] || [ -z "${{ secrets.SSH_KEY }}" ]; then
          echo "ERROR: Required SSH connection information is missing!"
          echo "Required Repository Secrets: SSH_HOST, SSH_USER, SSH_KEY, SSH_PORT"
          exit 1
        fi
        
        if [ -z "${{ secrets.DB_USER }}" ] || [ -z "${{ secrets.DB_PASSWORD }}" ] || [ -z "${{ secrets.DB_NAME }}" ]; then
          echo "ERROR: Required database information is missing!"
          echo "Required Repository Secrets: DB_USER, DB_PASSWORD, DB_NAME"
          exit 1
        fi
        
        if [ -z "${{ secrets.SERVER_PORT }}" ]; then
          echo "ERROR: Server port is not configured!"
          echo "Required Repository Secret: SERVER_PORT"
          exit 1
        fi
        
        # 웹 애플리케이션 환경변수 체크
        if [ -z "${{ secrets.WEB_APP_URL }}" ]; then
          echo "ERROR: Required web application information is missing!"
          echo "Required Repository Secrets: WEB_APP_URL"
          exit 1
        fi
        
        if [ -z "${{ secrets.WEB_ADMIN_USERNAME }}" ] || [ -z "${{ secrets.WEB_ADMIN_PASSWORD }}" ]; then
          echo "ERROR: Web admin account information is missing!"
          echo "Required Repository Secrets: WEB_ADMIN_USERNAME, WEB_ADMIN_PASSWORD"
          exit 1
        fi
        
        echo "Required environment variables check completed"
        
    - name: 서버 연결 테스트
      run: |
        ssh -i ~/.ssh/id_rsa -p ${{ env.SSH_PORT }} ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "echo 'Server connection successful!'"
        
    - name: 서버에 소스코드 배포
      run: |
        # 배포 디렉토리 생성
        ssh -i ~/.ssh/id_rsa -p ${{ env.SSH_PORT }} ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "mkdir -p ${{ env.DEPLOY_PATH }}"
        
        # Git 저장소 초기화 또는 업데이트
        ssh -i ~/.ssh/id_rsa -p ${{ env.SSH_PORT }} ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "
          cd ${{ env.DEPLOY_PATH }} && 
          if [ ! -d .git ]; then
            git clone https://github.com/${{ github.repository }}.git .
          else
            git fetch origin main
            git reset --hard origin/main
          fi
        "
        
    - name: 환경변수 파일 생성
      run: |
        ssh -i ~/.ssh/id_rsa -p ${{ env.SSH_PORT }} ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "
          cd ${{ env.DEPLOY_PATH }} && \
          
          # 환경변수 기본값 설정
          JWT_SECRET='${{ secrets.JWT_SECRET }}'
          SESSION_TIMEOUT_HOURS='${{ secrets.SESSION_TIMEOUT_HOURS }}'
          PASSWORD_SALT_ROUNDS='${{ secrets.PASSWORD_SALT_ROUNDS }}'
          LOG_LEVEL='${{ secrets.LOG_LEVEL }}'
          LOG_DIRECTORY='${{ secrets.LOG_DIRECTORY }}'
          DEBUG_MODE='${{ secrets.DEBUG_MODE }}'
          ENABLE_SQL_LOGGING='${{ secrets.ENABLE_SQL_LOGGING }}'
          
          # JWT 시크릿 자동 생성 (설정되지 않은 경우)
          if [ -z \"\$JWT_SECRET\" ]; then
            JWT_SECRET=\$(openssl rand -hex 32)
            echo 'WARNING: JWT_SECRET not set, auto-generated. Please set it in Repository Secrets for security!'
          fi
          
          cat > .env << EOF
        # =========================
        # 게임 서버 설정
        # =========================
        SERVER_PORT=${{ secrets.SERVER_PORT }}
        SERVER_MAX_CLIENTS=${{ secrets.SERVER_MAX_CLIENTS }}
        SERVER_THREAD_POOL_SIZE=${{ secrets.SERVER_THREAD_POOL_SIZE }}
        BLOKUS_SERVER_VERSION=${{ secrets.BLOKUS_SERVER_VERSION }}
        BLOKUS_DOWNLOAD_URL=${{ secrets.BLOKUS_DOWNLOAD_URL }}
        
        # 데이터베이스 설정 (게임 서버용)
        DB_HOST=postgres
        DB_PORT=${{ secrets.DB_PORT }}
        DB_USER=${{ secrets.DB_USER }}
        DB_PASSWORD=${{ secrets.DB_PASSWORD }}
        DB_NAME=${{ secrets.DB_NAME }}
        DB_POOL_SIZE=${{ secrets.DB_POOL_SIZE }}
        
        # PostgreSQL 설정
        POSTGRES_DB=${{ secrets.DB_NAME }}
        POSTGRES_USER=${{ secrets.DB_USER }}
        POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }}
        
        # 보안 설정
        JWT_SECRET=\$JWT_SECRET
        SESSION_TIMEOUT_HOURS=\${SESSION_TIMEOUT_HOURS:-24}
        PASSWORD_SALT_ROUNDS=\${PASSWORD_SALT_ROUNDS:-12}
        
        # 로깅 설정
        LOG_LEVEL=\${LOG_LEVEL:-info}
        LOG_DIRECTORY=\${LOG_DIRECTORY:-/app/logs}
        
        # 개발 설정
        DEBUG_MODE=\${DEBUG_MODE:-false}
        ENABLE_SQL_LOGGING=\${ENABLE_SQL_LOGGING:-false}
        
        # =========================
        # 웹 애플리케이션 설정
        # =========================
        WEB_PORT=${{ secrets.WEB_PORT }}
        WEB_APP_URL=${{ secrets.WEB_APP_URL }}
        WEB_CLIENT_DOWNLOAD_URL=${{ secrets.WEB_CLIENT_DOWNLOAD_URL }}
        
        # 웹 데이터베이스 설정 (동일한 PostgreSQL 컨테이너, 다른 DB명)
        WEB_DATABASE_URL=postgresql://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@postgres:5432/blokus_web
        
        # 웹 인증 설정
        WEB_NEXTAUTH_SECRET=${{ secrets.WEB_NEXTAUTH_SECRET }}
        WEB_JWT_SECRET=${{ secrets.WEB_JWT_SECRET }}
        
        # 웹 관리자 계정
        WEB_ADMIN_USERNAME=${{ secrets.WEB_ADMIN_USERNAME }}
        WEB_ADMIN_PASSWORD=${{ secrets.WEB_ADMIN_PASSWORD }}
        
        # SSL/도메인 설정
        DOMAIN=${{ secrets.DOMAIN }}
        CERTBOT_EMAIL=${{ secrets.CERTBOT_EMAIL }}
        EOF
        "
        
    - name: 클라이언트 다운로드 디렉토리 설정
      run: |
        ssh -i ~/.ssh/id_rsa -p ${{ env.SSH_PORT }} ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "
          cd ${{ env.DEPLOY_PATH }} && \
          
          # 기본 디렉토리 생성
          mkdir -p downloads web/uploads certbot/conf certbot/www && \
          
          # logs 디렉토리 강제 정리 및 재생성
          rm -rf logs 2>/dev/null || echo 'logs cleanup completed' && \
          mkdir -p logs/nginx && \
          
          # 권한 설정
          chmod 755 downloads web/uploads logs logs/nginx certbot/conf certbot/www && \
          echo 'All directories created and configured successfully'
        "
          
    - name: 기존 컨테이너 정리
      run: |
        ssh -i ~/.ssh/id_rsa -p ${{ env.SSH_PORT }} ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "
          cd ${{ env.DEPLOY_PATH }} && \
          docker compose down
        "
        
    - name: Docker 이미지 빌드 및 배포
      run: |
        ssh -i ~/.ssh/id_rsa -p ${{ env.SSH_PORT }} ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "
          cd ${{ env.DEPLOY_PATH }} && \
          export DOCKER_BUILDKIT=1 && \
          export COMPOSE_DOCKER_CLI_BUILD=1 && \
          
          # 배포 상태 초기화
          echo 'infrastructure_deploying' > .deployment_status && \
          
          # 인프라 전체 배포
          docker compose build --parallel && \
          docker compose up -d --wait --wait-timeout 60 && \
          
          # 배포 성공 상태 업데이트
          echo 'infrastructure_success' > .deployment_status
        "
        
    - name: 인프라 배포 실패 처리
      if: failure()
      run: |
        ssh -i ~/.ssh/id_rsa -p ${{ env.SSH_PORT }} ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "
          cd ${{ env.DEPLOY_PATH }} && 
          echo 'infrastructure_failed' > .deployment_status
        " || true
        
        
    - name: 배포 결과 알림
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "Full infrastructure deployment successful!"
          echo "Game Server: ${{ secrets.WEB_APP_URL }}:${{ secrets.SERVER_PORT }}"
          echo "Website: https://${{ secrets.WEB_APP_URL }}"
          echo "Client Download Directory: ${{ env.DEPLOY_PATH }}/downloads"
        else
          echo "Full infrastructure deployment failed!"
        fi
        
  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [detect-changes, shared-setup, deploy-game-server, deploy-web, deploy-full]
    if: always()
    
    steps:
    - name: 배포 결과 요약
      run: |
        echo "=== Smart Deployment Summary ==="
        echo ""
        
        # 변경사항 감지 및 배포 결정 결과
        echo "📊 Changes Detected:"
        echo "  - Game Server: ${{ needs.detect-changes.outputs.game-server-changed }}"
        echo "  - Web Application: ${{ needs.detect-changes.outputs.web-changed }}"
        echo "  - Infrastructure: ${{ needs.detect-changes.outputs.infrastructure-changed }}"
        echo ""
        
        echo "🎯 Deployment Decisions (including retry logic):"
        echo "  - Game Server: ${{ needs.detect-changes.outputs.force-game-server }}"
        echo "  - Web Application: ${{ needs.detect-changes.outputs.force-web }}"
        echo "  - Infrastructure: ${{ needs.detect-changes.outputs.force-infrastructure }}"
        echo ""
        
        # 개별 배포 결과
        echo "🚀 Deployment Results:"
        
        if [ "${{ needs.detect-changes.outputs.force-game-server }}" = "true" ]; then
          if [ "${{ needs.deploy-game-server.result }}" = "success" ]; then
            echo "  ✅ Game Server: Successfully deployed"
          else
            echo "  ❌ Game Server: Deployment failed"
          fi
        else
          echo "  ⏭️ Game Server: Skipped (no deployment needed)"
        fi
        
        if [ "${{ needs.detect-changes.outputs.force-web }}" = "true" ]; then
          if [ "${{ needs.deploy-web.result }}" = "success" ]; then
            echo "  ✅ Web Application: Successfully deployed"
          else
            echo "  ❌ Web Application: Deployment failed"
          fi
        else
          echo "  ⏭️ Web Application: Skipped (no deployment needed)"
        fi
        
        if [ "${{ needs.detect-changes.outputs.force-infrastructure }}" = "true" ]; then
          if [ "${{ needs.deploy-full.result }}" = "success" ]; then
            echo "  ✅ Full Infrastructure: Successfully deployed"
          else
            echo "  ❌ Full Infrastructure: Deployment failed"
          fi
        else
          echo "  ⏭️ Full Infrastructure: Skipped (no deployment needed)"
        fi
        
        echo ""
        echo "🌐 Service URLs:"
        echo "  - Game Server: ${{ secrets.WEB_APP_URL }}:${{ secrets.SERVER_PORT }}"
        echo "  - Website: https://${{ secrets.WEB_APP_URL }}"
        
        # 전체 성공 여부 체크 (새로운 로직 적용)
        OVERALL_SUCCESS=true
        
        if [ "${{ needs.detect-changes.outputs.force-game-server }}" = "true" ] && [ "${{ needs.deploy-game-server.result }}" != "success" ]; then
          OVERALL_SUCCESS=false
        fi
        
        if [ "${{ needs.detect-changes.outputs.force-web }}" = "true" ] && [ "${{ needs.deploy-web.result }}" != "success" ]; then
          OVERALL_SUCCESS=false
        fi
        
        if [ "${{ needs.detect-changes.outputs.force-infrastructure }}" = "true" ] && [ "${{ needs.deploy-full.result }}" != "success" ]; then
          OVERALL_SUCCESS=false
        fi
        
        echo ""
        if [ "$OVERALL_SUCCESS" = "true" ]; then
          echo "🎉 Smart deployment completed successfully!"
          exit 0
        else
          echo "💥 Some deployments failed!"
          exit 1
        fi