# ==================================================
# Nginx Configuration - Blokus Online
# 웹사이트와 게임 서버 리버스 프록시 설정
# ==================================================

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    # ==================================================
    # 기본 설정
    # ==================================================
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # 로그 포맷
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    
    # 성능 최적화
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 50M;
    
    # Gzip 압축
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # ==================================================
    # 업스트림 서버 정의
    # ==================================================
    upstream blokus_web {
        server blokus-web:3000;
        keepalive 32;
    }
    
    upstream blokus_game_server {
        server blokus-server:9999;
    }
    
    # ==================================================
    # HTTP -> HTTPS 리다이렉트
    # ==================================================
    server {
        listen 80;
        server_name blokus-online.mooo.com;
        
        # Let's Encrypt 인증서 갱신용
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }
        
        # 모든 HTTP 트래픽을 HTTPS로 리다이렉트
        location / {
            return 301 https://$server_name$request_uri;
        }
    }
    
    # ==================================================
    # HTTPS 메인 서버 설정
    # ==================================================
    server {
        listen 443 ssl http2;
        server_name blokus-online.mooo.com;
        
        # SSL 인증서 설정 (Let's Encrypt)
        ssl_certificate /etc/letsencrypt/live/blokus-online.mooo.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/blokus-online.mooo.com/privkey.pem;
        
        # SSL 보안 설정
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        
        # 보안 헤더
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        
        # ==================================================
        # 웹사이트 프록시 (기본)
        # ==================================================
        location / {
            proxy_pass http://blokus_web;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            # Next.js 개발 서버 호환성
            proxy_set_header Accept-Encoding gzip;
            proxy_read_timeout 300s;
            proxy_connect_timeout 75s;
        }
        
        # ==================================================
        # 클라이언트 다운로드 파일 제공
        # ==================================================
        location /downloads/ {
            alias /var/www/downloads/;
            
            # 다운로드 최적화
            sendfile on;
            tcp_nopush on;
            tcp_nodelay on;
            
            # 캐시 설정
            expires 1d;
            add_header Cache-Control "public, immutable";
            
            # 다운로드 헤더 설정
            add_header Content-Disposition "attachment";
            
            # 디렉토리 브라우징 비활성화
            autoindex off;
            
            # 파일 타입별 설정
            location ~* \.(zip|exe|msi)$ {
                add_header Content-Type "application/octet-stream";
                add_header Content-Disposition "attachment; filename=$1";
            }
        }
        
        # ==================================================
        # API 라우팅 (웹 애플리케이션)
        # ==================================================
        location /api/ {
            proxy_pass http://blokus_web;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # API 타임아웃 설정
            proxy_read_timeout 30s;
            proxy_connect_timeout 10s;
        }
        
        # ==================================================
        # 정적 파일 최적화
        # ==================================================
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            proxy_pass http://blokus_web;
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary "Accept-Encoding";
        }
        
        # ==================================================
        # 헬스체크 엔드포인트
        # ==================================================
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # ==================================================
        # 보안 설정
        # ==================================================
        
        # 숨김 파일 접근 차단
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        # 불필요한 파일 접근 차단
        location ~* \.(htaccess|htpasswd|ini|log|sh|sql|conf)$ {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        # robots.txt
        location = /robots.txt {
            proxy_pass http://blokus_web;
            access_log off;
        }
        
        # favicon.ico
        location = /favicon.ico {
            proxy_pass http://blokus_web;
            access_log off;
            expires 1y;
        }
    }
    
    # ==================================================
    # 게임 서버 TCP 프록시 (별도 포트)
    # 참고: 게임 서버는 TCP 소켓 통신이므로 HTTP 프록시가 아닌 
    # stream 블록이나 별도 포트 노출이 필요합니다.
    # ==================================================
    
    # HTTP 기반 게임 서버 상태 체크 (옵션)
    server {
        listen 8080;
        server_name blokus-online.mooo.com;
        
        location /game-server-status {
            proxy_pass http://blokus_game_server;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            access_log off;
        }
    }
}

# ==================================================
# TCP/UDP 스트림 프록시 (게임 서버용)
# 게임 클라이언트가 TCP 소켓 연결을 사용하는 경우
# ==================================================
stream {
    # 로그 설정
    error_log /var/log/nginx/stream_error.log;
    
    # 업스트림 정의
    upstream game_server_stream {
        server blokus-server:9999;
    }
    
    # TCP 프록시 서버
    server {
        listen 9999;
        proxy_pass game_server_stream;
        proxy_timeout 1h;
        proxy_responses 1;
        
        # 연결 로깅
        access_log /var/log/nginx/game_access.log;
    }
}