# ==================================================
# Nginx Configuration - Blokus Online (HTTP Only)
# 웹사이트와 게임 서버 리버스 프록시 설정
# ==================================================

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    # ==================================================
    # 기본 설정
    # ==================================================
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # 로그 포맷
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    
    # 성능 최적화
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 50M;
    
    # Gzip 압축
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # ==================================================
    # 업스트림 서버 정의
    # ==================================================
    upstream blokus_web {
        server blokus-web:3000 max_fails=0;
        keepalive 32;
    }
    
    upstream blokus_oidc {
        server blokus-oidc-server:9000 max_fails=0;
        keepalive 16;
    }
    
    # ==================================================
    # HTTP 서버 (HTTPS 리다이렉트)
    # ==================================================
    server {
        listen 80;
        server_name blokus-online.mooo.com localhost;
        
        # Let's Encrypt 인증서 갱신용
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }
        
        # 모든 HTTP 요청을 HTTPS로 리다이렉트
        location / {
            return 301 https://$server_name$request_uri;
        }
    }
    
    # ==================================================
    # HTTPS 메인 서버
    # ==================================================
    server {
        listen 443 ssl;
        http2 on;
        server_name blokus-online.mooo.com;
        
        # SSL 인증서 설정
        ssl_certificate /etc/letsencrypt/live/blokus-online.mooo.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/blokus-online.mooo.com/privkey.pem;
        
        # SSL 보안 설정
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        
        # 보안 헤더
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        
        # ==================================================
        # 웹사이트 프록시 (HTTPS)
        # ==================================================
        location / {
            proxy_pass http://blokus_web;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_cache_bypass $http_upgrade;
            
            # Next.js 개발 서버 호환성
            proxy_set_header Accept-Encoding gzip;
            proxy_read_timeout 300s;
            proxy_connect_timeout 75s;
        }
        
        # ==================================================
        # 클라이언트 다운로드 파일 제공
        # ==================================================
        location /downloads/ {
            alias /var/www/downloads/;
            
            # 다운로드 최적화
            sendfile on;
            tcp_nopush on;
            
            # 캐시 헤더
            expires 1d;
            add_header Cache-Control "public, immutable";
            
            # MIME 타입 설정
            location ~* \.(exe|msi|zip)$ {
                add_header Content-Disposition 'attachment';
            }
        }
        
        # ==================================================
        # 정적 파일 최적화
        # ==================================================
        location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2)$ {
            proxy_pass http://blokus_web;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-Proto https;
            
            # 캐시 설정
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary Accept-Encoding;
        }
        
        # ==================================================
        # OIDC 인증 서버 (서브패스 프록시)
        # ==================================================
        location /oidc/ {
            # /oidc/로 시작하는 요청을 OIDC 서버로 프록시 (URL 재작성)
            rewrite ^/oidc/(.*) /$1 break;
            proxy_pass http://blokus_oidc;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            
            # OAuth 콜백 처리를 위한 설정
            proxy_buffering off;
            proxy_request_buffering off;
            proxy_buffer_size 16k;
            proxy_buffers 8 16k;
            proxy_read_timeout 30s;
            proxy_connect_timeout 10s;
            
            # OAuth 플로우는 캐싱 비활성화
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }
        
        # ==================================================
        # API 라우트 최적화 (Next.js 웹앱)
        # ==================================================
        location /api/ {
            proxy_pass http://blokus_web;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            
            # API 최적화
            proxy_buffering off;
            proxy_request_buffering off;
        }
    }
    
    # ==================================================
    # HTTPS OIDC 서버 (포트 9000)
    # ==================================================
    server {
        listen 9000 ssl;
        http2 on;
        server_name blokus-online.mooo.com;
        
        # SSL 인증서 설정 (메인 서버와 동일)
        ssl_certificate /etc/letsencrypt/live/blokus-online.mooo.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/blokus-online.mooo.com/privkey.pem;
        
        # SSL 보안 설정
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        
        # 보안 헤더 (OIDC 특화)
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        
        # ==================================================
        # OIDC 서버 프록시
        # ==================================================
        location / {
            proxy_pass http://blokus_oidc;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_cache_bypass $http_upgrade;
            
            # OIDC/OAuth 최적화
            proxy_read_timeout 30s;
            proxy_connect_timeout 10s;
            proxy_buffering off;
            proxy_request_buffering off;
            
            # OAuth 콜백 처리를 위한 큰 헤더 허용
            proxy_buffer_size 16k;
            proxy_buffers 8 16k;
        }
        
        # ==================================================
        # OIDC Discovery & JWKS (캐싱)
        # ==================================================
        location ~* ^/(\.well-known|jwks\.json) {
            proxy_pass http://blokus_oidc;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            
            # OIDC 메타데이터 캐싱 (1시간)
            proxy_cache_valid 200 1h;
            expires 1h;
            add_header Cache-Control "public";
        }
        
        # ==================================================
        # OAuth 콜백 & 토큰 엔드포인트 (캐싱 비활성화)
        # ==================================================
        location ~* ^/(authorize|token|auth|introspect|revocation) {
            proxy_pass http://blokus_oidc;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            
            # OAuth 플로우는 캐싱 비활성화
            proxy_buffering off;
            proxy_cache off;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }
    }
    
}