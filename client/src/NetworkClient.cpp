#include "NetworkClient.h"
#include "ClientConfigManager.h"
#include <QDebug>
#include <QHostAddress>
#include <QRegExp>
#include <QDesktopServices>
#include <QUrl>
#include <QMessageBox>
#include <QApplication>
#include <ctime>

namespace Blokus {

    NetworkClient::NetworkClient(QObject* parent)
        : QObject(parent)
        , m_socket(nullptr)
        , m_connectionTimer(new QTimer(this))
        , m_reconnectTimer(new QTimer(this))
        , m_state(ConnectionState::Disconnected)
        , m_currentSessionToken("")
        , m_reconnectAttempts(0)
        , m_pendingSettingsRequest(false)
    {
        // ÏÑ§Ï†ïÏóêÏÑú ÎÑ§Ìä∏ÏõåÌÅ¨ Í∞í Î°úÎìú
        auto& config = ClientConfigManager::instance();
        const auto& serverConfig = config.getServerConfig();
        
        m_serverHost = serverConfig.host;
        m_serverPort = serverConfig.port;
        m_connectionTimeout = serverConfig.timeout_ms;
        m_maxReconnectAttempts = serverConfig.reconnect_attempts;
        m_reconnectInterval = serverConfig.reconnect_interval_ms;
        
        qDebug() << QString::fromUtf8("NetworkClient ÏÑ§Ï†ï Î°úÎìú:");
        qDebug() << QString::fromUtf8("  Í∏∞Î≥∏ ÏÑúÎ≤Ñ: %1:%2").arg(m_serverHost).arg(m_serverPort);
        qDebug() << QString::fromUtf8("  Ïó∞Í≤∞ ÌÉÄÏûÑÏïÑÏõÉ: %1ms").arg(m_connectionTimeout);
        qDebug() << QString::fromUtf8("  Ïû¨Ïó∞Í≤∞ ÏãúÎèÑ: %1Ìöå, Í∞ÑÍ≤©: %2ms").arg(m_maxReconnectAttempts).arg(m_reconnectInterval);
        
        setupSocket();
        
        // Ïó∞Í≤∞ ÌÉÄÏûÑÏïÑÏõÉ ÌÉÄÏù¥Î®∏ ÏÑ§Ï†ï
        m_connectionTimer->setSingleShot(true);
        m_connectionTimer->setInterval(m_connectionTimeout);
        connect(m_connectionTimer, &QTimer::timeout, this, &NetworkClient::onConnectionTimeout);
        
        // Ïû¨Ïó∞Í≤∞ ÌÉÄÏù¥Î®∏ ÏÑ§Ï†ï
        m_reconnectTimer->setSingleShot(true);
        m_reconnectTimer->setInterval(m_reconnectInterval);
        connect(m_reconnectTimer, &QTimer::timeout, this, [this]() {
            if (m_reconnectAttempts < m_maxReconnectAttempts) {
                qDebug() << QString::fromUtf8("Ïû¨Ïó∞Í≤∞ ÏãúÎèÑ... (%1/%2)").arg(m_reconnectAttempts + 1).arg(m_maxReconnectAttempts);
                connectToServer(m_serverHost, m_serverPort);
            } else {
                qDebug() << QString::fromUtf8("ÏµúÎåÄ Ïû¨Ïó∞Í≤∞ ÏãúÎèÑ ÌöüÏàò Ï¥àÍ≥º");
                emit connectionError(QString::fromUtf8("ÏÑúÎ≤ÑÏóê Ïó∞Í≤∞Ìï† Ïàò ÏóÜÏäµÎãàÎã§."));
            }
        });
        
        qDebug() << QString::fromUtf8("NetworkClient Ï¥àÍ∏∞Ìôî ÏôÑÎ£å");
    }

    NetworkClient::~NetworkClient()
    {
        cleanupSocket();
    }

    void NetworkClient::setupSocket()
    {
        if (m_socket) {
            cleanupSocket();
        }
        
        m_socket = new QTcpSocket(this);
        
        // ÏãúÍ∑∏ÎÑê Ïó∞Í≤∞
        connect(m_socket, &QTcpSocket::connected, this, &NetworkClient::onConnected);
        connect(m_socket, &QTcpSocket::disconnected, this, &NetworkClient::onDisconnected);
        connect(m_socket, &QTcpSocket::readyRead, this, &NetworkClient::onReadyRead);
        connect(m_socket, QOverload<QAbstractSocket::SocketError>::of(&QAbstractSocket::errorOccurred),
                this, &NetworkClient::onSocketError);
    }

    void NetworkClient::cleanupSocket()
    {
        if (m_socket) {
            m_socket->disconnect();
            if (m_socket->state() != QAbstractSocket::UnconnectedState) {
                m_socket->disconnectFromHost();
                // üîß FIX: Remove blocking waitForDisconnected - use async disconnection
                // The disconnected() signal will be emitted when disconnection completes
                QTimer::singleShot(3000, this, [this]() {
                    if (m_socket && m_socket->state() != QAbstractSocket::UnconnectedState) {
                        qDebug() << "üö® Force aborting connection after timeout";
                        m_socket->abort();
                    }
                });
            }
            m_socket->deleteLater();
            m_socket = nullptr;
        }
    }

    void NetworkClient::connectToServer(const QString& host, quint16 port)
    {
        if (m_state == ConnectionState::Connected || m_state == ConnectionState::Connecting) {
            qDebug() << QString::fromUtf8("Ïù¥ÎØ∏ Ïó∞Í≤∞ÎêòÏñ¥ ÏûàÍ±∞ÎÇò Ïó∞Í≤∞ Ï§ëÏûÖÎãàÎã§.");
            return;
        }
        
        m_serverHost = host;
        m_serverPort = port;
        
        qDebug() << QString::fromUtf8("ÏÑúÎ≤Ñ Ïó∞Í≤∞ ÏãúÎèÑ: %1:%2").arg(host).arg(port);
        qDebug() << QString::fromUtf8("ÏÜåÏºì ÏÉÅÌÉú: %1").arg(m_socket->state());
        
        setState(ConnectionState::Connecting);
        
        // Ïó∞Í≤∞ ÏãúÎèÑ - QHostAddress ÎåÄÏã† Î¨∏ÏûêÏó¥Î°ú ÏßÅÏ†ë Ïó∞Í≤∞
        m_socket->connectToHost(host, port);
        m_connectionTimer->start();
        
        qDebug() << QString::fromUtf8("Ïó∞Í≤∞ ÏãúÎèÑ ÏôÑÎ£å, ÏÜåÏºì ÏÉÅÌÉú: %1").arg(m_socket->state());
    }

    void NetworkClient::disconnect()
    {
        qDebug() << QString::fromUtf8("ÏÑúÎ≤Ñ Ïó∞Í≤∞ Ìï¥Ï†ú");
        
        m_connectionTimer->stop();
        m_reconnectTimer->stop();
        
        if (m_socket && m_socket->state() != QAbstractSocket::UnconnectedState) {
            m_socket->disconnectFromHost();
        }
        
        setState(ConnectionState::Disconnected);
        m_currentSessionToken.clear();
        m_reconnectAttempts = 0;
    }

    bool NetworkClient::isConnected() const
    {
        return m_state == ConnectionState::Connected || m_state == ConnectionState::Authenticated;
    }

    void NetworkClient::sendMessage(const QString& message)
    {
        if (!isConnected() || !m_socket) {
            qWarning() << QString::fromUtf8("ÏÑúÎ≤ÑÏóê Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏùå - Î©îÏãúÏßÄ Ï†ÑÏÜ° Ïã§Ìå®: %1").arg(message);
            return;
        }
        
        QByteArray data = message.toUtf8() + "\n";
        qint64 written = m_socket->write(data);
        
        if (written != data.size()) {
            qWarning() << QString::fromUtf8("Î©îÏãúÏßÄ Ï†ÑÏÜ° Î∂àÏôÑÏ†Ñ: %1 bytes written of %2").arg(written).arg(data.size());
        } else {
            qDebug() << QString::fromUtf8("Î©îÏãúÏßÄ Ï†ÑÏÜ°: %1").arg(message);
        }
    }

    void NetworkClient::sendBinaryMessage(const QByteArray& data)
    {
        if (!isConnected() || !m_socket) {
            qWarning() << QString::fromUtf8("ÏÑúÎ≤ÑÏóê Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏùå - Î∞îÏù¥ÎÑàÎ¶¨ Î©îÏãúÏßÄ Ï†ÑÏÜ° Ïã§Ìå®");
            return;
        }
        
        qint64 written = m_socket->write(data);
        
        if (written != data.size()) {
            qWarning() << QString::fromUtf8("Î∞îÏù¥ÎÑàÎ¶¨ Î©îÏãúÏßÄ Ï†ÑÏÜ° Î∂àÏôÑÏ†Ñ: %1 bytes written of %2").arg(written).arg(data.size());
        } else {
            qDebug() << QString::fromUtf8("Î∞îÏù¥ÎÑàÎ¶¨ Î©îÏãúÏßÄ Ï†ÑÏÜ°: %1 bytes").arg(data.size());
        }
    }

    void NetworkClient::login(const QString& username, const QString& password)
    {
        if (!isConnected()) {
            emit loginResult(false, QString::fromUtf8("ÏÑúÎ≤ÑÏóê Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§."));
            return;
        }
        
        QString message = QString("auth:login:%1:%2").arg(username, password);
        sendMessage(message);
        qDebug() << QString::fromUtf8("Î°úÍ∑∏Ïù∏ ÏöîÏ≤≠ Ï†ÑÏÜ°: %1").arg(username);
    }

    void NetworkClient::loginWithJwt(const QString& jwtToken)
    {
        if (!isConnected()) {
            emit loginResult(false, QString::fromUtf8("ÏÑúÎ≤ÑÏóê Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§."));
            return;
        }
        
        QString message = QString("auth:jwt:%1").arg(jwtToken);
        sendMessage(message);
        qDebug() << QString::fromUtf8("JWT ÌÜ†ÌÅ∞ Î°úÍ∑∏Ïù∏ ÏöîÏ≤≠ Ï†ÑÏÜ°: %1...").arg(jwtToken.left(20));
    }

    void NetworkClient::registerUser(const QString& username, const QString& password)
    {
        if (!isConnected()) {
            emit registerResult(false, QString::fromUtf8("ÏÑúÎ≤ÑÏóê Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§."));
            return;
        }
        
        // ÏÑúÎ≤ÑÏóêÏÑú register:ÏÇ¨Ïö©ÏûêÎ™Ö:Ïù¥Î©îÏùº:ÎπÑÎ∞ÄÎ≤àÌò∏ ÌòïÏãùÏùÑ Í∏∞ÎåÄÌïòÏßÄÎßå Ïù¥Î©îÏùºÏùÑ Îπà Í∞íÏúºÎ°ú Ï†ÑÏÜ°
        QString message = QString("register:%1::%2").arg(username, password);
        sendMessage(message);
        qDebug() << QString::fromUtf8("ÌöåÏõêÍ∞ÄÏûÖ ÏöîÏ≤≠ Ï†ÑÏÜ°: %1").arg(username);
    }

    void NetworkClient::logout()
    {
        if (m_state != ConnectionState::Authenticated) {
            emit logoutResult(false);
            return;
        }
        
        sendMessage("logout");
        qDebug() << QString::fromUtf8("Î°úÍ∑∏ÏïÑÏõÉ ÏöîÏ≤≠ Ï†ÑÏÜ°");
    }

    void NetworkClient::enterLobby()
    {
        if (!isConnected()) {
            qWarning() << QString::fromUtf8("Î°úÎπÑ ÏûÖÏû• Ïã§Ìå®: ÏÑúÎ≤ÑÏóê Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏùå");
            return;
        }
        
        sendMessage("lobby:enter");
        qDebug() << QString::fromUtf8("Î°úÎπÑ ÏûÖÏû• ÏöîÏ≤≠ Ï†ÑÏÜ°");
    }

    void NetworkClient::leaveLobby()
    {
        if (!isConnected()) {
            qWarning() << QString::fromUtf8("Î°úÎπÑ Ìá¥Ïû• Ïã§Ìå®: ÏÑúÎ≤ÑÏóê Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏùå");
            return;
        }
        
        sendMessage("lobby:leave");
        qDebug() << QString::fromUtf8("Î°úÎπÑ Ìá¥Ïû• ÏöîÏ≤≠ Ï†ÑÏÜ°");
    }

    void NetworkClient::requestLobbyList()
    {
        if (!isConnected()) {
            qWarning() << QString::fromUtf8("Î°úÎπÑ Î™©Î°ù ÏöîÏ≤≠ Ïã§Ìå®: ÏÑúÎ≤ÑÏóê Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏùå");
            return;
        }
        
        sendMessage("lobby:list");
        qDebug() << QString::fromUtf8("Î°úÎπÑ Î™©Î°ù ÏöîÏ≤≠ Ï†ÑÏÜ°");
    }

    void NetworkClient::requestRoomList()
    {
        if (!isConnected()) {
            qWarning() << QString::fromUtf8("Î∞© Î™©Î°ù ÏöîÏ≤≠ Ïã§Ìå®: ÏÑúÎ≤ÑÏóê Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏùå");
            return;
        }
        
        sendMessage("room:list");
        qDebug() << QString::fromUtf8("Î∞© Î™©Î°ù ÏöîÏ≤≠ Ï†ÑÏÜ°");
    }
    
    
    void NetworkClient::createRoom(const QString& roomName, bool isPrivate, const QString& password)
    {
        if (!isConnected()) {
            qWarning() << QString::fromUtf8("Î∞© ÏÉùÏÑ± Ïã§Ìå®: ÏÑúÎ≤ÑÏóê Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏùå");
            return;
        }
        
        QString message = QString("room:create:%1:%2")
            .arg(roomName)
            .arg(isPrivate ? "1" : "0");
            
        if (isPrivate && !password.isEmpty()) {
            message += ":" + password;
        }
        
        sendMessage(message);
        qDebug() << QString::fromUtf8("Î∞© ÏÉùÏÑ± ÏöîÏ≤≠ Ï†ÑÏÜ°: %1").arg(roomName);
    }
    
    void NetworkClient::joinRoom(int roomId, const QString& password)
    {
        if (!isConnected()) {
            qWarning() << QString::fromUtf8("Î∞© Ï∞∏Ïó¨ Ïã§Ìå®: ÏÑúÎ≤ÑÏóê Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏùå");
            return;
        }
        
        QString message = QString("room:join:%1").arg(roomId);
        if (!password.isEmpty()) {
            message += ":" + password;
        }
        
        sendMessage(message);
        qDebug() << QString::fromUtf8("Î∞© Ï∞∏Ïó¨ ÏöîÏ≤≠ Ï†ÑÏÜ°: %1").arg(roomId);
    }
    
    void NetworkClient::leaveRoom()
    {
        if (!isConnected()) {
            qWarning() << QString::fromUtf8("Î∞© ÎÇòÍ∞ÄÍ∏∞ Ïã§Ìå®: ÏÑúÎ≤ÑÏóê Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏùå");
            return;
        }
        
        sendMessage("room:leave");
        qDebug() << QString::fromUtf8("Î∞© ÎÇòÍ∞ÄÍ∏∞ ÏöîÏ≤≠ Ï†ÑÏÜ°");
    }
    
    void NetworkClient::setPlayerReady(bool ready)
    {
        if (!isConnected()) {
            qWarning() << QString::fromUtf8("Ï§ÄÎπÑ ÏÉÅÌÉú Î≥ÄÍ≤Ω Ïã§Ìå®: ÏÑúÎ≤ÑÏóê Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏùå");
            return;
        }
        
        QString message = QString("room:ready:%1").arg(ready ? "1" : "0");
        sendMessage(message);
        qDebug() << QString::fromUtf8("Ï§ÄÎπÑ ÏÉÅÌÉú Î≥ÄÍ≤Ω ÏöîÏ≤≠ Ï†ÑÏÜ°: %1").arg(ready ? "Ï§ÄÎπÑÏôÑÎ£å" : "Ï§ÄÎπÑÌï¥Ï†ú");
    }

    void NetworkClient::startGame()
    {
        if (!isConnected()) {
            qWarning() << QString::fromUtf8("Í≤åÏûÑ ÏãúÏûë Ïã§Ìå®: ÏÑúÎ≤ÑÏóê Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏùå");
            return;
        }
        
        sendMessage("room:start");
        qDebug() << QString::fromUtf8("Í≤åÏûÑ ÏãúÏûë ÏöîÏ≤≠ Ï†ÑÏÜ°");
    }


    void NetworkClient::sendChatMessage(const QString& message)
    {
        if (!isConnected()) {
            qWarning() << QString::fromUtf8("Ï±ÑÌåÖ Î©îÏãúÏßÄ Ï†ÑÏÜ° Ïã§Ìå®: ÏÑúÎ≤ÑÏóê Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏùå");
            return;
        }
        
        QString chatMessage = QString("chat:%1").arg(message);
        sendMessage(chatMessage);
        qDebug() << QString::fromUtf8("Ï±ÑÌåÖ Î©îÏãúÏßÄ Ï†ÑÏÜ°: %1").arg(message);
        
        emit chatMessageSent();
    }

    void NetworkClient::sendAfkUnblock()
    {
        if (!isConnected()) {
            qWarning() << QString::fromUtf8("AFK Ìï¥Ï†ú Î©îÏãúÏßÄ Ï†ÑÏÜ° Ïã§Ìå®: ÏÑúÎ≤ÑÏóê Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏùå");
            return;
        }
        
        sendMessage("AFK_UNBLOCK");
        qDebug() << QString::fromUtf8("AFK Ìï¥Ï†ú Î©îÏãúÏßÄ Ï†ÑÏÜ°");
    }

    // ========================================
    // ÏÑ§Ï†ï Í¥ÄÎ†® Î©îÏÑúÎìú Íµ¨ÌòÑ
    // ========================================

    void NetworkClient::requestUserSettings()
    {
        if (!isConnected()) {
            qWarning() << "Cannot request user settings: not connected to server";
            return;
        }
        
        m_pendingSettingsRequest = true; // ÏÑ§Ï†ï Ï°∞Ìöå ÏöîÏ≤≠ ÌîåÎûòÍ∑∏ ÏÑ§Ï†ï
        sendMessage("user:settings:request");
        qDebug() << "User settings request sent";
    }

    void NetworkClient::updateUserSettings(const QString& settingsData)
    {
        if (!isConnected()) {
            qWarning() << "Cannot update user settings: not connected to server";
            emit userSettingsUpdateResult(false, "ÏÑúÎ≤ÑÏóê Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏùå");
            return;
        }
        
        QString message = QString("user:settings:%1").arg(settingsData);
        sendMessage(message);
        qDebug() << "User settings update sent:" << settingsData;
    }

    void NetworkClient::setState(ConnectionState state)
    {
        if (m_state != state) {
            m_state = state;
            emit stateChanged(state);
            
            QString stateStr;
            switch (state) {
                case ConnectionState::Disconnected: stateStr = QString::fromUtf8("Ïó∞Í≤∞ Ìï¥Ï†úÎê®"); break;
                case ConnectionState::Connecting: stateStr = QString::fromUtf8("Ïó∞Í≤∞ Ï§ë"); break;
                case ConnectionState::Connected: stateStr = QString::fromUtf8("Ïó∞Í≤∞Îê®"); break;
                case ConnectionState::Authenticated: stateStr = QString::fromUtf8("Ïù∏Ï¶ùÎê®"); break;
            }
            qDebug() << QString::fromUtf8("ÎÑ§Ìä∏ÏõåÌÅ¨ ÏÉÅÌÉú Î≥ÄÍ≤Ω: %1").arg(stateStr);
        }
    }

    void NetworkClient::onConnected()
    {
        qDebug() << QString::fromUtf8("ÏÑúÎ≤Ñ Ïó∞Í≤∞ ÏÑ±Í≥µ");
        m_connectionTimer->stop();
        m_reconnectAttempts = 0;
        setState(ConnectionState::Connected);
        
        // Ïó∞Í≤∞ ÏÑ±Í≥µ ÌõÑ Ï¶âÏãú Î≤ÑÏ†Ñ Í≤ÄÏÇ¨ ÏàòÌñâ
        performVersionCheck();
    }

    void NetworkClient::onDisconnected()
    {
        qDebug() << QString::fromUtf8("ÏÑúÎ≤Ñ Ïó∞Í≤∞ Ìï¥Ï†úÎê®");
        m_connectionTimer->stop();
        
        ConnectionState oldState = m_state;
        setState(ConnectionState::Disconnected);
        m_currentSessionToken.clear();
        
        emit disconnected();
        
        // ÏòàÏÉÅÏπò Î™ªÌïú Ïó∞Í≤∞ Ìï¥Ï†úÏù∏ Í≤ΩÏö∞ Ïû¨Ïó∞Í≤∞ ÏãúÎèÑ
        if (oldState == ConnectionState::Connected || oldState == ConnectionState::Authenticated) {
            startReconnectTimer();
        }
    }

    void NetworkClient::onReadyRead()
    {
        if (!m_socket) return;
        
        while (m_socket->canReadLine()) {
            QByteArray data = m_socket->readLine();
            QString message = QString::fromUtf8(data).trimmed();
            
            if (!message.isEmpty()) {
                qDebug() << QString::fromUtf8("Î©îÏãúÏßÄ ÏàòÏã†: %1").arg(message);
                processMessage(message);
            }
        }
    }

    void NetworkClient::onSocketError(QAbstractSocket::SocketError error)
    {
        QString errorString;
        QString detailError = m_socket->errorString();
        
        switch (error) {
            case QAbstractSocket::ConnectionRefusedError:
                errorString = QString::fromUtf8("Ïó∞Í≤∞Ïù¥ Í±∞Î∂ÄÎêòÏóàÏäµÎãàÎã§ (ÏÑúÎ≤ÑÍ∞Ä Ïã§ÌñâÎêòÏßÄ ÏïäÏïòÍ±∞ÎÇò Ìè¨Ìä∏Í∞Ä Ï∞®Îã®Îê®)");
                break;
            case QAbstractSocket::RemoteHostClosedError:
                errorString = QString::fromUtf8("ÏÑúÎ≤ÑÍ∞Ä Ïó∞Í≤∞ÏùÑ Ï¢ÖÎ£åÌñàÏäµÎãàÎã§.");
                break;
            case QAbstractSocket::HostNotFoundError:
                errorString = QString::fromUtf8("ÏÑúÎ≤ÑÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§ (Ìò∏Ïä§Ìä∏Î™Ö Ìï¥ÏÑù Ïã§Ìå®)");
                break;
            case QAbstractSocket::NetworkError:
                errorString = QString::fromUtf8("ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.");
                break;
            case QAbstractSocket::SocketTimeoutError:
                errorString = QString::fromUtf8("Ïó∞Í≤∞ ÏãúÍ∞ÑÏù¥ Ï¥àÍ≥ºÎêòÏóàÏäµÎãàÎã§.");
                break;
            default:
                errorString = QString::fromUtf8("Ïïå Ïàò ÏóÜÎäî ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò");
                break;
        }
        
        qWarning() << QString::fromUtf8("ÏÜåÏºì Ïò§Î•ò [%1]: %2").arg(error).arg(errorString);
        qWarning() << QString::fromUtf8("ÏÉÅÏÑ∏ Ïò§Î•ò: %1").arg(detailError);
        qWarning() << QString::fromUtf8("Ïó∞Í≤∞ ÎåÄÏÉÅ: %1:%2").arg(m_serverHost).arg(m_serverPort);
        
        m_connectionTimer->stop();
        setState(ConnectionState::Disconnected);
        
        emit connectionError(errorString);
        
        // Ïã¨Í∞ÅÌïòÏßÄ ÏïäÏùÄ Ïò§Î•òÏùò Í≤ΩÏö∞ Ïû¨Ïó∞Í≤∞ ÏãúÎèÑ
        if (error != QAbstractSocket::ConnectionRefusedError && 
            error != QAbstractSocket::HostNotFoundError) {
            startReconnectTimer();
        }
    }

    void NetworkClient::onConnectionTimeout()
    {
        qWarning() << QString::fromUtf8("Ïó∞Í≤∞ ÏãúÍ∞Ñ Ï¥àÍ≥º");
        
        if (m_socket) {
            m_socket->abort();
        }
        
        setState(ConnectionState::Disconnected);
        emit connectionError(QString::fromUtf8("Ïó∞Í≤∞ ÏãúÍ∞ÑÏù¥ Ï¥àÍ≥ºÎêòÏóàÏäµÎãàÎã§."));
        
        startReconnectTimer();
    }

    void NetworkClient::processMessage(const QString& message)
    {
        emit messageReceived(message);
        
        // Í∏∞Ï°¥ ÌÖçÏä§Ìä∏ Í∏∞Î∞ò Î©îÏãúÏßÄ Ï≤òÎ¶¨
        if (message.startsWith("ERROR:")) {
            QString error = message.mid(6); // "ERROR:" Ï†úÍ±∞
            processErrorMessage(error);
        }
        else if (message.startsWith("AUTH_SUCCESS:") || 
                 message.startsWith("REGISTER_SUCCESS:") ||
                 message.startsWith("LOGOUT_SUCCESS")) {
            processAuthResponse(message);
        }
        else if (message.startsWith("LOBBY_") || message.startsWith("ROOM_") || message.startsWith("CHAT:") || 
                 message.startsWith("PLAYER_") || message.startsWith("HOST_") || message.startsWith("GAME_") ||
                 message.startsWith("SYSTEM:") || message.startsWith("USER_STATS_RESPONSE:") || 
                 message.startsWith("MY_STATS_UPDATE:")) {
            processLobbyResponse(message);
        }
        else if (message.startsWith("GAME_STATE_UPDATE:") || 
                 message.startsWith("BLOCK_PLACED:") || 
                 message.startsWith("TURN_CHANGED:") ||
                 message.startsWith("TURN_TIMEOUT:")) {
            processGameStateMessage(message);
        }
        else if (message.startsWith("AFK_MODE_ACTIVATED:") ||
                 message.startsWith("AFK_UNBLOCK_SUCCESS") ||
                 message.startsWith("AFK_STATUS_RESET:")) {
            processAfkMessage(message);
        }
        else if (message.startsWith("UserSettingsResponse:")) {
            QStringList params = message.split(':');
            processUserSettingsResponse(params);
        }
        else if (message.startsWith("version:")) {
            // Î≤ÑÏ†Ñ Î©îÏãúÏßÄ ÌäπÎ≥Ñ Ï≤òÎ¶¨ (URLÏùò ":"ÎïåÎ¨∏Ïóê split Ï†úÌïú)
            if (message.startsWith("version:ok")) {
                QStringList parts = {"version", "ok"};
                processVersionCheckResponse(parts);
            } else if (message.startsWith("version:mismatch:")) {
                // "version:mismatch:" Ïù¥ÌõÑÏùò Î™®Îì† ÎÇ¥Ïö©ÏùÑ URLÎ°ú Ï≤òÎ¶¨
                QString urlPart = message.mid(17); // "version:mismatch:" Ï†úÍ±∞
                QStringList parts = {"version", "mismatch", urlPart};
                processVersionCheckResponse(parts);
            } else {
                // Í∏∞ÌÉÄ Î≤ÑÏ†Ñ Î©îÏãúÏßÄ
                QStringList parts = message.split(":");
                if (parts.size() >= 2) {
                    processVersionCheckResponse(parts);
                }
            }
        }
        else if (message == "pong") {
            // Ping-pongÏùÄ ÌäπÎ≥ÑÌûà Ï≤òÎ¶¨ÌïòÏßÄ ÏïäÏùå
        }
        else {
            // Í∏∞ÌÉÄ Î©îÏãúÏßÄÎì§ÏùÄ ÏÉÅÏúÑÏóêÏÑú Ï≤òÎ¶¨ÌïòÎèÑÎ°ù Ï†ÑÎã¨
            qDebug() << QString::fromUtf8("Ï≤òÎ¶¨ÎêòÏßÄ ÏïäÏùÄ Î©îÏãúÏßÄ: %1").arg(message);
        }
    }

    void NetworkClient::processAuthResponse(const QString& response)
    {
        QStringList parts = response.split(':');
        
        if (parts[0] == "AUTH_SUCCESS" && parts.size() >= 10) {
            QString username = parts[1];
            QString sessionToken = parts[2];
            QString displayName = parts[3];
            int level = parts[4].toInt();
            int totalGames = parts[5].toInt();
            int wins = parts[6].toInt();
            int losses = parts[7].toInt();
            int totalScore = parts[8].toInt();
            int bestScore = parts[9].toInt();
            int experiencePoints = parts[10].toInt();
            
            m_currentSessionToken = sessionToken;
            setState(ConnectionState::Authenticated);
            emit loginResult(true, QString::fromUtf8("Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ"), sessionToken);
            
            // ':' Íµ¨Î∂ÑÏûê Í∏∞Î∞ò ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Î•º JSON ÌòïÌÉúÎ°ú Î≥ÄÌôòÌïòÏó¨ Ï†ÑÏÜ°
            QJsonObject userInfoJson;
            userInfoJson["username"] = username;
            userInfoJson["displayName"] = displayName;
            userInfoJson["level"] = level;
            userInfoJson["totalGames"] = totalGames;
            userInfoJson["wins"] = wins;
            userInfoJson["losses"] = losses;
            userInfoJson["totalScore"] = totalScore;
            userInfoJson["bestScore"] = bestScore;
            userInfoJson["experiencePoints"] = experiencePoints;
            
            QJsonDocument doc(userInfoJson);
            emit userProfileReceived(username, doc.toJson(QJsonDocument::Compact));
        }
        else if (parts[0] == "AUTH_SUCCESS" && parts.size() >= 3) {
            // Í∏∞Ï°¥ Ìò∏ÌôòÏÑ±ÏùÑ ÏúÑÌïú Ìè¥Î∞±
            QString username = parts[1];
            QString sessionToken = parts[2];
            
            m_currentSessionToken = sessionToken;
            setState(ConnectionState::Authenticated);
            emit loginResult(true, QString::fromUtf8("Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ"), sessionToken);
        }
        else if (parts[0] == "REGISTER_SUCCESS" && parts.size() >= 2) {
            QString username = parts[1];
            emit registerResult(true, QString::fromUtf8("ÌöåÏõêÍ∞ÄÏûÖÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§. Î°úÍ∑∏Ïù∏Ìï¥Ï£ºÏÑ∏Ïöî."));
        }
        else if (parts[0] == "LOGOUT_SUCCESS") {
            setState(ConnectionState::Connected);
            m_currentSessionToken.clear();
            emit logoutResult(true);
        }
    }

    void NetworkClient::processLobbyResponse(const QString& response)
    {
        QStringList parts = response.split(':');
        
        if (parts[0] == "LOBBY_ENTER_SUCCESS") {
            emit lobbyEntered();
        }
        else if (parts[0] == "LOBBY_LEAVE_SUCCESS") {
            emit lobbyLeft();
        }
        else if (parts[0] == "LOBBY_USER_LIST" && parts.size() >= 2) {
            int userCount = parts[1].toInt();
            QList<UserInfo> users;
            
            qDebug() << QString::fromUtf8("Î°úÎπÑ ÏÇ¨Ïö©Ïûê Î™©Î°ù ÏàòÏã†: Ï¥ù %1Î™Ö, ÌååÌä∏ Í∞úÏàò: %2").arg(userCount).arg(parts.size());
            
            // ÏÑúÎ≤Ñ ÌòïÏãù: LOBBY_USER_LIST:count:user1,displayName1,level1,status1:user2,displayName2,level2,status2...
            for (int i = 2; i < parts.size(); ++i) {
                if (!parts[i].isEmpty()) {
                    QStringList userInfo = parts[i].split(',');
                    if (userInfo.size() >= 4) {
                        // ÏÉàÎ°úÏö¥ ÌòïÏãù: username,displayName,level,status
                        UserInfo user;
                        user.username = userInfo[0];
                        user.displayName = userInfo[1];
                        user.level = userInfo[2].toInt();
                        user.status = userInfo[3];
                        user.isOnline = true;
                        
                        users.append(user);
                        qDebug() << QString::fromUtf8("ÏÇ¨Ïö©Ïûê Ï∂îÍ∞Ä: %1 [%2] (Î†àÎ≤®: %3, ÏÉÅÌÉú: %4)").arg(user.displayName).arg(user.username).arg(user.level).arg(user.status);
                    } else if (userInfo.size() >= 3) {
                        // Íµ¨Î≤ÑÏ†Ñ Ìò∏ÌôòÏÑ±ÏùÑ ÏúÑÌïú Ï≤òÎ¶¨: username,level,status
                        UserInfo user;
                        user.username = userInfo[0];
                        user.displayName = ""; // displayName ÏóÜÏùå
                        user.level = userInfo[1].toInt();
                        user.status = userInfo[2];
                        user.isOnline = true;
                        
                        users.append(user);
                        qDebug() << QString::fromUtf8("ÏÇ¨Ïö©Ïûê Ï∂îÍ∞Ä (Íµ¨Î≤ÑÏ†Ñ): %1 (Î†àÎ≤®: %2, ÏÉÅÌÉú: %3)").arg(user.username).arg(user.level).arg(user.status);
                    } else if (userInfo.size() >= 1) {
                        // ÏµúÍµ¨Î≤ÑÏ†Ñ Ìò∏ÌôòÏÑ±ÏùÑ ÏúÑÌïú Ï≤òÎ¶¨
                        UserInfo user;
                        user.username = userInfo[0];
                        user.displayName = "";
                        user.level = 1;
                        user.status = QString::fromUtf8("Î°úÎπÑ");
                        user.isOnline = true;
                        
                        users.append(user);
                        qDebug() << QString::fromUtf8("ÏÇ¨Ïö©Ïûê Ï∂îÍ∞Ä (ÏµúÍµ¨Î≤ÑÏ†Ñ): %1").arg(user.username);
                    }
                }
            }
            
            qDebug() << QString::fromUtf8("ÏµúÏ¢Ö ÏÇ¨Ïö©Ïûê Î™©Î°ù: %1Î™Ö").arg(users.size());
            emit lobbyUserListReceived(users);
        }
        else if (parts[0] == "LOBBY_USER_JOINED" && parts.size() >= 2) {
            QString username = parts[1];
            emit lobbyUserJoined(username);
        }
        else if (parts[0] == "LOBBY_USER_LEFT" && parts.size() >= 2) {
            QString username = parts[1];
            emit lobbyUserLeft(username);
        }
        else if (parts[0] == "ROOM_LIST" && parts.size() >= 2) {
            int roomCount = parts[1].toInt();
            QStringList rooms;
            for (int i = 2; i < parts.size(); ++i) {
                rooms.append(parts[i]);
            }
            emit roomListReceived(rooms);
        }
        else if (parts[0] == "ROOM_CREATED" && parts.size() >= 3) {
            int roomId = parts[1].toInt();
            QString roomName = parts[2];
            emit roomCreated(roomId, roomName);
        }
        else if (parts[0] == "ROOM_JOIN_SUCCESS" && parts.size() >= 3) {
            int roomId = parts[1].toInt();
            QString roomName = parts[2];
            emit roomJoined(roomId, roomName);
        }
        else if (parts[0] == "ROOM_LEFT") {
            emit roomLeft();
        }
        else if (parts[0] == "CHAT" && parts.size() >= 3) {
            QString username = parts[1];
            QString message;
            
            // ÏÉàÎ°úÏö¥ ÌòïÏãù ÏßÄÏõê: CHAT:username:displayName:message
            if (parts.size() >= 4) {
                QString displayName = parts[2];
                message = parts.mid(3).join(":"); // Î©îÏãúÏßÄÏóê ÏΩúÎ°†Ïù¥ Ìè¨Ìï®Îê† Ïàò ÏûàÏùå
                
                // displayName Ï†ïÎ≥¥Í∞Ä ÏûàÎäî Í≤ΩÏö∞ ÏÉàÎ°úÏö¥ ÏãúÍ∑∏ÎÑêÎßå Î∞úÏÉù (Ï§ëÎ≥µ Î∞©ÏßÄ)
                emit chatMessageReceivedWithDisplayName(username, displayName, message);
            } else {
                // Í∏∞Ï°¥ ÌòïÏãù ÏßÄÏõê: CHAT:username:message
                message = parts.mid(2).join(":"); // Î©îÏãúÏßÄÏóê ÏΩúÎ°†Ïù¥ Ìè¨Ìï®Îê† Ïàò ÏûàÏùå
                emit chatMessageReceived(username, message);
            }
        }
        else if (parts[0] == "ROOM_INFO" && parts.size() >= 8) {
            // ROOM_INFO:Î∞©ID:Î∞©Ïù¥Î¶Ñ:Ìò∏Ïä§Ìä∏:ÌòÑÏû¨Ïù∏Ïõê:ÏµúÎåÄÏù∏Ïõê:ÎπÑÍ≥µÍ∞ú:Í≤åÏûÑÏ§ë:Í≤åÏûÑÎ™®Îìú:ÌîåÎ†àÏù¥Ïñ¥Îç∞Ïù¥ÌÑ∞...
            emit roomInfoReceived(parts);
        }
        else if (parts[0] == "PLAYER_JOINED" && parts.size() >= 2) {
            QString username = parts[1];
            QString displayName = (parts.size() >= 3) ? parts[2] : username; // displayName Ìè¨Ìï® Ïó¨Î∂Ä ÌôïÏù∏
            emit playerJoined(username);
            // displayName Ï†ïÎ≥¥Í∞Ä ÏûàÎäî Í≤ΩÏö∞ Ï∂îÍ∞Ä ÏãúÍ∑∏ÎÑê Î∞úÏÉù
            if (parts.size() >= 3) {
                emit playerJoinedWithDisplayName(username, displayName);
            }
        }
        else if (parts[0] == "PLAYER_LEFT" && parts.size() >= 2) {
            QString username = parts[1];
            QString displayName = (parts.size() >= 3) ? parts[2] : username; // displayName Ìè¨Ìï® Ïó¨Î∂Ä ÌôïÏù∏
            emit playerLeft(username);
            // displayName Ï†ïÎ≥¥Í∞Ä ÏûàÎäî Í≤ΩÏö∞ Ï∂îÍ∞Ä ÏãúÍ∑∏ÎÑê Î∞úÏÉù
            if (parts.size() >= 3) {
                emit playerLeftWithDisplayName(username, displayName);
            }
        }
        else if (parts[0] == "PLAYER_READY" && parts.size() >= 3) {
            QString username = parts[1];
            bool ready = (parts[2] == "1");
            qDebug() << QString::fromUtf8("NetworkClient: PLAYER_READY ÏàòÏã† - %1: %2").arg(username).arg(ready ? "Ï§ÄÎπÑÏôÑÎ£å" : "ÎåÄÍ∏∞Ï§ë");
            emit playerReady(username, ready);
        }
        else if (parts[0] == "HOST_CHANGED" && parts.size() >= 2) {
            QString newHost = parts[1];
            QString displayName = (parts.size() >= 3) ? parts[2] : newHost; // displayName Ìè¨Ìï® Ïó¨Î∂Ä ÌôïÏù∏
            emit hostChanged(newHost);
            // displayName Ï†ïÎ≥¥Í∞Ä ÏûàÎäî Í≤ΩÏö∞ Ï∂îÍ∞Ä ÏãúÍ∑∏ÎÑê Î∞úÏÉù
            if (parts.size() >= 3) {
                emit hostChangedWithDisplayName(newHost, displayName);
            }
        }
        else if (parts[0] == "GAME_STARTED") {
            emit gameStarted();
        }
        else if (parts[0] == "GAME_ENDED") {
            emit gameEnded();
        }
        else if (parts[0] == "GAME_RESULT" && parts.size() >= 2) {
            QString resultJson = parts.mid(1).join(":");
            emit gameResult(resultJson);
        }
        else if (parts[0] == "GAME_RESET") {
            // Í≤åÏûÑ Î¶¨ÏÖã Ïã†Ìò∏ Î∞úÏÉù
            emit gameReset();
        }
        else if (parts[0] == "LEAVE_ROOM_CONFIRMED") {
            // Î∞© ÎÇòÍ∞ÄÍ∏∞Í∞Ä ÌôïÏù∏ÎêòÎ©¥ Î°úÎπÑÎ°ú Ïù¥ÎèôÌïòÎäî Ïã†Ìò∏ Î∞úÏÉù
            emit roomLeft();
        }
        else if (parts[0] == "SYSTEM" && parts.size() >= 2) {
            QString systemMessage = parts.mid(1).join(":");
            // ÏãúÏä§ÌÖú Î©îÏãúÏßÄÎ•º Ï±ÑÌåÖÏúºÎ°ú Ï≤òÎ¶¨
            emit chatMessageReceived(QString::fromUtf8("ÏãúÏä§ÌÖú"), systemMessage);
        }
        else if (parts[0] == "USER_STATS_RESPONSE" && parts.size() >= 2) {
            QString statsJson = parts.mid(1).join(":");
            emit userStatsReceived(statsJson);
        }
        else if (parts[0] == "MY_STATS_UPDATE" && parts.size() >= 2) {
            QString statsJson = parts.mid(1).join(":");
            emit myStatsUpdated(statsJson);
        }
    }

    void NetworkClient::processErrorMessage(const QString& error)
    {
        emit errorReceived(error);
        
        // Ïù∏Ï¶ù Í¥ÄÎ†® ÏóêÎü¨Îäî Í∞ÅÍ∞ÅÏùò ÏãúÍ∑∏ÎÑêÎ°úÎèÑ Ï†ÑÎã¨
        if (error.contains(QString::fromUtf8("ÏÇ¨Ïö©ÏûêÎ™Ö")) || error.contains(QString::fromUtf8("ÎπÑÎ∞ÄÎ≤àÌò∏")) || 
            error.contains(QString::fromUtf8("Î°úÍ∑∏Ïù∏")) || error.contains(QString::fromUtf8("Ïù∏Ï¶ù ÌÜ†ÌÅ∞")) ||
            error.contains(QString::fromUtf8("ÌÜ†ÌÅ∞Ïù¥ Ïú†Ìö®ÌïòÏßÄ ÏïäÏäµÎãàÎã§"))) {
            emit loginResult(false, error);
        }
        else if (error.contains(QString::fromUtf8("ÌöåÏõêÍ∞ÄÏûÖ")) || error.contains(QString::fromUtf8("Ïù¥ÎØ∏ ÏÇ¨Ïö© Ï§ë")) ||
                 error.contains(QString::fromUtf8("ÏÇ¨Ïö©ÏûêÎ™Ö ÌòïÏãù")) || error.contains(QString::fromUtf8("ÎπÑÎ∞ÄÎ≤àÌò∏Îäî"))) {
            emit registerResult(false, error);
        }
        else if (error.contains(QString::fromUtf8("Î∞©")) || error.contains(QString::fromUtf8("room"))) {
            emit roomError(error);
        }
    }

    void NetworkClient::startReconnectTimer()
    {
        if (m_reconnectAttempts < m_maxReconnectAttempts) {
            m_reconnectAttempts++;
            m_reconnectTimer->start();
            qDebug() << QString::fromUtf8("Ïû¨Ïó∞Í≤∞ ÌÉÄÏù¥Î®∏ ÏãúÏûë (%1Ï¥à ÌõÑ ÏãúÎèÑ)").arg(m_reconnectInterval / 1000);
        }
    }

    void NetworkClient::stopReconnectTimer()
    {
        m_reconnectTimer->stop();
        m_reconnectAttempts = 0;
    }

    void NetworkClient::processGameStateMessage(const QString& message)
    {
        if (message.startsWith("GAME_STATE_UPDATE:")) {
            QString jsonData = message.mid(18); // "GAME_STATE_UPDATE:" Ï†úÍ±∞
            emit gameStateUpdated(jsonData);
            qDebug() << QString::fromUtf8("Í≤åÏûÑ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ ÏàòÏã†: %1").arg(jsonData);
        }
        else if (message.startsWith("BLOCK_PLACED:")) {
            QString jsonData = message.mid(13); // "BLOCK_PLACED:" Ï†úÍ±∞
            
            // JSON ÌååÏã± (Í∞ÑÎã®Ìïú Î∞©Ïãù)
            QString playerName, blockType, row, col, rotation, flip, playerColor, scoreGained;
            
            // Í∞ÑÎã®Ìïú JSON ÌååÏã± (Ïã§Ï†úÎ°úÎäî QJsonDocumentÎ•º ÏÇ¨Ïö©Ìï¥Ïïº Ìï®)
            QRegExp playerRegex("\"player\":\"([^\"]+)\"");
            QRegExp blockTypeRegex("\"blockType\":(\\d+)");
            QRegExp positionRegex("\"position\":\\{\"row\":(\\d+),\"col\":(\\d+)\\}");
            QRegExp rotationRegex("\"rotation\":(\\d+)");
            QRegExp flipRegex("\"flip\":(\\d+)");
            QRegExp playerColorRegex("\"playerColor\":(\\d+)");
            QRegExp scoreRegex("\"scoreGained\":(\\d+)");
            
            if (playerRegex.indexIn(jsonData) != -1) playerName = playerRegex.cap(1);
            if (blockTypeRegex.indexIn(jsonData) != -1) blockType = blockTypeRegex.cap(1);
            if (positionRegex.indexIn(jsonData) != -1) {
                row = positionRegex.cap(1);
                col = positionRegex.cap(2);
            }
            if (rotationRegex.indexIn(jsonData) != -1) rotation = rotationRegex.cap(1);
            if (flipRegex.indexIn(jsonData) != -1) flip = flipRegex.cap(1);
            if (playerColorRegex.indexIn(jsonData) != -1) playerColor = playerColorRegex.cap(1);
            if (scoreRegex.indexIn(jsonData) != -1) scoreGained = scoreRegex.cap(1);
            
            emit blockPlaced(playerName, blockType.toInt(), row.toInt(), col.toInt(), 
                           rotation.toInt(), flip.toInt(), playerColor.toInt(), scoreGained.toInt());
            
            qDebug() << QString::fromUtf8("Î∏îÎ°ù Î∞∞Ïπò ÏïåÎ¶º: %1Ïù¥ Î∏îÎ°ùÏùÑ Î∞∞ÏπòÌï® (Ï†êÏàò: +%2)")
                        .arg(playerName).arg(scoreGained);
        }
        else if (message.startsWith("TURN_CHANGED:")) {
            QString jsonData = message.mid(13); // "TURN_CHANGED:" Ï†úÍ±∞
            
            qDebug() << QString::fromUtf8("‚è∞ [TIMER_DEBUG] TURN_CHANGED Î©îÏãúÏßÄ ÏàòÏã†: %1").arg(message);
            
            // JSON ÌååÏã± (ÌÉÄÏù¥Î®∏ Ï†ïÎ≥¥ Ìè¨Ìï®)
            QRegExp playerRegex("\"newPlayer\":\"([^\"]+)\"");
            QRegExp colorRegex("\"playerColor\":(\\d+)");
            QRegExp turnRegex("\"turnNumber\":(\\d+)");
            QRegExp turnTimeRegex("\"turnTimeSeconds\":(\\d+)");
            QRegExp remainingTimeRegex("\"remainingTimeSeconds\":(\\d+)");
            QRegExp timeoutRegex("\"previousTurnTimedOut\":(true|false)");
            
            QString newPlayerName;
            int playerColor = 0, turnNumber = 0;
            int turnTimeSeconds = 30, remainingTimeSeconds = 30; // Í∏∞Î≥∏Í∞í 30Ï¥à
            bool previousTurnTimedOut = false;
            
            if (playerRegex.indexIn(jsonData) != -1) newPlayerName = playerRegex.cap(1);
            if (colorRegex.indexIn(jsonData) != -1) playerColor = colorRegex.cap(1).toInt();
            if (turnRegex.indexIn(jsonData) != -1) turnNumber = turnRegex.cap(1).toInt();
            if (turnTimeRegex.indexIn(jsonData) != -1) turnTimeSeconds = turnTimeRegex.cap(1).toInt();
            if (remainingTimeRegex.indexIn(jsonData) != -1) remainingTimeSeconds = remainingTimeRegex.cap(1).toInt();
            if (timeoutRegex.indexIn(jsonData) != -1) previousTurnTimedOut = (timeoutRegex.cap(1) == "true");
            
            qDebug() << QString::fromUtf8("‚è∞ [TIMER_DEBUG] ÌååÏã± Í≤∞Í≥º: ÌîåÎ†àÏù¥Ïñ¥=%1, ÌÑ¥ÏãúÍ∞Ñ=%2Ï¥à, ÎÇ®ÏùÄÏãúÍ∞Ñ=%3Ï¥à")
                        .arg(newPlayerName).arg(turnTimeSeconds).arg(remainingTimeSeconds);
            
            emit turnChanged(newPlayerName, playerColor, turnNumber, turnTimeSeconds, remainingTimeSeconds, previousTurnTimedOut);
            
            qDebug() << QString::fromUtf8("ÌÑ¥ Î≥ÄÍ≤Ω ÏïåÎ¶º: %1ÎãòÏùò ÌÑ¥ (ÌÑ¥ %2)")
                        .arg(newPlayerName).arg(turnNumber);
        }
        else if (message.startsWith("TURN_TIMEOUT:")) {
            QString jsonData = message.mid(13); // "TURN_TIMEOUT:" Ï†úÍ±∞
            
            // JSON ÌååÏã±
            QRegExp playerRegex("\"timedOutPlayer\":\"([^\"]+)\"");
            QRegExp colorRegex("\"playerColor\":(\\d+)");
            
            QString timedOutPlayerName;
            int playerColor = 0;
            
            if (playerRegex.indexIn(jsonData) != -1) timedOutPlayerName = playerRegex.cap(1);
            if (colorRegex.indexIn(jsonData) != -1) playerColor = colorRegex.cap(1).toInt();
            
            emit turnTimeoutOccurred(timedOutPlayerName, playerColor);
            
            qDebug() << QString::fromUtf8("ÌÑ¥ ÌÉÄÏûÑÏïÑÏõÉ ÏïåÎ¶º: %1Îãò ÏãúÍ∞Ñ Ï¥àÍ≥º")
                        .arg(timedOutPlayerName);
        }
    }

    void NetworkClient::processAfkMessage(const QString& message)
    {
        if (message.startsWith("AFK_MODE_ACTIVATED:")) {
            QString jsonData = message.mid(19); // "AFK_MODE_ACTIVATED:" Ï†úÍ±∞
            emit afkModeActivated(jsonData);
            qDebug() << QString::fromUtf8("AFK Î™®Îìú ÌôúÏÑ±Ìôî ÏïåÎ¶º ÏàòÏã†: %1").arg(jsonData);
        }
        else if (message == "AFK_UNBLOCK_SUCCESS") {
            emit afkUnblockSuccess();
            qDebug() << QString::fromUtf8("AFK Î™®Îìú Ìï¥Ï†ú ÏÑ±Í≥µ");
        }
        else if (message.startsWith("AFK_STATUS_RESET:")) {
            QString username = message.mid(17); // "AFK_STATUS_RESET:" Ï†úÍ±∞
            emit afkStatusReset(username);
            qDebug() << QString::fromUtf8("AFK ÏÉÅÌÉú Î¶¨ÏÖã ÏïåÎ¶º: %1").arg(username);
        }
        else if (message.startsWith("AFK_UNBLOCK_ERROR:")) {
            QString jsonData = message.mid(18); // "AFK_UNBLOCK_ERROR:" Ï†úÍ±∞
            
            // JSON ÌååÏã±
            QJsonDocument doc = QJsonDocument::fromJson(jsonData.toUtf8());
            if (doc.isObject()) {
                QJsonObject obj = doc.object();
                QString reason = obj["reason"].toString();
                QString errorMessage = obj["message"].toString();
                
                emit afkUnblockError(reason, errorMessage);
                qDebug() << QString::fromUtf8("AFK Ìï¥Ï†ú ÏóêÎü¨: %1 - %2").arg(reason, errorMessage);
            }
        }
    }

    // ========================================
    // Î≤ÑÏ†Ñ Í¥ÄÎ†® Î©îÏÑúÎìúÎì§
    // ========================================
    
    void NetworkClient::performVersionCheck()
    {
        qDebug() << QString::fromUtf8("üîç ÏÑúÎ≤Ñ Î≤ÑÏ†Ñ Ìò∏ÌôòÏÑ± Í≤ÄÏÇ¨ ÏãúÏûë - ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Î≤ÑÏ†Ñ: %1")
                    .arg(QString::fromStdString(ClientConfigManager::VERSION));
        
        // Î≤ÑÏ†Ñ ÌôïÏù∏ ÏöîÏ≤≠ (ÌÖçÏä§Ìä∏ Í∏∞Î∞ò)
        QString versionMessage = QString("version:check:%1")
                                .arg(QString::fromStdString(ClientConfigManager::VERSION));
        sendMessage(versionMessage);
    }
    
    void NetworkClient::processVersionCheckResponse(const QStringList& params)
    {
        // params[0] = "version", params[1] = "ok" or "mismatch", params[2+] = downloadUrl parts (if mismatch)
        
        qDebug() << QString::fromUtf8("üîç Î≤ÑÏ†Ñ ÏùëÎãµ ÌååÏã±: ÌååÎùºÎØ∏ÌÑ∞ Ïàò=%1, ÎÇ¥Ïö©=[%2]")
                    .arg(params.size())
                    .arg(params.join(", "));
        
        if (params.size() < 2) {
            qDebug() << QString::fromUtf8("‚ùå Î≤ÑÏ†Ñ ÏùëÎãµ ÌòïÏãù Ïò§Î•ò: %1").arg(params.join(":"));
            return;
        }
        
        QString status = params[1];
        
        qDebug() << QString::fromUtf8("üìã Î≤ÑÏ†Ñ Ìò∏ÌôòÏÑ± Í≤ÄÏÇ¨ Í≤∞Í≥º - ÏÉÅÌÉú: %1")
                    .arg(status);
        
        if (status == "ok") {
            // Î≤ÑÏ†Ñ Ìò∏Ìôò - Ï†ïÏÉÅ Ïó∞Í≤∞ ÏôÑÎ£å
            qDebug() << QString::fromUtf8("‚úÖ Î≤ÑÏ†Ñ Ìò∏ÌôòÏÑ± ÌôïÏù∏ ÏôÑÎ£å - ÏÑúÎ≤Ñ Ïó∞Í≤∞ ÏÑ±Í≥µ");
            emit versionCheckCompleted(true);
            emit connected(); // Ïù¥Ï†ú ÏßÑÏßú Ïó∞Í≤∞ ÏôÑÎ£å ÏãúÍ∑∏ÎÑê Î∞úÏÜ°
        } 
        else if (status == "mismatch") {
            // Î≤ÑÏ†Ñ Î∂àÌò∏Ìôò - Îã§Ïö¥Î°úÎìú ÌéòÏù¥ÏßÄÎ°ú Î¶¨Îã§Ïù¥Î†âÌä∏
            QString downloadUrl;
            if (params.size() >= 3) {
                downloadUrl = params[2]; // Ïù¥Ï†ú ÏôÑÏ†ÑÌïú URLÏù¥ Îì§Ïñ¥ÏûàÏùå
            } else {
                downloadUrl = "https://blokus-online.mooo.com/download"; // Í∏∞Î≥∏Í∞í
            }
            
            qDebug() << QString::fromUtf8("‚ùå Î≤ÑÏ†Ñ Î∂àÏùºÏπò Í∞êÏßÄ - Îã§Ïö¥Î°úÎìú URL: %1").arg(downloadUrl);
            
            emit versionIncompatible("", downloadUrl);
            
            // Îã§Ïö¥Î°úÎìú ÌôïÏù∏ Îã§Ïù¥ÏñºÎ°úÍ∑∏ ÌëúÏãú
            QMessageBox msgBox;
            msgBox.setWindowTitle(QString::fromUtf8("ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏ ÌïÑÏöî"));
            msgBox.setText(QString::fromUtf8("ÏÑúÎ≤ÑÏôÄ Ìò∏ÌôòÎêòÏßÄ ÏïäÎäî ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Î≤ÑÏ†ÑÏûÖÎãàÎã§."));
            msgBox.setInformativeText(QString::fromUtf8("ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏: %1\nÎã§Ïö¥Î°úÎìú URL: %2\n\nÏµúÏã† Î≤ÑÏ†ÑÏùÑ Îã§Ïö¥Î°úÎìúÌïòÏãúÍ≤†ÏäµÎãàÍπå?")
                                     .arg(QString::fromStdString(ClientConfigManager::VERSION))
                                     .arg(downloadUrl));
            msgBox.setStandardButtons(QMessageBox::Yes | QMessageBox::No);
            msgBox.setDefaultButton(QMessageBox::Yes);
            
            if (msgBox.exec() == QMessageBox::Yes) {
                // Îã§Ïö¥Î°úÎìú ÌéòÏù¥ÏßÄ Ïó¥Í∏∞
                qDebug() << QString::fromUtf8("üåê Îã§Ïö¥Î°úÎìú ÌéòÏù¥ÏßÄ Ïó¥Í∏∞ ÏãúÎèÑ: %1").arg(downloadUrl);
                
                bool urlOpened = QDesktopServices::openUrl(QUrl(downloadUrl));
                if (urlOpened) {
                    qDebug() << QString::fromUtf8("‚úÖ Îã§Ïö¥Î°úÎìú ÌéòÏù¥ÏßÄ Ïó¥Í∏∞ ÏÑ±Í≥µ");
                } else {
                    qDebug() << QString::fromUtf8("‚ùå Îã§Ïö¥Î°úÎìú ÌéòÏù¥ÏßÄ Ïó¥Í∏∞ Ïã§Ìå®");
                    
                    // ÏàòÎèôÏúºÎ°ú URL ÌëúÏãú
                    QMessageBox urlBox;
                    urlBox.setWindowTitle(QString::fromUtf8("ÏàòÎèô Îã§Ïö¥Î°úÎìú"));
                    urlBox.setText(QString::fromUtf8("Î∏åÎùºÏö∞Ï†Ä Ïó¥Í∏∞Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§."));
                    urlBox.setInformativeText(QString::fromUtf8("Îã§Ïùå URLÏùÑ ÏàòÎèôÏúºÎ°ú Ïó¥Ïñ¥Ï£ºÏÑ∏Ïöî:\n%1").arg(downloadUrl));
                    urlBox.exec();
                }
                
                // ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï¢ÖÎ£å
                qDebug() << QString::fromUtf8("üîö ÏóÖÎç∞Ïù¥Ìä∏Î•º ÏúÑÌï¥ ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï¢ÖÎ£å");
                QApplication::quit();
            } else {
                qDebug() << QString::fromUtf8("‚ùå ÏÇ¨Ïö©ÏûêÍ∞Ä ÏóÖÎç∞Ïù¥Ìä∏Î•º Í±∞Î∂Ä - ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï¢ÖÎ£å");
                // Ïó∞Í≤∞ Ï¢ÖÎ£å
                disconnect();
                // ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï¢ÖÎ£å
                QApplication::quit();
            }
            
            emit versionCheckCompleted(false);
        } else {
            qDebug() << QString::fromUtf8("‚ùå Ïïå Ïàò ÏóÜÎäî Î≤ÑÏ†Ñ ÏùëÎãµ: %1").arg(status);
        }
    }

    // ========================================
    // ÏÇ¨Ïö©Ïûê ÏÑ§Ï†ï Î©îÏãúÏßÄ Ï≤òÎ¶¨
    // ========================================

    void NetworkClient::processUserSettingsResponse(const QStringList& params)
    {
        if (params.size() < 2) {
            qWarning() << "Invalid user settings response format";
            return;
        }

        QString status = params[1]; // "success" ÎòêÎäî "error"
        
        if (status == "success" && params.size() >= 8) {
            // UserSettingsResponse:success:theme:language:bgm_mute:bgm_volume:sfx_mute:sfx_volume
            QString settingsData = params.mid(2).join(":");
            
            // ÏÑ§Ï†ï Ï°∞Ìöå ÏöîÏ≤≠Ïù∏ÏßÄ ÏÑ§Ï†ï ÏóÖÎç∞Ïù¥Ìä∏ ÏöîÏ≤≠Ïù∏ÏßÄ Íµ¨Î∂Ñ
            // ÏÑ§Ï†ï Ï°∞Ìöå ÏöîÏ≤≠Ïùò Í≤ΩÏö∞ÏóêÎßå userSettingsReceived ÏãúÍ∑∏ÎÑê Î∞úÏÉù
            if (m_pendingSettingsRequest) {
                emit userSettingsReceived(settingsData);
                m_pendingSettingsRequest = false;
                qDebug() << "User settings received (query):" << settingsData;
            } else {
                // ÏÑ§Ï†ï ÏóÖÎç∞Ïù¥Ìä∏ ÏùëÎãµÏù∏ Í≤ΩÏö∞ updateResultÎßå Î∞úÏÉù (Î™®Îã¨ ÏÉùÏÑ± Ïïà Ìï®)
                emit userSettingsUpdateResult(true, "ÏÑ§Ï†ïÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏóÖÎç∞Ïù¥Ìä∏ÎêòÏóàÏäµÎãàÎã§");
                qDebug() << "User settings updated successfully:" << settingsData;
            }
        } else if (status == "error" && params.size() >= 3) {
            QString errorMessage = params[2];
            m_pendingSettingsRequest = false; // ÏóêÎü¨ ÏãúÏóêÎèÑ ÌîåÎûòÍ∑∏ Î¶¨ÏÖã
            emit userSettingsUpdateResult(false, errorMessage);
            
            qWarning() << "User settings error:" << errorMessage;
        } else {
            qWarning() << "Invalid user settings response";
            emit userSettingsUpdateResult(false, "ÏûòÎ™ªÎêú ÏÑúÎ≤Ñ ÏùëÎãµÏûÖÎãàÎã§");
        }
    }

} // namespace Blokus