# ==================================================
# Ubuntu 네이티브 패키지 사용 Dockerfile (최종 해결책)
# ==================================================

FROM ubuntu:22.04 AS builder

# 비대화형 모드 설정
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=Asia/Seoul

# 시스템 업데이트 및 기본 도구 설치
RUN apt-get update && apt-get install -y \
    build-essential \
    git \
    pkg-config \
    ca-certificates \
    tzdata \
    wget \
    sed \
    && rm -rf /var/lib/apt/lists/*

# CMake 최신 버전 설치 (3.24+)
RUN apt-get update && apt-get install -y software-properties-common && \
    wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | \
    gpg --dearmor - | tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null && \
    echo 'deb https://apt.kitware.com/ubuntu/ jammy main' | tee /etc/apt/sources.list.d/kitware.list >/dev/null && \
    apt-get update && \
    apt-get install -y cmake && \
    echo "=== CMake 버전 확인 ===" && \
    cmake --version && \
    rm -rf /var/lib/apt/lists/*

# C++ 의존성 설치 (서버 전용, Qt 제외)
RUN apt-get update && apt-get install -y \
    # PostgreSQL 클라이언트 라이브러리
    libpqxx-dev \
    libpq-dev \
    postgresql-client \
    # OpenSSL
    libssl-dev \
    # Boost (system만 필요)
    libboost-system-dev \
    libboost-dev \
    libboost-all-dev \
    # Protocol Buffers
    libprotobuf-dev \
    protobuf-compiler \
    libprotoc-dev \
    # JSON 라이브러리 (fallback 포함)
    nlohmann-json3-dev \
    libjsoncpp-dev \
    # spdlog (로깅)
    libspdlog-dev \
    libfmt-dev \
    # 추가 개발 도구
    libtool \
    autoconf \
    && rm -rf /var/lib/apt/lists/*

# 작업 디렉토리 설정
WORKDIR /app

# 소스 코드 복사
COPY CMakeLists.txt ./
COPY proto/ ./proto/
COPY common/ ./common/
COPY server/ ./server/

# 완전히 새로운 서버 전용 CMakeLists.txt 생성
RUN echo "=== 서버 전용 CMakeLists.txt 생성 ===" && \
    cp CMakeLists.txt CMakeLists.txt.backup && \
    cat > CMakeLists.txt << 'EOF'
cmake_minimum_required(VERSION 3.22)
project(BlokusOnline VERSION 1.0.0 LANGUAGES CXX)

# C++ 표준 설정
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Ubuntu 네이티브 패키지 사용 (PkgConfig 기반)
find_package(PkgConfig REQUIRED)

# Protocol Buffers (MODULE 모드)
find_package(Protobuf REQUIRED)
message(STATUS "Protobuf version: ${Protobuf_VERSION}")
message(STATUS "Protobuf libraries: ${Protobuf_LIBRARIES}")

# PostgreSQL (PkgConfig 사용)
pkg_check_modules(LIBPQXX REQUIRED libpqxx)
message(STATUS "libpqxx found: ${LIBPQXX_FOUND}")
message(STATUS "libpqxx includes: ${LIBPQXX_INCLUDE_DIRS}")
message(STATUS "libpqxx libraries: ${LIBPQXX_LIBRARIES}")

# OpenSSL
find_package(OpenSSL REQUIRED)

# Boost::system
find_package(Boost REQUIRED COMPONENTS system)

# spdlog (PkgConfig 사용)
pkg_check_modules(SPDLOG spdlog)
if(NOT SPDLOG_FOUND)
    message(STATUS "spdlog not found via pkg-config, using system headers")
endif()

# nlohmann-json (PkgConfig 사용)
pkg_check_modules(NLOHMANN_JSON nlohmann_json)
if(NOT NLOHMANN_JSON_FOUND)
    message(STATUS "nlohmann-json not found via pkg-config, using system headers")
endif()

# 디렉토리 추가 (서버 전용)
add_subdirectory(proto)
add_subdirectory(common)
add_subdirectory(server)

# 빌드 정보 출력
message(STATUS "=== Blokus Server Build (Ubuntu Native) ===")
message(STATUS "Build type: ${CMAKE_BUILD_TYPE}")
message(STATUS "C++ Standard: ${CMAKE_CXX_STANDARD}")
message(STATUS "Protobuf: ${Protobuf_FOUND}")
message(STATUS "PostgreSQL: ${LIBPQXX_FOUND}")
message(STATUS "OpenSSL: ${OPENSSL_FOUND}")
message(STATUS "Boost: ${Boost_FOUND}")
message(STATUS "=======================================")
EOF

# proto/CMakeLists.txt 수정 (MODULE 모드 + 전통적인 방식)
RUN cat > proto/CMakeLists.txt << 'EOF'
cmake_minimum_required(VERSION 3.22)

# Protobuf 찾기 (MODULE 모드)
find_package(Protobuf REQUIRED)

# 프로토 파일들 수집
file(GLOB PROTO_FILES "${CMAKE_CURRENT_SOURCE_DIR}/*.proto")

# 전통적인 protobuf_generate_cpp 사용 (Ubuntu 호환)
protobuf_generate_cpp(PROTO_SRCS PROTO_HDRS ${PROTO_FILES})

# 라이브러리 생성
add_library(BlokusProto STATIC ${PROTO_SRCS} ${PROTO_HDRS})

# 인클루드 디렉토리 설정
target_include_directories(BlokusProto PUBLIC
    ${CMAKE_CURRENT_BINARY_DIR}  # 생성된 .pb.h 파일들
    ${Protobuf_INCLUDE_DIRS}     # protobuf 헤더들
)

# protobuf 링크 (MODULE 모드 변수 사용)
target_link_libraries(BlokusProto PUBLIC 
    ${Protobuf_LIBRARIES}
)

# C++ 표준
target_compile_features(BlokusProto PUBLIC cxx_std_17)

# 생성된 파일들 표시
message(STATUS "Proto files: ${PROTO_FILES}")
message(STATUS "Generated sources: ${PROTO_SRCS}")
message(STATUS "Generated headers: ${PROTO_HDRS}")
EOF

# common/CMakeLists.txt 수정 (PkgConfig 변수 사용)
RUN cat > common/CMakeLists.txt << 'EOF'
cmake_minimum_required(VERSION 3.22)

# 소스 파일들
set(SOURCES
    src/Block.cpp
    src/GameLogic.cpp
    src/Utils.cpp
)

set(HEADERS
    "include/Types.h"
    "include/Block.h" 
    "include/GameLogic.h"
    "include/Utils.h"
)

# 정적 라이브러리 생성
add_library(BlokusCommon STATIC ${SOURCES} ${HEADERS})

# 인클루드 디렉토리 설정
target_include_directories(BlokusCommon PUBLIC
    ${CMAKE_CURRENT_SOURCE_DIR}/include
)

# 라이브러리 링크 (PkgConfig 변수 포함)
target_link_libraries(BlokusCommon PUBLIC
    BlokusProto
)

# spdlog와 nlohmann-json은 헤더 온리이므로 별도 링크 불필요
# 필요시 시스템 헤더로 자동 검색됨

# C++ 표준 설정
target_compile_features(BlokusCommon PUBLIC cxx_std_17)

# 컴파일러 옵션
if(MSVC)
    target_compile_options(BlokusCommon PRIVATE /utf-8)
endif()
EOF

# server/CMakeLists.txt 수정 (PkgConfig 변수 사용)
RUN sed -i 's/find_package(libpqxx CONFIG REQUIRED)/# find_package(libpqxx CONFIG REQUIRED) - PkgConfig 사용/' server/CMakeLists.txt && \
    sed -i 's/libpqxx::pqxx/${LIBPQXX_LIBRARIES}/' server/CMakeLists.txt && \
    echo "=== 서버 CMakeLists.txt 패치 완료 ==="

# 패키지 정보 확인
RUN echo "=== 설치된 패키지 정보 확인 ===" && \
    pkg-config --modversion libpqxx && \
    pkg-config --cflags libpqxx && \
    pkg-config --libs libpqxx && \
    echo "Protobuf version:" && pkg-config --modversion protobuf

# CMake 설정 단계
RUN mkdir -p build && cd build && \
    echo "=== CMake 설정 ===" && \
    cmake .. \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_CXX_STANDARD=17 \
        -DCMAKE_INSTALL_PREFIX=/usr/local \
        -DCMAKE_VERBOSE_MAKEFILE=ON

# 빌드 타겟 확인 및 빌드
RUN cd build && \
    echo "=== 빌드 가능한 타겟 확인 ===" && \
    make help | head -20 && \
    echo "=== Proto 라이브러리 빌드 ===" && \
    make -j$(nproc) BlokusProto && \
    echo "=== Common 라이브러리 빌드 ===" && \
    make -j$(nproc) BlokusCommon && \
    echo "=== 서버 빌드 시작 ===" && \
    make -j$(nproc) BlokusServer && \
    echo "=== 빌드 완료, 실행파일 확인 ===" && \
    ls -la server/ || ls -la ./

# ========== Runtime Stage ==========
FROM ubuntu:22.04 AS runtime

# 비대화형 모드 설정
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=Asia/Seoul

# 런타임 의존성만 설치
RUN apt-get update && apt-get install -y \
    # PostgreSQL 클라이언트 런타임
    libpqxx-6.4 \
    libpq5 \
    # OpenSSL
    libssl3 \
    # Boost
    libboost-system1.74.0 \
    # Protocol Buffers
    libprotobuf23 \
    # spdlog
    libspdlog1 \
    # 시스템 유틸리티
    curl \
    netcat \
    && rm -rf /var/lib/apt/lists/*

# 애플리케이션 사용자 생성
RUN groupadd -r blokus && useradd -r -g blokus blokus

# 작업 디렉토리 생성
RUN mkdir -p /app/logs && chown -R blokus:blokus /app

# 빌드된 바이너리 복사
COPY --from=builder /app/build/server/BlokusServer /app/
COPY --from=builder /app/build/proto/ /app/proto/

# 권한 설정
RUN chmod +x /app/BlokusServer && chown blokus:blokus /app/BlokusServer

# 사용자 전환
USER blokus

# 작업 디렉토리
WORKDIR /app

# 포트 노출 (환경변수로 설정 가능)
EXPOSE 9999

# 헬스체크 (서버 응답 확인)
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD netcat -z localhost ${SERVER_PORT:-9999} || exit 1

# 환경변수 기본값 설정
ENV SERVER_PORT=9999 \
    DB_HOST=postgres \
    DB_PORT=5432 \
    LOG_LEVEL=info \
    LOG_DIRECTORY=/app/logs

# 서버 실행
CMD ["./BlokusServer"]