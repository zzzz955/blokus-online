# Removed obsolete version attribute for Docker Compose v2 compatibility

services:
  # ========== PostgreSQL Database ==========
  postgres:
    image: postgres:16-alpine
    container_name: blokus-postgres
    restart: unless-stopped
    pull_policy: always

    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
      TZ: Asia/Seoul

    volumes:
      - postgres_data:/var/lib/postgresql/data

    ports:
      - "${DB_PORT:-5432}:5432"

    networks:
      - blokus-network

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ========== Blokus Game Server (TCP) ==========
  blokus-server:
    image: ${GAME_SERVER_IMAGE:-ghcr.io/zzzz955/blokus-online/blokus-game-server:${IMAGE_TAG:-latest}}
    container_name: blokus-server
    restart: unless-stopped
    pull_policy: always

    env_file:
      - .env
    environment:
      SERVER_PORT: ${SERVER_PORT:-9999}
      SERVER_MAX_CLIENTS: ${SERVER_MAX_CLIENTS:-1000}
      SERVER_THREAD_POOL_SIZE: ${SERVER_THREAD_POOL_SIZE:-4}
      BLOKUS_SERVER_VERSION: ${BLOKUS_SERVER_VERSION:?must_provide_BLOKUS_SERVER_VERSION}
      BLOKUS_DOWNLOAD_URL:   ${BLOKUS_DOWNLOAD_URL:?must_provide_BLOKUS_DOWNLOAD_URL}

      DB_HOST: postgres
      DB_PORT: ${DB_PORT:-5432}
      DB_USER: ${DB_USER:?must_provide_DB_USER}
      DB_PASSWORD: ${DB_PASSWORD:?must_provide_DB_PASSWORD}
      DB_NAME: ${DB_NAME:?must_provide_DB_NAME}

      JWT_SECRET: ${JWT_SECRET:?must_provide_JWT_SECRET}

      OIDC_JWKS_URI: ${OIDC_JWKS_URI:-https://blokus-online.mooo.com/oidc/jwks.json}
      OIDC_ISSUER:   ${OIDC_ISSUER:-https://blokus-online.mooo.com/oidc}

      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_DIRECTORY: ${LOG_DIRECTORY:-/app/logs}
      DEBUG_MODE: ${DEBUG_MODE:-false}
      TZ: Asia/Seoul

    volumes:
      - ./logs:/app/logs
      - ./config:/app/config:ro

    ports:
      - "${SERVER_PORT:-9999}:${SERVER_PORT:-9999}"

    networks:
      - blokus-network

    depends_on:
      postgres:
        condition: service_healthy
      blokus-oidc-server:
        condition: service_healthy

    healthcheck:
      test: ["CMD", "netcat", "-z", "localhost", "9999"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # ========== Single Player API Server ==========
  blokus-single-api:
    image: ${SINGLE_API_IMAGE:-ghcr.io/zzzz955/blokus-online/blokus-single-api:${IMAGE_TAG:-latest}}
    container_name: blokus-single-api
    restart: unless-stopped
    pull_policy: always

    env_file:
      - .env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_POOL_MIN: 5
      DB_POOL_MAX: 10

      OIDC_JWKS_URI: ${OIDC_JWKS_URI:-https://blokus-online.mooo.com/oidc/jwks.json}
      OIDC_BASE_URL: ${OIDC_BASE_URL:-https://blokus-online.mooo.com/oidc}

      JWT_EXPIRE_IN: 7d

      NODE_ENV: ${NODE_ENV:-production}
      PORT: 8080

      ALLOWED_ORIGINS: "*"

      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 200

      LOG_LEVEL: ${LOG_LEVEL:-info}

      REDIS_URL: redis://redis:6379
      CACHE_TTL_STAGE: 3600
      CACHE_TTL_PROGRESS: 300

      COMPRESSION_LEVEL: 6
      TRUST_PROXY: true
      TZ: Asia/Seoul

    # 포트 외부 노출은 nginx로 라우팅(권장). 필요시 주석 해제.
    # ports:
    #   - "${SINGLE_API_PORT:-8080}:8080"

    volumes:
      - ./single-player-api/logs:/app/logs

    networks:
      - blokus-network

    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://127.0.0.1:8080/health >/dev/null 2>&1 || wget -qO- http://127.0.0.1:8080/ >/dev/null 2>&1 || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 30
      start_period: 60s

    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ========== Redis Cache ==========
  redis:
    image: redis:7-alpine
    container_name: blokus-redis
    restart: unless-stopped
    pull_policy: always

    env_file:
      - .env
    environment:
      TZ: Asia/Seoul

    command: |
      redis-server
      --appendonly yes
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru

    volumes:
      - redis_data:/data
      - ./single-player-api/logs:/var/log/redis

    ports:
      - "${REDIS_PORT:-6379}:6379"

    networks:
      - blokus-network

    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # ========== OIDC Authentication Server ==========
  blokus-oidc-server:
    image: ${OIDC_SERVER_IMAGE:-ghcr.io/zzzz955/blokus-online/blokus-oidc-server:${IMAGE_TAG:-latest}}
    container_name: blokus-oidc-server
    restart: unless-stopped
    pull_policy: always

    env_file:
      - .env
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 9000
      LOG_LEVEL: ${LOG_LEVEL:-info}

      OIDC_ISSUER: ${OIDC_ISSUER:-https://blokus-online.mooo.com/oidc}
      OIDC_BASE_URL: ${OIDC_BASE_URL:-https://blokus-online.mooo.com/oidc}
      OIDC_JWKS_URI: ${OIDC_JWKS_URI:-https://blokus-online.mooo.com/oidc/jwks.json}

      ACCESS_TOKEN_LIFETIME: ${ACCESS_TOKEN_LIFETIME:-10m}
      REFRESH_TOKEN_LIFETIME: ${REFRESH_TOKEN_LIFETIME:-30d}
      REFRESH_TOKEN_MAX_LIFETIME: ${REFRESH_TOKEN_MAX_LIFETIME:-90d}
      AUTH_CODE_LIFETIME: ${AUTH_CODE_LIFETIME:-10m}

      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_POOL_MIN: 2
      DB_POOL_MAX: 10

      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}

      SESSION_SECRET: ${SESSION_SECRET:-oidc-session-secret-change-in-production}
      WEB_CLIENT_SECRET: ${WEB_CLIENT_SECRET:-web-client-secret-change-in-production}
      ADMIN_TOKEN: ${ADMIN_TOKEN:-admin-token-change-in-production}

      TZ: Asia/Seoul

    # 외부 포트 노출 제거 (nginx 통해 접근)
    # ports:
    #   - "${OIDC_PORT:-9000}:9000"

    volumes:
      - ./oidc-auth-server/logs:/app/logs
      - ./oidc-auth-server/keys:/app/keys

    networks:
      - blokus-network

    depends_on:
      postgres:
        condition: service_healthy

    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:9000/.well-known/openid-configuration', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
      interval: 45s
      timeout: 20s
      retries: 3
      start_period: 120s

    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ========== Blokus Web Application ==========
  blokus-web:
    image: ${WEB_SERVER_IMAGE:-ghcr.io/zzzz955/blokus-online/blokus-web-server:${IMAGE_TAG:-latest}}
    container_name: blokus-web
    restart: unless-stopped
    pull_policy: always

    env_file:
      - .env
    environment:
      NODE_ENV: production
      PORT: ${WEB_PORT:-3000}
      NEXT_TELEMETRY_DISABLED: 1

      APP_URL: ${WEB_APP_URL}
      CLIENT_DOWNLOAD_URL: ${CLIENT_DOWNLOAD_URL}

      DATABASE_URL: ${DATABASE_URL}

      NEXTAUTH_URL: ${WEB_APP_URL}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      JWT_SECRET: ${JWT_SECRET:?must_provide_JWT_SECRET}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}

      ADMIN_USERNAME: ${ADMIN_USERNAME}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}

      THUMBNAIL_STORAGE_DIR: /var/lib/blokus/stage-thumbnails
      TZ: Asia/Seoul

    volumes:
      - ./web/uploads:/app/public/uploads
      - ${THUMBNAIL_HOST_DIR:-/var/lib/blokus/stage-thumbnails}:/var/lib/blokus/stage-thumbnails

    # 외부 노출 불필요 (nginx 경유)
    # ports:
    #   - "${WEB_PORT:-3000}:3000"

    networks:
      - blokus-network

    depends_on:
      postgres:
        condition: service_healthy

    healthcheck:
      test: ["CMD", "curl", "-fsS", "--ipv4", "http://127.0.0.1:3000/healthz"]
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 60s

    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ========== Nginx Reverse Proxy ==========
  nginx:
    image: nginx:alpine
    container_name: blokus-nginx
    restart: unless-stopped
    pull_policy: always

    # 외부 포트 노출 지점
    ports:
      - "80:80"
      - "443:443"
      - "9000:9000"  # OIDC 서버 (Google OAuth 콜백용)
      # Single API도 Nginx를 통해 라우팅하려면 server 블록 구성 후 선택 노출
      # - "8080:8080"

    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
      - ./downloads:/var/www/downloads:ro
      - ./logs/nginx:/var/log/nginx

    networks:
      - blokus-network

    depends_on:
      - blokus-web
      - blokus-server
      - blokus-single-api
      - blokus-oidc-server

    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ========== Let's Encrypt Certbot ==========
  certbot:
    image: certbot/certbot
    container_name: blokus-certbot
    profiles: ["manual"]  # 기본 up에서 제외, 수동 실행용
    pull_policy: always

    env_file:
      - .env
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
      - ./logs/certbot:/var/log/letsencrypt

    networks:
      - blokus-network

    environment:
      - DOMAIN=${DOMAIN}
      - EMAIL=${CERTBOT_EMAIL}

    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# ========== 네트워크 설정 ==========
networks:
  blokus-network:
    driver: bridge
    name: blokus-network

# ========== 볼륨 설정 ==========
volumes:
  postgres_data:
    driver: local
    name: blokus-postgres-data
  redis_data:
    driver: local
    name: blokus-redis-data
