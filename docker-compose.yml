version: '3.8'

services:
  # ========== PostgreSQL Database ==========
  postgres:
    image: postgres:16-alpine
    container_name: blokus-postgres
    restart: unless-stopped
    
    environment:
      # .env 파일에서 환경변수 로드
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
      TZ: Asia/Seoul
    
    volumes:
      # 데이터베이스 영속성
      - postgres_data:/var/lib/postgresql/data
      # 초기 스키마 스크립트 (옵션)
      - ./sql:/docker-entrypoint-initdb.d:ro
    
    ports:
      - "${DB_PORT:-5432}:5432"
    
    networks:
      - blokus-network
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    
    # 로그 설정
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ========== Blokus Game Server ==========
  blokus-server:
    build:
      context: .
      dockerfile: Dockerfile
      # Protocol Buffers 문제 해결 대안들:
      # dockerfile: Dockerfile.cmake-module    # CMake MODULE 모드 사용 (권장)
      # dockerfile: Dockerfile.protobuf-fix    # 완전한 서버 전용 빌드
      # dockerfile: Dockerfile.fallback        # vcpkg 사용 (확실한 해결책)
    container_name: blokus-server
    restart: unless-stopped
    
    environment:
      # 서버 설정
      SERVER_PORT: ${SERVER_PORT:-9999}
      SERVER_MAX_CLIENTS: ${SERVER_MAX_CLIENTS:-1000}
      SERVER_THREAD_POOL_SIZE: ${SERVER_THREAD_POOL_SIZE:-4}
      
      # 데이터베이스 연결 (postgres 서비스명 사용)
      DB_HOST: postgres
      DB_PORT: ${DB_PORT:-5432}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_POOL_SIZE: ${DB_POOL_SIZE:-10}
      
      # 보안 설정
      JWT_SECRET: ${JWT_SECRET}
      SESSION_TIMEOUT_HOURS: ${SESSION_TIMEOUT_HOURS:-24}
      PASSWORD_SALT_ROUNDS: ${PASSWORD_SALT_ROUNDS:-12}
      
      # 로깅 설정
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_DIRECTORY: ${LOG_DIRECTORY:-/app/logs}
      
      # 개발 설정
      DEBUG_MODE: ${DEBUG_MODE:-false}
      ENABLE_SQL_LOGGING: ${ENABLE_SQL_LOGGING:-false}
      
      # 시간대
      TZ: Asia/Seoul
    
    volumes:
      # 로그 디렉토리 마운트
      - ./logs:/app/logs
      # 설정 파일 (옵션)
      - ./config:/app/config:ro
    
    ports:
      - "${SERVER_PORT:-9999}:${SERVER_PORT:-9999}"
    
    networks:
      - blokus-network
    
    depends_on:
      postgres:
        condition: service_healthy
    
    # healthcheck:
    #   test: ["CMD", "netcat", "-z", "localhost", "${SERVER_PORT:-9999}"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 60s
    
    # 로그 설정
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # ========== Blokus Web Application ==========
  blokus-web:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: blokus-web
    restart: unless-stopped
    
    environment:
      # Next.js 설정
      NODE_ENV: production
      PORT: ${WEB_PORT:-3000}
      NEXT_TELEMETRY_DISABLED: 1
      
      # 웹 애플리케이션 설정
      APP_URL: https://${WEB_APP_URL}
      CLIENT_DOWNLOAD_URL: ${WEB_CLIENT_DOWNLOAD_URL}
      
      # 데이터베이스 연결 (웹 전용 DB)
      DATABASE_URL: ${WEB_DATABASE_URL}
      
      # 인증 설정
      NEXTAUTH_URL: https://${WEB_APP_URL}
      NEXTAUTH_SECRET: ${WEB_NEXTAUTH_SECRET}
      JWT_SECRET: ${WEB_JWT_SECRET}
      
      # 관리자 계정
      ADMIN_USERNAME: ${WEB_ADMIN_USERNAME}
      ADMIN_PASSWORD: ${WEB_ADMIN_PASSWORD}
      
      # 파일 업로드 설정
      UPLOAD_DIR: "/app/public/uploads"
      MAX_FILE_SIZE: "10485760" # 10MB
      
      # 시간대
      TZ: Asia/Seoul
    
    volumes:
      # 업로드된 파일 영속성
      - ./web/uploads:/app/public/uploads
    
    # 포트는 nginx를 통해서만 접근하므로 외부 노출 불필요
    # ports:
    #   - "${WEB_PORT:-3000}:3000"
    
    networks:
      - blokus-network
    
    depends_on:
      postgres:
        condition: service_healthy
    
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 30s
    
    # 로그 설정
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ========== Nginx Reverse Proxy ==========
  nginx:
    image: nginx:alpine
    container_name: blokus-nginx
    restart: unless-stopped
    
    ports:
      - "80:80"
      - "443:443"
      # 게임 서버는 직접 포트 노출하므로 nginx 프록시 불필요
    
    volumes:
      # Nginx 설정
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      # SSL 인증서 (Let's Encrypt)
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
      # 클라이언트 다운로드 파일
      - ./downloads:/var/www/downloads:ro
      # 로그
      - ./logs/nginx:/var/log/nginx
    
    networks:
      - blokus-network
    
    depends_on:
      - blokus-web
      - blokus-server
    
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    # 로그 설정
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ========== Let's Encrypt Certbot ==========
  # certbot은 docker-compose run으로 수동 실행하는 것을 권장
  # 초기 인증서 발급: docker-compose run --rm certbot certonly --webroot -w /var/www/certbot --email ${CERTBOT_EMAIL} -d ${DOMAIN} --agree-tos --non-interactive
  # 인증서 갱신: docker-compose run --rm certbot renew --quiet
  certbot:
    image: certbot/certbot
    container_name: blokus-certbot
    profiles: ["manual"]  # 기본 up에서 제외, 수동 실행용
    
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
      - ./logs/certbot:/var/log/letsencrypt
    
    networks:
      - blokus-network
    
    environment:
      - DOMAIN=${DOMAIN}
      - EMAIL=${CERTBOT_EMAIL}
    
    # 로그 설정
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# ========== 네트워크 설정 ==========
networks:
  blokus-network:
    driver: bridge
    name: blokus-network

# ========== 볼륨 설정 ==========
volumes:
  postgres_data:
    driver: local
    name: blokus-postgres-data